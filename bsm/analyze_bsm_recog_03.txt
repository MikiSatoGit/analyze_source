Total lines: 4271 
Total functions : 64 
--------------------------
[Function Name] : s4_seek_sidewinder 
-Return type : S4 
-Argument : 2 
     [0] : NORMAL_BSM   ast_a_normal_wall[1] 
     [1] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 object_num 0;
[2] MAINPROCESS(1) equal S4 tmp_fm_obj_flg 0;
[3] MAINPROCESS(1) equal S4 tmp_fm_flg 0;
[4] MAINPROCESS(1) equal S4 tmp_wall_flg 0;
[5] MAINPROCESS(1) equal S4 tmp_leading_flg1 st_g_bsm_loop_data.as4_flg_leading[0];
[6] MAINPROCESS(1) equal S4 tmp_leading_flg2 st_g_bsm_loop_data.as4_flg_leading[0];
[7] MAINPROCESS(1) proc NORMAL_BSM tmp_normal[1]; 
[8] MAINPROCESS(1) proc NORMAL_BSM normal_wall[1]; 
[9] MAINPROCESS(1) proc NORMAL_BSM normal_wall_prev[1]; 
[10] MAINPROCESS(1) proc NORMAL_BSM tmp_normal_sot[1]; 
[11] MAINPROCESS(1) proc NORMAL_BSM normal_sot[1]; 
[12] MAINPROCESS(1) proc NORMAL_BSM normal_sot_prev[1]; 
[13] MAINPROCESS(1) equal FL tmp_cos 0.0F;
[14] MAINPROCESS(1) proc FL sot_thres_up[NB_FFT_PT]; 
[15] MAINPROCESS(1) proc FL sot_thres_dn[NB_FFT_PT]; 
[16] MAINPROCESS(1) proc FL tmp_fm_nearfield_power; 
[17] MAINPROCESS(1) proc FL tmp_sot_wall_angle; 
[18] MAINPROCESS(1) proc FL tmp_sot_real_angle; 
[19] MAINPROCESS(1) equal S4 tmp_wall_reject_th WALL_REJECT_TH3;
[20] MAINPROCESS(1) func<start> fn_initialize_wall_data( 
[21] MAINPROCESS(1) func tmp_normal 
[22] MAINPROCESS(1) func<end> ); 
[23] MAINPROCESS(1) func<start> fn_move( 
[24] MAINPROCESS(1) func normal_wall, 
[25] MAINPROCESS(1) func tmp_normal, 
[26] MAINPROCESS(1) func 1 
[27] MAINPROCESS(1) func<end> ); 
[28] MAINPROCESS(1) func<start> fn_move( 
[29] MAINPROCESS(1) func normal_wall_prev, 
[30] MAINPROCESS(1) func ast_a_normal_wall, 
[31] MAINPROCESS(1) func 1 
[32] MAINPROCESS(1) func<end> ); 
[33] MAINPROCESS(1) func<start> fn_move( 
[34] MAINPROCESS(1) func tmp_normal_sot, 
[35] MAINPROCESS(1) func ast_a_normal_sot, 
[36] MAINPROCESS(1) func 1 
[37] MAINPROCESS(1) func<end> ); 
[38] MAINPROCESS(1) func<start> fn_move( 
[39] MAINPROCESS(1) func normal_sot_prev, 
[40] MAINPROCESS(1) func ast_a_normal_sot, 
[41] MAINPROCESS(1) func 1 
[42] MAINPROCESS(1) func<end> ); 
[43] MAINPROCESS(1) func<start> fn_move( 
[44] MAINPROCESS(1) func normal_sot, 
[45] MAINPROCESS(1) func ast_a_normal_sot, 
[46] MAINPROCESS(1) func 1 
[47] MAINPROCESS(1) func<end> ); 
[48] MAINPROCESS(1) func<start> tmp_fm_nearfield_power = fl_bsm_side_cal_fm_nearfield_power( 
[49] MAINPROCESS(1) func<end> ); 
[50] MAINPROCESS(1) func<start> tmp_fm_obj_flg = check_fm_object( 
[51] MAINPROCESS(1) func (const NORMAL_BSM *)normal_sot_prev, 
[52] MAINPROCESS(1) func tmp_leading_flg1, 
[53] MAINPROCESS(1) func tmp_normal 
[54] MAINPROCESS(1) func<end> ); 
[55] MAINPROCESS(1) equal tmp_fm_flg 0;
[56] MAINPROCESS(1) func<start> tmp_fm_flg = check_fm_spectrum( 
[57] MAINPROCESS(1) func sot_thres_up, 
[58] MAINPROCESS(1) func sot_thres_dn 
[59] MAINPROCESS(1) func<end> ); 
[60] MAINPROCESS(1) func<start> fn_bsm_side_check_leading_object( 
[61] MAINPROCESS(1) func (const NORMAL_BSM *)tmp_normal, 
[62] MAINPROCESS(1) func tmp_fm_obj_flg, 
[63] MAINPROCESS(1) func tmp_fm_flg, 
[64] MAINPROCESS(1) func &tmp_wall_flg, 
[65] MAINPROCESS(1) func &tmp_leading_flg1, 
[66] MAINPROCESS(1) func &tmp_leading_flg2, 
[67] MAINPROCESS(1) func &tmp_sot_wall_angle, 
[68] MAINPROCESS(1) func &tmp_sot_real_angle, 
[69] MAINPROCESS(1) func tmp_normal_sot, 
[70] MAINPROCESS(1) func &tmp_wall_reject_th 
[71] MAINPROCESS(1) func<end> ); 
[72] MAINPROCESS(1) func<start> fn_bsm_side_check_wall( 
[73] MAINPROCESS(1) func tmp_fm_obj_flg, 
[74] MAINPROCESS(1) func tmp_leading_flg1, 
[75] MAINPROCESS(1) func tmp_sot_wall_angle, 
[76] MAINPROCESS(1) func tmp_sot_real_angle, 
[77] MAINPROCESS(1) func (const NORMAL_BSM *)tmp_normal, 
[78] MAINPROCESS(1) func &tmp_wall_flg, 
[79] MAINPROCESS(1) func normal_wall, 
[80] MAINPROCESS(1) func tmp_wall_reject_th 
[81] MAINPROCESS(1) func<end> ); 
[82] MAINPROCESS(1) func<start> fn_bsm_side_tracking_wall( 
[83] MAINPROCESS(1) func tmp_fm_obj_flg, 
[84] MAINPROCESS(1) func tmp_wall_flg, 
[85] MAINPROCESS(1) func tmp_leading_flg1, 
[86] MAINPROCESS(1) func tmp_leading_flg2, 
[87] MAINPROCESS(1) func (const NORMAL_BSM *)tmp_normal, 
[88] MAINPROCESS(1) func (const NORMAL_BSM *)normal_wall_prev, 
[89] MAINPROCESS(1) func normal_wall 
[90] MAINPROCESS(1) func<end> ); 
[91] MAINPROCESS(1) func<start> object_num = s4_bsm_side_tracking_heisou( 
[92] MAINPROCESS(1) func tmp_fm_nearfield_power, 
[93] MAINPROCESS(1) func tmp_fm_obj_flg, 
[94] MAINPROCESS(1) func &tmp_leading_flg2, 
[95] MAINPROCESS(1) func (const NORMAL_BSM *)normal_sot_prev, 
[96] MAINPROCESS(1) func (const NORMAL_BSM *)tmp_normal_sot, 
[97] MAINPROCESS(1) func normal_sot 
[98] MAINPROCESS(1) func<end> ); 
[99] MAINPROCESS(1) func<start> fn_move( 
[100] MAINPROCESS(1) func ast_a_normal_wall, 
[101] MAINPROCESS(1) func normal_wall, 
[102] MAINPROCESS(1) func 1 
[103] MAINPROCESS(1) func<end> ); 
[104] MAINPROCESS(1) equal st_g_bsm_loop_data.afl_wall_width[0] ast_a_normal_wall[0].fl_Rxfil;
[105] MAINPROCESS(1) if<start> if( 
[106] MAINPROCESS(1) if st_g_bsm_loop_data.as4_slow_sot_find[1] > tmp_wall_reject_th 
[107] MAINPROCESS(1) if ) 
[108] MAINPROCESS(1) subproc SUBPROCESS(1) 
[109] SUBPROCESS(1) func<start> fn_init(&normal_sot[0], 1 
[110] SUBPROCESS(1) func<end> ); 
[111] SUBPROCESS(1) equal object_num 0;
[112] MAINPROCESS(2) func<start> fn_move( 
[113] MAINPROCESS(2) func ast_a_normal_sot, 
[114] MAINPROCESS(2) func normal_sot, 
[115] MAINPROCESS(2) func 1 
[116] MAINPROCESS(2) func<end> ); 
[117] MAINPROCESS(2) equal st_g_bsm_loop_data.as4_flg_leading[0] tmp_leading_flg2;
[118] MAINPROCESS(2) func<start> fn_bsm_side_check_wall_for_erase_fa_seg((const NORMAL_BSM *)tmp_normal, tmp_fm_obj_flg 
[119] MAINPROCESS(2) func<end> ); 
[120] MAINPROCESS(2) proc return object_num; 
----------------- Total Codes : 120 lines
--------------------------
[Function Name] : fl_bsm_side_cal_fm_nearfield_power 
-Return type : static FL 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc FL fl_t_fm_nearfield_power; 
[3] MAINPROCESS(1) equal fl_t_fm_nearfield_power 0.0F;
[4] MAINPROCESS(1) for<start> for( 
[5] MAINPROCESS(1) for i = VI_TOS_END_FREQ_BIN; 
[6] MAINPROCESS(1) for i < (VI_TOS_END_FREQ_BIN + SOT_FMPEAK_RANGE 
[7] MAINPROCESS(1) for ); 
[8] MAINPROCESS(1) for i++) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal fl_t_fm_nearfield_power + afl_g_cvw_lfm_ftt_power[0][i];
[11] MAINPROCESS(2) equal fl_t_fm_nearfield_power fl_t_fm_nearfield_power/SOT_FMPEAK_RANGE;
[12] MAINPROCESS(2) proc return fl_t_fm_nearfield_power; 
----------------- Total Codes : 12 lines
--------------------------
[Function Name] : fn_bsm_side_check_leading_object 
-Return type : static VD 
-Argument : 10 
     [0] : const NORMAL_BSM   ast_a_normal_fm[1] 
     [1] : S4   s4_a_fm_obj_flg 
     [2] : S4   s4_a_fm_flg 
     [3] : S4   *ps4_a_wall_flg 
     [4] : S4   *ps4_a_leading_flg1 
     [5] : S4   *ps4_a_leading_flg2 
     [6] : FL   *pfl_a_sot_wall_angle 
     [7] : FL   *pfl_sot_real_angle 
     [8] : NORMAL_BSM   ast_a_normal_sot[1] 
     [9] : S4   *ps4_a_wall_reject_th 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_bsm_side_check1_leading_object( 
[2] MAINPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_fm, 
[3] MAINPROCESS(1) func s4_a_fm_obj_flg, 
[4] MAINPROCESS(1) func s4_a_fm_flg, 
[5] MAINPROCESS(1) func ps4_a_wall_flg, 
[6] MAINPROCESS(1) func ps4_a_leading_flg1, 
[7] MAINPROCESS(1) func ps4_a_wall_reject_th 
[8] MAINPROCESS(1) func<end> ); 
[9] MAINPROCESS(1) func<start> fn_bsm_side_check2_leading_object( 
[10] MAINPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_fm, 
[11] MAINPROCESS(1) func s4_a_fm_obj_flg, 
[12] MAINPROCESS(1) func s4_a_fm_flg, 
[13] MAINPROCESS(1) func ps4_a_wall_flg, 
[14] MAINPROCESS(1) func ps4_a_leading_flg1, 
[15] MAINPROCESS(1) func ps4_a_leading_flg2, 
[16] MAINPROCESS(1) func pfl_a_sot_wall_angle, 
[17] MAINPROCESS(1) func pfl_sot_real_angle 
[18] MAINPROCESS(1) func<end> ); 
[19] MAINPROCESS(1) func<start> fn_bsm_side_set_leading_object( *ps4_a_leading_flg2, 
[20] MAINPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_fm, 
[21] MAINPROCESS(1) func ast_a_normal_sot 
[22] MAINPROCESS(1) func<end> ); 
[23] MAINPROCESS(1) proc return; 
----------------- Total Codes : 23 lines
--------------------------
[Function Name] : fn_bsm_side_check1_leading_object 
-Return type : static VD 
-Argument : 6 
     [0] : const NORMAL_BSM   ast_a_normal_fm[1] 
     [1] : S4   s4_a_fm_obj_flg 
     [2] : S4   s4_a_fm_flg 
     [3] : S4   *ps4_a_wall_flg 
     [4] : S4   *ps4_a_leading_flg1 
     [5] : S4   *ps4_a_wall_reject_th 
----- Codes -----
[1] MAINPROCESS(1) proc FL tmp_sot_wall_diff; 
[2] MAINPROCESS(1) if<start> if( 
[3] MAINPROCESS(1) if st_g_bsm_loop_data.as4_low_speed_flg[0]==1 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal *ps4_a_wall_reject_th 3;
[7] MAINPROCESS(2) if<start> if( 
[8] MAINPROCESS(2) if *ps4_a_leading_flg1 == 0 
[9] MAINPROCESS(2) if ) 
[10] MAINPROCESS(2) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) if <start> if ( 
[12] SUBPROCESS(1) if  (s4_a_fm_obj_flg != 0 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) if  &&  (s4_a_fm_flg != 0)) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) if<start> if( 
[17] SUBSUBPROCESS(1) if st_g_bsm_loop_data.afl_wall_width[0]!=WALL_MAX 
[18] SUBSUBPROCESS(1) if ) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) equal tmp_sot_wall_diff CFL_SOT_WALL_DIFF + st_g_bsm_loop_data.afl_installed_angle[1];
[21] SUBSUBPROCESS(2) else<start> else 
[22] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBPROCESS(1) equal tmp_sot_wall_diff SOT_WALL_DIFF_DEFAULT;
[24] SUBSUBPROCESS(3) if <start> if ( 
[25] SUBSUBPROCESS(3) if  ((st_g_bsm_loop_data.afl_wall_width[0] - ast_a_normal_fm[0].fl_Rxobs) > tmp_sot_wall_diff 
[26] SUBSUBPROCESS(3) if  ) 
[27] SUBSUBPROCESS(3) if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[1] < *ps4_a_wall_reject_th)) 
[28] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[29] SUBSUBSUBPROCESS(1) equal *ps4_a_wall_flg 0;
[30] SUBSUBSUBPROCESS(1) equal *ps4_a_leading_flg1 1;
[31] MAINPROCESS(3) proc return; 
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : fn_bsm_side_check2_leading_object 
-Return type : static VD 
-Argument : 8 
     [0] : const NORMAL_BSM   ast_a_normal_fm[1] 
     [1] : S4   s4_a_fm_obj_flg 
     [2] : S4   s4_a_fm_flg 
     [3] : S4   *ps4_a_wall_flg 
     [4] : S4   *ps4_a_leading_flg1 
     [5] : S4   *ps4_a_leading_flg2 
     [6] : FL   *pfl_a_sot_wall_angle 
     [7] : FL   *pfl_sot_real_angle 
----- Codes -----
[1] MAINPROCESS(1) proc FL tmp_t_wall_diff_th; 
[2] MAINPROCESS(1) equal *pfl_a_sot_wall_angle SOT_WALL_ANGLE_TH;
[3] MAINPROCESS(1) equal tmp_t_wall_diff_th SOT_WALL_DIFF_FAST;
[4] MAINPROCESS(1) if<start> if( 
[5] MAINPROCESS(1) if fl_g_v_self_bsm_for_base < WALL_TRK_LOW_VSELF_TH 
[6] MAINPROCESS(1) if ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal *pfl_a_sot_wall_angle SOT_WALL_ANGLE_TH_FORWARD;
[9] SUBPROCESS(1) equal tmp_t_wall_diff_th SOT_WALL_DIFF_SLOW;
[10] MAINPROCESS(2) if <start> if ( 
[11] MAINPROCESS(2) if  (st_g_bsm_loop_data.as4_slow_sot_find[0] > 0 
[12] MAINPROCESS(2) if  ) 
[13] MAINPROCESS(2) if  &&  (st_g_bsm_loop_data.afl_wall_width[0] != WALL_MAX)) 
[14] MAINPROCESS(2) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) if <start> if ( 
[16] SUBPROCESS(1) if  s4_a_fm_obj_flg != 0 
[17] SUBPROCESS(1) if  ) 
[18] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[19] SUBSUBPROCESS(1) if <start> if ( 
[20] SUBSUBPROCESS(1) if  (st_g_bsm_loop_data.afl_wall_width[0] - ast_a_normal_fm[0].fl_Rxobs) > tmp_t_wall_diff_th 
[21] SUBSUBPROCESS(1) if  ) 
[22] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBPROCESS(1) equal *ps4_a_wall_flg 0;
[24] SUBSUBSUBPROCESS(1) equal *ps4_a_leading_flg1 1;
[25] SUBSUBSUBPROCESS(1) equal *ps4_a_leading_flg2 1;
[26] SUBSUBPROCESS(2) else<start> else 
[27] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBPROCESS(1) if <start> if ( 
[29] SUBSUBSUBPROCESS(1) if  (*pfl_sot_real_angle > *pfl_a_sot_wall_angle 
[30] SUBSUBSUBPROCESS(1) if  ) 
[31] SUBSUBSUBPROCESS(1) if  &&  (*pfl_sot_real_angle < SOT_WALL_ANGLE_TH_BACKWARD) 
[32] SUBSUBSUBPROCESS(1) if  &&  (fl_g_v_self_bsm_for_base > CFL_CANOUT_VSELF_MIN)) 
[33] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[34] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_wall_flg 1;
[35] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_leading_flg1 0;
[36] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_leading_flg2 0;
[37] SUBSUBSUBPROCESS(2) if<start> if( 
[38] SUBSUBSUBPROCESS(2) if st_g_bsm_loop_data.as4_slow_sot_find[1]==0 
[39] SUBSUBSUBPROCESS(2) if ) 
[40] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[41] SUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] WALL_REJECT_TH3;
[42] MAINPROCESS(3) if <start> if ( 
[43] MAINPROCESS(3) if  (st_g_bsm_loop_data.u1_flg_heisou_car == (U1)1 
[44] MAINPROCESS(3) if  ) 
[45] MAINPROCESS(3) if  &&	(s4_a_fm_obj_flg != (S4)0)) 
[46] MAINPROCESS(3) subproc SUBPROCESS(1) 
[47] SUBPROCESS(1) equal *ps4_a_wall_flg (S4)0;
[48] SUBPROCESS(1) equal *ps4_a_leading_flg1 (S4)1;
[49] SUBPROCESS(1) equal *ps4_a_leading_flg2 (S4)1;
[50] MAINPROCESS(4) proc return; 
----------------- Total Codes : 50 lines
--------------------------
[Function Name] : fn_bsm_side_set_leading_object 
-Return type : static VD 
-Argument : 3 
     [0] : S4   s4_a_leading_flg2 
     [1] : const NORMAL_BSM   ast_a_normal_fm[1] 
     [2] : NORMAL_BSM   ast_a_normal_heisou[1] 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  s4_a_leading_flg2 != 0 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) if <start> if ( 
[6] SUBPROCESS(1) if  ((ast_a_normal_fm[0].s4_bin_up < FREQ_BIN_LOWER_LIMIT 
[7] SUBPROCESS(1) if  ) 
[8] SUBPROCESS(1) if  &&   (ast_a_normal_fm[0].fl_power_up < PEAK_POW_TH_AROUND_CENTER)) 
[9] SUBPROCESS(1) if  ||  ((ast_a_normal_fm[0].s4_bin_dn < FREQ_BIN_LOWER_LIMIT) 
[10] SUBPROCESS(1) if  &&   (ast_a_normal_fm[0].fl_power_dn < PEAK_POW_TH_AROUND_CENTER))) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBPROCESS(2) else<start> else 
[13] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) func<start> fn_move( 
[15] SUBSUBPROCESS(1) func ast_a_normal_heisou, 
[16] SUBSUBPROCESS(1) func ast_a_normal_fm, 
[17] SUBSUBPROCESS(1) func 1 
[18] SUBSUBPROCESS(1) func<end> ); 
[19] MAINPROCESS(2) proc return; 
----------------- Total Codes : 19 lines
--------------------------
[Function Name] : fn_bsm_side_check_wall 
-Return type : static VD 
-Argument : 8 
     [0] : S4   s4_a_fm_obj_flg 
     [1] : S4   s4_a_leading_flg1 
     [2] : FL   fl_a_sot_wall_angle 
     [3] : FL   fl_sot_real_angle 
     [4] : const NORMAL_BSM   ast_a_normal_fm[1] 
     [5] : S4   *ps4_a_wall_flg 
     [6] : NORMAL_BSM   ast_a_normal_wall[1] 
     [7] : S4   s4_a_wall_reject_th 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_bsm_side_check1_wall( 
[2] MAINPROCESS(1) func s4_a_fm_obj_flg, 
[3] MAINPROCESS(1) func s4_a_leading_flg1, 
[4] MAINPROCESS(1) func fl_a_sot_wall_angle, 
[5] MAINPROCESS(1) func fl_sot_real_angle, 
[6] MAINPROCESS(1) func ps4_a_wall_flg, 
[7] MAINPROCESS(1) func s4_a_wall_reject_th 
[8] MAINPROCESS(1) func<end> ); 
[9] MAINPROCESS(1) func<start> fn_bsm_side_set_wall_object( *ps4_a_wall_flg, 
[10] MAINPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_fm, 
[11] MAINPROCESS(1) func ast_a_normal_wall 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) proc return; 
----------------- Total Codes : 13 lines
--------------------------
[Function Name] : fn_bsm_side_check1_wall 
-Return type : static VD 
-Argument : 6 
     [0] : S4   s4_a_fm_obj_flg 
     [1] : S4   s4_a_leading_flg1 
     [2] : FL   fl_a_sot_wall_angle 
     [3] : FL   fl_sot_real_angle 
     [4] : S4   *ps4_a_wall_flg 
     [5] : S4   s4_a_wall_reject_th 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  (s4_a_leading_flg1 == (S4)0 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) if  &&  (s4_a_fm_obj_flg != (S4)0) 
[5] MAINPROCESS(1) if  &&  (fl_sot_real_angle > fl_a_sot_wall_angle) 
[6] MAINPROCESS(1) if  &&  ((st_g_bsm_loop_data.as4_flg_passing[0] <= (S4)PASSING_COUNT_MIN) 
[7] MAINPROCESS(1) if  ||   ((st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[4] < (S4)CFL_WALL_DEV_TH12) 
[8] MAINPROCESS(1) if  &&    (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[5] < (S4)WALL_DEV_TH1))) 
[9] MAINPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[1] > s4_a_wall_reject_th)) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) if <start> if ( 
[12] SUBPROCESS(1) if  (!(st_g_bsm_loop_data.as4_low_speed_flg[0] == (S4)1) 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) if  &&  (st_g_bsm_loop_data.afl_wall_width[0] > WALL_WIDTH_TH)) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) if <start> if ( 
[17] SUBSUBPROCESS(1) if  (fl_sot_real_angle > fl_a_sot_wall_angle 
[18] SUBSUBPROCESS(1) if  ) 
[19] SUBSUBPROCESS(1) if  &&  (fl_sot_real_angle < SOT_WALL_ANGLE_TH_BACKWARD)) 
[20] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[21] SUBSUBSUBPROCESS(1) equal *ps4_a_wall_flg (S4)1;
[22] SUBPROCESS(2) else<start> else 
[23] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) if <start> if ( 
[25] SUBSUBPROCESS(1) if  fl_sot_real_angle > fl_a_sot_wall_angle 
[26] SUBSUBPROCESS(1) if  ) 
[27] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBPROCESS(1) equal *ps4_a_wall_flg (S4)1;
[29] MAINPROCESS(2) if <start> if ( 
[30] MAINPROCESS(2) if  (s4_a_leading_flg1 == 0 
[31] MAINPROCESS(2) if  ) 
[32] MAINPROCESS(2) if  &&  (fl_g_v_self_bsm_for_base < WALL_TRK_LOW_VSELF_TH) 
[33] MAINPROCESS(2) if  &&  (s4_a_fm_obj_flg != 0) 
[34] MAINPROCESS(2) if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[1] > 1)) 
[35] MAINPROCESS(2) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) if <start> if ( 
[37] SUBPROCESS(1) if  fl_sot_real_angle < SOT_WALL_ANGLE_TH_BACKWARD 
[38] SUBPROCESS(1) if  ) 
[39] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[40] SUBSUBPROCESS(1) equal *ps4_a_wall_flg 1;
[41] MAINPROCESS(3) proc return; 
----------------- Total Codes : 41 lines
--------------------------
[Function Name] : fn_bsm_side_set_wall_object 
-Return type : static VD 
-Argument : 3 
     [0] : S4   s4_a_wall_flg 
     [1] : const NORMAL_BSM   ast_a_normal_fm[1] 
     [2] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  s4_a_wall_flg != 0 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) func<start> fn_move( 
[6] SUBPROCESS(1) func ast_a_normal_wall, 
[7] SUBPROCESS(1) func ast_a_normal_fm, 
[8] SUBPROCESS(1) func 1 
[9] SUBPROCESS(1) func<end> ); 
[10] SUBPROCESS(1) if <start> if ( 
[11] SUBPROCESS(1) if  (ast_a_normal_wall[0].s4_bin_up <= ((NB_FFT_PT / 2) + CENTER_FREQ_RANGE + 1 + 1) 
[12] SUBPROCESS(1) if  ) 
[13] SUBPROCESS(1) if  &&  (ast_a_normal_wall[0].s4_bin_dn <= ((NB_FFT_PT / 2) + CENTER_FREQ_RANGE + 1 + 1))) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] SUBSUBPROCESS(1) if <start> if ( 
[16] SUBSUBPROCESS(1) if  (ast_a_normal_wall[0].fl_power_up > CFL_SOT_WALL_NEAR_POWER_TH1 
[17] SUBSUBPROCESS(1) if  ) 
[18] SUBSUBPROCESS(1) if  &&  (ast_a_normal_wall[0].fl_power_dn > CFL_SOT_WALL_NEAR_POWER_TH1)) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) equal ast_a_normal_wall[0].fl_Rxobs st_g_bsm_loop_data.afl_installed_angle[1] + WALL_MIN;
[21] SUBSUBPROCESS(2) else if <start> else if ( 
[22] SUBSUBPROCESS(2) else if  (ast_a_normal_wall[0].fl_power_up > CFL_SOT_WALL_NEAR_POWER_TH2 
[23] SUBSUBPROCESS(2) else if  ) 
[24] SUBSUBPROCESS(2) else if  &&  (ast_a_normal_wall[0].fl_power_dn > CFL_SOT_WALL_NEAR_POWER_TH2)) 
[25] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[26] SUBSUBSUBPROCESS(1) equal ast_a_normal_wall[0].fl_Rxobs st_g_bsm_loop_data.afl_installed_angle[1] + WALL_MIN + 0.5F;
[27] SUBSUBPROCESS(3) else if <start> else if ( 
[28] SUBSUBPROCESS(3) else if  (ast_a_normal_wall[0].fl_power_up > CFL_SOT_WALL_NEAR_POWER_TH3 
[29] SUBSUBPROCESS(3) else if  ) 
[30] SUBSUBPROCESS(3) else if  &&  (ast_a_normal_wall[0].fl_power_dn > CFL_SOT_WALL_NEAR_POWER_TH3)) 
[31] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[32] SUBSUBSUBPROCESS(1) equal ast_a_normal_wall[0].fl_Rxobs st_g_bsm_loop_data.afl_installed_angle[1] + WALL_MIN + 1.0F;
[33] SUBSUBPROCESS(4) else<start> else 
[34] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[35] MAINPROCESS(2) proc return; 
----------------- Total Codes : 35 lines
--------------------------
[Function Name] : fn_bsm_side_tracking_wall 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_fm_obj_flg 
     [1] : S4   s4_a_wall_flg 
     [2] : S4   s4_a_leading_flg1 
     [3] : S4   s4_a_leading_flg2 
     [4] : const NORMAL_BSM   ast_a_normal_fm[1] 
     [5] : const NORMAL_BSM   ast_a_normal_wall_prev[1] 
     [6] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  s4_a_wall_flg != 0 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) func<start> fn_bsm_side_tracking_wall_with_obs( 
[6] SUBPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_wall_prev, 
[7] SUBPROCESS(1) func ast_a_normal_wall 
[8] SUBPROCESS(1) func<end> ); 
[9] MAINPROCESS(2) else<start> else 
[10] MAINPROCESS(2) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) func<start> fn_bsm_side_tracking_wall_without_obs( 
[12] SUBPROCESS(1) func s4_a_fm_obj_flg, 
[13] SUBPROCESS(1) func s4_a_leading_flg1, 
[14] SUBPROCESS(1) func s4_a_leading_flg2, 
[15] SUBPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_fm, 
[16] SUBPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_wall_prev, 
[17] SUBPROCESS(1) func ast_a_normal_wall 
[18] SUBPROCESS(1) func<end> ); 
[19] MAINPROCESS(3) func<start> fn_bsm_side_guard_wall_rxfil( 
[20] MAINPROCESS(3) func ast_a_normal_wall 
[21] MAINPROCESS(3) func<end> ); 
[22] MAINPROCESS(3) equal st_g_bsm_loop_data.afl_wall_width[0] ast_a_normal_wall[0].fl_Rxfil;
[23] MAINPROCESS(3) proc return; 
----------------- Total Codes : 23 lines
--------------------------
[Function Name] : fn_bsm_side_tracking_wall_with_obs 
-Return type : static VD 
-Argument : 2 
     [0] : const NORMAL_BSM   ast_a_normal_wall_prev[1] 
     [1] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_bsm_side_intpl_cur_wall_object( 
[2] MAINPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_wall_prev, 
[3] MAINPROCESS(1) func ast_a_normal_wall 
[4] MAINPROCESS(1) func<end> ); 
[5] MAINPROCESS(1) func<start> fn_ab_track_wall( 
[6] MAINPROCESS(1) func &ast_a_normal_wall_prev[0], 
[7] MAINPROCESS(1) func &ast_a_normal_wall[0], 
[8] MAINPROCESS(1) func 0 
[9] MAINPROCESS(1) func<end> ); 
[10] MAINPROCESS(1) func<start> fn_calc_prediction_of_normaldata( 
[11] MAINPROCESS(1) func &ast_a_normal_wall[0] 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) proc return; 
----------------- Total Codes : 13 lines
--------------------------
[Function Name] : fn_bsm_side_intpl_cur_wall_object 
-Return type : static VD 
-Argument : 2 
     [0] : const NORMAL_BSM   ast_a_normal_wall_prev[1] 
     [1] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  (ast_a_normal_wall[0].fl_Rxobs - ast_a_normal_wall_prev[0].fl_Rxfil) > SOT_WALL_WIDEN_DIFF_TH 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal ast_a_normal_wall[0].fl_Rxobs SOT_WALL_WIDEN_COEF*(ast_a_normal_wall[0].fl_Rxobs - ast_a_normal_wall_prev[0].fl_Rxfil)+ast_a_normal_wall_prev[0].fl_Rxfil;
[6] SUBPROCESS(1) equal ast_a_normal_wall[0].fl_Vxobs SOT_WALL_WIDEN_COEF*ast_a_normal_wall[0].fl_Vxobs;
[7] MAINPROCESS(2) if <start> if ( 
[8] MAINPROCESS(2) if  (ast_a_normal_wall[0].fl_Rxobs - ast_a_normal_wall_prev[0].fl_Rxfil) < SOT_WALL_NARROW_DIFF_TH 
[9] MAINPROCESS(2) if  ) 
[10] MAINPROCESS(2) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal ast_a_normal_wall[0].fl_Rxobs SOT_WALL_NARROW_COEF*(ast_a_normal_wall[0].fl_Rxobs - ast_a_normal_wall_prev[0].fl_Rxfil) + ast_a_normal_wall_prev[0].fl_Rxfil;
[12] SUBPROCESS(1) equal ast_a_normal_wall[0].fl_Vxobs SOT_WALL_NARROW_COEF*ast_a_normal_wall[0].fl_Vxobs;
[13] MAINPROCESS(3) if <start> if ( 
[14] MAINPROCESS(3) if  ast_a_normal_wall[0].fl_Rxobs > SOT_WALL_MAX 
[15] MAINPROCESS(3) if  ) 
[16] MAINPROCESS(3) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) equal ast_a_normal_wall[0].fl_Rxobs SOT_WALL_MAX;
[18] MAINPROCESS(4) if <start> if ( 
[19] MAINPROCESS(4) if  ast_a_normal_wall[0].fl_Rxobs < WALL_MIN 
[20] MAINPROCESS(4) if  ) 
[21] MAINPROCESS(4) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal ast_a_normal_wall[0].fl_Rxobs WALL_MIN;
[23] MAINPROCESS(5) equal ast_a_normal_wall[0].fl_Vyobs 0.0F;
[24] MAINPROCESS(5) equal ast_a_normal_wall[0].fl_doa_up_interpolate (FL)ast_a_normal_wall[0].s4_bin_up_music;
[25] MAINPROCESS(5) equal ast_a_normal_wall[0].fl_doa_dn_interpolate (FL)ast_a_normal_wall[0].s4_bin_dn_music;
[26] MAINPROCESS(5) proc return; 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_bsm_side_tracking_wall_without_obs 
-Return type : static VD 
-Argument : 6 
     [0] : S4   s4_a_fm_obj_flg 
     [1] : S4   s4_a_leading_flg1 
     [2] : S4   s4_a_leading_flg2 
     [3] : const NORMAL_BSM   ast_a_normal_fm[1] 
     [4] : const NORMAL_BSM   ast_a_normal_wall_prev[1] 
     [5] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_wall_pos; 
[2] MAINPROCESS(1) equal fl_t_wall_pos 0.0F;
[3] MAINPROCESS(1) func<start> fn_bsm_side_confirm_prev_wall_object( 
[4] MAINPROCESS(1) func s4_a_fm_obj_flg, 
[5] MAINPROCESS(1) func s4_a_leading_flg1, 
[6] MAINPROCESS(1) func s4_a_leading_flg2, 
[7] MAINPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_fm, 
[8] MAINPROCESS(1) func &fl_t_wall_pos 
[9] MAINPROCESS(1) func<end> ); 
[10] MAINPROCESS(1) if<start> if( 
[11] MAINPROCESS(1) if ast_a_normal_wall_prev[0].fl_Rxpred < fl_t_wall_pos 
[12] MAINPROCESS(1) if ) 
[13] MAINPROCESS(1) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) func<start> fn_bsm_side_cal1_next_wall_object( 
[15] SUBPROCESS(1) func s4_a_fm_obj_flg, 
[16] SUBPROCESS(1) func s4_a_leading_flg1, 
[17] SUBPROCESS(1) func s4_a_leading_flg2, 
[18] SUBPROCESS(1) func fl_t_wall_pos, 
[19] SUBPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_wall_prev, 
[20] SUBPROCESS(1) func ast_a_normal_wall 
[21] SUBPROCESS(1) func<end> ); 
[22] MAINPROCESS(2) else<start> else 
[23] MAINPROCESS(2) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) if<start> if( 
[25] SUBPROCESS(1) if s4_a_fm_obj_flg != 0 
[26] SUBPROCESS(1) if ) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) func<start> fn_bsm_side_cal2_next_wall_object( 
[29] SUBSUBPROCESS(1) func fl_t_wall_pos, 
[30] SUBSUBPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_wall_prev, 
[31] SUBSUBPROCESS(1) func ast_a_normal_wall 
[32] SUBSUBPROCESS(1) func<end> ); 
[33] SUBPROCESS(2) else<start> else 
[34] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[35] SUBSUBPROCESS(1) func<start> fn_bsm_side_cal3_next_wall_object( 
[36] SUBSUBPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_wall_prev, 
[37] SUBSUBPROCESS(1) func ast_a_normal_wall 
[38] SUBSUBPROCESS(1) func<end> ); 
[39] SUBPROCESS(3) func<start> fn_bsm_side_guard_wall_xpred( 
[40] SUBPROCESS(3) func ast_a_normal_wall 
[41] SUBPROCESS(3) func<end> ); 
[42] MAINPROCESS(3) proc return; 
----------------- Total Codes : 42 lines
--------------------------
[Function Name] : fn_bsm_side_confirm_prev_wall_object 
-Return type : static VD 
-Argument : 5 
     [0] : S4   s4_a_fm_obj_flg 
     [1] : S4   s4_a_leading_flg1 
     [2] : S4   s4_a_leading_flg2 
     [3] : const NORMAL_BSM   ast_a_normal_fm[1] 
     [4] : FL   *pfl_a_wall_pos 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  s4_a_fm_obj_flg != 0 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal *pfl_a_wall_pos ast_a_normal_fm[0].fl_Rxobs;
[6] MAINPROCESS(2) else<start> else 
[7] MAINPROCESS(2) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal *pfl_a_wall_pos WALL_MAX;
[9] MAINPROCESS(3) if <start> if ( 
[10] MAINPROCESS(3) if  (s4_a_leading_flg1 != 0 
[11] MAINPROCESS(3) if  ) 
[12] MAINPROCESS(3) if  ||  (s4_a_leading_flg2 != 0) 
[13] MAINPROCESS(3) if  ||  (st_g_bsm_loop_data.as4_flg_passing[0] > PASSING_COUNT_MIN) 
[14] MAINPROCESS(3) if  ||  (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] > 0)) 
[15] MAINPROCESS(3) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) if <start> if ( 
[17] SUBPROCESS(1) if  *pfl_a_wall_pos < WALL_MAX 
[18] SUBPROCESS(1) if  ) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) equal *pfl_a_wall_pos WALL_MAX;
[21] MAINPROCESS(4) proc return; 
----------------- Total Codes : 21 lines
--------------------------
[Function Name] : fn_bsm_side_cal1_next_wall_object 
-Return type : static VD 
-Argument : 6 
     [0] : S4   s4_a_fm_obj_flg 
     [1] : S4   s4_a_leading_flg1 
     [2] : S4   s4_a_leading_flg2 
     [3] : FL   fl_a_wall_pos 
     [4] : const NORMAL_BSM   ast_a_normal_wall_prev[1] 
     [5] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_init(&ast_a_normal_wall[0], 1 
[2] MAINPROCESS(1) func<end> ); 
[3] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Ryobs 0.0F;
[4] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Ryfil 0.0F;
[5] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Rypred 0.0F;
[6] MAINPROCESS(1) func<start> ast_a_normal_wall[0].fl_Rxobs = fl_bsm_side_cal1_cal_wall_rxobs( 
[7] MAINPROCESS(1) func s4_a_fm_obj_flg, 
[8] MAINPROCESS(1) func s4_a_leading_flg1, 
[9] MAINPROCESS(1) func s4_a_leading_flg2, 
[10] MAINPROCESS(1) func fl_a_wall_pos, 
[11] MAINPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_wall_prev 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Rxfil ast_a_normal_wall[0].fl_Rxobs;
[14] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Rxpred ast_a_normal_wall[0].fl_Rxobs;
[15] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Robs ast_a_normal_wall[0].fl_Rxobs;
[16] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Robs_pred ast_a_normal_wall[0].fl_Rxpred;
[17] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_doa_up_interpolate (FL)ast_a_normal_wall[0].s4_bin_up_music;
[18] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_doa_dn_interpolate (FL)ast_a_normal_wall[0].s4_bin_dn_music;
[19] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_doa_up_interpolate_pred (FL)ast_a_normal_wall[0].s4_bin_up_music_pred;
[20] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_doa_dn_interpolate_pred (FL)ast_a_normal_wall[0].s4_bin_dn_music_pred;
[21] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_bin_up_interpolate (FL)ast_a_normal_wall[0].s4_bin_up;
[22] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_bin_dn_interpolate (FL)ast_a_normal_wall[0].s4_bin_dn;
[23] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_bin_up_interpolate_pred (FL)ast_a_normal_wall[0].s4_bin_up_pred;
[24] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_bin_dn_interpolate_pred (FL)ast_a_normal_wall[0].s4_bin_dn_pred;
[25] MAINPROCESS(1) proc return; 
----------------- Total Codes : 25 lines
--------------------------
[Function Name] : fl_bsm_side_cal1_cal_wall_rxobs 
-Return type : static FL 
-Argument : 5 
     [0] : S4   s4_a_fm_obj_flg 
     [1] : S4   s4_a_leading_flg1 
     [2] : S4   s4_a_leading_flg2 
     [3] : FL   fl_a_wall_pos 
     [4] : const NORMAL_BSM   ast_a_normal_wall_prev[1] 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_rxobs; 
[2] MAINPROCESS(1) if <start> if ( 
[3] MAINPROCESS(1) if  s4_a_leading_flg1 == 0 
[4] MAINPROCESS(1) if  ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) if <start> if ( 
[7] SUBPROCESS(1) if  st_g_bsm_loop_data.as4_flg_passing[0] > PASSING_COUNT_MIN 
[8] SUBPROCESS(1) if  ) 
[9] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[10] SUBSUBPROCESS(1) equal fl_t_rxobs ast_a_normal_wall_prev[0].fl_Rxfil*(1-WALL_LOST_ALPHA) + WALL_LOST_ALPHA*fl_a_wall_pos;
[11] SUBPROCESS(2) else<start> else 
[12] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) if <start> if ( 
[14] SUBSUBPROCESS(1) if  fl_g_v_self_bsm_for_base > WALL_RET_LOW_VSELF_TH 
[15] SUBSUBPROCESS(1) if  ) 
[16] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[17] SUBSUBSUBPROCESS(1) if <start> if ( 
[18] SUBSUBSUBPROCESS(1) if  s4_a_fm_obj_flg != 0 
[19] SUBSUBSUBPROCESS(1) if  ) 
[20] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[21] SUBSUBSUBSUBPROCESS(1) equal fl_t_rxobs ast_a_normal_wall_prev[0].fl_Rxfil*(1-WALL_LOST_ALPHA_MID) + WALL_LOST_ALPHA_MID*fl_a_wall_pos;
[22] SUBSUBSUBPROCESS(2) else<start> else 
[23] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBSUBPROCESS(1) equal fl_t_rxobs ast_a_normal_wall_prev[0].fl_Rxfil*(1-WALL_LOST_ALPHA_MID) + WALL_LOST_ALPHA_MID*fl_a_wall_pos;
[25] SUBSUBPROCESS(2) else<start> else 
[26] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[27] SUBSUBSUBPROCESS(1) if <start> if ( 
[28] SUBSUBSUBPROCESS(1) if  s4_a_fm_obj_flg != 0 
[29] SUBSUBSUBPROCESS(1) if  ) 
[30] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[31] SUBSUBSUBSUBPROCESS(1) equal fl_t_rxobs ast_a_normal_wall_prev[0].fl_Rxfil*(1-WALL_LOST_ALPHA_MID) + WALL_LOST_ALPHA_MID*fl_a_wall_pos;
[32] SUBSUBSUBPROCESS(2) else<start> else 
[33] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[34] SUBSUBSUBSUBPROCESS(1) equal fl_t_rxobs ast_a_normal_wall_prev[0].fl_Rxfil;
[35] MAINPROCESS(2) else<start> else 
[36] MAINPROCESS(2) subproc SUBPROCESS(1) 
[37] SUBPROCESS(1) if <start> if ( 
[38] SUBPROCESS(1) if  fl_g_v_self_bsm_for_base > WALL_RET_LOW_VSELF_TH 
[39] SUBPROCESS(1) if  ) 
[40] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[41] SUBSUBPROCESS(1) equal fl_t_rxobs ast_a_normal_wall_prev[0].fl_Rxfil*(1-WALL_LOST_ALPHA_FAST) + WALL_LOST_ALPHA_FAST*fl_a_wall_pos;
[42] SUBPROCESS(2) else<start> else 
[43] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[44] SUBSUBPROCESS(1) if <start> if ( 
[45] SUBSUBPROCESS(1) if  (s4_a_fm_obj_flg != 0 
[46] SUBSUBPROCESS(1) if  ) 
[47] SUBSUBPROCESS(1) if  &&  (s4_a_leading_flg2 == 0)) 
[48] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[49] SUBSUBSUBPROCESS(1) equal fl_t_rxobs ast_a_normal_wall_prev[0].fl_Rxfil*(1-WALL_LOST_ALPHA_MID) + WALL_LOST_ALPHA_MID*fl_a_wall_pos;
[50] SUBSUBPROCESS(2) else<start> else 
[51] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[52] SUBSUBSUBPROCESS(1) equal fl_t_rxobs ast_a_normal_wall_prev[0].fl_Rxfil;
[53] MAINPROCESS(3) if <start> if ( 
[54] MAINPROCESS(3) if  fl_t_rxobs > fl_a_wall_pos 
[55] MAINPROCESS(3) if  ) 
[56] MAINPROCESS(3) subproc SUBPROCESS(1) 
[57] SUBPROCESS(1) equal fl_t_rxobs fl_a_wall_pos;
[58] MAINPROCESS(4) if <start> if ( 
[59] MAINPROCESS(4) if  fl_t_rxobs < WALL_MIN 
[60] MAINPROCESS(4) if  ) 
[61] MAINPROCESS(4) subproc SUBPROCESS(1) 
[62] SUBPROCESS(1) equal fl_t_rxobs WALL_MIN;
[63] MAINPROCESS(5) proc return fl_t_rxobs; 
----------------- Total Codes : 63 lines
--------------------------
[Function Name] : fn_bsm_side_cal2_next_wall_object 
-Return type : static VD 
-Argument : 3 
     [0] : FL   fl_a_wall_pos 
     [1] : const NORMAL_BSM   ast_a_normal_wall_prev[1] 
     [2] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Rxobs ast_a_normal_wall_prev[0].fl_Rxfil*(1-WALL_LOST_ALPHA_MID) + WALL_LOST_ALPHA_MID*fl_a_wall_pos;
[2] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Rxfil ast_a_normal_wall[0].fl_Rxobs;
[3] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Rxpred ast_a_normal_wall[0].fl_Rxobs;
[4] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Robs ast_a_normal_wall[0].fl_Rxobs;
[5] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Robs_pred ast_a_normal_wall[0].fl_Rxpred;
[6] MAINPROCESS(1) proc return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_bsm_side_cal3_next_wall_object 
-Return type : static VD 
-Argument : 2 
     [0] : const NORMAL_BSM   ast_a_normal_wall_prev[1] 
     [1] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) equal ast_a_normal_wall[0].s4_bin_up ast_a_normal_wall_prev[0].s4_bin_up_pred;
[2] MAINPROCESS(1) equal ast_a_normal_wall[0].s4_bin_dn ast_a_normal_wall_prev[0].s4_bin_dn_pred;
[3] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_bin_up_interpolate ast_a_normal_wall_prev[0].fl_bin_up_interpolate_pred;
[4] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_bin_dn_interpolate ast_a_normal_wall_prev[0].fl_bin_dn_interpolate_pred;
[5] MAINPROCESS(1) equal ast_a_normal_wall[0].s4_bin_up_music ast_a_normal_wall_prev[0].s4_bin_up_music_pred;
[6] MAINPROCESS(1) equal ast_a_normal_wall[0].s4_bin_dn_music ast_a_normal_wall_prev[0].s4_bin_dn_music_pred;
[7] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_doa_up_interpolate ast_a_normal_wall_prev[0].fl_doa_up_interpolate_pred;
[8] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_doa_dn_interpolate ast_a_normal_wall_prev[0].fl_doa_dn_interpolate_pred;
[9] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_theta_up ast_a_normal_wall_prev[0].fl_theta_up_pred;
[10] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_theta_dn ast_a_normal_wall_prev[0].fl_theta_dn_pred;
[11] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Robs ast_a_normal_wall_prev[0].fl_Robs_pred;
[12] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Vobs ast_a_normal_wall_prev[0].fl_Vobs_pred;
[13] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Rxobs ast_a_normal_wall_prev[0].fl_Rxpred;
[14] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Vxobs ast_a_normal_wall_prev[0].fl_Vxpred;
[15] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Ryobs ast_a_normal_wall_prev[0].fl_Rypred*(1-WALL_LOST_ALPHA_FAST) + WALL_LOST_ALPHA_FAST*0.0F;
[16] MAINPROCESS(1) equal ast_a_normal_wall[0].fl_Vyobs 0.0F;
[17] MAINPROCESS(1) func<start> fn_ab_track_wall( 
[18] MAINPROCESS(1) func &ast_a_normal_wall_prev[0], 
[19] MAINPROCESS(1) func &ast_a_normal_wall[0], 
[20] MAINPROCESS(1) func 0 
[21] MAINPROCESS(1) func<end> ); 
[22] MAINPROCESS(1) func<start> fn_calc_prediction_of_normaldata( 
[23] MAINPROCESS(1) func &ast_a_normal_wall[0] 
[24] MAINPROCESS(1) func<end> ); 
[25] MAINPROCESS(1) proc return; 
----------------- Total Codes : 25 lines
--------------------------
[Function Name] : fn_bsm_side_guard_wall_xpred 
-Return type : static VD 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) if<start> if( 
[2] MAINPROCESS(1) if ast_a_normal_wall[0].fl_Rxpred > SOT_WALL_MAX 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal ast_a_normal_wall[0].fl_Rxpred SOT_WALL_MAX;
[6] MAINPROCESS(2) proc return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_bsm_side_guard_wall_rxfil 
-Return type : static VD 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  ast_a_normal_wall[0].fl_Rxfil > SOT_WALL_MAX 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal ast_a_normal_wall[0].fl_Rxfil SOT_WALL_MAX;
[6] MAINPROCESS(2) if <start> if ( 
[7] MAINPROCESS(2) if  ast_a_normal_wall[0].fl_Rxfil < WALL_MIN 
[8] MAINPROCESS(2) if  ) 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal ast_a_normal_wall[0].fl_Rxfil WALL_MIN;
[11] MAINPROCESS(3) proc return; 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : s4_bsm_side_tracking_heisou 
-Return type : static S4 
-Argument : 6 
     [0] : FL   fl_a_fm_nearfield_power 
     [1] : S4   s4_a_fm_obj_flg 
     [2] : S4   *ps4_a_leading_flg2 
     [3] : const NORMAL_BSM   ast_a_normal_sot_prev[1] 
     [4] : const NORMAL_BSM   ast_a_normal_sot_heisou[1] 
     [5] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4	s4_t_object_num; 
[2] MAINPROCESS(1) equal s4_t_object_num 0;
[3] MAINPROCESS(1) equal ast_a_normal_sot[0].s4_flg_new 0;
[4] MAINPROCESS(1) if <start> if ( 
[5] MAINPROCESS(1) if  *ps4_a_leading_flg2 != 0 
[6] MAINPROCESS(1) if  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  s4_a_fm_obj_flg != 0 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) func<start> s4_t_object_num = s4_bsm_side_tracking_heisou_with_obs( 
[13] SUBSUBPROCESS(1) func fl_a_fm_nearfield_power, 
[14] SUBSUBPROCESS(1) func ps4_a_leading_flg2, 
[15] SUBSUBPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_sot_prev, 
[16] SUBSUBPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_sot_heisou, 
[17] SUBSUBPROCESS(1) func ast_a_normal_sot 
[18] SUBSUBPROCESS(1) func<end> ); 
[19] SUBPROCESS(2) else<start> else 
[20] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[21] SUBSUBPROCESS(1) func<start> s4_t_object_num = s4_bsm_side_tracking_heisou_without_obs( 
[22] SUBSUBPROCESS(1) func fl_a_fm_nearfield_power, 
[23] SUBSUBPROCESS(1) func ps4_a_leading_flg2, 
[24] SUBSUBPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_sot_prev, 
[25] SUBSUBPROCESS(1) func ast_a_normal_sot 
[26] SUBSUBPROCESS(1) func<end> ); 
[27] SUBPROCESS(3) if <start> if ( 
[28] SUBPROCESS(3) if  *ps4_a_leading_flg2 != 0 
[29] SUBPROCESS(3) if  ) 
[30] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) func<start> fn_bsm_side_check_tracking_heisou_range( 
[32] SUBSUBPROCESS(1) func ps4_a_leading_flg2, 
[33] SUBSUBPROCESS(1) func (const NORMAL_BSM *)ast_a_normal_sot 
[34] SUBSUBPROCESS(1) func<end> ); 
[35] MAINPROCESS(2) else<start> else 
[36] MAINPROCESS(2) subproc SUBPROCESS(1) 
[37] SUBPROCESS(1) func<start> fn_init(&ast_a_normal_sot[0], 1 
[38] SUBPROCESS(1) func<end> ); 
[39] SUBPROCESS(1) equal *ps4_a_leading_flg2 0;
[40] MAINPROCESS(3) proc return s4_t_object_num; 
----------------- Total Codes : 40 lines
--------------------------
[Function Name] : s4_bsm_side_tracking_heisou_with_obs 
-Return type : static S4 
-Argument : 5 
     [0] : FL   fl_a_fm_nearfield_power 
     [1] : S4   *ps4_a_leading_flg2 
     [2] : const NORMAL_BSM   ast_a_normal_sot_prev[1] 
     [3] : const NORMAL_BSM   ast_a_normal_sot_heisou[1] 
     [4] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_object_num; 
[2] MAINPROCESS(1) equal s4_t_object_num 0;
[3] MAINPROCESS(1) func<start> fn_move( 
[4] MAINPROCESS(1) func ast_a_normal_sot, 
[5] MAINPROCESS(1) func ast_a_normal_sot_heisou, 
[6] MAINPROCESS(1) func 1 
[7] MAINPROCESS(1) func<end> ); 
[8] MAINPROCESS(1) equal ast_a_normal_sot[0].s4_flg_heiso_up 1;
[9] MAINPROCESS(1) equal ast_a_normal_sot[0].s4_flg_heiso_dn 1;
[10] MAINPROCESS(1) equal ast_a_normal_sot[0].s4_flg_dc OBJECT_TYPE_SOT;
[11] MAINPROCESS(1) if <start> if ( 
[12] MAINPROCESS(1) if  (ast_a_normal_sot_prev[0].fl_Rxpred != CFL_UNKNOWN_VALUE 
[13] MAINPROCESS(1) if  ) 
[14] MAINPROCESS(1) if  &&  (ast_a_normal_sot_prev[0].fl_Rypred != CFL_UNKNOWN_VALUE)) 
[15] MAINPROCESS(1) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) func<start> fn_ab_track( 
[17] SUBPROCESS(1) func &ast_a_normal_sot_prev[0], 
[18] SUBPROCESS(1) func &ast_a_normal_sot[0], 
[19] SUBPROCESS(1) func 0 
[20] SUBPROCESS(1) func<end> ); 
[21] SUBPROCESS(1) func<start> fn_calc_prediction_of_normaldata( 
[22] SUBPROCESS(1) func &ast_a_normal_sot[0] 
[23] SUBPROCESS(1) func<end> ); 
[24] SUBPROCESS(1) if <start> if ( 
[25] SUBPROCESS(1) if  ast_a_normal_sot[0].s4_flg_track == CS4_S4MAX 
[26] SUBPROCESS(1) if  ) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[28] SUBPROCESS(2) else<start> else 
[29] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[30] SUBSUBPROCESS(1) equal ast_a_normal_sot[0].s4_flg_track ast_a_normal_sot_prev[0].s4_flg_track +1;
[31] SUBPROCESS(3) equal ast_a_normal_sot[0].s4_flg_lost 0;
[32] SUBPROCESS(3) equal s4_t_object_num 1;
[33] MAINPROCESS(2) else<start> else 
[34] MAINPROCESS(2) subproc SUBPROCESS(1) 
[35] SUBPROCESS(1) if <start> if ( 
[36] SUBPROCESS(1) if  fl_a_fm_nearfield_power > CFL_SLOW_SOT_POW_TH 
[37] SUBPROCESS(1) if  ) 
[38] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[39] SUBSUBPROCESS(1) equal S4 tmptmp_erased_num 0;
[40] SUBSUBPROCESS(1) proc S4 tmptmp_passing_flg[1]; 
[41] SUBSUBPROCESS(1) proc S4 tmptmp_leading_flg[1]; 
[42] SUBSUBPROCESS(1) equal tmptmp_passing_flg[0] (S4)0;
[43] SUBSUBPROCESS(1) equal tmptmp_leading_flg[0] *ps4_a_leading_flg2;
[44] SUBSUBPROCESS(1) func<start> tmptmp_erased_num = s4_start_prediction( 
[45] SUBSUBPROCESS(1) func ast_a_normal_sot, 
[46] SUBSUBPROCESS(1) func 1, 
[47] SUBSUBPROCESS(1) func 1, 
[48] SUBSUBPROCESS(1) func (const S4 (*))tmptmp_passing_flg, 
[49] SUBSUBPROCESS(1) func (const S4 (*))tmptmp_leading_flg 
[50] SUBSUBPROCESS(1) func<end> ); 
[51] SUBSUBPROCESS(1) func<start> s4_t_object_num = s4_copy_prediction_to_filtered_data( 
[52] SUBSUBPROCESS(1) func ast_a_normal_sot, 
[53] SUBSUBPROCESS(1) func 1 
[54] SUBSUBPROCESS(1) func<end> ); 
[55] SUBSUBPROCESS(1) if <start> if ( 
[56] SUBSUBPROCESS(1) if  s4_t_object_num == (S4)0 
[57] SUBSUBPROCESS(1) if  ) 
[58] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_sot[0], 1 
[60] SUBSUBSUBPROCESS(1) func<end> ); 
[61] SUBSUBPROCESS(2) else<start> else 
[62] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBPROCESS(1) equal ast_a_normal_sot[0].s4_flg_new 1;
[64] SUBSUBSUBPROCESS(1) equal ast_a_normal_sot[0].s4_flg_track PRIOR_TRK_NUM+1;
[65] SUBPROCESS(2) else<start> else 
[66] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[67] SUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_sot[0], 1 
[68] SUBSUBPROCESS(1) func<end> ); 
[69] SUBSUBPROCESS(1) equal *ps4_a_leading_flg2 0;
[70] MAINPROCESS(3) proc return s4_t_object_num; 
----------------- Total Codes : 70 lines
--------------------------
[Function Name] : s4_bsm_side_tracking_heisou_without_obs 
-Return type : static S4 
-Argument : 4 
     [0] : FL   fl_a_fm_nearfield_power 
     [1] : S4   *ps4_a_leading_flg2 
     [2] : const NORMAL_BSM   ast_a_normal_sot_prev[1] 
     [3] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_object_num; 
[2] MAINPROCESS(1) equal s4_t_object_num 0;
[3] MAINPROCESS(1) if <start> if ( 
[4] MAINPROCESS(1) if  (ast_a_normal_sot_prev[0].fl_Rxpred != CFL_UNKNOWN_VALUE 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) if  &&  (ast_a_normal_sot_prev[0].fl_Rypred != CFL_UNKNOWN_VALUE) 
[7] MAINPROCESS(1) if  &&  (fl_a_fm_nearfield_power > CFL_SLOW_SOT_POW_TH2) 
[8] MAINPROCESS(1) if  &&  (ast_a_normal_sot_prev[0].s4_flg_lost < SOT_LOST_NUM_MAX)) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal ast_a_normal_sot[0].s4_bin_up ast_a_normal_sot_prev[0].s4_bin_up_pred;
[11] SUBPROCESS(1) equal ast_a_normal_sot[0].s4_bin_dn ast_a_normal_sot_prev[0].s4_bin_dn_pred;
[12] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_bin_up_interpolate ast_a_normal_sot_prev[0].fl_bin_up_interpolate_pred;
[13] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_bin_dn_interpolate ast_a_normal_sot_prev[0].fl_bin_dn_interpolate_pred;
[14] SUBPROCESS(1) equal ast_a_normal_sot[0].s4_bin_up_music ast_a_normal_sot_prev[0].s4_bin_up_music_pred;
[15] SUBPROCESS(1) equal ast_a_normal_sot[0].s4_bin_dn_music ast_a_normal_sot_prev[0].s4_bin_dn_music_pred;
[16] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_doa_up_interpolate ast_a_normal_sot_prev[0].fl_doa_up_interpolate_pred;
[17] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_doa_dn_interpolate ast_a_normal_sot_prev[0].fl_doa_dn_interpolate_pred;
[18] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_theta_up ast_a_normal_sot_prev[0].fl_theta_up_pred;
[19] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_theta_dn ast_a_normal_sot_prev[0].fl_theta_dn_pred;
[20] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_Robs ast_a_normal_sot_prev[0].fl_Robs_pred;
[21] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_Rxobs ast_a_normal_sot_prev[0].fl_Rxpred;
[22] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_Ryobs ast_a_normal_sot_prev[0].fl_Rypred;
[23] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_Vobs ast_a_normal_sot_prev[0].fl_Vobs_pred;
[24] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_Vxobs ast_a_normal_sot_prev[0].fl_Vxpred;
[25] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_Vyobs ast_a_normal_sot_prev[0].fl_Vypred;
[26] SUBPROCESS(1) func<start> fn_ab_track( 
[27] SUBPROCESS(1) func &ast_a_normal_sot_prev[0], 
[28] SUBPROCESS(1) func &ast_a_normal_sot[0], 
[29] SUBPROCESS(1) func 0 
[30] SUBPROCESS(1) func<end> ); 
[31] SUBPROCESS(1) func<start> fn_calc_prediction_of_normaldata( 
[32] SUBPROCESS(1) func &ast_a_normal_sot[0] 
[33] SUBPROCESS(1) func<end> ); 
[34] SUBPROCESS(1) if <start> if ( 
[35] SUBPROCESS(1) if  ast_a_normal_sot[0].s4_flg_track == CS4_S4MAX 
[36] SUBPROCESS(1) if  ) 
[37] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[38] SUBPROCESS(2) else<start> else 
[39] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[40] SUBSUBPROCESS(1) equal ast_a_normal_sot[0].s4_flg_track ast_a_normal_sot_prev[0].s4_flg_track +1;
[41] SUBPROCESS(3) equal ast_a_normal_sot[0].s4_flg_lost ast_a_normal_sot_prev[0].s4_flg_lost + 1;
[42] SUBPROCESS(3) equal s4_t_object_num 1;
[43] MAINPROCESS(2) else<start> else 
[44] MAINPROCESS(2) subproc SUBPROCESS(1) 
[45] SUBPROCESS(1) func<start> fn_init(ast_a_normal_sot, 1 
[46] SUBPROCESS(1) func<end> ); 
[47] SUBPROCESS(1) equal *ps4_a_leading_flg2 0;
[48] MAINPROCESS(3) proc return s4_t_object_num; 
----------------- Total Codes : 48 lines
--------------------------
[Function Name] : fn_bsm_side_check_tracking_heisou_range 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_leading_flg2 
     [1] : const NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) proc FL tmp_Rxmax; 
[2] MAINPROCESS(1) if <start> if ( 
[3] MAINPROCESS(1) if  *ps4_a_leading_flg2 != 0 
[4] MAINPROCESS(1) if  ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal tmp_Rxmax WALL_MAX;
[7] SUBPROCESS(1) if <start> if ( 
[8] SUBPROCESS(1) if  st_g_bsm_loop_data.afl_wall_width[0] < WALL_MAX 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) equal tmp_Rxmax st_g_bsm_loop_data.afl_wall_width[0];
[12] SUBPROCESS(2) if <start> if ( 
[13] SUBPROCESS(2) if  (ast_a_normal_sot[0].fl_Rxpred < SOT_TRACK_XMIN 
[14] SUBPROCESS(2) if  ) 
[15] SUBPROCESS(2) if  ||  (ast_a_normal_sot[0].fl_Rxpred > tmp_Rxmax) 
[16] SUBPROCESS(2) if  ||  (ast_a_normal_sot[0].fl_Rypred > SOT_TRACK_YMAX) 
[17] SUBPROCESS(2) if  ||  (ast_a_normal_sot[0].fl_Rypred < SOT_TRACK_YMIN)) 
[18] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[19] SUBSUBPROCESS(1) equal *ps4_a_leading_flg2 0;
[20] MAINPROCESS(2) proc return; 
----------------- Total Codes : 20 lines
--------------------------
[Function Name] : fn_bsm_side_check_wall_for_erase_fa_seg 
-Return type : VD 
-Argument : 2 
     [0] : const NORMAL_BSM   ast_a_normal_sot_ena[1] 
     [1] : S4   s4_a_fm_obj_flg 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_diff_x; 
[2] MAINPROCESS(1) if <start> if ( 
[3] MAINPROCESS(1) if  (!(fl_g_v_self_bsm_for_base > CFL_CANOUT_VSELF_MIN) 
[4] MAINPROCESS(1) if  ) 
[5] MAINPROCESS(1) if  ||  (s4_a_fm_obj_flg != (S4)1)) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal st_g_bsm_loop_data.fl_fm_obj_x_pre CFL_UNKNOWN_VALUE;
[8] SUBPROCESS(1) equal st_g_bsm_loop_data.u1_flg_fm_obj_x_pre_enable CU1_DF_OFF;
[9] SUBPROCESS(1) equal st_g_bsm_loop_data.u1_fm_object_stable_count (U1)0;
[10] MAINPROCESS(2) else<start> else 
[11] MAINPROCESS(2) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if <start> if ( 
[13] SUBPROCESS(1) if  st_g_bsm_loop_data.u1_flg_fm_obj_x_pre_enable == CU1_DF_ON 
[14] SUBPROCESS(1) if  ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) func<start> fl_t_diff_x = fl_abs(ast_a_normal_sot_ena[0].fl_Rxobs - st_g_bsm_loop_data.fl_fm_obj_x_pre 
[17] SUBSUBPROCESS(1) func<end> ); 
[18] SUBSUBPROCESS(1) if <start> if ( 
[19] SUBSUBPROCESS(1) if  fl_t_diff_x < (FL)0.5F 
[20] SUBSUBPROCESS(1) if  ) 
[21] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.u1_fm_object_stable_count = (U1)u2_data_add((U2)st_g_bsm_loop_data.u1_fm_object_stable_count, (S2)1, (U2)100, (U2)0 
[23] SUBSUBSUBPROCESS(1) func<end> ); 
[24] SUBSUBPROCESS(2) else<start> else 
[25] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[26] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.u1_fm_object_stable_count (U1)0;
[27] SUBPROCESS(2) equal st_g_bsm_loop_data.fl_fm_obj_x_pre ast_a_normal_sot_ena[0].fl_Rxobs;
[28] SUBPROCESS(2) equal st_g_bsm_loop_data.u1_flg_fm_obj_x_pre_enable CU1_DF_ON;
[29] MAINPROCESS(3) if <start> if ( 
[30] MAINPROCESS(3) if  fl_g_v_self_bsm_for_base > CFL_CANOUT_VSELF_MIN 
[31] MAINPROCESS(3) if  ) 
[32] MAINPROCESS(3) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) if <start> if ( 
[34] SUBPROCESS(1) if  st_g_bsm_loop_data.as4_slow_sot_find[1] > (S4)WALL_REJECT_TH3 
[35] SUBPROCESS(1) if  ) 
[36] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[37] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.u1_wall_flg_for_fa_judgement (U1)1;
[38] SUBPROCESS(2) else if <start> else if ( 
[39] SUBPROCESS(2) else if  st_g_bsm_loop_data.u1_fm_object_stable_count >= (U1)38 
[40] SUBPROCESS(2) else if  ) 
[41] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[42] SUBPROCESS(3) else<start> else 
[43] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[44] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.u1_wall_flg_for_fa_judgement (U1)0;
[45] MAINPROCESS(4) else<start> else 
[46] MAINPROCESS(4) subproc SUBPROCESS(1) 
[47] SUBPROCESS(1) equal st_g_bsm_loop_data.u1_wall_flg_for_fa_judgement (U1)0;
[48] MAINPROCESS(5) proc return; 
----------------- Total Codes : 48 lines
--------------------------
[Function Name] : fl_seek_low_speed_sot 
-Return type : FL 
-Argument : 2 
     [0] : const FL   afl_a_sot_detect_param[9] 
     [1] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j, k; 
[3] MAINPROCESS(1) proc S4 nearfield_doa_i[SLOW_SOT_FREQ_BIN_RANGE][1]; 
[4] MAINPROCESS(1) proc S4 nearfield_doa_peak_num_i[SLOW_SOT_FREQ_BIN_RANGE]; 
[5] MAINPROCESS(1) proc S4 nearfield_doa_q[SLOW_SOT_FREQ_BIN_RANGE][1]; 
[6] MAINPROCESS(1) proc S4 nearfield_doa_peak_num_q[SLOW_SOT_FREQ_BIN_RANGE]; 
[7] MAINPROCESS(1) proc S4 v0_doa_def; 
[8] MAINPROCESS(1) proc S4 v0_doa; 
[9] MAINPROCESS(1) proc FL dev; 
[10] MAINPROCESS(1) equal FL power_ave 0.0F;
[11] MAINPROCESS(1) proc S4 stationary_doa_line[N_DOA]; 
[12] MAINPROCESS(1) proc S4 sot_limit_doa_line_forward[N_DOA]; 
[13] MAINPROCESS(1) proc S4 sot_limit_doa_line_backward[N_DOA]; 
[14] MAINPROCESS(1) proc FL afl_t_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4]; 
[15] MAINPROCESS(1) proc FL afl_t_sot_check_object_q[SLOW_SOT_FREQ_BIN_RANGE][4]; 
[16] MAINPROCESS(1) proc S4 fast_sot_num; 
[17] MAINPROCESS(1) proc S4 not_fast_sot_num; 
[18] MAINPROCESS(1) equal S4 backward_priod 0;
[19] MAINPROCESS(1) equal S4 forward_point 0;
[20] MAINPROCESS(1) proc FL tmp_dev[2]; 
[21] MAINPROCESS(1) proc S4 sot_stop; 
[22] MAINPROCESS(1) equal S4 forward_priod 1;
[23] MAINPROCESS(1) proc U1 u1_t_alarming_flag_local; 
[24] MAINPROCESS(1) proc U1 u1_t_num_nearfield_doa_2f_i; 
[25] MAINPROCESS(1) proc U1 u1_t_num_nearfield_doa_2f_q; 
[26] MAINPROCESS(1) proc U1 u1_t_num_forward; 
[27] MAINPROCESS(1) proc U1 u1_t_num_backward; 
[28] MAINPROCESS(1) equal tmp_dev[0] 999.9F;
[29] MAINPROCESS(1) equal tmp_dev[1] 999.9F;
[30] MAINPROCESS(1) equal fast_sot_num (S4)0;
[31] MAINPROCESS(1) equal not_fast_sot_num (S4)0;
[32] MAINPROCESS(1) equal u1_t_alarming_flag_local (U1)0;
[33] MAINPROCESS(1) equal u1_t_num_nearfield_doa_2f_i (U1)0;
[34] MAINPROCESS(1) equal u1_t_num_nearfield_doa_2f_q (U1)0;
[35] MAINPROCESS(1) equal u1_t_num_forward (U1)0;
[36] MAINPROCESS(1) equal u1_t_num_backward (U1)0;
[37] MAINPROCESS(1) for<start> for( 
[38] MAINPROCESS(1) for j=0; 
[39] MAINPROCESS(1) for j<N_DOA; 
[40] MAINPROCESS(1) for j++) 
[41] MAINPROCESS(1) subproc SUBPROCESS(1) 
[42] SUBPROCESS(1) equal stationary_doa_line[j] 0;
[43] MAINPROCESS(2) for <start> for ( 
[44] MAINPROCESS(2) for  j = (S4)0; 
[45] MAINPROCESS(2) for  j < SLOW_SOT_FREQ_BIN_RANGE; 
[46] MAINPROCESS(2) for  j++) 
[47] MAINPROCESS(2) subproc SUBPROCESS(1) 
[48] SUBPROCESS(1) for <start> for ( 
[49] SUBPROCESS(1) for  k = (S4)0; 
[50] SUBPROCESS(1) for  k < (S4)4; 
[51] SUBPROCESS(1) for  k++) 
[52] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[53] SUBSUBPROCESS(1) equal afl_t_sot_check_object_i[j][k] CFL_UNKNOWN_VALUE;
[54] SUBSUBPROCESS(1) equal afl_t_sot_check_object_q[j][k] CFL_UNKNOWN_VALUE;
[55] MAINPROCESS(3) for <start> for ( 
[56] MAINPROCESS(3) for  j = (S4)0; 
[57] MAINPROCESS(3) for  j < SLOW_SOT_FREQ_BIN_RANGE; 
[58] MAINPROCESS(3) for  j++) 
[59] MAINPROCESS(3) subproc SUBPROCESS(1) 
[60] SUBPROCESS(1) equal nearfield_doa_i[j][0] (S4)-1;
[61] SUBPROCESS(1) equal nearfield_doa_q[j][0] (S4)-1;
[62] SUBPROCESS(1) equal nearfield_doa_peak_num_i[j] (S4)0;
[63] SUBPROCESS(1) equal nearfield_doa_peak_num_q[j] (S4)0;
[64] MAINPROCESS(4) subproc SUBPROCESS(1) 
[65] SUBPROCESS(1) func<start> u1_t_num_nearfield_doa_2f_i = calc_nearfield_doa_2f_I( 
[66] SUBPROCESS(1) func nearfield_doa_i, 
[67] SUBPROCESS(1) func nearfield_doa_peak_num_i, 
[68] SUBPROCESS(1) func SLOW_SOT_FREQ_BIN_START_I, 
[69] SUBPROCESS(1) func afl_t_sot_check_object_i 
[70] SUBPROCESS(1) func<end> ); 
[71] MAINPROCESS(5) subproc SUBPROCESS(1) 
[72] SUBPROCESS(1) func<start> u1_t_num_nearfield_doa_2f_q = calc_nearfield_doa_2f_Q( 
[73] SUBPROCESS(1) func nearfield_doa_q, 
[74] SUBPROCESS(1) func nearfield_doa_peak_num_q, 
[75] SUBPROCESS(1) func SLOW_SOT_FREQ_BIN_START_Q, 
[76] SUBPROCESS(1) func afl_t_sot_check_object_q 
[77] SUBPROCESS(1) func<end> ); 
[78] MAINPROCESS(6) func<start> v0_doa_def = (S4)(180.0 - st_g_bsm_loop_data.afl_installed_angle[0] + afl_a_sot_detect_param[2] 
[79] MAINPROCESS(6) func<end> ); 
[80] MAINPROCESS(6) func<start> v0_doa     = (S4)(180.0 - st_g_bsm_loop_data.afl_installed_angle[0] + afl_a_sot_detect_param[2] 
[81] MAINPROCESS(6) func<end> ); 
[82] MAINPROCESS(6) func<start> set_stationary_doa_line_2f( 
[83] MAINPROCESS(6) func stationary_doa_line, 
[84] MAINPROCESS(6) func v0_doa_def, 
[85] MAINPROCESS(6) func v0_doa 
[86] MAINPROCESS(6) func<end> ); 
[87] MAINPROCESS(6) func<start> set_sot_limit_doa_line_2f( 
[88] MAINPROCESS(6) func sot_limit_doa_line_backward, 
[89] MAINPROCESS(6) func v0_doa_def, 
[90] MAINPROCESS(6) func v0_doa, 
[91] MAINPROCESS(6) func CFL_SoT_V_TH_BWD 
[92] MAINPROCESS(6) func<end> ); 
[93] MAINPROCESS(6) func<start> memcpy(as4_g_stationary_doa_line, stationary_doa_line, sizeof(S4)*N_DOA 
[94] MAINPROCESS(6) func<end> ); 
[95] MAINPROCESS(6) func<start> memcpy(as4_g_sot_limit_doa_line_backward, sot_limit_doa_line_backward, sizeof(S4)*N_DOA 
[96] MAINPROCESS(6) func<end> ); 
[97] MAINPROCESS(6) func<start> memset(as4_g_nearfield_doa, 0x00, sizeof(as4_g_nearfield_doa) 
[98] MAINPROCESS(6) func<end> ); 
[99] MAINPROCESS(6) for<start> for( 
[100] MAINPROCESS(6) for i=0; 
[101] MAINPROCESS(6) for i<SLOW_SOT_FREQ_BIN_RANGE; 
[102] MAINPROCESS(6) for i++) 
[103] MAINPROCESS(6) subproc SUBPROCESS(1) 
[104] SUBPROCESS(1) if<start> if( 
[105] SUBPROCESS(1) if nearfield_doa_i[i][0]!=-1 
[106] SUBPROCESS(1) if ) 
[107] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[108] SUBSUBPROCESS(1) equal as4_g_nearfield_doa[nearfield_doa_i[i][0]] SLOW_SOT_FREQ_BIN_START_I+i;
[109] SUBPROCESS(2) if<start> if( 
[110] SUBPROCESS(2) if nearfield_doa_q[i][0]!=-1 
[111] SUBPROCESS(2) if ) 
[112] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[113] SUBSUBPROCESS(1) equal as4_g_nearfield_doa[nearfield_doa_q[i][0]] SLOW_SOT_FREQ_BIN_START_Q-i;
[114] MAINPROCESS(7) func<start> fn_bsm_low_calc_deviation( 
[115] MAINPROCESS(7) func forward_priod, 
[116] MAINPROCESS(7) func nearfield_doa_i, 
[117] MAINPROCESS(7) func nearfield_doa_q, 
[118] MAINPROCESS(7) func (const S4 *)stationary_doa_line, 
[119] MAINPROCESS(7) func &backward_priod, 
[120] MAINPROCESS(7) func tmp_dev, 
[121] MAINPROCESS(7) func v0_doa, 
[122] MAINPROCESS(7) func &fast_sot_num, 
[123] MAINPROCESS(7) func &not_fast_sot_num, 
[124] MAINPROCESS(7) func afl_t_sot_check_object_i, 
[125] MAINPROCESS(7) func afl_t_sot_check_object_q 
[126] MAINPROCESS(7) func<end> ); 
[127] MAINPROCESS(7) func<start> fn_bsm_low_judge_sot( 
[128] MAINPROCESS(7) func stationary_doa_line, 
[129] MAINPROCESS(7) func sot_limit_doa_line_forward, 
[130] MAINPROCESS(7) func sot_limit_doa_line_backward, 
[131] MAINPROCESS(7) func (const S4 *)nearfield_doa_peak_num_i, 
[132] MAINPROCESS(7) func nearfield_doa_i, 
[133] MAINPROCESS(7) func (const S4 *)nearfield_doa_peak_num_q, 
[134] MAINPROCESS(7) func nearfield_doa_q, 
[135] MAINPROCESS(7) func forward_priod, 
[136] MAINPROCESS(7) func backward_priod, 
[137] MAINPROCESS(7) func tmp_dev, 
[138] MAINPROCESS(7) func &dev, 
[139] MAINPROCESS(7) func v0_doa, 
[140] MAINPROCESS(7) func u1_a_alarming_flag, 
[141] MAINPROCESS(7) func u1_t_num_nearfield_doa_2f_i, 
[142] MAINPROCESS(7) func u1_t_num_nearfield_doa_2f_q, 
[143] MAINPROCESS(7) func afl_t_sot_check_object_i, 
[144] MAINPROCESS(7) func afl_t_sot_check_object_q, 
[145] MAINPROCESS(7) func &u1_t_num_forward, 
[146] MAINPROCESS(7) func &u1_t_num_backward 
[147] MAINPROCESS(7) func<end> ); 
[148] MAINPROCESS(7) func<start> fn_bsm_low_judge_wall( 
[149] MAINPROCESS(7) func (const FL *)tmp_dev, 
[150] MAINPROCESS(7) func u1_t_num_nearfield_doa_2f_i, 
[151] MAINPROCESS(7) func u1_t_num_nearfield_doa_2f_q, 
[152] MAINPROCESS(7) func u1_t_num_forward, 
[153] MAINPROCESS(7) func u1_t_num_backward 
[154] MAINPROCESS(7) func<end> ); 
[155] MAINPROCESS(7) func<start> fn_bsm_low_judge_fast_sot( 
[156] MAINPROCESS(7) func fast_sot_num, 
[157] MAINPROCESS(7) func not_fast_sot_num, 
[158] MAINPROCESS(7) func u1_a_alarming_flag 
[159] MAINPROCESS(7) func<end> ); 
[160] MAINPROCESS(7) func<start> fn_bsm_low_judge_exist_leading_car_main((const S4 (*)[1])nearfield_doa_i, 
[161] MAINPROCESS(7) func (const S4 (*)[1])nearfield_doa_q, 
[162] MAINPROCESS(7) func (const FL (*)[4])afl_t_sot_check_object_i, 
[163] MAINPROCESS(7) func (const FL (*)[4])afl_t_sot_check_object_q 
[164] MAINPROCESS(7) func<end> ); 
[165] MAINPROCESS(7) proc return dev; 
----------------- Total Codes : 165 lines
--------------------------
[Function Name] : fn_bsm_low_calc_deviation 
-Return type : static VD 
-Argument : 11 
     [0] : S4   s4_a_forward_priod 
     [1] : S4   as4_a_nearfield_doa_i[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [2] : S4   as4_a_nearfield_doa_q[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [3] : const S4   as4_stationary_doa_line[N_DOA] 
     [4] : S4   *ps4_a_backward_priod 
     [5] : FL   afl_a_buf_dev[2] 
     [6] : S4   s4_a_v0_doa 
     [7] : S4   *ps4_a_fast_sot_num 
     [8] : S4   *ps4_a_not_fast_sot_num 
     [9] : FL   afl_a_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [10] : FL   afl_a_sot_check_object_q[SLOW_SOT_FREQ_BIN_RANGE][4] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 fast_sot_limit_line[N_DOA]; 
[2] MAINPROCESS(1) equal afl_a_buf_dev[0] 999.9F;
[3] MAINPROCESS(1) equal afl_a_buf_dev[1] 999.9F;
[4] MAINPROCESS(1) if<start> if( 
[5] MAINPROCESS(1) if fl_g_v_self_bsm_for_base>5.0F 
[6] MAINPROCESS(1) if ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] SUBSUBPROCESS(1) func<start> afl_a_buf_dev[0] = calc_deviation_of_doa_freq_line_stationary_2( 
[10] SUBSUBPROCESS(1) func (const S4 (*)[1])as4_a_nearfield_doa_i, 
[11] SUBSUBPROCESS(1) func SLOW_SOT_FREQ_BIN_START_I, 
[12] SUBSUBPROCESS(1) func (const S4 *)as4_stationary_doa_line, 
[13] SUBSUBPROCESS(1) func 0 
[14] SUBSUBPROCESS(1) func ,ps4_a_backward_priod 
[15] SUBSUBPROCESS(1) func ,s4_a_v0_doa 
[16] SUBSUBPROCESS(1) func ,ps4_a_fast_sot_num 
[17] SUBSUBPROCESS(1) func ,ps4_a_not_fast_sot_num 
[18] SUBSUBPROCESS(1) func ,fast_sot_limit_line 
[19] SUBSUBPROCESS(1) func ,(const FL (*)[4])afl_a_sot_check_object_i 
[20] SUBSUBPROCESS(1) func<end> ); 
[21] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[22] SUBSUBPROCESS(1) func<start> afl_a_buf_dev[1] = calc_deviation_of_doa_freq_line_stationary_2( 
[23] SUBSUBPROCESS(1) func (const S4 (*)[1])as4_a_nearfield_doa_q, 
[24] SUBSUBPROCESS(1) func SLOW_SOT_FREQ_BIN_START_Q-SLOW_SOT_FREQ_BIN_RANGE, 
[25] SUBSUBPROCESS(1) func (const S4 *)as4_stationary_doa_line, 
[26] SUBSUBPROCESS(1) func 1 
[27] SUBSUBPROCESS(1) func ,ps4_a_backward_priod 
[28] SUBSUBPROCESS(1) func ,s4_a_v0_doa 
[29] SUBSUBPROCESS(1) func ,ps4_a_fast_sot_num 
[30] SUBSUBPROCESS(1) func ,ps4_a_not_fast_sot_num 
[31] SUBSUBPROCESS(1) func ,fast_sot_limit_line 
[32] SUBSUBPROCESS(1) func ,(const FL (*)[4])afl_a_sot_check_object_q 
[33] SUBSUBPROCESS(1) func<end> ); 
[34] MAINPROCESS(2) proc return; 
----------------- Total Codes : 34 lines
--------------------------
[Function Name] : fn_bsm_low_judge_sot 
-Return type : static VD 
-Argument : 19 
     [0] : S4   as4_stationary_doa_line[N_DOA] 
     [1] : S4   as4_sot_limit_doa_line_forward[N_DOA] 
     [2] : S4   as4_sot_limit_doa_line_backward[N_DOA] 
     [3] : const S4   as4_a_nearfield_doa_peak_num_i[SLOW_SOT_FREQ_BIN_RANGE] 
     [4] : S4   as4_a_nearfield_doa_i[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [5] : const S4   as4_a_nearfield_doa_peak_num_q[SLOW_SOT_FREQ_BIN_RANGE] 
     [6] : S4   as4_a_nearfield_doa_q[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [7] : S4   s4_a_forward_priod 
     [8] : S4   s4_a_backward_priod 
     [9] : FL   afl_a_buf_dev[2] 
     [10] : FL   *pfl_a_dev 
     [11] : S4   v0_doa 
     [12] : U1   u1_a_alarming_flag 
     [13] : U1   u1_a_num_nearfield_doa_2f_i 
     [14] : U1   u1_a_num_nearfield_doa_2f_q 
     [15] : FL   afl_a_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [16] : FL   afl_a_sot_check_object_q[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [17] : U1*   pu1_a_num_forward 
     [18] : U1*   pu1_a_num_backward 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) proc S4 k; 
[4] MAINPROCESS(1) proc S4 sot_stop; 
[5] MAINPROCESS(1) proc FL fl_t_fast_sot_pow; 
[6] MAINPROCESS(1) proc U1 u1_t_lp_front_back; 
[7] MAINPROCESS(1) proc U1 u1_t_lp_sot; 
[8] MAINPROCESS(1) proc S1 s1_t_lp_data; 
[9] MAINPROCESS(1) proc U4 u4_t_lp_target; 
[10] MAINPROCESS(1) proc U1 u1_t_flg_exist_object; 
[11] MAINPROCESS(1) proc U4 u4_t_lp_max_target_num; 
[12] MAINPROCESS(1) proc U1 u1_t_tos_flg; 
[13] MAINPROCESS(1) proc U1 u1_t_num_i; 
[14] MAINPROCESS(1) proc U1 u1_t_num_q; 
[15] MAINPROCESS(1) proc U1 u1_t_tos_end_flg; 
[16] MAINPROCESS(1) proc FL fl_t_ave_i_y; 
[17] MAINPROCESS(1) proc U1 u1_t_noise_flg; 
[18] MAINPROCESS(1) equal fl_t_ave_i_y (FL)10000.0F;
[19] MAINPROCESS(1) equal u1_t_noise_flg (U1)0;
[20] MAINPROCESS(1) equal u1_t_flg_exist_object CU1_DF_OFF;
[21] MAINPROCESS(1) if<start> if( 
[22] MAINPROCESS(1) if s4_a_backward_priod==0 
[23] MAINPROCESS(1) if ) 
[24] MAINPROCESS(1) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) equal *pfl_a_dev afl_a_buf_dev[0];
[26] MAINPROCESS(2) else<start> else 
[27] MAINPROCESS(2) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) equal *pfl_a_dev afl_a_buf_dev[1];
[29] MAINPROCESS(3) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[4] (S4)afl_a_buf_dev[0];
[30] MAINPROCESS(3) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[5] (S4)afl_a_buf_dev[1];
[31] MAINPROCESS(3) if <start> if ( 
[32] MAINPROCESS(3) if  st_g_bsm_loop_data.as4_buf_pair_num[1] > (S4)TARGET_BUFFSIZE 
[33] MAINPROCESS(3) if  ) 
[34] MAINPROCESS(3) subproc SUBPROCESS(1) 
[35] SUBPROCESS(1) equal u4_t_lp_max_target_num (U4)TARGET_BUFFSIZE;
[36] MAINPROCESS(4) else<start> else 
[37] MAINPROCESS(4) subproc SUBPROCESS(1) 
[38] SUBPROCESS(1) equal u4_t_lp_max_target_num (U4)st_g_bsm_loop_data.as4_buf_pair_num[1];
[39] MAINPROCESS(5) for <start> for ( 
[40] MAINPROCESS(5) for  u4_t_lp_target = (U4)0; 
[41] MAINPROCESS(5) for  u4_t_lp_target < u4_t_lp_max_target_num; 
[42] MAINPROCESS(5) for  u4_t_lp_target++) 
[43] MAINPROCESS(5) subproc SUBPROCESS(1) 
[44] SUBPROCESS(1) if <start> if ( 
[45] SUBPROCESS(1) if  (st_g_bsm_loop_data.ast_target[u4_t_lp_target].fl_Ryfil > (FL)-20.0F 
[46] SUBPROCESS(1) if  ) 
[47] SUBPROCESS(1) if  &&	(st_g_bsm_loop_data.ast_target[u4_t_lp_target].fl_Rxfil > (FL)1.75F)) 
[48] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[49] SUBSUBPROCESS(1) equal u1_t_flg_exist_object CU1_DF_ON;
[50] SUBSUBPROCESS(1) proc break; 
[51] MAINPROCESS(6) if <start> if ( 
[52] MAINPROCESS(6) if  u1_t_flg_exist_object == CU1_DF_ON 
[53] MAINPROCESS(6) if  ) 
[54] MAINPROCESS(6) subproc SUBPROCESS(1) 
[55] SUBPROCESS(1) func<start> st_g_bsm_loop_data.u1_count_adjacent_lane_exist = (U1)u2_data_add((U2)st_g_bsm_loop_data.u1_count_adjacent_lane_exist, (S2)1, (U2)20, (U2)0 
[56] SUBPROCESS(1) func<end> ); 
[57] MAINPROCESS(7) else<start> else 
[58] MAINPROCESS(7) subproc SUBPROCESS(1) 
[59] SUBPROCESS(1) func<start> st_g_bsm_loop_data.u1_count_adjacent_lane_exist = (U1)u2_data_add((U2)st_g_bsm_loop_data.u1_count_adjacent_lane_exist, (S2)-1, (U2)20, (U2)0 
[60] SUBPROCESS(1) func<end> ); 
[61] MAINPROCESS(8) for <start> for ( 
[62] MAINPROCESS(8) for  u1_t_lp_front_back = (U1)0; 
[63] MAINPROCESS(8) for  u1_t_lp_front_back < (U1)2; 
[64] MAINPROCESS(8) for  u1_t_lp_front_back++) 
[65] MAINPROCESS(8) subproc SUBPROCESS(1) 
[66] SUBPROCESS(1) for <start> for ( 
[67] SUBPROCESS(1) for  u1_t_lp_sot = (U1)0; 
[68] SUBPROCESS(1) for  u1_t_lp_sot < (U1)3; 
[69] SUBPROCESS(1) for  u1_t_lp_sot++) 
[70] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[71] SUBSUBPROCESS(1) for <start> for ( 
[72] SUBSUBPROCESS(1) for  s1_t_lp_data = (S1)10; 
[73] SUBSUBPROCESS(1) for  s1_t_lp_data > (S1)0;
[74] SUBSUBPROCESS(1) for  s1_t_lp_data--) 
[75] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[76] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_sot_check_sum[u1_t_lp_front_back][u1_t_lp_sot][s1_t_lp_data + 1] st_g_bsm_loop_data.as4_sot_check_sum[u1_t_lp_front_back][u1_t_lp_sot][s1_t_lp_data];
[77] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_sot_check_points[u1_t_lp_front_back][u1_t_lp_sot][s1_t_lp_data + 1] st_g_bsm_loop_data.as4_sot_check_points[u1_t_lp_front_back][u1_t_lp_sot][s1_t_lp_data];
[78] SUBSUBPROCESS(2) equal st_g_bsm_loop_data.as4_sot_check_sum[u1_t_lp_front_back][u1_t_lp_sot][0] (S4)0;
[79] SUBSUBPROCESS(2) equal st_g_bsm_loop_data.as4_sot_check_points[u1_t_lp_front_back][u1_t_lp_sot][0] (S4)0;
[80] MAINPROCESS(9) func<start> st_g_bsm_loop_data.as4_slow_sot_find[1] = s4_bsm_low_judge_sot_jdg_noise_flg(afl_a_sot_check_object_i, 
[81] MAINPROCESS(9) func afl_a_buf_dev, 
[82] MAINPROCESS(9) func st_g_bsm_loop_data.as4_slow_sot_find[1], 
[83] MAINPROCESS(9) func &fl_t_ave_i_y, 
[84] MAINPROCESS(9) func &u1_t_noise_flg 
[85] MAINPROCESS(9) func<end> ); 
[86] MAINPROCESS(9) if <start> if ( 
[87] MAINPROCESS(9) if  (afl_a_buf_dev[0] > CFL_SOT_DEV_TH 
[88] MAINPROCESS(9) if  ) 
[89] MAINPROCESS(9) if  ||  (st_g_bsm_loop_data.as4_slow_sot_find[1] < WALL_REJECT_TH3) 
[90] MAINPROCESS(9) if  ||  ((st_g_bsm_loop_data.as4_slow_sot_find[1] < WALL_REJECT_TH1) 
[91] MAINPROCESS(9) if  &&   (u1_a_alarming_flag != (U1)0))) 
[92] MAINPROCESS(9) subproc SUBPROCESS(1) 
[93] SUBPROCESS(1) if <start> if ( 
[94] SUBPROCESS(1) if  (fl_g_v_self_bsm_for_base > CFL_CANOUT_VSELF_MIN 
[95] SUBPROCESS(1) if  ) 
[96] SUBPROCESS(1) if  &&  (s4_abs( s2_g_curvr_for_base ) > (S4)CU1_CANOUT_CURVER_MIN_SOT) 
[97] SUBPROCESS(1) if  &&  (u1_a_num_nearfield_doa_2f_i > (U1)3) 
[98] SUBPROCESS(1) if  &&  (u1_a_num_nearfield_doa_2f_q > (U1)3)) 
[99] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[100] SUBSUBPROCESS(1) func<start> *pu1_a_num_forward = compare_forward_always_2( 
[101] SUBSUBPROCESS(1) func (const S4 (*)[1])as4_a_nearfield_doa_i, 
[102] SUBSUBPROCESS(1) func (const S4 *)as4_a_nearfield_doa_peak_num_i, 
[103] SUBSUBPROCESS(1) func (const S4 *)as4_stationary_doa_line, 
[104] SUBSUBPROCESS(1) func v0_doa, 
[105] SUBSUBPROCESS(1) func (const FL (*)[4])afl_a_sot_check_object_i 
[106] SUBSUBPROCESS(1) func<end> ); 
[107] SUBSUBPROCESS(1) func<start> *pu1_a_num_backward = compare_backward_always_2( 
[108] SUBSUBPROCESS(1) func (const S4 (*)[1])as4_a_nearfield_doa_q, 
[109] SUBSUBPROCESS(1) func (const S4 *)as4_a_nearfield_doa_peak_num_q, 
[110] SUBSUBPROCESS(1) func as4_stationary_doa_line, 
[111] SUBSUBPROCESS(1) func as4_sot_limit_doa_line_backward, 
[112] SUBSUBPROCESS(1) func v0_doa, 
[113] SUBSUBPROCESS(1) func CFL_SoT_V_TH_BWD, 
[114] SUBSUBPROCESS(1) func (const FL (*)[4])afl_a_sot_check_object_q 
[115] SUBSUBPROCESS(1) func<end> ); 
[116] SUBSUBPROCESS(1) func<start> fn_bsm_low_judge_check_tos(afl_a_sot_check_object_i, 
[117] SUBSUBPROCESS(1) func afl_a_sot_check_object_q, 
[118] SUBSUBPROCESS(1) func &u1_t_tos_end_flg, 
[119] SUBSUBPROCESS(1) func &u1_t_num_i, 
[120] SUBSUBPROCESS(1) func &u1_t_num_q, 
[121] SUBSUBPROCESS(1) func &u1_t_tos_flg 
[122] SUBSUBPROCESS(1) func<end> ); 
[123] SUBSUBPROCESS(1) if <start> if ( 
[124] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] == 0 
[125] SUBSUBPROCESS(1) if  ) 
[126] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[127] SUBSUBSUBPROCESS(1) if <start> if ( 
[128] SUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_slow_sot_find[0] == 0 
[129] SUBSUBSUBPROCESS(1) if  ) 
[130] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[131] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[132] SUBSUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.afl_wall_width[0] > WALL_WIDTH_TH 
[133] SUBSUBSUBSUBPROCESS(1) if  ) 
[134] SUBSUBSUBSUBPROCESS(1) if  &&  (afl_a_buf_dev[0] > WALL_DEV_TH2) 
[135] SUBSUBSUBSUBPROCESS(1) if  &&  (afl_a_buf_dev[1] > WALL_DEV_TH2) 
[136] SUBSUBSUBSUBPROCESS(1) if  &&  ((*pu1_a_num_forward > (U1)2) 
[137] SUBSUBSUBSUBPROCESS(1) if  ||   (*pu1_a_num_backward > (U1)2)) 
[138] SUBSUBSUBSUBPROCESS(1) if  &&  (u1_t_tos_end_flg == (U1)0) 
[139] SUBSUBSUBSUBPROCESS(1) if  &&  (u1_t_noise_flg == (U1)0)) 
[140] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[141] SUBSUBSUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[0] = check_sot_start( 
[142] SUBSUBSUBSUBSUBPROCESS(1) func afl_a_buf_dev, u1_a_alarming_flag 
[143] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[144] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[145] SUBSUBSUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[0] == 1 
[146] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[147] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[148] SUBSUBSUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_low_judge_check_sot_doa(&fl_t_fast_sot_pow 
[149] SUBSUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[150] SUBSUBSUBSUBSUBPROCESS(2) else<start> else 
[151] SUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[152] SUBSUBSUBSUBSUBSUBPROCESS(1) equal fl_t_fast_sot_pow (FL)0.0F;
[153] SUBSUBSUBPROCESS(2) else<start> else 
[154] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[155] SUBSUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[2] = check_sot_off( 
[156] SUBSUBSUBSUBPROCESS(1) func (const FL *)afl_a_buf_dev 
[157] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[158] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[159] SUBSUBSUBSUBPROCESS(1) if  (u1_a_num_nearfield_doa_2f_i < (U1)3 
[160] SUBSUBSUBSUBPROCESS(1) if  ) 
[161] SUBSUBSUBSUBPROCESS(1) if  ||  (u1_a_num_nearfield_doa_2f_q < (U1)3)) 
[162] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[163] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[2] (S4)0;
[164] SUBSUBSUBSUBPROCESS(2) if <start> if ( 
[165] SUBSUBSUBSUBPROCESS(2) if  (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[2] == 1 
[166] SUBSUBSUBSUBPROCESS(2) if  ) 
[167] SUBSUBSUBSUBPROCESS(2) if  ||  (st_g_bsm_loop_data.as4_slow_sot_find[1] > WALL_REJECT_TH1)) 
[168] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[169] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[0] 0;
[170] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[0] (S4)0;
[171] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[1] (S4)0;
[172] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[2] (S4)0;
[173] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] (S4)0;
[174] SUBSUBSUBSUBSUBPROCESS(1) equal fl_t_fast_sot_pow (FL)0.0F;
[175] SUBSUBPROCESS(2) else<start> else 
[176] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[177] SUBSUBSUBPROCESS(1) if <start> if ( 
[178] SUBSUBSUBPROCESS(1) if  u1_a_alarming_flag == (U1)0 
[179] SUBSUBSUBPROCESS(1) if  ) 
[180] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[181] SUBSUBSUBPROCESS(2) else<start> else 
[182] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[183] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[184] SUBSUBSUBSUBPROCESS(1) if  ((u1_t_num_i > (U1)9 
[185] SUBSUBSUBSUBPROCESS(1) if  ) 
[186] SUBSUBSUBSUBPROCESS(1) if  &&   (u1_t_num_q > (U1)9) 
[187] SUBSUBSUBSUBPROCESS(1) if  &&   (u1_t_tos_flg == (U1)1)) 
[188] SUBSUBSUBSUBPROCESS(1) if  ||  ((fl_t_ave_i_y < (FL)10000.0F) 
[189] SUBSUBSUBSUBPROCESS(1) if  &&   (fl_t_ave_i_y > (FL)2.0F))) 
[190] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[191] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[0] (S4)0;
[192] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[0] (S4)0;
[193] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[1] (S4)0;
[194] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[2] (S4)0;
[195] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] (S4)0;
[196] SUBSUBPROCESS(3) if<start> if( 
[197] SUBSUBPROCESS(3) if st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] == (S4)0 
[198] SUBSUBPROCESS(3) if ) 
[199] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[200] SUBSUBPROCESS(4) else<start> else 
[201] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[202] SUBSUBSUBPROCESS(1) func<start> sot_stop = check_sot_stop( 
[203] SUBSUBSUBPROCESS(1) func (const FL *)afl_a_buf_dev 
[204] SUBSUBSUBPROCESS(1) func<end> ); 
[205] SUBSUBSUBPROCESS(1) if <start> if ( 
[206] SUBSUBSUBPROCESS(1) if  u1_t_noise_flg == (U1)1 
[207] SUBSUBSUBPROCESS(1) if  ) 
[208] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[209] SUBSUBSUBSUBPROCESS(1) equal sot_stop (S4)1;
[210] SUBSUBSUBPROCESS(2) if <start> if ( 
[211] SUBSUBSUBPROCESS(2) if  sot_stop == 0 
[212] SUBSUBSUBPROCESS(2) if  ) 
[213] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[214] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[215] SUBSUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] == CS4_S4MIN 
[216] SUBSUBSUBSUBPROCESS(1) if  ) 
[217] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[218] SUBSUBSUBSUBPROCESS(2) else<start> else 
[219] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[220] SUBSUBSUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3]--; 
[221] SUBSUBSUBPROCESS(3) else<start> else 
[222] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[223] SUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] 0;
[224] SUBSUBSUBPROCESS(4) if <start> if ( 
[225] SUBSUBSUBPROCESS(4) if  ((st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] == 0 
[226] SUBSUBSUBPROCESS(4) if  ) 
[227] SUBSUBSUBPROCESS(4) if  &&   (sot_stop == 0)) 
[228] SUBSUBSUBPROCESS(4) if  ||  ((fl_g_v_self_bsm_for_base < CFL_SoT_V_TH_BWD) 
[229] SUBSUBSUBPROCESS(4) if  &&   (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] != 0) 
[230] SUBSUBSUBPROCESS(4) if  &&   (sot_stop == 0))) 
[231] SUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBPROCESS(1) 
[232] SUBSUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[1] = check_sot_on( 
[233] SUBSUBSUBSUBPROCESS(1) func (const FL *)afl_a_buf_dev 
[234] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[235] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[236] SUBSUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] != 0 
[237] SUBSUBSUBSUBPROCESS(1) if  ) 
[238] SUBSUBSUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[1] == 1)) 
[239] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[240] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_sot_check_points[1][2][0] st_g_bsm_loop_data.as4_sot_check_points[1][2][1] + 1;
[241] SUBSUBSUBSUBPROCESS(2) else<start> else 
[242] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[243] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_sot_check_points[1][2][0] st_g_bsm_loop_data.as4_sot_check_points[1][2][1];
[244] SUBSUBSUBSUBPROCESS(3) if <start> if ( 
[245] SUBSUBSUBSUBPROCESS(3) if  fl_g_v_self_bsm_for_base < CFL_SoT_V_TH_BWD 
[246] SUBSUBSUBSUBPROCESS(3) if  ) 
[247] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[248] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[249] SUBSUBSUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_sot_check_points[1][2][0] > 5 
[250] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[251] SUBSUBSUBSUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[1] < WALL_REJECT_TH3) 
[252] SUBSUBSUBSUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] == 0)) 
[253] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[254] SUBSUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[0] 1;
[255] SUBSUBSUBSUBPROCESS(4) else<start> else 
[256] SUBSUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[257] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[258] SUBSUBSUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] == 0 
[259] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[260] SUBSUBSUBSUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[1] == 1)) 
[261] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[262] SUBSUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[0] 1;
[263] SUBSUBSUBSUBPROCESS(5) if <start> if ( 
[264] SUBSUBSUBSUBPROCESS(5) if  st_g_bsm_loop_data.as4_fast_sot_flg[0] > (S4)0 
[265] SUBSUBSUBSUBPROCESS(5) if  ) 
[266] SUBSUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[267] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[0] (S4)0;
[268] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[0] (S4)0;
[269] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[1] (S4)0;
[270] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[2] (S4)0;
[271] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] (S4)0;
[272] SUBSUBSUBSUBSUBPROCESS(1) equal fl_t_fast_sot_pow (FL)0.0F;
[273] SUBPROCESS(2) else<start> else 
[274] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[275] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[0] 0;
[276] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[0] 0;
[277] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[1] 0;
[278] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[2] 0;
[279] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] 0;
[280] SUBSUBPROCESS(1) for<start> for( 
[281] SUBSUBPROCESS(1) for i=0; 
[282] SUBSUBPROCESS(1) for i<12; 
[283] SUBSUBPROCESS(1) for i++) 
[284] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[285] SUBSUBSUBPROCESS(1) for<start> for( 
[286] SUBSUBSUBPROCESS(1) for j=0; 
[287] SUBSUBSUBPROCESS(1) for j<3; 
[288] SUBSUBSUBPROCESS(1) for j++) 
[289] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[290] SUBSUBSUBSUBPROCESS(1) for<start> for( 
[291] SUBSUBSUBSUBPROCESS(1) for k=0; 
[292] SUBSUBSUBSUBPROCESS(1) for k<2; 
[293] SUBSUBSUBSUBPROCESS(1) for k++) 
[294] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[295] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_sot_check_sum[k][j][i] 0;
[296] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_sot_check_points[k][j][i] 0;
[297] MAINPROCESS(10) else<start> else 
[298] MAINPROCESS(10) subproc SUBPROCESS(1) 
[299] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[0] 0;
[300] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[0] 0;
[301] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[1] 0;
[302] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[2] 0;
[303] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] 0;
[304] SUBPROCESS(1) equal fl_t_fast_sot_pow (FL)0.0F;
[305] MAINPROCESS(11) proc return; 
----------------- Total Codes : 305 lines
--------------------------
[Function Name] : fn_bsm_low_judge_check_tos 
-Return type : VD 
-Argument : 6 
     [0] : FL   afl_a_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [1] : FL   afl_a_sot_check_object_q[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [2] : U1*   pu1_a_tos_end_flg 
     [3] : U1*   pu1_a_num_i 
     [4] : U1*   pu1_a_num_q 
     [5] : U1*   pu1_a_tos_flg 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_lp_target_num; 
[2] MAINPROCESS(1) proc U1 u1_t_lp_slow_sot_freq_bin_range; 
[3] MAINPROCESS(1) equal *pu1_a_tos_flg (U1)0;
[4] MAINPROCESS(1) for <start> for ( 
[5] MAINPROCESS(1) for  u1_t_lp_target_num = (U1)0; 
[6] MAINPROCESS(1) for  u1_t_lp_target_num < TARGET_BUFFSIZE; 
[7] MAINPROCESS(1) for  u1_t_lp_target_num++) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if <start> if ( 
[10] SUBPROCESS(1) if  st_g_bsm_alarm_data.afl_alarmed_target[u1_t_lp_target_num][4] == (FL)1.0F 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) equal *pu1_a_tos_flg (U1)1;
[14] SUBSUBPROCESS(1) proc break; 
[15] MAINPROCESS(2) for <start> for ( 
[16] MAINPROCESS(2) for  u1_t_lp_slow_sot_freq_bin_range = (U1)0; 
[17] MAINPROCESS(2) for  u1_t_lp_slow_sot_freq_bin_range < SLOW_SOT_FREQ_BIN_RANGE; 
[18] MAINPROCESS(2) for  u1_t_lp_slow_sot_freq_bin_range++) 
[19] MAINPROCESS(2) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) if <start> if ( 
[21] SUBPROCESS(1) if  (afl_a_sot_check_object_i[u1_t_lp_slow_sot_freq_bin_range][0] != CFL_UNKNOWN_VALUE 
[22] SUBPROCESS(1) if  ) 
[23] SUBPROCESS(1) if  &&  (afl_a_sot_check_object_i[u1_t_lp_slow_sot_freq_bin_range][1] > (FL)0.5F)) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(1) proc (*pu1_a_num_i)++; 
[26] SUBPROCESS(2) if <start> if ( 
[27] SUBPROCESS(2) if  (afl_a_sot_check_object_q[u1_t_lp_slow_sot_freq_bin_range][0] != CFL_UNKNOWN_VALUE 
[28] SUBPROCESS(2) if  ) 
[29] SUBPROCESS(2) if  &&  (afl_a_sot_check_object_q[u1_t_lp_slow_sot_freq_bin_range][1] > (FL)0.5F)) 
[30] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) proc (*pu1_a_num_q)++; 
[32] MAINPROCESS(3) if <start> if ( 
[33] MAINPROCESS(3) if  (*pu1_a_num_i > (U1)9 
[34] MAINPROCESS(3) if  ) 
[35] MAINPROCESS(3) if  &&  (*pu1_a_num_q > (U1)9) 
[36] MAINPROCESS(3) if  &&  ((st_g_bsm_loop_data.as4_flg_tos_end[0] != (U1)0) 
[37] MAINPROCESS(3) if  ||   (*pu1_a_tos_flg == (U1)1))) 
[38] MAINPROCESS(3) subproc SUBPROCESS(1) 
[39] SUBPROCESS(1) equal *pu1_a_tos_end_flg (U1)1;
[40] MAINPROCESS(4) proc return; 
----------------- Total Codes : 40 lines
--------------------------
[Function Name] : s4_bsm_low_judge_sot_jdg_noise_flg 
-Return type : static S4 
-Argument : 5 
     [0] : FL   afl_a_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [1] : FL   afl_a_buf_dev[2] 
     [2] : S4   s4_a_slow_sot_find1_pre 
     [3] : FL*   pfl_a_ave_i_y 
     [4] : U1*   pu1_a_noise_flg 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_sum_i_y; 
[2] MAINPROCESS(1) proc FL fl_t_sum_i_y2; 
[3] MAINPROCESS(1) proc FL fl_t_ave_i_y; 
[4] MAINPROCESS(1) proc FL fl_t_var_i_y; 
[5] MAINPROCESS(1) proc U1 u1_t_n_i; 
[6] MAINPROCESS(1) proc U1 u1_t_noise_flg; 
[7] MAINPROCESS(1) proc S4 s4_t_flg_sot_find1; 
[8] MAINPROCESS(1) proc U1 u1_t_lp_bin_range; 
[9] MAINPROCESS(1) proc S4 s4_t_curvr_for_base_abs; 
[10] MAINPROCESS(1) equal fl_t_sum_i_y (FL)0.0F;
[11] MAINPROCESS(1) equal fl_t_sum_i_y2 (FL)0.0F;
[12] MAINPROCESS(1) equal fl_t_ave_i_y (FL)10000.0F;
[13] MAINPROCESS(1) equal fl_t_var_i_y (FL)10000.0F;
[14] MAINPROCESS(1) equal u1_t_n_i (U1)0;
[15] MAINPROCESS(1) equal u1_t_noise_flg (U1)0;
[16] MAINPROCESS(1) equal s4_t_flg_sot_find1 s4_a_slow_sot_find1_pre;
[17] MAINPROCESS(1) func<start> s4_t_curvr_for_base_abs = s4_abs((S4)s2_g_curvr_for_base 
[18] MAINPROCESS(1) func<end> ); 
[19] MAINPROCESS(1) if <start> if ( 
[20] MAINPROCESS(1) if  (CFL_CANOUT_VSELF_MIN <= fl_g_v_self_bsm_for_base 
[21] MAINPROCESS(1) if  ) 
[22] MAINPROCESS(1) if  &&  (fl_g_v_self_bsm_for_base < (FL)CU1_HEISOU_VSELF_MAX) 
[23] MAINPROCESS(1) if  &&  (s4_t_curvr_for_base_abs >= (S4)CANOUT_CURVER_MIN)) 
[24] MAINPROCESS(1) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) for <start> for ( 
[26] SUBPROCESS(1) for  u1_t_lp_bin_range = (U1)0; 
[27] SUBPROCESS(1) for  u1_t_lp_bin_range < (U1)SLOW_SOT_FREQ_BIN_RANGE; 
[28] SUBPROCESS(1) for  u1_t_lp_bin_range++) 
[29] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[30] SUBSUBPROCESS(1) if <start> if ( 
[31] SUBSUBPROCESS(1) if  afl_a_sot_check_object_i[u1_t_lp_bin_range][0] != CFL_UNKNOWN_VALUE 
[32] SUBSUBPROCESS(1) if  ) 
[33] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[34] SUBSUBSUBPROCESS(1) proc u1_t_n_i++; 
[35] SUBSUBSUBPROCESS(1) equal fl_t_sum_i_y + afl_a_sot_check_object_i[u1_t_lp_bin_range][1];
[36] SUBSUBSUBPROCESS(1) func<start> fl_t_sum_i_y2 += (afl_a_sot_check_object_i[u1_t_lp_bin_range][1] * afl_a_sot_check_object_i[u1_t_lp_bin_range][1] 
[37] SUBSUBSUBPROCESS(1) func<end> ); 
[38] SUBSUBPROCESS(2) else<start> else 
[39] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[40] SUBSUBSUBPROCESS(1) proc break; 
[41] SUBPROCESS(2) if <start> if ( 
[42] SUBPROCESS(2) if  u1_t_n_i > (U1)0 
[43] SUBPROCESS(2) if  ) 
[44] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[45] SUBSUBPROCESS(1) equal fl_t_ave_i_y fl_t_sum_i_y / (FL)u1_t_n_i;
[46] SUBSUBPROCESS(1) func<start> fl_t_var_i_y = (fl_t_sum_i_y2 / (FL)u1_t_n_i) - (fl_t_ave_i_y * fl_t_ave_i_y 
[47] SUBSUBPROCESS(1) func<end> ); 
[48] SUBPROCESS(3) if <start> if ( 
[49] SUBPROCESS(3) if  (afl_a_buf_dev[0] > (FL)WALL_DEV_TH7 
[50] SUBPROCESS(3) if  ) 
[51] SUBPROCESS(3) if  &&  (afl_a_buf_dev[0] != (FL)999.9F)) 
[52] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[53] SUBSUBPROCESS(1) if <start> if ( 
[54] SUBSUBPROCESS(1) if  (fl_t_var_i_y > (FL)5.0F 
[55] SUBSUBPROCESS(1) if  ) 
[56] SUBSUBPROCESS(1) if  &&  (fl_t_ave_i_y < (FL)2.0F)) 
[57] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[58] SUBSUBSUBPROCESS(1) equal u1_t_noise_flg (U1)1;
[59] SUBPROCESS(4) else<start> else 
[60] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[61] SUBSUBPROCESS(1) if <start> if ( 
[62] SUBSUBPROCESS(1) if  (fl_t_ave_i_y > (FL)0.5F 
[63] SUBSUBPROCESS(1) if  ) 
[64] SUBSUBPROCESS(1) if  &&  (fl_t_ave_i_y < (FL)2.0F) 
[65] SUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.s4_flg_alarm != (S4)0) 
[66] SUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_flg_leading[0] != (S4)0)) 
[67] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[68] SUBSUBSUBPROCESS(1) equal s4_t_flg_sot_find1 (S4)0;
[69] MAINPROCESS(2) proc return s4_t_flg_sot_find1; 
----------------- Total Codes : 69 lines
--------------------------
[Function Name] : fn_bsm_low_judge_wall 
-Return type : static VD 
-Argument : 5 
     [0] : const FL   afl_a_buf_dev[2] 
     [1] : U1   u1_a_num_nearfield_doa_2f_i 
     [2] : U1   u1_a_num_nearfield_doa_2f_q 
     [3] : U1   u1_a_num_forward 
     [4] : U1   u1_a_num_backward 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) equal S4 backward_point 0;
[4] MAINPROCESS(1) equal S4 backward_point_th 3;
[5] MAINPROCESS(1) equal S4 forward_point 0;
[6] MAINPROCESS(1) proc S4 s4_t_point_num; 
[7] MAINPROCESS(1) proc U1 u1_t_tos_flag; 
[8] MAINPROCESS(1) proc U1 u1_t_wall_checked_flag; 
[9] MAINPROCESS(1) equal u1_t_wall_checked_flag (U1)0;
[10] MAINPROCESS(1) equal u1_t_tos_flag (U1)0;
[11] MAINPROCESS(1) if<start> if( 
[12] MAINPROCESS(1) if fl_g_v_self_bsm_for_base < 15.0F 
[13] MAINPROCESS(1) if ) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal backward_point_th 1;
[16] MAINPROCESS(2) for<start> for( 
[17] MAINPROCESS(2) for i=0; 
[18] MAINPROCESS(2) for i<12; 
[19] MAINPROCESS(2) for i++) 
[20] MAINPROCESS(2) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) if <start> if ( 
[22] SUBPROCESS(1) if  (st_g_bsm_loop_data.as4_sot_check_points[1][0][i] > backward_point_th 
[23] SUBPROCESS(1) if  ) 
[24] SUBPROCESS(1) if  ||  (st_g_bsm_loop_data.as4_sot_check_points[1][1][i] > backward_point_th)) 
[25] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[26] SUBSUBPROCESS(1) proc backward_point++; 
[27] MAINPROCESS(3) for <start> for ( 
[28] MAINPROCESS(3) for  i = (S4)0; 
[29] MAINPROCESS(3) for  i < (S4)12; 
[30] MAINPROCESS(3) for  i++) 
[31] MAINPROCESS(3) subproc SUBPROCESS(1) 
[32] SUBPROCESS(1) equal s4_t_point_num st_g_bsm_loop_data.as4_sot_check_points[0][0][i] + st_g_bsm_loop_data.as4_sot_check_points[0][1][i] + st_g_bsm_loop_data.as4_sot_check_points[0][2][i];
[33] SUBPROCESS(1) if <start> if ( 
[34] SUBPROCESS(1) if  s4_t_point_num != (S4)0 
[35] SUBPROCESS(1) if  ) 
[36] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[37] SUBSUBPROCESS(1) if <start> if ( 
[38] SUBSUBPROCESS(1) if  ((FL)st_g_bsm_loop_data.as4_sot_check_sum[0][0][i] / (FL)s4_t_point_num) > (FL)3.0F 
[39] SUBSUBPROCESS(1) if  ) 
[40] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[41] SUBSUBSUBPROCESS(1) proc forward_point++; 
[42] MAINPROCESS(4) if <start> if ( 
[43] MAINPROCESS(4) if  (afl_a_buf_dev[0] < WALL_DEV_TH5 
[44] MAINPROCESS(4) if  ) 
[45] MAINPROCESS(4) if  &&  ((afl_a_buf_dev[1] != (FL)999.9F) 
[46] MAINPROCESS(4) if  ||   (backward_point == (S4)0))) 
[47] MAINPROCESS(4) subproc SUBPROCESS(1) 
[48] SUBPROCESS(1) func<start> fn_bsm_low_judge_wall_forward_deviation_small((const FL *)afl_a_buf_dev, forward_point, backward_point 
[49] SUBPROCESS(1) func<end> ); 
[50] MAINPROCESS(5) else<start> else 
[51] MAINPROCESS(5) subproc SUBPROCESS(1) 
[52] SUBPROCESS(1) if <start> if ( 
[53] SUBPROCESS(1) if  afl_a_buf_dev[0] != (FL)999.9F 
[54] SUBPROCESS(1) if  ) 
[55] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[56] SUBSUBPROCESS(1) func<start> fn_bsm_low_judge_wall_forward_deviation_big((const FL *)afl_a_buf_dev, forward_point 
[57] SUBSUBPROCESS(1) func<end> ); 
[58] SUBPROCESS(2) else<start> else 
[59] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[60] SUBSUBPROCESS(1) if <start> if ( 
[61] SUBSUBPROCESS(1) if  fl_g_v_self_bsm_for_base < (FL)20.0F 
[62] SUBSUBPROCESS(1) if  ) 
[63] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[64] SUBSUBSUBPROCESS(1) func<start> fn_bsm_low_judge_wall_when_low_speed((const FL *)afl_a_buf_dev, backward_point 
[65] SUBSUBSUBPROCESS(1) func<end> ); 
[66] SUBSUBPROCESS(2) else<start> else 
[67] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[68] SUBSUBSUBPROCESS(1) func<start> fn_bsm_low_judge_wall_when_not_low_speed((const FL *)afl_a_buf_dev, forward_point, &u1_t_wall_checked_flag 
[69] SUBSUBSUBPROCESS(1) func<end> ); 
[70] MAINPROCESS(6) if<start> if( 
[71] MAINPROCESS(6) if st_g_bsm_loop_data.as4_slow_sot_find[1] > (S4)128 
[72] MAINPROCESS(6) if ) 
[73] MAINPROCESS(6) subproc SUBPROCESS(1) 
[74] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] (S4)128;
[75] MAINPROCESS(7) if <start> if ( 
[76] MAINPROCESS(7) if  u1_t_wall_checked_flag == (U1)0 
[77] MAINPROCESS(7) if  ) 
[78] MAINPROCESS(7) subproc SUBPROCESS(1) 
[79] SUBPROCESS(1) if <start> if ( 
[80] SUBPROCESS(1) if  (afl_a_buf_dev[0] == (FL)999.9F 
[81] SUBPROCESS(1) if  ) 
[82] SUBPROCESS(1) if  &&  (afl_a_buf_dev[1] == (FL)999.9F) 
[83] SUBPROCESS(1) if  &&  (u1_a_num_nearfield_doa_2f_i > (U1)5) 
[84] SUBPROCESS(1) if  &&  (u1_a_num_nearfield_doa_2f_q > (U1)5) 
[85] SUBPROCESS(1) if  &&  (u1_a_num_forward > (U1)2) 
[86] SUBPROCESS(1) if  &&  (u1_a_num_backward > (U1)2) 
[87] SUBPROCESS(1) if  &&  ((st_g_bsm_loop_data.as4_slow_sot_find[0] != (S4)0) 
[88] SUBPROCESS(1) if  ||   (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] != (S4)0))) 
[89] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[90] SUBSUBPROCESS(1) if <start> if ( 
[91] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.afl_wall_width[0] < (FL)WALL_MAX - (FL)0.3F 
[92] SUBSUBPROCESS(1) if  ) 
[93] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[94] SUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_slow_sot_find[1] = s4_bsm_low_judge_wall_proc8(st_g_bsm_loop_data.as4_slow_sot_find[1] 
[95] SUBSUBSUBPROCESS(1) func<end> ); 
[96] SUBSUBPROCESS(2) else<start> else 
[97] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[98] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] (S4)0;
[99] MAINPROCESS(8) for <start> for ( 
[100] MAINPROCESS(8) for  i = (S4)0; 
[101] MAINPROCESS(8) for  i < TARGET_BUFFSIZE; 
[102] MAINPROCESS(8) for  i++) 
[103] MAINPROCESS(8) subproc SUBPROCESS(1) 
[104] SUBPROCESS(1) if <start> if ( 
[105] SUBPROCESS(1) if  st_g_bsm_alarm_data.afl_alarmed_target[i][4] == ALARM_TYPE_TOS 
[106] SUBPROCESS(1) if  ) 
[107] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[108] SUBSUBPROCESS(1) equal u1_t_tos_flag (U1)1;
[109] SUBSUBPROCESS(1) proc break; 
[110] MAINPROCESS(9) if <start> if ( 
[111] MAINPROCESS(9) if  (afl_a_buf_dev[0] == (FL)999.9F 
[112] MAINPROCESS(9) if  ) 
[113] MAINPROCESS(9) if  &&  (afl_a_buf_dev[1] == (FL)999.9F) 
[114] MAINPROCESS(9) if  &&  (u1_t_tos_flag == (U1)1) 
[115] MAINPROCESS(9) if  &&  ((u1_a_num_forward != (U1)0) 
[116] MAINPROCESS(9) if  ||   (u1_a_num_backward != (U1)0))) 
[117] MAINPROCESS(9) subproc SUBPROCESS(1) 
[118] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] (S4)0;
[119] MAINPROCESS(10) proc return; 
----------------- Total Codes : 119 lines
--------------------------
[Function Name] : fn_bsm_low_judge_wall_forward_deviation_small 
-Return type : static VD 
-Argument : 3 
     [0] : const FL   afl_a_buf_dev[2] 
     [1] : S4   s4_a_forward_point 
     [2] : S4   s4_a_backward_point 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  (afl_a_buf_dev[0] < WALL_DEV_TH2 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) if  &&  ((afl_a_buf_dev[1] != (FL)999.9F) 
[5] MAINPROCESS(1) if  ||   (s4_a_backward_point == (S4)0))) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + 10;
[8] MAINPROCESS(2) else if <start> else if ( 
[9] MAINPROCESS(2) else if  (afl_a_buf_dev[0] < WALL_DEV_TH8 
[10] MAINPROCESS(2) else if  ) 
[11] MAINPROCESS(2) else if  &&  ((afl_a_buf_dev[1] != (FL)999.9F) 
[12] MAINPROCESS(2) else if  ||   (s4_a_backward_point == (S4)0))) 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) if <start> if ( 
[15] SUBPROCESS(1) if  s4_a_forward_point < (S4)5 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + 5;
[19] MAINPROCESS(3) else if <start> else if ( 
[20] MAINPROCESS(3) else if  (afl_a_buf_dev[0] < WALL_DEV_TH3 
[21] MAINPROCESS(3) else if  ) 
[22] MAINPROCESS(3) else if  &&  ((afl_a_buf_dev[1] != (FL)999.9F) 
[23] MAINPROCESS(3) else if  ||   (s4_a_backward_point == (S4)0))) 
[24] MAINPROCESS(3) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) if<start> if( 
[26] SUBPROCESS(1) if afl_a_buf_dev[1]<WALL_DEV_TH2 
[27] SUBPROCESS(1) if ) 
[28] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + 5;
[30] SUBPROCESS(2) else<start> else 
[31] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) if <start> if ( 
[33] SUBSUBPROCESS(1) if  s4_a_backward_point < (S4)4 
[34] SUBSUBPROCESS(1) if  ) 
[35] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[36] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + 2;
[37] MAINPROCESS(4) else if <start> else if ( 
[38] MAINPROCESS(4) else if  (afl_a_buf_dev[0] < WALL_DEV_TH5 
[39] MAINPROCESS(4) else if  ) 
[40] MAINPROCESS(4) else if  &&  ((afl_a_buf_dev[1] != (FL)999.9F) 
[41] MAINPROCESS(4) else if  ||   (s4_a_backward_point == (S4)0))) 
[42] MAINPROCESS(4) subproc SUBPROCESS(1) 
[43] SUBPROCESS(1) if <start> if ( 
[44] SUBPROCESS(1) if  afl_a_buf_dev[1] < WALL_DEV_TH8 
[45] SUBPROCESS(1) if  ) 
[46] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[47] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + (S4)5;
[48] SUBPROCESS(2) else if <start> else if ( 
[49] SUBPROCESS(2) else if  afl_a_buf_dev[1] < WALL_DEV_TH10 
[50] SUBPROCESS(2) else if  ) 
[51] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[52] SUBSUBPROCESS(1) if <start> if ( 
[53] SUBSUBPROCESS(1) if  s4_a_backward_point < (S4)4 
[54] SUBSUBPROCESS(1) if  ) 
[55] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[56] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + (S4)2;
[57] SUBPROCESS(3) else<start> else 
[58] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[59] MAINPROCESS(5) else<start> else 
[60] MAINPROCESS(5) subproc SUBPROCESS(1) 
[61] MAINPROCESS(6) proc return; 
----------------- Total Codes : 61 lines
--------------------------
[Function Name] : fn_bsm_low_judge_wall_forward_deviation_big 
-Return type : static VD 
-Argument : 2 
     [0] : const FL   afl_a_buf_dev[2] 
     [1] : S4   s4_a_forward_point 
----- Codes -----
[1] MAINPROCESS(1) if<start> if( 
[2] MAINPROCESS(1) if st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] != 0 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) if<start> if( 
[6] SUBPROCESS(1) if afl_a_buf_dev[1]<WALL_DEV_TH1 
[7] SUBPROCESS(1) if ) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + 2;
[10] SUBPROCESS(2) else<start> else 
[11] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) if <start> if ( 
[13] SUBSUBPROCESS(1) if  (afl_a_buf_dev[0] > CFL_WALL_DEV_TH9 
[14] SUBSUBPROCESS(1) if  ) 
[15] SUBSUBPROCESS(1) if  ||  ((afl_a_buf_dev[1] > WALL_DEV_TH7) 
[16] SUBSUBPROCESS(1) if  &&   (afl_a_buf_dev[0] > (CFL_SOT_DEV_TH + (FL)5.0F)))) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) if <start> if ( 
[19] SUBSUBSUBPROCESS(1) if  !(st_g_bsm_loop_data.afl_wall_width[0] < WALL_WIDTH_TH) 
[20] SUBSUBSUBPROCESS(1) if  ) 
[21] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[23] SUBSUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.afl_wall_width[0] < (FL)WALL_MAX - (FL)0.3F 
[24] SUBSUBSUBSUBPROCESS(1) if  ) 
[25] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[26] SUBSUBSUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_slow_sot_find[1] = s4_bsm_low_judge_wall_proc8(st_g_bsm_loop_data.as4_slow_sot_find[1] 
[27] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[28] SUBSUBSUBSUBPROCESS(2) else<start> else 
[29] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[30] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] (S4)0;
[31] MAINPROCESS(2) else<start> else 
[32] MAINPROCESS(2) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) if <start> if ( 
[34] SUBPROCESS(1) if  (afl_a_buf_dev[0] > CFL_WALL_DEV_TH9 
[35] SUBPROCESS(1) if  ) 
[36] SUBPROCESS(1) if  ||  ((afl_a_buf_dev[1] > WALL_DEV_TH7) 
[37] SUBPROCESS(1) if  &&   (afl_a_buf_dev[0] > (CFL_SOT_DEV_TH + (FL)5.0F)))) 
[38] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[39] SUBSUBPROCESS(1) if <start> if ( 
[40] SUBSUBPROCESS(1) if  (st_g_bsm_loop_data.afl_wall_width[0] < WALL_WIDTH_TH 
[41] SUBSUBPROCESS(1) if  ) 
[42] SUBSUBPROCESS(1) if  ||  (s4_a_forward_point < (S4)3)) 
[43] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[44] SUBSUBPROCESS(2) else<start> else 
[45] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[46] SUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_slow_sot_find[1] = s4_bsm_low_judge_wall_proc8(st_g_bsm_loop_data.as4_slow_sot_find[1] 
[47] SUBSUBSUBPROCESS(1) func<end> ); 
[48] SUBPROCESS(2) else<start> else 
[49] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[50] SUBSUBPROCESS(1) if <start> if ( 
[51] SUBSUBPROCESS(1) if  (afl_a_buf_dev[0] < WALL_DEV_TH1 
[52] SUBSUBPROCESS(1) if  ) 
[53] SUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[0] == (S4)0)) 
[54] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[55] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + (S4)2;
[56] MAINPROCESS(3) proc return; 
----------------- Total Codes : 56 lines
--------------------------
[Function Name] : fn_bsm_low_judge_wall_when_low_speed 
-Return type : static VD 
-Argument : 2 
     [0] : const FL   afl_a_buf_dev[2] 
     [1] : S4   s4_a_backward_point 
----- Codes -----
[1] MAINPROCESS(1) if<start> if( 
[2] MAINPROCESS(1) if st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] != 0 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) if<start> if( 
[6] SUBPROCESS(1) if s4_a_backward_point < 4 
[7] SUBPROCESS(1) if ) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] SUBSUBPROCESS(1) if<start> if( 
[10] SUBSUBPROCESS(1) if afl_a_buf_dev[1]<WALL_DEV_TH1 
[11] SUBSUBPROCESS(1) if ) 
[12] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[13] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + 2;
[14] SUBSUBPROCESS(2) else<start> else 
[15] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[16] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] 0;
[17] SUBPROCESS(2) else<start> else 
[18] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[19] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] 0;
[20] MAINPROCESS(2) else<start> else 
[21] MAINPROCESS(2) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) if<start> if( 
[23] SUBPROCESS(1) if s4_a_backward_point < 4 
[24] SUBPROCESS(1) if ) 
[25] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[26] SUBSUBPROCESS(1) if<start> if( 
[27] SUBSUBPROCESS(1) if afl_a_buf_dev[1]<WALL_DEV_TH1 
[28] SUBSUBPROCESS(1) if ) 
[29] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[30] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + 2;
[31] SUBSUBPROCESS(2) else if<start> else if( 
[32] SUBSUBPROCESS(2) else if afl_a_buf_dev[1]<WALL_DEV_TH8 
[33] SUBSUBPROCESS(2) else if ) 
[34] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[35] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1]+ 1;
[36] SUBSUBPROCESS(3) else<start> else 
[37] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBPROCESS(1) if <start> if ( 
[39] SUBSUBSUBPROCESS(1) if  fl_g_v_self_bsm_for_base > CFL_CANOUT_VSELF_MIN 
[40] SUBSUBSUBPROCESS(1) if  ) 
[41] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[42] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[43] SUBSUBSUBSUBPROCESS(1) if  fl_g_v_self_bsm_for_base < 15.0F 
[44] SUBSUBSUBSUBPROCESS(1) if  ) 
[45] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[46] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[47] SUBSUBSUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.afl_wall_width[0] > 3.0F 
[48] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[49] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] 0;
[51] SUBSUBSUBSUBPROCESS(2) else<start> else 
[52] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[53] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[54] SUBSUBSUBSUBSUBPROCESS(1) if  (!(s4_a_backward_point == (S4)0) 
[55] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[56] SUBSUBSUBSUBSUBPROCESS(1) if  &&  (!(st_g_bsm_loop_data.afl_wall_width[0] < WALL_WIDTH_TH))) 
[57] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[58] SUBSUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] (S4)0;
[59] SUBSUBSUBSUBSUBPROCESS(2) else<start> else 
[60] SUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[61] SUBSUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + (S4)1;
[62] SUBPROCESS(2) else<start> else 
[63] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[64] SUBSUBPROCESS(1) if<start> if( 
[65] SUBSUBPROCESS(1) if afl_a_buf_dev[1]<WALL_DEV_TH2 
[66] SUBSUBPROCESS(1) if ) 
[67] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[68] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + 2;
[69] SUBSUBPROCESS(2) else<start> else 
[70] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[71] SUBSUBSUBPROCESS(1) if <start> if ( 
[72] SUBSUBSUBPROCESS(1) if  !(st_g_bsm_loop_data.afl_wall_width[0] < WALL_WIDTH_TH) 
[73] SUBSUBSUBPROCESS(1) if  ) 
[74] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[75] SUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] 0;
[76] MAINPROCESS(3) proc return; 
----------------- Total Codes : 76 lines
--------------------------
[Function Name] : fn_bsm_low_judge_wall_when_not_low_speed 
-Return type : static VD 
-Argument : 3 
     [0] : const FL   afl_a_buf_dev[2] 
     [1] : S4   s4_a_forward_point 
     [2] : U1*   pu1_a_wall_checked_flag 
----- Codes -----
[1] MAINPROCESS(1) if<start> if( 
[2] MAINPROCESS(1) if afl_a_buf_dev[1]<WALL_DEV_TH2 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] + 2;
[6] MAINPROCESS(2) else if <start> else if ( 
[7] MAINPROCESS(2) else if  afl_a_buf_dev[1] < (CFL_SOT_DEV_TH + (FL)10.0F) 
[8] MAINPROCESS(2) else if  ) 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] MAINPROCESS(3) else<start> else 
[11] MAINPROCESS(3) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if<start> if( 
[13] SUBPROCESS(1) if afl_a_buf_dev[1] != 999.9F 
[14] SUBPROCESS(1) if ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) if<start> if( 
[17] SUBSUBPROCESS(1) if st_g_bsm_loop_data.afl_wall_width[0]<WALL_WIDTH_TH 
[18] SUBSUBPROCESS(1) if ) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(2) else<start> else 
[21] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_slow_sot_find[1] = s4_bsm_low_judge_wall_proc8(st_g_bsm_loop_data.as4_slow_sot_find[1] 
[23] SUBSUBSUBPROCESS(1) func<end> ); 
[24] SUBPROCESS(2) else<start> else 
[25] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[26] SUBSUBPROCESS(1) if <start> if ( 
[27] SUBSUBPROCESS(1) if  (s4_a_forward_point > (S4)5 
[28] SUBSUBPROCESS(1) if  ) 
[29] SUBSUBPROCESS(1) if  &&  (!(st_g_bsm_loop_data.afl_wall_width[0] < WALL_WIDTH_TH))) 
[30] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[31] SUBSUBSUBPROCESS(1) if <start> if ( 
[32] SUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.afl_wall_width[0] < (FL)WALL_MAX - (FL)0.3F 
[33] SUBSUBSUBPROCESS(1) if  ) 
[34] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[35] SUBSUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_slow_sot_find[1] = s4_bsm_low_judge_wall_proc8(st_g_bsm_loop_data.as4_slow_sot_find[1] 
[36] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[37] SUBSUBSUBSUBPROCESS(1) equal *pu1_a_wall_checked_flag CU1_DF_ON;
[38] SUBSUBSUBPROCESS(2) else<start> else 
[39] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[40] SUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] (S4)0;
[41] MAINPROCESS(4) proc return; 
----------------- Total Codes : 41 lines
--------------------------
[Function Name] : s4_bsm_low_judge_wall_proc8 
-Return type : static S4 
-Argument : 1 
     [0] : S4   s4_a_sot_find_1 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_calc_sot_find_1; 
[2] MAINPROCESS(1) equal s4_t_calc_sot_find_1 s4_a_sot_find_1 - (S4)CFL_WALL_OFF_GAIN;
[3] MAINPROCESS(1) if <start> if ( 
[4] MAINPROCESS(1) if  s4_t_calc_sot_find_1 < (S4)0 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal s4_t_calc_sot_find_1 (S4)0;
[8] MAINPROCESS(2) proc return s4_t_calc_sot_find_1; 
----------------- Total Codes : 8 lines
--------------------------
[Function Name] : fn_bsm_low_judge_fast_sot 
-Return type : static VD 
-Argument : 3 
     [0] : S4   s4_a_fast_sot_num 
     [1] : S4   s4_a_not_fast_sot_num 
     [2] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_tos_flg; 
[2] MAINPROCESS(1) proc S2 s2_t_fwd_peak_val; 
[3] MAINPROCESS(1) proc S2 s2_t_bwd_peak_val; 
[4] MAINPROCESS(1) proc U1 u1_t_lp_check_sum; 
[5] MAINPROCESS(1) equal s2_t_fwd_peak_val (S2)0;
[6] MAINPROCESS(1) equal s2_t_bwd_peak_val (S2)0;
[7] MAINPROCESS(1) equal u1_t_tos_flg (U1)0;
[8] MAINPROCESS(1) for <start> for ( 
[9] MAINPROCESS(1) for  u1_t_lp_check_sum = (U1)0; 
[10] MAINPROCESS(1) for  u1_t_lp_check_sum < (U1)12; 
[11] MAINPROCESS(1) for  u1_t_lp_check_sum++) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if <start> if ( 
[14] SUBPROCESS(1) if  st_g_bsm_loop_data.as4_sot_check_sum[0][1][u1_t_lp_check_sum] > s2_t_fwd_peak_val 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal s2_t_fwd_peak_val st_g_bsm_loop_data.as4_sot_check_sum[0][1][u1_t_lp_check_sum];
[18] SUBPROCESS(2) if <start> if ( 
[19] SUBPROCESS(2) if  st_g_bsm_loop_data.as4_sot_check_sum[1][1][u1_t_lp_check_sum] > s2_t_bwd_peak_val 
[20] SUBPROCESS(2) if  ) 
[21] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[22] SUBSUBPROCESS(1) equal s2_t_bwd_peak_val st_g_bsm_loop_data.as4_sot_check_sum[1][1][u1_t_lp_check_sum];
[23] MAINPROCESS(2) if <start> if ( 
[24] MAINPROCESS(2) if  (s2_t_fwd_peak_val > (S2)380 
[25] MAINPROCESS(2) if  ) 
[26] MAINPROCESS(2) if  &&  (s2_t_bwd_peak_val < (S2)100)) 
[27] MAINPROCESS(2) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) equal u1_t_tos_flg (U1)1;
[29] MAINPROCESS(3) if <start> if ( 
[30] MAINPROCESS(3) if  (st_g_bsm_loop_data.as4_slow_sot_find[0] == (S4)0 
[31] MAINPROCESS(3) if  ) 
[32] MAINPROCESS(3) if  &&  (fl_g_v_self_bsm_for_base >= (FL)30.0F) 
[33] MAINPROCESS(3) if  &&  (s4_a_fast_sot_num != (S4)0)) 
[34] MAINPROCESS(3) subproc SUBPROCESS(1) 
[35] SUBPROCESS(1) if <start> if ( 
[36] SUBPROCESS(1) if  (s4_a_fast_sot_num > (S4)7 
[37] SUBPROCESS(1) if  ) 
[38] SUBPROCESS(1) if  &&  (s4_a_fast_sot_num > (s4_a_not_fast_sot_num + (S4)1))) 
[39] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[40] SUBSUBPROCESS(1) if <start> if ( 
[41] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_fast_sot_flg[0] == (S4)0 
[42] SUBSUBPROCESS(1) if  ) 
[43] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBPROCESS(1) if <start> if ( 
[45] SUBSUBSUBPROCESS(1) if  u1_t_tos_flg == (U1)0 
[46] SUBSUBSUBPROCESS(1) if  ) 
[47] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[48] SUBSUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.as4_fast_sot_flg[0]++; 
[49] SUBSUBPROCESS(2) else<start> else 
[50] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[51] SUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.as4_fast_sot_flg[0]++; 
[52] SUBPROCESS(2) else if <start> else if ( 
[53] SUBPROCESS(2) else if  (s4_a_fast_sot_num <= (S4)7 
[54] SUBPROCESS(2) else if  ) 
[55] SUBPROCESS(2) else if  ||  (s4_a_fast_sot_num < s4_a_not_fast_sot_num)) 
[56] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[57] SUBSUBPROCESS(1) if <start> if ( 
[58] SUBSUBPROCESS(1) if  (s4_a_fast_sot_num <= (S4)7 
[59] SUBSUBPROCESS(1) if  ) 
[60] SUBSUBPROCESS(1) if  &&  (s4_a_fast_sot_num <= (S4)((FL)s4_a_not_fast_sot_num * (FL)0.5F))) 
[61] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[62] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_fast_sot_flg[0] (S4)0;
[63] SUBSUBPROCESS(2) else<start> else 
[64] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[65] SUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.as4_fast_sot_flg[0]--; 
[66] SUBPROCESS(3) else<start> else 
[67] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[68] MAINPROCESS(4) else<start> else 
[69] MAINPROCESS(4) subproc SUBPROCESS(1) 
[70] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_fast_sot_flg[0] (S4)0;
[71] MAINPROCESS(5) if <start> if ( 
[72] MAINPROCESS(5) if  st_g_bsm_loop_data.as4_fast_sot_flg[0] > (S4)5 
[73] MAINPROCESS(5) if  ) 
[74] MAINPROCESS(5) subproc SUBPROCESS(1) 
[75] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_fast_sot_flg[0] (S4)5;
[76] MAINPROCESS(6) else if <start> else if ( 
[77] MAINPROCESS(6) else if  st_g_bsm_loop_data.as4_fast_sot_flg[0] < (S4)0 
[78] MAINPROCESS(6) else if  ) 
[79] MAINPROCESS(6) subproc SUBPROCESS(1) 
[80] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_fast_sot_flg[0] (S4)0;
[81] MAINPROCESS(7) else<start> else 
[82] MAINPROCESS(7) subproc SUBPROCESS(1) 
[83] MAINPROCESS(8) if <start> if ( 
[84] MAINPROCESS(8) if  u1_a_alarming_flag == (U1)1 
[85] MAINPROCESS(8) if  ) 
[86] MAINPROCESS(8) subproc SUBPROCESS(1) 
[87] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_fast_sot_flg[0] (S4)0;
[88] MAINPROCESS(9) proc return; 
----------------- Total Codes : 88 lines
--------------------------
[Function Name] : fn_bsm_low_judge_exist_leading_car_main 
-Return type : static VD 
-Argument : 4 
     [0] : const S4   as4_a_nearfield_doa_i[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [1] : const S4   as4_a_nearfield_doa_q[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [2] : const FL   afl_a_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [3] : const FL   afl_a_sot_check_object_q[SLOW_SOT_FREQ_BIN_RANGE][4] 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_area_x_near; 
[2] MAINPROCESS(1) proc FL fl_t_area_x_far; 
[3] MAINPROCESS(1) proc FL fl_t_area_y_forward; 
[4] MAINPROCESS(1) proc FL fl_t_area_y_backward; 
[5] MAINPROCESS(1) proc U1 u1_t_Ni; 
[6] MAINPROCESS(1) proc U1 u1_t_Nq; 
[7] MAINPROCESS(1) proc FL fl_t_ave_theta_i; 
[8] MAINPROCESS(1) proc FL fl_t_ave_theta_q; 
[9] MAINPROCESS(1) proc FL fl_t_var_theta_i; 
[10] MAINPROCESS(1) proc FL fl_t_var_theta_q; 
[11] MAINPROCESS(1) proc U1 u1_t_flg_point_many; 
[12] MAINPROCESS(1) proc U1 u1_t_flg_point_bias; 
[13] MAINPROCESS(1) if <start> if ( 
[14] MAINPROCESS(1) if  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0 
[15] MAINPROCESS(1) if  ) 
[16] MAINPROCESS(1) if  ||  (st_g_bsm_loop_data.s1_ctr_heisou_car != (S1)0)) 
[17] MAINPROCESS(1) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) func<start> fn_bsm_low_judge_exist_leading_car_set_jdg_area(&fl_t_area_x_near, &fl_t_area_x_far, &fl_t_area_y_forward, &fl_t_area_y_backward 
[19] SUBPROCESS(1) func<end> ); 
[20] SUBPROCESS(1) func<start> fn_bsm_low_judge_exist_leading_car_calc_char(as4_a_nearfield_doa_i, 
[21] SUBPROCESS(1) func as4_a_nearfield_doa_q, 
[22] SUBPROCESS(1) func afl_a_sot_check_object_i, 
[23] SUBPROCESS(1) func afl_a_sot_check_object_q, 
[24] SUBPROCESS(1) func fl_t_area_x_near, 
[25] SUBPROCESS(1) func fl_t_area_x_far, 
[26] SUBPROCESS(1) func fl_t_area_y_forward, 
[27] SUBPROCESS(1) func fl_t_area_y_backward, 
[28] SUBPROCESS(1) func &u1_t_Ni, 
[29] SUBPROCESS(1) func &u1_t_Nq, 
[30] SUBPROCESS(1) func &fl_t_ave_theta_i, 
[31] SUBPROCESS(1) func &fl_t_ave_theta_q, 
[32] SUBPROCESS(1) func &fl_t_var_theta_i, 
[33] SUBPROCESS(1) func &fl_t_var_theta_q, 
[34] SUBPROCESS(1) func &u1_t_flg_point_many, 
[35] SUBPROCESS(1) func &u1_t_flg_point_bias 
[36] SUBPROCESS(1) func<end> ); 
[37] SUBPROCESS(1) func<start> fn_bsm_low_judge_exist_leading_car_jdg(u1_t_Ni, 
[38] SUBPROCESS(1) func u1_t_Nq, 
[39] SUBPROCESS(1) func fl_t_ave_theta_i, 
[40] SUBPROCESS(1) func fl_t_ave_theta_q, 
[41] SUBPROCESS(1) func fl_t_var_theta_i, 
[42] SUBPROCESS(1) func fl_t_var_theta_q, 
[43] SUBPROCESS(1) func u1_t_flg_point_many, 
[44] SUBPROCESS(1) func u1_t_flg_point_bias 
[45] SUBPROCESS(1) func<end> ); 
[46] SUBPROCESS(1) func<start> fn_bsm_low_judge_exist_leading_car_mediation( 
[47] SUBPROCESS(1) func<end> ); 
[48] MAINPROCESS(2) proc return; 
----------------- Total Codes : 48 lines
--------------------------
[Function Name] : fn_bsm_low_judge_exist_leading_car_set_jdg_area 
-Return type : static VD 
-Argument : 4 
     [0] : FL*   pfl_a_area_x_near 
     [1] : FL*   pfl_a_area_x_far 
     [2] : FL*   pfl_a_area_y_forward 
     [3] : FL*   pfl_a_area_y_backward 
----- Codes -----
[1] MAINPROCESS(1) equal *pfl_a_area_x_near (FL)ALARM_X_IN;
[2] MAINPROCESS(1) equal *pfl_a_area_x_far (FL)ALARM_X_OUT + (FL)2.0F;
[3] MAINPROCESS(1) equal *pfl_a_area_y_forward (FL)ALARM_Y_FORWARD + (FL)1.0F;
[4] MAINPROCESS(1) equal *pfl_a_area_y_backward CFL_ALARM_Y_BACKWARD;
[5] MAINPROCESS(1) proc return; 
----------------- Total Codes : 5 lines
--------------------------
[Function Name] : fn_bsm_low_judge_exist_leading_car_calc_char 
-Return type : static VD 
-Argument : 16 
     [0] : const S4   as4_a_nearfield_doa_i[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [1] : const S4   as4_a_nearfield_doa_q[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [2] : const FL   afl_a_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [3] : const FL   afl_a_sot_check_object_q[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [4] : const FL   fl_a_area_x_near 
     [5] : const FL   fl_a_area_x_far 
     [6] : const FL   fl_a_area_y_forward 
     [7] : const FL   fl_a_area_y_backward 
     [8] : U1*   pu1_a_Ni 
     [9] : U1*   pu1_a_Nq 
     [10] : FL*   pfl_a_ave_theta_i 
     [11] : FL*   pfl_a_ave_theta_q 
     [12] : FL*   pfl_a_var_theta_i 
     [13] : FL*   pfl_a_var_theta_q 
     [14] : U1*   pu1_a_flg_point_many 
     [15] : U1*   pu1_a_flg_point_bias 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_Ni; 
[2] MAINPROCESS(1) proc U1 u1_t_Nq; 
[3] MAINPROCESS(1) proc FL fl_t_ave_theta_i; 
[4] MAINPROCESS(1) proc FL fl_t_ave_theta_q; 
[5] MAINPROCESS(1) proc FL fl_t_var_theta_i; 
[6] MAINPROCESS(1) proc FL fl_t_var_theta_q; 
[7] MAINPROCESS(1) proc U1 u1_t_flg_point_many; 
[8] MAINPROCESS(1) proc U1 u1_t_flg_point_bias; 
[9] MAINPROCESS(1) func<start> fn_exist_leading_car_calc_char_iq(as4_a_nearfield_doa_i, 
[10] MAINPROCESS(1) func afl_a_sot_check_object_i, 
[11] MAINPROCESS(1) func fl_a_area_x_near, 
[12] MAINPROCESS(1) func fl_a_area_x_far, 
[13] MAINPROCESS(1) func fl_a_area_y_forward, 
[14] MAINPROCESS(1) func fl_a_area_y_backward, 
[15] MAINPROCESS(1) func &u1_t_Ni, 
[16] MAINPROCESS(1) func &fl_t_ave_theta_i, 
[17] MAINPROCESS(1) func &fl_t_var_theta_i 
[18] MAINPROCESS(1) func<end> ); 
[19] MAINPROCESS(1) func<start> fn_exist_leading_car_calc_char_iq(as4_a_nearfield_doa_q, 
[20] MAINPROCESS(1) func afl_a_sot_check_object_q, 
[21] MAINPROCESS(1) func fl_a_area_x_near, 
[22] MAINPROCESS(1) func fl_a_area_x_far, 
[23] MAINPROCESS(1) func fl_a_area_y_forward, 
[24] MAINPROCESS(1) func fl_a_area_y_backward, 
[25] MAINPROCESS(1) func &u1_t_Nq, 
[26] MAINPROCESS(1) func &fl_t_ave_theta_q, 
[27] MAINPROCESS(1) func &fl_t_var_theta_q 
[28] MAINPROCESS(1) func<end> ); 
[29] MAINPROCESS(1) equal u1_t_flg_point_many (U1)0;
[30] MAINPROCESS(1) equal u1_t_flg_point_bias (U1)0;
[31] MAINPROCESS(1) if <start> if ( 
[32] MAINPROCESS(1) if  (u1_t_Ni > (U1)7 
[33] MAINPROCESS(1) if  ) 
[34] MAINPROCESS(1) if  &&  (u1_t_Nq > (U1)7)) 
[35] MAINPROCESS(1) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) equal u1_t_flg_point_many (U1)1;
[37] MAINPROCESS(2) if <start> if ( 
[38] MAINPROCESS(2) if  (((S4)u1_t_Nq - (S4)u1_t_Ni) > (S4)5 
[39] MAINPROCESS(2) if  ) 
[40] MAINPROCESS(2) if  &&  (u1_t_Ni <= (U1)3)) 
[41] MAINPROCESS(2) subproc SUBPROCESS(1) 
[42] SUBPROCESS(1) equal u1_t_flg_point_bias (U1)1;
[43] MAINPROCESS(3) proc return; 
----------------- Total Codes : 43 lines
--------------------------
[Function Name] : fn_exist_leading_car_calc_char_iq 
-Return type : static VD 
-Argument : 9 
     [0] : const S4   as4_a_nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [1] : const FL   afl_a_sot_check_object[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [2] : const FL   fl_a_area_x_near 
     [3] : const FL   fl_a_area_x_far 
     [4] : const FL   fl_a_area_y_forward 
     [5] : const FL   fl_a_area_y_backward 
     [6] : U1*   pu1_a_N 
     [7] : FL*   pfl_a_ave_theta 
     [8] : FL*   pfl_a_var_theta 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_lp_freq_bin_range; 
[2] MAINPROCESS(1) proc FL fl_t_min_x; 
[3] MAINPROCESS(1) proc U1 u1_t_N; 
[4] MAINPROCESS(1) proc FL fl_t_ave_theta; 
[5] MAINPROCESS(1) proc S4 s4_t_ave_theta_sum; 
[6] MAINPROCESS(1) proc FL fl_t_var_theta; 
[7] MAINPROCESS(1) proc S4 s4_t_var_theta_sum; 
[8] MAINPROCESS(1) equal fl_t_min_x CFL_FLMAX;
[9] MAINPROCESS(1) equal u1_t_N (U1)0;
[10] MAINPROCESS(1) equal fl_t_ave_theta (FL)0.0F;
[11] MAINPROCESS(1) equal s4_t_ave_theta_sum (S4)0;
[12] MAINPROCESS(1) equal fl_t_var_theta (FL)0.0F;
[13] MAINPROCESS(1) equal s4_t_var_theta_sum (S4)0;
[14] MAINPROCESS(1) for <start> for ( 
[15] MAINPROCESS(1) for  u1_t_lp_freq_bin_range = (U1)0; 
[16] MAINPROCESS(1) for  u1_t_lp_freq_bin_range < (U1)SLOW_SOT_FREQ_BIN_RANGE; 
[17] MAINPROCESS(1) for  u1_t_lp_freq_bin_range++) 
[18] MAINPROCESS(1) subproc SUBPROCESS(1) 
[19] SUBPROCESS(1) if <start> if ( 
[20] SUBPROCESS(1) if  (afl_a_sot_check_object[u1_t_lp_freq_bin_range][0] > fl_a_area_x_near 
[21] SUBPROCESS(1) if  ) 
[22] SUBPROCESS(1) if  &&  (afl_a_sot_check_object[u1_t_lp_freq_bin_range][0] < fl_a_area_x_far) 
[23] SUBPROCESS(1) if  &&  (afl_a_sot_check_object[u1_t_lp_freq_bin_range][1] < fl_a_area_y_forward) 
[24] SUBPROCESS(1) if  &&  (afl_a_sot_check_object[u1_t_lp_freq_bin_range][1] > fl_a_area_y_backward)) 
[25] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[26] SUBSUBPROCESS(1) if <start> if ( 
[27] SUBSUBPROCESS(1) if  fl_t_min_x > afl_a_sot_check_object[u1_t_lp_freq_bin_range][0] 
[28] SUBSUBPROCESS(1) if  ) 
[29] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[30] SUBSUBSUBPROCESS(1) equal fl_t_min_x afl_a_sot_check_object[u1_t_lp_freq_bin_range][0];
[31] MAINPROCESS(2) for <start> for ( 
[32] MAINPROCESS(2) for  u1_t_lp_freq_bin_range = (U1)0; 
[33] MAINPROCESS(2) for  u1_t_lp_freq_bin_range < (U1)SLOW_SOT_FREQ_BIN_RANGE; 
[34] MAINPROCESS(2) for  u1_t_lp_freq_bin_range++) 
[35] MAINPROCESS(2) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) if <start> if ( 
[37] SUBPROCESS(1) if  afl_a_sot_check_object[u1_t_lp_freq_bin_range][0] != (FL)CFL_UNKNOWN_VALUE 
[38] SUBPROCESS(1) if  ) 
[39] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[40] SUBSUBPROCESS(1) if <start> if ( 
[41] SUBSUBPROCESS(1) if  (afl_a_sot_check_object[u1_t_lp_freq_bin_range][0] > fl_a_area_x_near 
[42] SUBSUBPROCESS(1) if  ) 
[43] SUBSUBPROCESS(1) if  &&  (afl_a_sot_check_object[u1_t_lp_freq_bin_range][0] < fl_a_area_x_far) 
[44] SUBSUBPROCESS(1) if  &&  (afl_a_sot_check_object[u1_t_lp_freq_bin_range][1] < fl_a_area_y_forward) 
[45] SUBSUBPROCESS(1) if  &&  (afl_a_sot_check_object[u1_t_lp_freq_bin_range][1] > fl_a_area_y_backward)) 
[46] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[47] SUBSUBSUBPROCESS(1) if <start> if ( 
[48] SUBSUBSUBPROCESS(1) if  afl_a_sot_check_object[u1_t_lp_freq_bin_range][0] < (fl_t_min_x + (FL)3.0F) 
[49] SUBSUBSUBPROCESS(1) if  ) 
[50] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[51] SUBSUBSUBSUBPROCESS(1) proc u1_t_N++; 
[52] SUBSUBSUBSUBPROCESS(1) equal s4_t_ave_theta_sum + as4_a_nearfield_doa[u1_t_lp_freq_bin_range][0];
[53] SUBSUBSUBSUBPROCESS(1) func<start> s4_t_var_theta_sum += (as4_a_nearfield_doa[u1_t_lp_freq_bin_range][0] * as4_a_nearfield_doa[u1_t_lp_freq_bin_range][0] 
[54] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[55] MAINPROCESS(3) if <start> if ( 
[56] MAINPROCESS(3) if  u1_t_N != (U1)0 
[57] MAINPROCESS(3) if  ) 
[58] MAINPROCESS(3) subproc SUBPROCESS(1) 
[59] SUBPROCESS(1) equal fl_t_ave_theta (FL)s4_t_ave_theta_sum / (FL)u1_t_N;
[60] SUBPROCESS(1) func<start> fl_t_var_theta = ((FL)s4_t_var_theta_sum / (FL)u1_t_N) - (fl_t_ave_theta * fl_t_ave_theta 
[61] SUBPROCESS(1) func<end> ); 
[62] MAINPROCESS(4) else<start> else 
[63] MAINPROCESS(4) subproc SUBPROCESS(1) 
[64] SUBPROCESS(1) equal fl_t_ave_theta (FL)10000.0F;
[65] SUBPROCESS(1) equal fl_t_var_theta (FL)10000.0F;
[66] MAINPROCESS(5) proc return; 
----------------- Total Codes : 66 lines
--------------------------
[Function Name] : fn_bsm_low_judge_exist_leading_car_jdg 
-Return type : static VD 
-Argument : 8 
     [0] : const U1   u1_a_Ni 
     [1] : const U1   u1_a_Nq 
     [2] : const FL   fl_a_ave_theta_i 
     [3] : const FL   fl_a_ave_theta_q 
     [4] : const FL   fl_a_var_theta_i 
     [5] : const FL   fl_a_var_theta_q 
     [6] : const U1   u1_a_flg_point_many 
     [7] : const U1   u1_a_flg_point_bias 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_curvr_for_base_abs; 
[2] MAINPROCESS(1) proc U1 u1_t_counter_vehicle_flg; 
[3] MAINPROCESS(1) proc U1 u1_t_continue_flg; 
[4] MAINPROCESS(1) proc U1 u1_t_noise_floor_calc_flg; 
[5] MAINPROCESS(1) proc FL fl_t_noise_floor; 
[6] MAINPROCESS(1) proc FL fl_t_v_self_bin_w_margin_dummy; 
[7] MAINPROCESS(1) proc U1 u1_t_v_self_bin_w_margin; 
[8] MAINPROCESS(1) proc U2 u2_t_lp_fcw_fft_data; 
[9] MAINPROCESS(1) proc FL fl_t_diff_ave_iq_abs; 
[10] MAINPROCESS(1) func<start> s4_t_curvr_for_base_abs = s4_abs((S4)s2_g_curvr_for_base 
[11] MAINPROCESS(1) func<end> ); 
[12] MAINPROCESS(1) if <start> if ( 
[13] MAINPROCESS(1) if  (CFL_CANOUT_VSELF_MIN <= fl_g_v_self_bsm_for_base 
[14] MAINPROCESS(1) if  ) 
[15] MAINPROCESS(1) if  &&  (fl_g_v_self_bsm_for_base < (FL)CU1_HEISOU_VSELF_MAX) 
[16] MAINPROCESS(1) if  &&  (s4_t_curvr_for_base_abs >= (S4)CANOUT_CURVER_MIN)) 
[17] MAINPROCESS(1) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) func<start> u1_t_noise_floor_calc_flg = u1_slipjdg_get_noise_floor(&fl_t_noise_floor 
[19] SUBPROCESS(1) func<end> ); 
[20] SUBPROCESS(1) if <start> if ( 
[21] SUBPROCESS(1) if  u1_t_noise_floor_calc_flg == CU1_DF_OFF 
[22] SUBPROCESS(1) if  ) 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) func<start> fl_t_noise_floor = fl_slipjdg_calc_average_of_2fcw_noise_floor(afl_g_cvw_fcw_ftt_power, (U2)20 
[25] SUBSUBPROCESS(1) func<end> ); 
[26] SUBPROCESS(2) func<start> u1_t_continue_flg = u1_cmn_autoaxis_aac_road_ref_bin_calc(fl_g_v_self_bsm_for_base, &fl_t_v_self_bin_w_margin_dummy, &u1_t_v_self_bin_w_margin 
[27] SUBPROCESS(2) func<end> ); 
[28] SUBPROCESS(2) equal u1_t_counter_vehicle_flg (U1)0;
[29] SUBPROCESS(2) if <start> if ( 
[30] SUBPROCESS(2) if  u1_t_continue_flg == (U1)1 
[31] SUBPROCESS(2) if  ) 
[32] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[33] SUBSUBPROCESS(1) for <start> for ( 
[34] SUBSUBPROCESS(1) for  u2_t_lp_fcw_fft_data = (U2)0; 
[35] SUBSUBPROCESS(1) for  u2_t_lp_fcw_fft_data < (U2)u1_t_v_self_bin_w_margin; 
[36] SUBSUBPROCESS(1) for  u2_t_lp_fcw_fft_data++) 
[37] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBPROCESS(1) if <start> if ( 
[39] SUBSUBSUBPROCESS(1) if  afl_g_cvw_fcw_ftt_power[u2_t_lp_fcw_fft_data] > (fl_t_noise_floor + (FL)15.0F) 
[40] SUBSUBSUBPROCESS(1) if  ) 
[41] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[42] SUBSUBSUBSUBPROCESS(1) equal u1_t_counter_vehicle_flg (U1)1;
[43] SUBPROCESS(3) if <start> if ( 
[44] SUBPROCESS(3) if  (u1_a_Ni >= (U1)2 
[45] SUBPROCESS(3) if  ) 
[46] SUBPROCESS(3) if  &&  (u1_a_Nq >= (U1)2) 
[47] SUBPROCESS(3) if  &&  (u1_t_counter_vehicle_flg == (U1)0)) 
[48] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[49] SUBSUBPROCESS(1) func<start> fl_t_diff_ave_iq_abs = fl_abs(fl_a_ave_theta_i - fl_a_ave_theta_q 
[50] SUBSUBPROCESS(1) func<end> ); 
[51] SUBSUBPROCESS(1) if <start> if ( 
[52] SUBSUBPROCESS(1) if  fl_t_diff_ave_iq_abs < (FL)15.0F 
[53] SUBSUBPROCESS(1) if  ) 
[54] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[55] SUBSUBSUBPROCESS(1) if <start> if ( 
[56] SUBSUBSUBPROCESS(1) if  (fl_a_var_theta_i < (FL)100 
[57] SUBSUBSUBPROCESS(1) if  ) 
[58] SUBSUBSUBPROCESS(1) if  &&  (fl_a_var_theta_q < (FL)100)) 
[59] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[60] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[61] SUBSUBSUBSUBPROCESS(1) if  ((s4_t_curvr_for_base_abs > (S4)CU1_HEISOU_CURVER_MIN 
[62] SUBSUBSUBSUBPROCESS(1) if  ) 
[63] SUBSUBSUBSUBPROCESS(1) if  ||   (u1_a_flg_point_many == (U1)1)) 
[64] SUBSUBSUBSUBPROCESS(1) if  &&  (u1_a_flg_point_bias == (U1)0)) 
[65] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[66] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.s1_ctr_heisou_car + (S1)1;
[67] SUBSUBSUBPROCESS(2) else<start> else 
[68] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[69] SUBSUBPROCESS(2) else<start> else 
[70] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[71] SUBSUBSUBPROCESS(1) if <start> if ( 
[72] SUBSUBSUBPROCESS(1) if  u1_a_flg_point_many == (U1)1 
[73] SUBSUBSUBPROCESS(1) if  ) 
[74] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[75] SUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.s1_ctr_heisou_car - (S1)2;
[76] SUBSUBSUBPROCESS(2) else<start> else 
[77] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[78] SUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.s1_ctr_heisou_car - (S1)1;
[79] SUBPROCESS(4) else<start> else 
[80] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[81] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.s1_ctr_heisou_car - (S1)1;
[82] SUBSUBPROCESS(1) if <start> if ( 
[83] SUBSUBPROCESS(1) if  (u1_a_flg_point_bias == (U1)1 
[84] SUBSUBPROCESS(1) if  ) 
[85] SUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[1] < (S4)WALL_REJECT_TH3)) 
[86] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[87] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] (S4)WALL_REJECT_TH3;
[88] MAINPROCESS(2) else<start> else 
[89] MAINPROCESS(2) subproc SUBPROCESS(1) 
[90] SUBPROCESS(1) equal st_g_bsm_loop_data.s1_ctr_heisou_car (S1)0;
[91] MAINPROCESS(3) if <start> if ( 
[92] MAINPROCESS(3) if  st_g_bsm_loop_data.s1_ctr_heisou_car > (S1)18 
[93] MAINPROCESS(3) if  ) 
[94] MAINPROCESS(3) subproc SUBPROCESS(1) 
[95] SUBPROCESS(1) equal st_g_bsm_loop_data.s1_ctr_heisou_car (S1)18;
[96] MAINPROCESS(4) else if <start> else if ( 
[97] MAINPROCESS(4) else if  st_g_bsm_loop_data.s1_ctr_heisou_car < (S1)0 
[98] MAINPROCESS(4) else if  ) 
[99] MAINPROCESS(4) subproc SUBPROCESS(1) 
[100] SUBPROCESS(1) equal st_g_bsm_loop_data.s1_ctr_heisou_car (S1)0;
[101] MAINPROCESS(5) else<start> else 
[102] MAINPROCESS(5) subproc SUBPROCESS(1) 
[103] MAINPROCESS(6) if <start> if ( 
[104] MAINPROCESS(6) if  st_g_bsm_loop_data.u1_flg_heisou_car == (U1)0 
[105] MAINPROCESS(6) if  ) 
[106] MAINPROCESS(6) subproc SUBPROCESS(1) 
[107] SUBPROCESS(1) if <start> if ( 
[108] SUBPROCESS(1) if  st_g_bsm_loop_data.s1_ctr_heisou_car >= (S1)12 
[109] SUBPROCESS(1) if  ) 
[110] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[111] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.u1_flg_heisou_car (U1)1;
[112] MAINPROCESS(7) if <start> if ( 
[113] MAINPROCESS(7) if  st_g_bsm_loop_data.u1_flg_heisou_car != (U1)0 
[114] MAINPROCESS(7) if  ) 
[115] MAINPROCESS(7) subproc SUBPROCESS(1) 
[116] SUBPROCESS(1) if <start> if ( 
[117] SUBPROCESS(1) if  st_g_bsm_loop_data.s1_ctr_heisou_car <= (S1)6 
[118] SUBPROCESS(1) if  ) 
[119] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[120] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.u1_flg_heisou_car (U1)0;
[121] MAINPROCESS(8) proc return; 
----------------- Total Codes : 121 lines
--------------------------
[Function Name] : fn_bsm_low_judge_exist_leading_car_mediation 
-Return type : static VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  st_g_bsm_loop_data.u1_flg_heisou_car == (U1)1 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[0] (S4)1;
[6] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[0] (S4)1;
[7] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[1] (S4)1;
[8] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[2] (S4)0;
[9] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] (S4)0;
[10] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[1] (S4)0;
[11] MAINPROCESS(2) proc return; 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : check_fm_object 
-Return type : S4 
-Argument : 3 
     [0] : const NORMAL_BSM   ast_a_normal_sot_prev[1] 
     [1] : S4   s4_a_leading_flg 
     [2] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 tmp_fm_obj_flg 0;
[2] MAINPROCESS(1) proc S4 i,j; 
[3] MAINPROCESS(1) equal S4 tmp_peak_num_up 0;
[4] MAINPROCESS(1) equal S4 tmp_peak_num_dn 0;
[5] MAINPROCESS(1) proc FL tmp_wall_thres_up[NB_FFT_PT]; 
[6] MAINPROCESS(1) proc FL tmp_wall_thres_dn[NB_FFT_PT]; 
[7] MAINPROCESS(1) proc S4 start_bin; 
[8] MAINPROCESS(1) proc S4 end_bin; 
[9] MAINPROCESS(1) proc S4 tmp_freq_peak_bin_up[PEAK_BUFFSIZE]; 
[10] MAINPROCESS(1) proc S4 tmp_freq_peak_bin_dn[PEAK_BUFFSIZE]; 
[11] MAINPROCESS(1) proc FL tmp_freq_peak_power_up[PEAK_BUFFSIZE]; 
[12] MAINPROCESS(1) proc FL tmp_freq_peak_power_dn[PEAK_BUFFSIZE]; 
[13] MAINPROCESS(1) proc FL tmp_doa_spec_up[SOT_FMPEAK_RANGE][N_DOA]; 
[14] MAINPROCESS(1) proc FL tmp_doa_spec_dn[SOT_FMPEAK_RANGE][N_DOA]; 
[15] MAINPROCESS(1) proc S4 tmp_doa_peak_bin_up[SOT_FMPEAK_RANGE][1]; 
[16] MAINPROCESS(1) proc S4 tmp_doa_peak_bin_dn[SOT_FMPEAK_RANGE][1]; 
[17] MAINPROCESS(1) proc FL tmp_doa_peak_pow_up[SOT_FMPEAK_RANGE][1]; 
[18] MAINPROCESS(1) proc FL tmp_doa_peak_pow_dn[SOT_FMPEAK_RANGE][1]; 
[19] MAINPROCESS(1) equal FL tmp_doa_ave_up 0;
[20] MAINPROCESS(1) equal FL tmp_doa_ave_dn 0;
[21] MAINPROCESS(1) equal FL tmp_doa_pow_ave_up 0;
[22] MAINPROCESS(1) equal FL tmp_doa_pow_ave_dn 0;
[23] MAINPROCESS(1) equal FL tmp_angle_ave_up 0;
[24] MAINPROCESS(1) equal FL tmp_angle_ave_dn 0;
[25] MAINPROCESS(1) equal S4 s4_t_sample_num_up_for_ave 0;
[26] MAINPROCESS(1) equal S4 s4_t_sample_num_dn_for_ave 0;
[27] MAINPROCESS(1) proc S4 s4_t_sample_num_up_for_dev; 
[28] MAINPROCESS(1) proc S4 s4_t_sample_num_dn_for_dev; 
[29] MAINPROCESS(1) equal FL tmp_doa_dev_up 0;
[30] MAINPROCESS(1) equal FL tmp_doa_dev_dn 0;
[31] MAINPROCESS(1) equal S4 tmp_peak_index_dn -1;
[32] MAINPROCESS(1) equal S4 tmp_peak_index_up -1;
[33] MAINPROCESS(1) equal FL tmp_peak_power_diff_min TH_TT_MAX;
[34] MAINPROCESS(1) equal FL tmp_doa_diff 180.0F;
[35] MAINPROCESS(1) equal FL tmptmp_peak_power_diff 0.0F;
[36] MAINPROCESS(1) equal FL tmp_peak_power_up_max 0.0F;
[37] MAINPROCESS(1) equal FL tmp_peak_power_dn_max 0.0F;
[38] MAINPROCESS(1) equal FL tmp_fm_theta 0.0F;
[39] MAINPROCESS(1) equal FL tmp_fm_v 0.0F;
[40] MAINPROCESS(1) equal FL tmp_fm_vx 0.0F;
[41] MAINPROCESS(1) equal FL tmp_fm_vy 0.0F;
[42] MAINPROCESS(1) proc U4 u4_t_lp_fft_pt; 
[43] MAINPROCESS(1) proc U4 u4_t_lp_peak_buffsize; 
[44] MAINPROCESS(1) proc U4 u4_t_lp_sot_fmpeak_range; 
[45] MAINPROCESS(1) proc U4 u4_t_lp_n_doa; 
[46] MAINPROCESS(1) proc FL fl_t_diff_doa_ave_up_dn_abs; 
[47] MAINPROCESS(1) for <start> for ( 
[48] MAINPROCESS(1) for  u4_t_lp_fft_pt = (U4)0; 
[49] MAINPROCESS(1) for  u4_t_lp_fft_pt < (U4)NB_FFT_PT; 
[50] MAINPROCESS(1) for  u4_t_lp_fft_pt++) 
[51] MAINPROCESS(1) subproc SUBPROCESS(1) 
[52] SUBPROCESS(1) equal tmp_wall_thres_up[u4_t_lp_fft_pt] (FL)0.0F;
[53] SUBPROCESS(1) equal tmp_wall_thres_dn[u4_t_lp_fft_pt] (FL)0.0F;
[54] MAINPROCESS(2) for <start> for ( 
[55] MAINPROCESS(2) for  u4_t_lp_peak_buffsize = (U4)0; 
[56] MAINPROCESS(2) for  u4_t_lp_peak_buffsize < (U4)PEAK_BUFFSIZE; 
[57] MAINPROCESS(2) for  u4_t_lp_peak_buffsize++) 
[58] MAINPROCESS(2) subproc SUBPROCESS(1) 
[59] SUBPROCESS(1) equal tmp_freq_peak_bin_up[u4_t_lp_peak_buffsize] (S4)0;
[60] SUBPROCESS(1) equal tmp_freq_peak_bin_dn[u4_t_lp_peak_buffsize] (S4)0;
[61] SUBPROCESS(1) equal tmp_freq_peak_power_up[u4_t_lp_peak_buffsize] (FL)0.0F;
[62] SUBPROCESS(1) equal tmp_freq_peak_power_dn[u4_t_lp_peak_buffsize] (FL)0.0F;
[63] MAINPROCESS(3) for <start> for ( 
[64] MAINPROCESS(3) for  u4_t_lp_sot_fmpeak_range = (U4)0; 
[65] MAINPROCESS(3) for  u4_t_lp_sot_fmpeak_range < (U4)SOT_FMPEAK_RANGE; 
[66] MAINPROCESS(3) for  u4_t_lp_sot_fmpeak_range++) 
[67] MAINPROCESS(3) subproc SUBPROCESS(1) 
[68] SUBPROCESS(1) for <start> for ( 
[69] SUBPROCESS(1) for  u4_t_lp_n_doa = (U4)0; 
[70] SUBPROCESS(1) for  u4_t_lp_n_doa < (U4)N_DOA; 
[71] SUBPROCESS(1) for  u4_t_lp_n_doa++) 
[72] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[73] SUBSUBPROCESS(1) equal tmp_doa_spec_up[u4_t_lp_sot_fmpeak_range][u4_t_lp_n_doa] (FL)0.0F;
[74] SUBSUBPROCESS(1) equal tmp_doa_spec_dn[u4_t_lp_sot_fmpeak_range][u4_t_lp_n_doa] (FL)0.0F;
[75] SUBPROCESS(2) equal tmp_doa_peak_bin_up[u4_t_lp_sot_fmpeak_range][0] (S4)-1;
[76] SUBPROCESS(2) equal tmp_doa_peak_bin_dn[u4_t_lp_sot_fmpeak_range][0] (S4)-1;
[77] SUBPROCESS(2) equal tmp_doa_peak_pow_up[u4_t_lp_sot_fmpeak_range][0] (FL)0.0F;
[78] SUBPROCESS(2) equal tmp_doa_peak_pow_dn[u4_t_lp_sot_fmpeak_range][0] (FL)0.0F;
[79] MAINPROCESS(4) equal tmp_peak_index_dn -1;
[80] MAINPROCESS(4) equal tmp_peak_index_up -1;
[81] MAINPROCESS(4) equal start_bin NB_FFT_PT/2+2;
[82] MAINPROCESS(4) equal end_bin NB_FFT_PT/2+(S4)(SOT_WALL_MAX/RCOF*0.5F)+SOT_FMPEAK_RANGE;
[83] MAINPROCESS(4) if<start> if( 
[84] MAINPROCESS(4) if st_g_bsm_loop_data.afl_wall_width[0]!= WALL_MAX 
[85] MAINPROCESS(4) if ) 
[86] MAINPROCESS(4) subproc SUBPROCESS(1) 
[87] SUBPROCESS(1) equal end_bin NB_FFT_PT/2+(S4)((st_g_bsm_loop_data.afl_wall_width[0]+SOT_WALL_OFFSET)/RCOF*0.5F)+SOT_FMPEAK_RANGE;
[88] MAINPROCESS(5) if<start> if( 
[89] MAINPROCESS(5) if s4_a_leading_flg == 0 
[90] MAINPROCESS(5) if ) 
[91] MAINPROCESS(5) subproc SUBPROCESS(1) 
[92] SUBPROCESS(1) func<start> tmp_peak_num_dn = s4_search_freq_peaks_within_freq_range( 
[93] SUBPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[1], 
[94] SUBPROCESS(1) func tmp_freq_peak_bin_dn, 
[95] SUBPROCESS(1) func tmp_freq_peak_power_dn, 
[96] SUBPROCESS(1) func (const FL *)tmp_wall_thres_dn, 
[97] SUBPROCESS(1) func 0, 
[98] SUBPROCESS(1) func start_bin, 
[99] SUBPROCESS(1) func end_bin 
[100] SUBPROCESS(1) func<end> ); 
[101] SUBPROCESS(1) func<start> tmp_peak_num_up = s4_search_freq_peaks_within_freq_range( 
[102] SUBPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[0], 
[103] SUBPROCESS(1) func tmp_freq_peak_bin_up, 
[104] SUBPROCESS(1) func tmp_freq_peak_power_up, 
[105] SUBPROCESS(1) func (const FL *)tmp_wall_thres_up, 
[106] SUBPROCESS(1) func 0, 
[107] SUBPROCESS(1) func start_bin, 
[108] SUBPROCESS(1) func end_bin 
[109] SUBPROCESS(1) func<end> ); 
[110] SUBPROCESS(1) for<start> for( 
[111] SUBPROCESS(1) for i=0; 
[112] SUBPROCESS(1) for i<tmp_peak_num_up; 
[113] SUBPROCESS(1) for i++) 
[114] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[115] SUBSUBPROCESS(1) for<start> for( 
[116] SUBSUBPROCESS(1) for j=0; 
[117] SUBSUBPROCESS(1) for j<tmp_peak_num_dn; 
[118] SUBSUBPROCESS(1) for j++) 
[119] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[120] SUBSUBSUBPROCESS(1) func<start> tmptmp_peak_power_diff =  fl_abs(tmp_freq_peak_power_up[i] - tmp_freq_peak_power_dn[j] 
[121] SUBSUBSUBPROCESS(1) func<end> ); 
[122] SUBSUBSUBPROCESS(1) if <start> if ( 
[123] SUBSUBSUBPROCESS(1) if  (tmp_freq_peak_power_up[i] >= tmp_peak_power_up_max 
[124] SUBSUBSUBPROCESS(1) if  ) 
[125] SUBSUBSUBPROCESS(1) if  &&  (tmp_freq_peak_power_dn[j] >= tmp_peak_power_dn_max) 
[126] SUBSUBSUBPROCESS(1) if  &&  ((tmp_peak_power_diff_min > tmptmp_peak_power_diff) 
[127] SUBSUBSUBPROCESS(1) if  ||   ((tmp_freq_peak_power_up[i] >= (tmp_peak_power_up_max + (FL)10.0F)) 
[128] SUBSUBSUBPROCESS(1) if  &&    (tmp_freq_peak_power_dn[j] >= (tmp_peak_power_dn_max + (FL)10.0F)) 
[129] SUBSUBSUBPROCESS(1) if  &&    ((tmp_peak_power_diff_min + (FL)5.0F) > tmptmp_peak_power_diff)))) 
[130] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[131] SUBSUBSUBSUBPROCESS(1) equal tmp_peak_power_diff_min tmptmp_peak_power_diff;
[132] SUBSUBSUBSUBPROCESS(1) equal tmp_peak_power_up_max tmp_freq_peak_power_up[i];
[133] SUBSUBSUBSUBPROCESS(1) equal tmp_peak_power_dn_max tmp_freq_peak_power_dn[j];
[134] SUBSUBSUBSUBPROCESS(1) equal tmp_peak_index_up i;
[135] SUBSUBSUBSUBPROCESS(1) equal tmp_peak_index_dn j;
[136] MAINPROCESS(6) else<start> else 
[137] MAINPROCESS(6) subproc SUBPROCESS(1) 
[138] SUBPROCESS(1) if<start> if( 
[139] SUBPROCESS(1) if ast_a_normal_sot_prev[0].fl_Robs != CFL_UNKNOWN_VALUE 
[140] SUBPROCESS(1) if ) 
[141] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[142] SUBSUBPROCESS(1) equal tmp_peak_index_up 0;
[143] SUBSUBPROCESS(1) equal tmp_peak_index_dn 0;
[144] SUBSUBPROCESS(1) equal tmp_freq_peak_bin_up[tmp_peak_index_up] ast_a_normal_sot_prev[0].s4_bin_up;
[145] SUBSUBPROCESS(1) equal tmp_freq_peak_bin_dn[tmp_peak_index_dn] ast_a_normal_sot_prev[0].s4_bin_dn;
[146] SUBSUBPROCESS(1) equal tmp_freq_peak_power_up[tmp_peak_index_up] ast_a_normal_sot_prev[0].fl_power_up;
[147] SUBSUBPROCESS(1) equal tmp_freq_peak_power_dn[tmp_peak_index_dn] ast_a_normal_sot_prev[0].fl_power_dn;
[148] MAINPROCESS(7) if <start> if ( 
[149] MAINPROCESS(7) if  (tmp_peak_index_dn != -1 
[150] MAINPROCESS(7) if  ) 
[151] MAINPROCESS(7) if  &&  (tmp_peak_index_up != -1)) 
[152] MAINPROCESS(7) subproc SUBPROCESS(1) 
[153] SUBPROCESS(1) for <start> for ( 
[154] SUBPROCESS(1) for  i = (S4)0; 
[155] SUBPROCESS(1) for  i < SOT_FMPEAK_RANGE; 
[156] SUBPROCESS(1) for  i++) 
[157] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[158] SUBSUBPROCESS(1) func<start> fn_calc_spec_bf_4ch_fm( 
[159] SUBSUBPROCESS(1) func (const FL *)(afl_g_cvw_lfm_ryy_matrix[1][tmp_freq_peak_bin_dn[tmp_peak_index_dn]-2 + i]), 
[160] SUBSUBPROCESS(1) func tmp_doa_spec_dn[i], 
[161] SUBSUBPROCESS(1) func 1, 
[162] SUBSUBPROCESS(1) func tmp_freq_peak_bin_dn[tmp_peak_index_dn]-2 + i 
[163] SUBSUBPROCESS(1) func<end> ); 
[164] SUBSUBPROCESS(1) func<start> fn_calc_spec_bf_4ch_fm( 
[165] SUBSUBPROCESS(1) func (const FL *)(afl_g_cvw_lfm_ryy_matrix[0][tmp_freq_peak_bin_up[tmp_peak_index_up]-2 + i]), 
[166] SUBSUBPROCESS(1) func tmp_doa_spec_up[i], 
[167] SUBSUBPROCESS(1) func 0, 
[168] SUBSUBPROCESS(1) func tmp_freq_peak_bin_up[tmp_peak_index_up]-2 + i 
[169] SUBSUBPROCESS(1) func<end> ); 
[170] SUBPROCESS(2) for <start> for ( 
[171] SUBPROCESS(2) for  i = (S4)0; 
[172] SUBPROCESS(2) for  i < SOT_FMPEAK_RANGE; 
[173] SUBPROCESS(2) for  i++) 
[174] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[175] SUBSUBPROCESS(1) func<start> s4_search_peak_bf( 
[176] SUBSUBPROCESS(1) func (const FL *)tmp_doa_spec_dn[i], 
[177] SUBSUBPROCESS(1) func tmp_doa_peak_bin_dn[i], 
[178] SUBSUBPROCESS(1) func tmp_doa_peak_pow_dn[i], 
[179] SUBSUBPROCESS(1) func 1 
[180] SUBSUBPROCESS(1) func<end> ); 
[181] SUBSUBPROCESS(1) func<start> s4_search_peak_bf( 
[182] SUBSUBPROCESS(1) func (const FL *)tmp_doa_spec_up[i], 
[183] SUBSUBPROCESS(1) func tmp_doa_peak_bin_up[i], 
[184] SUBSUBPROCESS(1) func tmp_doa_peak_pow_up[i], 
[185] SUBSUBPROCESS(1) func 1 
[186] SUBSUBPROCESS(1) func<end> ); 
[187] SUBPROCESS(3) equal s4_t_sample_num_up_for_ave (S4)0;
[188] SUBPROCESS(3) equal s4_t_sample_num_dn_for_ave (S4)0;
[189] SUBPROCESS(3) equal s4_t_sample_num_up_for_dev (S4)0;
[190] SUBPROCESS(3) equal s4_t_sample_num_dn_for_dev (S4)0;
[191] SUBPROCESS(3) for <start> for ( 
[192] SUBPROCESS(3) for  i = (S4)0; 
[193] SUBPROCESS(3) for  i < SOT_FMPEAK_RANGE; 
[194] SUBPROCESS(3) for  i++) 
[195] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[196] SUBSUBPROCESS(1) if <start> if ( 
[197] SUBSUBPROCESS(1) if  (tmp_doa_peak_bin_dn[i][0] != (S4)-1 
[198] SUBSUBPROCESS(1) if  ) 
[199] SUBSUBPROCESS(1) if  &&  (tmp_doa_peak_bin_dn[i][0] > (S4)90 - (S4)AXIS_DEFAULT + (S4)3)) 
[200] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[201] SUBSUBSUBPROCESS(1) equal tmp_doa_ave_dn + (FL)tmp_doa_peak_bin_dn[i][0];
[202] SUBSUBSUBPROCESS(1) equal tmp_doa_pow_ave_dn + tmp_doa_peak_pow_dn[i][0];
[203] SUBSUBSUBPROCESS(1) proc s4_t_sample_num_dn_for_ave++; 
[204] SUBSUBPROCESS(2) if <start> if ( 
[205] SUBSUBPROCESS(2) if  (tmp_doa_peak_bin_up[i][0] != (S4)-1 
[206] SUBSUBPROCESS(2) if  ) 
[207] SUBSUBPROCESS(2) if  &&  (tmp_doa_peak_bin_up[i][0] > (S4)90 - (S4)AXIS_DEFAULT + (S4)3)) 
[208] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[209] SUBSUBSUBPROCESS(1) equal tmp_doa_ave_up + (FL)tmp_doa_peak_bin_up[i][0];
[210] SUBSUBSUBPROCESS(1) equal tmp_doa_pow_ave_up + tmp_doa_peak_pow_up[i][0];
[211] SUBSUBSUBPROCESS(1) proc s4_t_sample_num_up_for_ave++; 
[212] SUBPROCESS(4) if <start> if ( 
[213] SUBPROCESS(4) if  s4_t_sample_num_dn_for_ave != (S4)0 
[214] SUBPROCESS(4) if  ) 
[215] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[216] SUBSUBPROCESS(1) equal tmp_doa_ave_dn tmp_doa_ave_dn / (FL)s4_t_sample_num_dn_for_ave;
[217] SUBSUBPROCESS(1) equal tmp_doa_pow_ave_dn tmp_doa_pow_ave_dn / (FL)s4_t_sample_num_dn_for_ave;
[218] SUBPROCESS(5) else<start> else 
[219] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[220] SUBSUBPROCESS(1) equal tmp_doa_ave_dn (FL)0.0F;
[221] SUBSUBPROCESS(1) equal tmp_doa_pow_ave_dn (FL)0.0F;
[222] SUBPROCESS(6) if <start> if ( 
[223] SUBPROCESS(6) if  s4_t_sample_num_up_for_ave != (S4)0 
[224] SUBPROCESS(6) if  ) 
[225] SUBPROCESS(6) subproc SUBSUBPROCESS(1) 
[226] SUBSUBPROCESS(1) equal tmp_doa_ave_up tmp_doa_ave_up / (FL)s4_t_sample_num_up_for_ave;
[227] SUBSUBPROCESS(1) equal tmp_doa_pow_ave_up tmp_doa_pow_ave_up / (FL)s4_t_sample_num_up_for_ave;
[228] SUBPROCESS(7) else<start> else 
[229] SUBPROCESS(7) subproc SUBSUBPROCESS(1) 
[230] SUBSUBPROCESS(1) equal tmp_doa_ave_up (FL)0.0F;
[231] SUBSUBPROCESS(1) equal tmp_doa_pow_ave_up (FL)0.0F;
[232] SUBPROCESS(8) for <start> for ( 
[233] SUBPROCESS(8) for  i = (S4)0; 
[234] SUBPROCESS(8) for  i < SOT_FMPEAK_RANGE; 
[235] SUBPROCESS(8) for  i++) 
[236] SUBPROCESS(8) subproc SUBSUBPROCESS(1) 
[237] SUBSUBPROCESS(1) if<start> if( 
[238] SUBSUBPROCESS(1) if tmp_doa_peak_bin_dn[i][0] != -1 
[239] SUBSUBPROCESS(1) if ) 
[240] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[241] SUBSUBSUBPROCESS(1) func<start> tmp_doa_dev_dn += ((FL)tmp_doa_peak_bin_dn[i][0] - tmp_doa_ave_dn) * ((FL)tmp_doa_peak_bin_dn[i][0] - tmp_doa_ave_dn 
[242] SUBSUBSUBPROCESS(1) func<end> ); 
[243] SUBSUBSUBPROCESS(1) proc s4_t_sample_num_dn_for_dev++; 
[244] SUBSUBPROCESS(2) if<start> if( 
[245] SUBSUBPROCESS(2) if tmp_doa_peak_bin_up[i][0] != -1 
[246] SUBSUBPROCESS(2) if ) 
[247] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[248] SUBSUBSUBPROCESS(1) func<start> tmp_doa_dev_up += ((FL)tmp_doa_peak_bin_up[i][0] - tmp_doa_ave_up) * ((FL)tmp_doa_peak_bin_up[i][0] - tmp_doa_ave_up 
[249] SUBSUBSUBPROCESS(1) func<end> ); 
[250] SUBSUBSUBPROCESS(1) proc s4_t_sample_num_up_for_dev++; 
[251] SUBPROCESS(9) if <start> if ( 
[252] SUBPROCESS(9) if  s4_t_sample_num_dn_for_dev != (S4)0 
[253] SUBPROCESS(9) if  ) 
[254] SUBPROCESS(9) subproc SUBSUBPROCESS(1) 
[255] SUBSUBPROCESS(1) equal tmp_doa_dev_dn tmp_doa_dev_dn / (FL)s4_t_sample_num_dn_for_dev;
[256] SUBPROCESS(10) else<start> else 
[257] SUBPROCESS(10) subproc SUBSUBPROCESS(1) 
[258] SUBSUBPROCESS(1) equal tmp_doa_dev_dn (FL)999.9F;
[259] SUBPROCESS(11) if <start> if ( 
[260] SUBPROCESS(11) if  s4_t_sample_num_up_for_dev != (S4)0 
[261] SUBPROCESS(11) if  ) 
[262] SUBPROCESS(11) subproc SUBSUBPROCESS(1) 
[263] SUBSUBPROCESS(1) equal tmp_doa_dev_up tmp_doa_dev_up / (FL)s4_t_sample_num_up_for_dev;
[264] SUBPROCESS(12) else<start> else 
[265] SUBPROCESS(12) subproc SUBSUBPROCESS(1) 
[266] SUBSUBPROCESS(1) equal tmp_doa_dev_up (FL)999.9F;
[267] MAINPROCESS(8) func<start> tmp_angle_ave_dn = -(st_g_bsm_loop_data.afl_installed_angle[0] + DOA_ANG_PER_BIN*tmp_doa_ave_dn + DOA_BIN_START_ANG 
[268] MAINPROCESS(8) func<end> ); 
[269] MAINPROCESS(8) func<start> tmp_angle_ave_up = -(st_g_bsm_loop_data.afl_installed_angle[0] + DOA_ANG_PER_BIN*tmp_doa_ave_up + DOA_BIN_START_ANG 
[270] MAINPROCESS(8) func<end> ); 
[271] MAINPROCESS(8) equal tmp_fm_obj_flg 0;
[272] MAINPROCESS(8) if <start> if ( 
[273] MAINPROCESS(8) if  (tmp_peak_index_dn != -1 
[274] MAINPROCESS(8) if  ) 
[275] MAINPROCESS(8) if  &&  (tmp_peak_index_up != -1)) 
[276] MAINPROCESS(8) subproc SUBPROCESS(1) 
[277] SUBPROCESS(1) if <start> if ( 
[278] SUBPROCESS(1) if  (tmp_freq_peak_power_up[tmp_peak_index_up] > WALL_OBJECT_POW_TH 
[279] SUBPROCESS(1) if  ) 
[280] SUBPROCESS(1) if  &&  (tmp_freq_peak_power_dn[tmp_peak_index_dn] > WALL_OBJECT_POW_TH)) 
[281] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[282] SUBSUBPROCESS(1) if <start> if ( 
[283] SUBSUBPROCESS(1) if  (s4_a_leading_flg != 0 
[284] SUBSUBPROCESS(1) if  ) 
[285] SUBSUBPROCESS(1) if  &&  ((s4_t_sample_num_up_for_ave > (SOT_FMPEAK_RANGE - (S4)1)) 
[286] SUBSUBPROCESS(1) if  ||   (s4_t_sample_num_dn_for_ave > (SOT_FMPEAK_RANGE - (S4)1))) 
[287] SUBSUBPROCESS(1) if  &&  (tmp_angle_ave_up < WALL_ANGLE_TH_BACKWARD_WITHCAR) 
[288] SUBSUBPROCESS(1) if  &&  (tmp_angle_ave_dn < WALL_ANGLE_TH_BACKWARD_WITHCAR) 
[289] SUBSUBPROCESS(1) if  &&  (tmp_angle_ave_up > WALL_ANGLE_TH_FORWARD_WITHCAR) 
[290] SUBSUBPROCESS(1) if  &&  (tmp_angle_ave_dn > WALL_ANGLE_TH_FORWARD_WITHCAR) 
[291] SUBSUBPROCESS(1) if  &&  (tmp_doa_dev_dn < WALL_ANGLE_TH_DIV_WITHCAR) 
[292] SUBSUBPROCESS(1) if  &&  (tmp_doa_dev_up < WALL_ANGLE_TH_DIV_WITHCAR)) 
[293] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[294] SUBSUBSUBPROCESS(1) equal tmp_fm_obj_flg 1;
[295] SUBSUBPROCESS(2) else if <start> else if ( 
[296] SUBSUBPROCESS(2) else if  ((s4_t_sample_num_up_for_ave > (SOT_FMPEAK_RANGE - (S4)1) 
[297] SUBSUBPROCESS(2) else if  ) 
[298] SUBSUBPROCESS(2) else if  ||   (s4_t_sample_num_dn_for_ave > (SOT_FMPEAK_RANGE - (S4)1))) 
[299] SUBSUBPROCESS(2) else if  &&  (tmp_angle_ave_up < WALL_ANGLE_TH_BACKWARD_NOCAR) 
[300] SUBSUBPROCESS(2) else if  &&  (tmp_angle_ave_dn < WALL_ANGLE_TH_BACKWARD_NOCAR) 
[301] SUBSUBPROCESS(2) else if  &&  (tmp_angle_ave_up > WALL_ANGLE_TH_FORWARD_NOCAR) 
[302] SUBSUBPROCESS(2) else if  &&  (tmp_angle_ave_dn > WALL_ANGLE_TH_FORWARD_NOCAR) 
[303] SUBSUBPROCESS(2) else if  &&  (tmp_doa_dev_dn < WALL_ANGLE_TH_DIV_NOCAR) 
[304] SUBSUBPROCESS(2) else if  &&  (tmp_doa_dev_up < WALL_ANGLE_TH_DIV_NOCAR)) 
[305] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[306] SUBSUBSUBPROCESS(1) equal tmp_fm_obj_flg 1;
[307] SUBSUBSUBPROCESS(1) func<start> fl_t_diff_doa_ave_up_dn_abs = fl_abs(tmp_doa_ave_up - tmp_doa_ave_dn 
[308] SUBSUBSUBPROCESS(1) func<end> ); 
[309] SUBSUBSUBPROCESS(1) if <start> if ( 
[310] SUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_slow_sot_find[0] == (U1)1 
[311] SUBSUBSUBPROCESS(1) if  ) 
[312] SUBSUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.s4_flg_alarm == (U1)0) 
[313] SUBSUBSUBPROCESS(1) if  &&  (fl_t_diff_doa_ave_up_dn_abs > (FL)20.0F) 
[314] SUBSUBSUBPROCESS(1) if  &&  (tmp_freq_peak_power_up[tmp_peak_index_up] < (FL)60.0F) 
[315] SUBSUBSUBPROCESS(1) if  &&  (tmp_freq_peak_power_dn[tmp_peak_index_dn] < (FL)60.0F)) 
[316] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[317] SUBSUBSUBSUBPROCESS(1) equal tmp_fm_obj_flg (S4)0;
[318] SUBSUBPROCESS(3) else<start> else 
[319] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[320] MAINPROCESS(9) if<start> if( 
[321] MAINPROCESS(9) if tmp_fm_obj_flg == 1 
[322] MAINPROCESS(9) if ) 
[323] MAINPROCESS(9) subproc SUBPROCESS(1) 
[324] SUBPROCESS(1) equal ast_a_normal_sot[0].s4_bin_up tmp_freq_peak_bin_up[tmp_peak_index_up];
[325] SUBPROCESS(1) equal ast_a_normal_sot[0].s4_bin_dn tmp_freq_peak_bin_dn[tmp_peak_index_dn];
[326] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_bin_up_interpolate (FL)tmp_freq_peak_bin_up[tmp_peak_index_up];
[327] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_bin_dn_interpolate (FL)tmp_freq_peak_bin_dn[tmp_peak_index_dn];
[328] SUBPROCESS(1) equal ast_a_normal_sot[0].s4_bin_up_music (S4)tmp_doa_ave_up;
[329] SUBPROCESS(1) equal ast_a_normal_sot[0].s4_bin_dn_music (S4)tmp_doa_ave_dn;
[330] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_doa_up_interpolate tmp_doa_ave_up;
[331] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_doa_dn_interpolate tmp_doa_ave_dn;
[332] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_power_up tmp_freq_peak_power_up[tmp_peak_index_up];
[333] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_power_dn tmp_freq_peak_power_dn[tmp_peak_index_dn];
[334] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_power_up_music tmp_doa_pow_ave_up;
[335] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_power_dn_music tmp_doa_pow_ave_dn;
[336] SUBPROCESS(1) func<start> ast_a_normal_sot[0].fl_theta_up = fl_transform_doabin_to_rad( 
[337] SUBPROCESS(1) func ast_a_normal_sot[0].s4_bin_up_music, 
[338] SUBPROCESS(1) func 0 
[339] SUBPROCESS(1) func<end> ); 
[340] SUBPROCESS(1) func<start> ast_a_normal_sot[0].fl_theta_dn = fl_transform_doabin_to_rad( 
[341] SUBPROCESS(1) func ast_a_normal_sot[0].s4_bin_dn_music, 
[342] SUBPROCESS(1) func 1 
[343] SUBPROCESS(1) func<end> ); 
[344] SUBPROCESS(1) func<start> ast_a_normal_sot[0].fl_Robs	=  -RCOF * (FL)(ast_a_normal_sot[0].s4_bin_up + ast_a_normal_sot[0].s4_bin_dn - NB_FFT_PT 
[345] SUBPROCESS(1) func<end> ); 
[346] SUBPROCESS(1) func<start> ast_a_normal_sot[0].fl_Rxobs = (FL)(ast_a_normal_sot[0].fl_Robs*(FL)fl_sin( DOA_ANG_PER_BIN*0.5F*(ast_a_normal_sot[0].fl_theta_up+ast_a_normal_sot[0].fl_theta_dn) )+ st_g_bsm_loop_data.afl_installed_angle[1] 
[347] SUBPROCESS(1) func<end> ); 
[348] SUBPROCESS(1) func<start> ast_a_normal_sot[0].fl_Ryobs = (FL)(ast_a_normal_sot[0].fl_Robs*(FL)fl_cos( DOA_ANG_PER_BIN*0.5F*(ast_a_normal_sot[0].fl_theta_up+ast_a_normal_sot[0].fl_theta_dn) ) 
[349] SUBPROCESS(1) func<end> ); 
[350] SUBPROCESS(1) equal tmp_fm_theta 0.0F;
[351] SUBPROCESS(1) equal tmp_fm_v 0.0F;
[352] SUBPROCESS(1) equal tmp_fm_vx 0.0F;
[353] SUBPROCESS(1) equal tmp_fm_vy 0.0F;
[354] SUBPROCESS(1) func<start> tmp_fm_theta = 0.5F*(ast_a_normal_sot[0].fl_theta_up + ast_a_normal_sot[0].fl_theta_dn 
[355] SUBPROCESS(1) func<end> ); 
[356] SUBPROCESS(1) func<start> tmp_fm_v = -VCOF * (FL)(ast_a_normal_sot[0].s4_bin_up - ast_a_normal_sot[0].s4_bin_dn 
[357] SUBPROCESS(1) func<end> ); 
[358] SUBPROCESS(1) equal tmp_fm_vx 0.0F;
[359] SUBPROCESS(1) equal tmp_fm_vy tmp_fm_v;
[360] SUBPROCESS(1) func<start> tmp_fm_vy = fl_get_vy(tmp_fm_v, fl_cos(tmp_fm_theta), ast_a_normal_sot[0].fl_Ryobs, fl_g_v_self_bsm_for_base 
[361] SUBPROCESS(1) func<end> ); 
[362] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_Vobs tmp_fm_v;
[363] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_Vxobs tmp_fm_vx;
[364] SUBPROCESS(1) equal ast_a_normal_sot[0].fl_Vyobs tmp_fm_vy;
[365] MAINPROCESS(10) proc return tmp_fm_obj_flg; 
----------------- Total Codes : 365 lines
--------------------------
[Function Name] : check_fm_spectrum 
-Return type : S4 
-Argument : 2 
     [0] : FL   sot_thres_up[NB_FFT_PT] 
     [1] : FL   sot_thres_dn[NB_FFT_PT] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 tmp_fm_flg 0;
[2] MAINPROCESS(1) proc S4 wall_check_up[3]; 
[3] MAINPROCESS(1) proc S4 wall_check_dn[3]; 
[4] MAINPROCESS(1) proc S4 wall_bin_up[3]; 
[5] MAINPROCESS(1) proc S4 wall_bin_dn[3]; 
[6] MAINPROCESS(1) proc FL wall_pow_up[3]; 
[7] MAINPROCESS(1) proc FL wall_pow_dn[3]; 
[8] MAINPROCESS(1) proc S4 ret_up; 
[9] MAINPROCESS(1) proc S4 ret_dn; 
[10] MAINPROCESS(1) func<start> set_freq_threshold_without_center_mask( 
[11] MAINPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[0], 
[12] MAINPROCESS(1) func sot_thres_up 
[13] MAINPROCESS(1) func<end> ); 
[14] MAINPROCESS(1) func<start> ret_up = set_wall_freq_threshold( 
[15] MAINPROCESS(1) func (const FL *)sot_thres_up, 
[16] MAINPROCESS(1) func sot_thres_up, 
[17] MAINPROCESS(1) func wall_check_up, 
[18] MAINPROCESS(1) func wall_bin_up, 
[19] MAINPROCESS(1) func wall_pow_up, 
[20] MAINPROCESS(1) func WALL_UP_FREQ_BIN_TH_LOWER_LIMIT, 
[21] MAINPROCESS(1) func WALL_UP_FREQ_BIN_TH_UPPER_LIMIT 
[22] MAINPROCESS(1) func<end> ); 
[23] MAINPROCESS(1) func<start> set_freq_threshold_without_center_mask( 
[24] MAINPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[1], 
[25] MAINPROCESS(1) func sot_thres_dn 
[26] MAINPROCESS(1) func<end> ); 
[27] MAINPROCESS(1) func<start> ret_dn = set_wall_freq_threshold( 
[28] MAINPROCESS(1) func (const FL *)sot_thres_dn, 
[29] MAINPROCESS(1) func sot_thres_dn, 
[30] MAINPROCESS(1) func wall_check_dn, 
[31] MAINPROCESS(1) func wall_bin_dn, 
[32] MAINPROCESS(1) func wall_pow_dn, 
[33] MAINPROCESS(1) func WALL_DN_FREQ_BIN_TH_LOWER_LIMIT, 
[34] MAINPROCESS(1) func WALL_DN_FREQ_BIN_TH_UPPER_LIMIT 
[35] MAINPROCESS(1) func<end> ); 
[36] MAINPROCESS(1) func<start> tmp_fm_flg = s4_bsm_side_check_fm_approaching_object( 
[37] MAINPROCESS(1) func (const FL *)sot_thres_up, 
[38] MAINPROCESS(1) func (const FL *)sot_thres_dn, 
[39] MAINPROCESS(1) func (const S4 *)wall_check_up, 
[40] MAINPROCESS(1) func (const S4 *)wall_check_dn, 
[41] MAINPROCESS(1) func (const S4 *)wall_bin_up, 
[42] MAINPROCESS(1) func (const S4 *)wall_bin_dn, 
[43] MAINPROCESS(1) func (const FL *)wall_pow_up, 
[44] MAINPROCESS(1) func (const FL *)wall_pow_dn 
[45] MAINPROCESS(1) func<end> ); 
[46] MAINPROCESS(1) proc return tmp_fm_flg; 
----------------- Total Codes : 46 lines
--------------------------
[Function Name] : s4_bsm_side_check_fm_approaching_object 
-Return type : static S4 
-Argument : 8 
     [0] : const FL   afl_a_sot_thres_up[NB_FFT_PT] 
     [1] : const FL   afl_a_sot_thres_dn[NB_FFT_PT] 
     [2] : const S4   as4_a_wall_check_up[3] 
     [3] : const S4   as4_a_wall_check_dn[3] 
     [4] : const S4   as4_a_wall_bin_up[3] 
     [5] : const S4   as4_a_wall_bin_dn[3] 
     [6] : const FL   afl_a_wall_pow_up[3] 
     [7] : const FL   afl_a_wall_pow_dn[3] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 s4_t_fm_flg; 
[3] MAINPROCESS(1) equal S4 tmp_up_flg 0;
[4] MAINPROCESS(1) equal S4 tmp_dn_flg 0;
[5] MAINPROCESS(1) equal s4_t_fm_flg 0;
[6] MAINPROCESS(1) equal tmp_dn_flg 0;
[7] MAINPROCESS(1) for <start> for ( 
[8] MAINPROCESS(1) for  i = 1; 
[9] MAINPROCESS(1) for  i < WALL_FREQ_BIN_TH_STEPS; 
[10] MAINPROCESS(1) for  i++) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if <start> if ( 
[13] SUBPROCESS(1) if  (as4_a_wall_check_dn[i] == 1 
[14] SUBPROCESS(1) if  ) 
[15] SUBPROCESS(1) if  ||  ((afl_a_wall_pow_dn[i] - afl_a_sot_thres_dn[0]) >= WALL_PEAK_TH)) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) if <start> if ( 
[18] SUBSUBPROCESS(1) if  (as4_a_wall_bin_dn[i] > WALL_FREQ_BIN_LOWER_STEP1_DN 
[19] SUBSUBPROCESS(1) if  ) 
[20] SUBSUBPROCESS(1) if  &&  (as4_a_wall_bin_dn[i] <= WALL_FREQ_BIN_UPPER_STEP1_DN)) 
[21] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBPROCESS(1) equal tmp_dn_flg 1;
[23] SUBSUBSUBPROCESS(1) proc break; 
[24] MAINPROCESS(2) equal tmp_up_flg 0;
[25] MAINPROCESS(2) for <start> for ( 
[26] MAINPROCESS(2) for  i = 1; 
[27] MAINPROCESS(2) for  i < WALL_FREQ_BIN_TH_STEPS; 
[28] MAINPROCESS(2) for  i++) 
[29] MAINPROCESS(2) subproc SUBPROCESS(1) 
[30] SUBPROCESS(1) if <start> if ( 
[31] SUBPROCESS(1) if  (as4_a_wall_check_up[i] == 1 
[32] SUBPROCESS(1) if  ) 
[33] SUBPROCESS(1) if  &&  ((afl_a_wall_pow_up[i] - afl_a_sot_thres_up[0]) >= WALL_PEAK_TH)) 
[34] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[35] SUBSUBPROCESS(1) if <start> if ( 
[36] SUBSUBPROCESS(1) if  as4_a_wall_bin_up[i] >= as4_a_wall_bin_dn[1] 
[37] SUBSUBPROCESS(1) if  ) 
[38] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[39] SUBSUBSUBPROCESS(1) equal tmp_up_flg 1;
[40] SUBSUBSUBPROCESS(1) proc break; 
[41] MAINPROCESS(3) if <start> if ( 
[42] MAINPROCESS(3) if  (tmp_dn_flg != 0 
[43] MAINPROCESS(3) if  ) 
[44] MAINPROCESS(3) if  &&  (tmp_up_flg != 0)) 
[45] MAINPROCESS(3) subproc SUBPROCESS(1) 
[46] SUBPROCESS(1) equal s4_t_fm_flg 1;
[47] MAINPROCESS(4) proc return s4_t_fm_flg; 
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : set_stationary_doa_line_2f 
-Return type : VD 
-Argument : 3 
     [0] : S4   stationary_doa_line[N_DOA] 
     [1] : S4   v0_doa_def 
     [2] : S4   v0_doa 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal S4 car_dir v0_doa - v0_doa_def;
[3] MAINPROCESS(1) for<start> for( 
[4] MAINPROCESS(1) for i=0; 
[5] MAINPROCESS(1) for i<N_DOA; 
[6] MAINPROCESS(1) for i++) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) func<start> stationary_doa_line[i] = NB_FFT_PT_2F / 2 + (S4)(fl_g_v_self_bsm_for_base * fl_cos(PI / (FL)180.0F * (FL)car_dir) / 3.6F * fl_sin(PI / (FL)180.0F * (FL)(i - v0_doa)) / VCOF_2F 
[9] SUBPROCESS(1) func<end> ); 
----------------- Total Codes : 9 lines
--------------------------
[Function Name] : set_sot_limit_doa_line_2f 
-Return type : VD 
-Argument : 4 
     [0] : S4   sot_limit_doa_line[N_DOA] 
     [1] : S4   v0_doa_def 
     [2] : S4   v0_doa 
     [3] : FL   v_sot_offset 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal S4 car_dir v0_doa - v0_doa_def;
[3] MAINPROCESS(1) equal S4 tmp_doa 0;
[4] MAINPROCESS(1) for <start> for ( 
[5] MAINPROCESS(1) for  i = 0; 
[6] MAINPROCESS(1) for  i < N_DOA; 
[7] MAINPROCESS(1) for  i++) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) func<start> tmp_doa = NB_FFT_PT_2F / 2 + (S4)((v_sot_offset) * fl_cos(PI / (FL)180.0F * (FL)car_dir) / 3.6F * fl_sin(PI / (FL)180.0F * (FL)(i - v0_doa)) / VCOF_2F 
[10] SUBPROCESS(1) func<end> ); 
[11] SUBPROCESS(1) if <start> if ( 
[12] SUBPROCESS(1) if  tmp_doa > 0 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] SUBSUBPROCESS(1) equal sot_limit_doa_line[i] tmp_doa;
[16] SUBPROCESS(2) else<start> else 
[17] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal sot_limit_doa_line[i] 0;
----------------- Total Codes : 18 lines
--------------------------
[Function Name] : calc_nearfield_doa_2f_I 
-Return type : U1 
-Argument : 4 
     [0] : S4   nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [1] : S4   nearfield_doa_peak_num[SLOW_SOT_FREQ_BIN_RANGE] 
     [2] : S4   start_freq_bin 
     [3] : FL   afl_a_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i, j; 
[2] MAINPROCESS(1) proc FL spec_doa[N_DOA]; 
[3] MAINPROCESS(1) proc S4 tmp_doa[WAVE_NUMBER_MAX]; 
[4] MAINPROCESS(1) proc FL tmp_peak_power[WAVE_NUMBER_MAX]; 
[5] MAINPROCESS(1) proc U1 u1_t_num_nearfield_doa_2f_i; 
[6] MAINPROCESS(1) proc U2 u2_t_lp_martrix_2f; 
[7] MAINPROCESS(1) proc U1 u1_t_lp_sot_check; 
[8] MAINPROCESS(1) proc FL afl_t_tmp_Ryy[CU2_PCS_FCW_RYY_MATRIX_2F]; 
[9] MAINPROCESS(1) proc FL fl_t_tmp_theta; 
[10] MAINPROCESS(1) proc FL fl_t_tmp_Robs; 
[11] MAINPROCESS(1) proc FL fl_t_tmp_Vobs; 
[12] MAINPROCESS(1) proc U1 u1_t_exist_flag; 
[13] MAINPROCESS(1) proc U1 u1_t_lp_wave; 
[14] MAINPROCESS(1) proc AUTOAXIS_DATA_FORMAT st_t_auto_axis_data; 
[15] MAINPROCESS(1) for<start> for( 
[16] MAINPROCESS(1) for i = 0; 
[17] MAINPROCESS(1) for i < N_DOA; 
[18] MAINPROCESS(1) for i++ ) 
[19] MAINPROCESS(1) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) equal spec_doa[i] 0.0F;
[21] MAINPROCESS(2) equal u1_t_num_nearfield_doa_2f_i (U1)0;
[22] MAINPROCESS(2) equal u1_t_exist_flag CU1_FALSE;
[23] MAINPROCESS(2) equal st_t_auto_axis_data.s2_freq_bin (S2)-1;
[24] MAINPROCESS(2) for <start> for ( 
[25] MAINPROCESS(2) for  u1_t_lp_wave = (U1)0; 
[26] MAINPROCESS(2) for  u1_t_lp_wave < WAVE_NUMBER_MAX; 
[27] MAINPROCESS(2) for  u1_t_lp_wave++) 
[28] MAINPROCESS(2) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) equal st_t_auto_axis_data.s4_doa_bin[u1_t_lp_wave] (S4)-1;
[30] SUBPROCESS(1) equal st_t_auto_axis_data.fl_doa_pow[u1_t_lp_wave] (FL)-1.0F;
[31] MAINPROCESS(3) for<start> for( 
[32] MAINPROCESS(3) for i=0; 
[33] MAINPROCESS(3) for i<SLOW_SOT_FREQ_BIN_RANGE; 
[34] MAINPROCESS(3) for i++) 
[35] MAINPROCESS(3) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) for<start> for( 
[37] SUBPROCESS(1) for j=0; 
[38] SUBPROCESS(1) for j<1; 
[39] SUBPROCESS(1) for j++) 
[40] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[41] SUBSUBPROCESS(1) equal nearfield_doa[i][j] -1;
[42] SUBPROCESS(2) equal nearfield_doa_peak_num[i] 0;
[43] MAINPROCESS(4) for <start> for ( 
[44] MAINPROCESS(4) for  i = start_freq_bin; 
[45] MAINPROCESS(4) for  i < (start_freq_bin + SLOW_SOT_FREQ_BIN_RANGE 
[46] MAINPROCESS(4) for  ); 
[47] MAINPROCESS(4) for  i++) 
[48] MAINPROCESS(4) subproc SUBPROCESS(1) 
[49] SUBPROCESS(1) equal nearfield_doa_peak_num[i-start_freq_bin] 0;
[50] SUBPROCESS(1) func<start> u1_t_exist_flag = u1_cmn_autoaxis_get_already_2f_dbf_data((U2)i, &st_t_auto_axis_data 
[51] SUBPROCESS(1) func<end> ); 
[52] SUBPROCESS(1) if <start> if ( 
[53] SUBPROCESS(1) if  u1_t_exist_flag == CU1_FALSE 
[54] SUBPROCESS(1) if  ) 
[55] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[56] SUBSUBPROCESS(1) func<start> fn_calc_spec_bf_4ch_2f( 
[57] SUBSUBPROCESS(1) func (const FL *)(afl_g_cvw_fcw_ryy_matrix[i]), 
[58] SUBSUBPROCESS(1) func spec_doa, 
[59] SUBSUBPROCESS(1) func 1, 
[60] SUBSUBPROCESS(1) func i 
[61] SUBSUBPROCESS(1) func<end> ); 
[62] SUBSUBPROCESS(1) func<start> nearfield_doa_peak_num[i-start_freq_bin] = s4_search_peak_bf( 
[63] SUBSUBPROCESS(1) func (const FL *)spec_doa, 
[64] SUBSUBPROCESS(1) func tmp_doa, 
[65] SUBSUBPROCESS(1) func tmp_peak_power, 
[66] SUBSUBPROCESS(1) func 1 
[67] SUBSUBPROCESS(1) func<end> ); 
[68] SUBPROCESS(2) else<start> else 
[69] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[70] SUBSUBPROCESS(1) equal tmp_doa[0] st_t_auto_axis_data.s4_doa_bin[0];
[71] SUBSUBPROCESS(1) equal tmp_peak_power[0] st_t_auto_axis_data.fl_doa_pow[0];
[72] SUBSUBPROCESS(1) equal nearfield_doa_peak_num[i - start_freq_bin] WAVE_NUMBER_MAX;
[73] SUBPROCESS(3) for<start> for( 
[74] SUBPROCESS(3) for j=0; 
[75] SUBPROCESS(3) for j<nearfield_doa_peak_num[i-start_freq_bin]; 
[76] SUBPROCESS(3) for j++ ) 
[77] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[78] SUBSUBPROCESS(1) equal nearfield_doa[i-start_freq_bin][j] tmp_doa[j];
[79] MAINPROCESS(5) for <start> for ( 
[80] MAINPROCESS(5) for  i = start_freq_bin; 
[81] MAINPROCESS(5) for  i < (start_freq_bin + SLOW_SOT_FREQ_BIN_RANGE 
[82] MAINPROCESS(5) for  ); 
[83] MAINPROCESS(5) for  i++) 
[84] MAINPROCESS(5) subproc SUBPROCESS(1) 
[85] SUBPROCESS(1) if <start> if ( 
[86] SUBPROCESS(1) if  afl_g_cvw_fcw_ftt_power[i] < CFL_SLOW_SOT_FFT_POW_TH 
[87] SUBPROCESS(1) if  ) 
[88] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[89] SUBSUBPROCESS(1) for <start> for ( 
[90] SUBSUBPROCESS(1) for  j = 0; 
[91] SUBSUBPROCESS(1) for  j < nearfield_doa_peak_num[i - start_freq_bin]; 
[92] SUBSUBPROCESS(1) for  j++ ) 
[93] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[94] SUBSUBSUBPROCESS(1) equal nearfield_doa[i - start_freq_bin][j] -1;
[95] SUBSUBPROCESS(2) equal nearfield_doa_peak_num[i - start_freq_bin] 0;
[96] SUBPROCESS(2) else<start> else 
[97] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[98] SUBSUBPROCESS(1) proc u1_t_num_nearfield_doa_2f_i++; 
[99] MAINPROCESS(6) for <start> for ( 
[100] MAINPROCESS(6) for  i = (S4)0; 
[101] MAINPROCESS(6) for  i < SLOW_SOT_FREQ_BIN_RANGE; 
[102] MAINPROCESS(6) for  i++) 
[103] MAINPROCESS(6) subproc SUBPROCESS(1) 
[104] SUBPROCESS(1) if <start> if ( 
[105] SUBPROCESS(1) if  nearfield_doa[i][0] != (S4)-1 
[106] SUBPROCESS(1) if  ) 
[107] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[108] SUBSUBPROCESS(1) for <start> for ( 
[109] SUBSUBPROCESS(1) for  u2_t_lp_martrix_2f = (U2)0; 
[110] SUBSUBPROCESS(1) for  u2_t_lp_martrix_2f < CU2_PCS_FCW_RYY_MATRIX_2F; 
[111] SUBSUBPROCESS(1) for  u2_t_lp_martrix_2f++) 
[112] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[113] SUBSUBSUBPROCESS(1) equal afl_t_tmp_Ryy[u2_t_lp_martrix_2f] afl_g_cvw_fcw_ryy_matrix_2f[SLOW_SOT_FREQ_BIN_START_I + i][u2_t_lp_martrix_2f];
[114] SUBSUBPROCESS(2) func<start> fl_t_tmp_theta = -(PI / (FL)180.0F * (st_g_bsm_loop_data.afl_installed_angle[0] + (FL)nearfield_doa[i][0] + (FL)DOA_BIN_START_ANG) 
[115] SUBSUBPROCESS(2) func<end> ); 
[116] SUBSUBPROCESS(2) func<start> fl_t_tmp_Robs = fl_cal_r_fsk((const FL *)afl_t_tmp_Ryy 
[117] SUBSUBPROCESS(2) func<end> ); 
[118] SUBSUBPROCESS(2) equal afl_a_sot_check_object_i[i][0] (fl_t_tmp_Robs * fl_sin(fl_t_tmp_theta)) + st_g_bsm_loop_data.afl_installed_angle[1];
[119] SUBSUBPROCESS(2) func<start> afl_a_sot_check_object_i[i][1] = fl_t_tmp_Robs * fl_cos(fl_t_tmp_theta 
[120] SUBSUBPROCESS(2) func<end> ); 
[121] SUBSUBPROCESS(2) func<start> fl_t_tmp_Vobs = VCOF_2F * ((FL)(SLOW_SOT_FREQ_BIN_START_I + i) - (FL)NB_FFT_PT_2F / (FL)2.0F 
[122] SUBSUBPROCESS(2) func<end> ); 
[123] SUBSUBPROCESS(2) if <start> if ( 
[124] SUBSUBPROCESS(2) if  fl_sin(fl_t_tmp_theta) != (FL)0.0F 
[125] SUBSUBPROCESS(2) if  ) 
[126] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[127] SUBSUBSUBPROCESS(1) equal afl_a_sot_check_object_i[i][2] (fl_t_tmp_Vobs / fl_sin(fl_t_tmp_theta)) * (FL)3.6F;
[128] SUBSUBPROCESS(3) else<start> else 
[129] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[130] SUBSUBSUBPROCESS(1) equal afl_a_sot_check_object_i[i][2] fl_t_tmp_Vobs;
[131] SUBSUBPROCESS(4) if <start> if ( 
[132] SUBSUBPROCESS(4) if  fl_cos(fl_t_tmp_theta) != (FL)0.0F 
[133] SUBSUBPROCESS(4) if  ) 
[134] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[135] SUBSUBSUBPROCESS(1) equal afl_a_sot_check_object_i[i][3] (fl_t_tmp_Vobs / fl_cos(fl_t_tmp_theta)) * (FL)3.6F;
[136] SUBSUBPROCESS(5) else<start> else 
[137] SUBSUBPROCESS(5) subproc SUBSUBSUBPROCESS(1) 
[138] SUBSUBSUBPROCESS(1) equal afl_a_sot_check_object_i[i][3] fl_t_tmp_Vobs;
[139] SUBPROCESS(2) else<start> else 
[140] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[141] SUBSUBPROCESS(1) for <start> for ( 
[142] SUBSUBPROCESS(1) for  u1_t_lp_sot_check = (U1)0; 
[143] SUBSUBPROCESS(1) for  u1_t_lp_sot_check < (U1)4; 
[144] SUBSUBPROCESS(1) for  u1_t_lp_sot_check++) 
[145] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[146] SUBSUBSUBPROCESS(1) equal afl_a_sot_check_object_i[i][u1_t_lp_sot_check] CFL_UNKNOWN_VALUE;
[147] MAINPROCESS(7) proc return u1_t_num_nearfield_doa_2f_i; 
----------------- Total Codes : 147 lines
--------------------------
[Function Name] : calc_nearfield_doa_2f_Q 
-Return type : U1 
-Argument : 4 
     [0] : S4   nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [1] : S4   nearfield_doa_peak_num[SLOW_SOT_FREQ_BIN_RANGE] 
     [2] : S4   start_freq_bin 
     [3] : FL   afl_a_sot_check_object_q[SLOW_SOT_FREQ_BIN_RANGE][4] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i, j; 
[2] MAINPROCESS(1) proc FL spec_doa[N_DOA]; 
[3] MAINPROCESS(1) proc S4 tmp_doa[WAVE_NUMBER_MAX]; 
[4] MAINPROCESS(1) proc FL tmp_peak_power[WAVE_NUMBER_MAX]; 
[5] MAINPROCESS(1) proc U1 u1_t_num_nearfield_doa_2f_q; 
[6] MAINPROCESS(1) proc U2 u2_t_lp_martrix_2f; 
[7] MAINPROCESS(1) proc U1 u1_t_lp_sot_check; 
[8] MAINPROCESS(1) proc FL afl_t_tmp_Ryy[CU2_PCS_FCW_RYY_MATRIX_2F]; 
[9] MAINPROCESS(1) proc FL fl_t_tmp_theta; 
[10] MAINPROCESS(1) proc FL fl_t_tmp_Robs; 
[11] MAINPROCESS(1) proc FL fl_t_tmp_Vobs; 
[12] MAINPROCESS(1) proc U1 u1_t_exist_flag; 
[13] MAINPROCESS(1) proc U1 u1_t_lp_wave; 
[14] MAINPROCESS(1) proc AUTOAXIS_DATA_FORMAT st_t_auto_axis_data; 
[15] MAINPROCESS(1) for<start> for( 
[16] MAINPROCESS(1) for i = 0; 
[17] MAINPROCESS(1) for i < N_DOA; 
[18] MAINPROCESS(1) for i++ ) 
[19] MAINPROCESS(1) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) equal spec_doa[i] 0.0F;
[21] MAINPROCESS(2) equal u1_t_num_nearfield_doa_2f_q (U1)0;
[22] MAINPROCESS(2) equal u1_t_exist_flag CU1_FALSE;
[23] MAINPROCESS(2) equal st_t_auto_axis_data.s2_freq_bin (S2)-1;
[24] MAINPROCESS(2) for <start> for ( 
[25] MAINPROCESS(2) for  u1_t_lp_wave = (U1)0; 
[26] MAINPROCESS(2) for  u1_t_lp_wave < WAVE_NUMBER_MAX; 
[27] MAINPROCESS(2) for  u1_t_lp_wave++) 
[28] MAINPROCESS(2) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) equal st_t_auto_axis_data.s4_doa_bin[u1_t_lp_wave] (S4)-1;
[30] SUBPROCESS(1) equal st_t_auto_axis_data.fl_doa_pow[u1_t_lp_wave] (FL)-1.0F;
[31] MAINPROCESS(3) for<start> for( 
[32] MAINPROCESS(3) for i=0; 
[33] MAINPROCESS(3) for i<SLOW_SOT_FREQ_BIN_RANGE; 
[34] MAINPROCESS(3) for i++) 
[35] MAINPROCESS(3) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) for<start> for( 
[37] SUBPROCESS(1) for j=0; 
[38] SUBPROCESS(1) for j<1; 
[39] SUBPROCESS(1) for j++) 
[40] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[41] SUBSUBPROCESS(1) equal nearfield_doa[i][j] -1;
[42] SUBPROCESS(2) equal nearfield_doa_peak_num[i] 0;
[43] MAINPROCESS(4) for <start> for ( 
[44] MAINPROCESS(4) for  i = start_freq_bin; 
[45] MAINPROCESS(4) for  i > (start_freq_bin - SLOW_SOT_FREQ_BIN_RANGE 
[46] MAINPROCESS(4) for  ); 
[47] MAINPROCESS(4) for  i--) 
[48] MAINPROCESS(4) subproc SUBPROCESS(1) 
[49] SUBPROCESS(1) equal nearfield_doa_peak_num[start_freq_bin-i] 0;
[50] SUBPROCESS(1) func<start> u1_t_exist_flag = u1_cmn_autoaxis_get_already_2f_dbf_data((U2)i, &st_t_auto_axis_data 
[51] SUBPROCESS(1) func<end> ); 
[52] SUBPROCESS(1) if <start> if ( 
[53] SUBPROCESS(1) if  u1_t_exist_flag == CU1_FALSE 
[54] SUBPROCESS(1) if  ) 
[55] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[56] SUBSUBPROCESS(1) func<start> fn_calc_spec_bf_4ch_2f( 
[57] SUBSUBPROCESS(1) func (const FL *)(afl_g_cvw_fcw_ryy_matrix[i]), 
[58] SUBSUBPROCESS(1) func spec_doa, 
[59] SUBSUBPROCESS(1) func 1, 
[60] SUBSUBPROCESS(1) func i 
[61] SUBSUBPROCESS(1) func<end> ); 
[62] SUBSUBPROCESS(1) func<start> nearfield_doa_peak_num[start_freq_bin-i] = s4_search_peak_bf( 
[63] SUBSUBPROCESS(1) func (const FL *)spec_doa, 
[64] SUBSUBPROCESS(1) func tmp_doa, 
[65] SUBSUBPROCESS(1) func tmp_peak_power, 
[66] SUBSUBPROCESS(1) func 1 
[67] SUBSUBPROCESS(1) func<end> ); 
[68] SUBPROCESS(2) else<start> else 
[69] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[70] SUBSUBPROCESS(1) equal tmp_doa[0] st_t_auto_axis_data.s4_doa_bin[0];
[71] SUBSUBPROCESS(1) equal tmp_peak_power[0] st_t_auto_axis_data.fl_doa_pow[0];
[72] SUBSUBPROCESS(1) equal nearfield_doa_peak_num[start_freq_bin - i] WAVE_NUMBER_MAX;
[73] SUBPROCESS(3) for<start> for( 
[74] SUBPROCESS(3) for j=0; 
[75] SUBPROCESS(3) for j<nearfield_doa_peak_num[start_freq_bin-i]; 
[76] SUBPROCESS(3) for j++ ) 
[77] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[78] SUBSUBPROCESS(1) equal nearfield_doa[start_freq_bin-i][j] tmp_doa[j];
[79] MAINPROCESS(5) for <start> for ( 
[80] MAINPROCESS(5) for  i = start_freq_bin; 
[81] MAINPROCESS(5) for  i > (start_freq_bin - SLOW_SOT_FREQ_BIN_RANGE 
[82] MAINPROCESS(5) for  ); 
[83] MAINPROCESS(5) for  i--) 
[84] MAINPROCESS(5) subproc SUBPROCESS(1) 
[85] SUBPROCESS(1) if <start> if ( 
[86] SUBPROCESS(1) if  afl_g_cvw_fcw_ftt_power[i] < CFL_SLOW_SOT_FFT_POW_TH 
[87] SUBPROCESS(1) if  ) 
[88] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[89] SUBSUBPROCESS(1) for <start> for ( 
[90] SUBSUBPROCESS(1) for  j = 0; 
[91] SUBSUBPROCESS(1) for  j < nearfield_doa_peak_num[start_freq_bin - i]; 
[92] SUBSUBPROCESS(1) for  j++) 
[93] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[94] SUBSUBSUBPROCESS(1) equal nearfield_doa[start_freq_bin - i][j] -1;
[95] SUBSUBPROCESS(2) equal nearfield_doa_peak_num[start_freq_bin - i] 0;
[96] SUBPROCESS(2) else<start> else 
[97] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[98] SUBSUBPROCESS(1) proc u1_t_num_nearfield_doa_2f_q++; 
[99] MAINPROCESS(6) for <start> for ( 
[100] MAINPROCESS(6) for  i = (S4)0; 
[101] MAINPROCESS(6) for  i < SLOW_SOT_FREQ_BIN_RANGE; 
[102] MAINPROCESS(6) for  i++) 
[103] MAINPROCESS(6) subproc SUBPROCESS(1) 
[104] SUBPROCESS(1) if <start> if ( 
[105] SUBPROCESS(1) if  nearfield_doa[i][0] != (S4)-1 
[106] SUBPROCESS(1) if  ) 
[107] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[108] SUBSUBPROCESS(1) for <start> for ( 
[109] SUBSUBPROCESS(1) for  u2_t_lp_martrix_2f = (U2)0; 
[110] SUBSUBPROCESS(1) for  u2_t_lp_martrix_2f < CU2_PCS_FCW_RYY_MATRIX_2F; 
[111] SUBSUBPROCESS(1) for  u2_t_lp_martrix_2f++) 
[112] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[113] SUBSUBSUBPROCESS(1) equal afl_t_tmp_Ryy[u2_t_lp_martrix_2f] afl_g_cvw_fcw_ryy_matrix_2f[SLOW_SOT_FREQ_BIN_START_Q - i][u2_t_lp_martrix_2f];
[114] SUBSUBPROCESS(2) func<start> fl_t_tmp_theta = -(PI / (FL)180.0F * (st_g_bsm_loop_data.afl_installed_angle[0] + (FL)nearfield_doa[i][0] + (FL)DOA_BIN_START_ANG) 
[115] SUBSUBPROCESS(2) func<end> ); 
[116] SUBSUBPROCESS(2) func<start> fl_t_tmp_Robs = fl_cal_r_fsk((const FL *)afl_t_tmp_Ryy 
[117] SUBSUBPROCESS(2) func<end> ); 
[118] SUBSUBPROCESS(2) equal afl_a_sot_check_object_q[i][0] (fl_t_tmp_Robs * fl_sin(fl_t_tmp_theta)) + st_g_bsm_loop_data.afl_installed_angle[1];
[119] SUBSUBPROCESS(2) func<start> afl_a_sot_check_object_q[i][1] = fl_t_tmp_Robs * fl_cos(fl_t_tmp_theta 
[120] SUBSUBPROCESS(2) func<end> ); 
[121] SUBSUBPROCESS(2) func<start> fl_t_tmp_Vobs = VCOF_2F * ((FL)(SLOW_SOT_FREQ_BIN_START_Q - i) - (FL)NB_FFT_PT_2F / (FL)2.0F 
[122] SUBSUBPROCESS(2) func<end> ); 
[123] SUBSUBPROCESS(2) if <start> if ( 
[124] SUBSUBPROCESS(2) if  fl_sin(fl_t_tmp_theta) != (FL)0.0F 
[125] SUBSUBPROCESS(2) if  ) 
[126] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[127] SUBSUBSUBPROCESS(1) equal afl_a_sot_check_object_q[i][2] (fl_t_tmp_Vobs / fl_sin(fl_t_tmp_theta)) * (FL)3.6F;
[128] SUBSUBPROCESS(3) else<start> else 
[129] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[130] SUBSUBSUBPROCESS(1) equal afl_a_sot_check_object_q[i][2] fl_t_tmp_Vobs;
[131] SUBSUBPROCESS(4) if <start> if ( 
[132] SUBSUBPROCESS(4) if  fl_cos(fl_t_tmp_theta) != (FL)0.0F 
[133] SUBSUBPROCESS(4) if  ) 
[134] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[135] SUBSUBSUBPROCESS(1) equal afl_a_sot_check_object_q[i][3] (fl_t_tmp_Vobs / fl_cos(fl_t_tmp_theta)) * (FL)3.6F;
[136] SUBSUBPROCESS(5) else<start> else 
[137] SUBSUBPROCESS(5) subproc SUBSUBSUBPROCESS(1) 
[138] SUBSUBSUBPROCESS(1) equal afl_a_sot_check_object_q[i][3] fl_t_tmp_Vobs;
[139] SUBPROCESS(2) else<start> else 
[140] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[141] SUBSUBPROCESS(1) for <start> for ( 
[142] SUBSUBPROCESS(1) for  u1_t_lp_sot_check = (U1)0; 
[143] SUBSUBPROCESS(1) for  u1_t_lp_sot_check < (U1)4; 
[144] SUBSUBPROCESS(1) for  u1_t_lp_sot_check++) 
[145] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[146] SUBSUBSUBPROCESS(1) equal afl_a_sot_check_object_q[i][u1_t_lp_sot_check] CFL_UNKNOWN_VALUE;
[147] MAINPROCESS(7) proc return u1_t_num_nearfield_doa_2f_q; 
----------------- Total Codes : 147 lines
--------------------------
[Function Name] : compare_forward_always_2 
-Return type : U1 
-Argument : 5 
     [0] : const S4   nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [1] : const S4   nearfield_doa_peak_num[SLOW_SOT_FREQ_BIN_RANGE] 
     [2] : const S4   stationary_doa_line[N_DOA] 
     [3] : S4   v0_doa 
     [4] : const FL   afl_a_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i, k; 
[2] MAINPROCESS(1) proc S4 start_bin; 
[3] MAINPROCESS(1) proc S4 end_bin; 
[4] MAINPROCESS(1) equal S4 doa_dif_sotlimit_forward 0;
[5] MAINPROCESS(1) proc FL tmp_vsin; 
[6] MAINPROCESS(1) proc FL doa_stationary; 
[7] MAINPROCESS(1) proc FL doa_nearfield; 
[8] MAINPROCESS(1) proc S4 end_doa; 
[9] MAINPROCESS(1) proc U1 u1_t_num_forward; 
[10] MAINPROCESS(1) proc U1 u1_t_num_backward; 
[11] MAINPROCESS(1) equal u1_t_num_forward (U1)0;
[12] MAINPROCESS(1) equal u1_t_num_backward (U1)0;
[13] MAINPROCESS(1) equal start_bin SLOW_SOT_FREQ_BIN_START_I;
[14] MAINPROCESS(1) equal end_bin stationary_doa_line[N_DOA - 1];
[15] MAINPROCESS(1) if <start> if ( 
[16] MAINPROCESS(1) if  end_bin > SLOW_SOT_FREQ_BIN_MAX 
[17] MAINPROCESS(1) if  ) 
[18] MAINPROCESS(1) subproc SUBPROCESS(1) 
[19] SUBPROCESS(1) equal end_bin SLOW_SOT_FREQ_BIN_MAX;
[20] MAINPROCESS(2) equal end_doa (S4)N_DOA - (S4)AXIS_DEFAULT + (S4)40;
[21] MAINPROCESS(2) if<start> if( 
[22] MAINPROCESS(2) if fl_g_v_self_bsm_for_base < 20.0F 
[23] MAINPROCESS(2) if ) 
[24] MAINPROCESS(2) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) equal end_doa N_DOA - AXIS_DEFAULT + 30;
[26] MAINPROCESS(3) if<start> if( 
[27] MAINPROCESS(3) if fl_g_v_self_bsm_for_base < 13.0F 
[28] MAINPROCESS(3) if ) 
[29] MAINPROCESS(3) subproc SUBPROCESS(1) 
[30] SUBPROCESS(1) equal end_doa N_DOA - AXIS_DEFAULT + 20;
[31] MAINPROCESS(4) for <start> for ( 
[32] MAINPROCESS(4) for  i = SLOW_SOT_FREQ_BIN_START_I; 
[33] MAINPROCESS(4) for  i < (SLOW_SOT_FREQ_BIN_START_I + SLOW_SOT_FREQ_BIN_RANGE 
[34] MAINPROCESS(4) for  ); 
[35] MAINPROCESS(4) for  i++) 
[36] MAINPROCESS(4) subproc SUBPROCESS(1) 
[37] SUBPROCESS(1) equal tmp_vsin (FL)(i - (NB_FFT_PT_2F/2))*3.6F*VCOF_2F/fl_g_v_self_bsm_for_base;
[38] SUBPROCESS(1) if<start> if( 
[39] SUBPROCESS(1) if tmp_vsin > 1.0F 
[40] SUBPROCESS(1) if ) 
[41] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[42] SUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[43] SUBPROCESS(2) if<start> if( 
[44] SUBPROCESS(2) if tmp_vsin < -1.0F 
[45] SUBPROCESS(2) if ) 
[46] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[47] SUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[48] SUBPROCESS(3) equal doa_stationary (FL)fl_cal_asin(tmp_vsin) * 180.0F / PI + (FL)v0_doa;
[49] SUBPROCESS(3) if<start> if( 
[50] SUBPROCESS(3) if doa_stationary > N_DOA 
[51] SUBPROCESS(3) if ) 
[52] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[53] SUBSUBPROCESS(1) equal doa_stationary N_DOA;
[54] SUBSUBPROCESS(1) equal end_bin i - 1;
[55] SUBSUBPROCESS(1) proc break; 
[56] SUBPROCESS(4) if<start> if( 
[57] SUBPROCESS(4) if doa_stationary < 0 
[58] SUBPROCESS(4) if ) 
[59] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[60] SUBSUBPROCESS(1) equal doa_stationary 0;
[61] SUBSUBPROCESS(1) equal start_bin i + 1;
[62] SUBSUBPROCESS(1) proc break; 
[63] MAINPROCESS(5) for<start> for( 
[64] MAINPROCESS(5) for k=0; 
[65] MAINPROCESS(5) for k<SLOW_SOT_FREQ_BIN_RANGE; 
[66] MAINPROCESS(5) for k++) 
[67] MAINPROCESS(5) subproc SUBPROCESS(1) 
[68] SUBPROCESS(1) if <start> if ( 
[69] SUBPROCESS(1) if  ((SLOW_SOT_FREQ_BIN_START_I + k) >= start_bin 
[70] SUBPROCESS(1) if  ) 
[71] SUBPROCESS(1) if  &&  ((SLOW_SOT_FREQ_BIN_START_I + k) < end_bin) 
[72] SUBPROCESS(1) if  &&  (afl_a_sot_check_object_i[k][0] != CFL_UNKNOWN_VALUE) 
[73] SUBPROCESS(1) if  &&  (afl_a_sot_check_object_i[k][0] > (FL)0.0F) 
[74] SUBPROCESS(1) if  &&  (afl_a_sot_check_object_i[k][0] < (st_g_bsm_loop_data.afl_wall_width[0] * (FL)1.5F)) 
[75] SUBPROCESS(1) if  &&  ((afl_a_sot_check_object_i[k][3] / (FL)3.6F) > (((FL)-1.0F * fl_g_v_self_bsm_for_base / (FL)3.6F) - (FL)10.0F)) 
[76] SUBPROCESS(1) if  &&  (afl_a_sot_check_object_i[k][1] > (FL)-20.0F)) 
[77] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[78] SUBSUBPROCESS(1) for <start> for ( 
[79] SUBSUBPROCESS(1) for  i = 0; 
[80] SUBSUBPROCESS(1) for  i < nearfield_doa_peak_num[k]; 
[81] SUBSUBPROCESS(1) for  i++) 
[82] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[83] SUBSUBSUBPROCESS(1) if <start> if ( 
[84] SUBSUBSUBPROCESS(1) if  fl_g_v_self_bsm_for_base != 0.0F 
[85] SUBSUBSUBPROCESS(1) if  ) 
[86] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[87] SUBSUBSUBSUBPROCESS(1) equal tmp_vsin (FL)(SLOW_SOT_FREQ_BIN_START_I + k - (NB_FFT_PT_2F/2))*3.6F*VCOF_2F/fl_g_v_self_bsm_for_base;
[88] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[89] SUBSUBSUBSUBPROCESS(1) if  tmp_vsin > 1.0F 
[90] SUBSUBSUBSUBPROCESS(1) if  ) 
[91] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[92] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[93] SUBSUBSUBSUBPROCESS(2) if <start> if ( 
[94] SUBSUBSUBSUBPROCESS(2) if  tmp_vsin < -1.0F 
[95] SUBSUBSUBSUBPROCESS(2) if  ) 
[96] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[97] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[98] SUBSUBSUBSUBPROCESS(3) equal doa_stationary (FL)fl_cal_asin(tmp_vsin) * 180.0F / PI + (FL)v0_doa;
[99] SUBSUBSUBSUBPROCESS(3) equal doa_nearfield (FL)nearfield_doa[k][i];
[100] SUBSUBSUBSUBPROCESS(3) if <start> if ( 
[101] SUBSUBSUBSUBPROCESS(3) if  doa_nearfield < (FL)end_doa 
[102] SUBSUBSUBSUBPROCESS(3) if  ) 
[103] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[104] SUBSUBSUBSUBSUBPROCESS(1) func<start> doa_dif_sotlimit_forward = (S4)(doa_stationary - doa_nearfield 
[105] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[106] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[107] SUBSUBSUBSUBSUBPROCESS(1) if  doa_dif_sotlimit_forward < (S4)0 
[108] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[109] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[110] SUBSUBSUBSUBSUBSUBPROCESS(1) proc u1_t_num_forward++; 
[111] SUBSUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[112] SUBSUBSUBSUBSUBSUBPROCESS(1) if  doa_dif_sotlimit_forward < SoT_DIFF_TH3 
[113] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[114] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[115] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_sot_check_sum[0][0][0] += (-doa_dif_sotlimit_forward 
[116] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[117] SUBSUBSUBSUBSUBSUBPROCESS(2) if <start> if ( 
[118] SUBSUBSUBSUBSUBSUBPROCESS(2) if  doa_dif_sotlimit_forward < SoT_DIFF_TH1 
[119] SUBSUBSUBSUBSUBSUBPROCESS(2) if  ) 
[120] SUBSUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[121] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.as4_sot_check_points[0][0][0]++; 
[122] SUBSUBSUBSUBSUBSUBPROCESS(3) else if <start> else if ( 
[123] SUBSUBSUBSUBSUBSUBPROCESS(3) else if  doa_dif_sotlimit_forward < SoT_DIFF_TH2 
[124] SUBSUBSUBSUBSUBSUBPROCESS(3) else if  ) 
[125] SUBSUBSUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[126] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.as4_sot_check_points[0][1][0]++; 
[127] SUBSUBSUBSUBSUBSUBPROCESS(4) else if <start> else if ( 
[128] SUBSUBSUBSUBSUBSUBPROCESS(4) else if  doa_dif_sotlimit_forward < SoT_DIFF_TH3 
[129] SUBSUBSUBSUBSUBSUBPROCESS(4) else if  ) 
[130] SUBSUBSUBSUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[131] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.as4_sot_check_points[0][2][0]++; 
[132] SUBSUBSUBSUBSUBSUBPROCESS(5) else<start> else 
[133] SUBSUBSUBSUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[134] SUBSUBSUBSUBSUBPROCESS(2) else<start> else 
[135] SUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[136] SUBSUBSUBSUBSUBSUBPROCESS(1) proc u1_t_num_backward++; 
[137] SUBSUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[138] SUBSUBSUBSUBSUBSUBPROCESS(1) if  (FL)doa_dif_sotlimit_forward > (SLOW_SOT_V0_DOA - (FL)SoT_DIFF_TH3) 
[139] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[140] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[141] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_sot_check_sum[0][1][0] + doa_dif_sotlimit_forward;
[142] MAINPROCESS(6) proc return u1_t_num_forward; 
----------------- Total Codes : 142 lines
--------------------------
[Function Name] : compare_backward_always_2 
-Return type : U1 
-Argument : 7 
     [0] : const S4   nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [1] : const S4   nearfield_doa_peak_num[SLOW_SOT_FREQ_BIN_RANGE] 
     [2] : S4   stationary_doa_line[N_DOA] 
     [3] : S4   sot_limit_doa_line_backward[N_DOA] 
     [4] : S4   v0_doa 
     [5] : FL   v_sot_offset 
     [6] : const FL   afl_a_sot_check_object_q[SLOW_SOT_FREQ_BIN_RANGE][4] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i, k; 
[2] MAINPROCESS(1) proc S4 start_bin; 
[3] MAINPROCESS(1) proc S4 end_bin; 
[4] MAINPROCESS(1) equal S4 doa_dif_sotlimit_backward 0;
[5] MAINPROCESS(1) proc S4 s4_t_doa_dif_sotlimit_forward; 
[6] MAINPROCESS(1) proc S4 start_doa; 
[7] MAINPROCESS(1) proc S4 end_doa; 
[8] MAINPROCESS(1) proc S4 diff_th; 
[9] MAINPROCESS(1) proc FL tmp_vsin; 
[10] MAINPROCESS(1) proc FL fl_t_vsin2; 
[11] MAINPROCESS(1) proc FL doa_stationary; 
[12] MAINPROCESS(1) proc FL doa_sot_limit; 
[13] MAINPROCESS(1) proc FL fl_t_doa_sot_limit2; 
[14] MAINPROCESS(1) proc FL doa_nearfield; 
[15] MAINPROCESS(1) proc U1 u1_t_num_forward; 
[16] MAINPROCESS(1) proc U1 u1_t_num_backward; 
[17] MAINPROCESS(1) equal u1_t_num_forward (U1)0;
[18] MAINPROCESS(1) equal u1_t_num_backward (U1)0;
[19] MAINPROCESS(1) equal s4_t_doa_dif_sotlimit_forward (S4)0;
[20] MAINPROCESS(1) equal start_bin SLOW_SOT_FREQ_BIN_START_Q - SLOW_SOT_FREQ_BIN_RANGE+1;
[21] MAINPROCESS(1) equal end_bin SLOW_SOT_FREQ_BIN_START_Q;
[22] MAINPROCESS(1) for<start> for( 
[23] MAINPROCESS(1) for i = SLOW_SOT_FREQ_BIN_START_Q - SLOW_SOT_FREQ_BIN_RANGE + 1; 
[24] MAINPROCESS(1) for i<  SLOW_SOT_FREQ_BIN_START_Q; 
[25] MAINPROCESS(1) for i++) 
[26] MAINPROCESS(1) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) equal tmp_vsin (FL)(i - (NB_FFT_PT_2F/2))*3.6F*VCOF_2F/fl_g_v_self_bsm_for_base;
[28] SUBPROCESS(1) if<start> if( 
[29] SUBPROCESS(1) if tmp_vsin > 1.0F 
[30] SUBPROCESS(1) if ) 
[31] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[33] SUBPROCESS(2) if<start> if( 
[34] SUBPROCESS(2) if tmp_vsin < -1.0F 
[35] SUBPROCESS(2) if ) 
[36] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[37] SUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[38] SUBPROCESS(3) equal doa_stationary (FL)fl_cal_asin(tmp_vsin) * 180.0F / PI + (FL)v0_doa;
[39] SUBPROCESS(3) if<start> if( 
[40] SUBPROCESS(3) if doa_stationary > N_DOA 
[41] SUBPROCESS(3) if ) 
[42] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[43] SUBSUBPROCESS(1) equal doa_stationary N_DOA;
[44] SUBSUBPROCESS(1) equal end_bin i - 1;
[45] SUBSUBPROCESS(1) proc break; 
[46] SUBPROCESS(4) if<start> if( 
[47] SUBPROCESS(4) if doa_stationary < 0 
[48] SUBPROCESS(4) if ) 
[49] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[50] SUBSUBPROCESS(1) equal doa_stationary 0;
[51] SUBSUBPROCESS(1) equal start_bin i + 1;
[52] SUBSUBPROCESS(1) proc break; 
[53] MAINPROCESS(2) equal start_doa N_DOA - AXIS_DEFAULT - 60;
[54] MAINPROCESS(2) if <start> if ( 
[55] MAINPROCESS(2) if  fl_g_v_self_bsm_for_base > 80.0F 
[56] MAINPROCESS(2) if  ) 
[57] MAINPROCESS(2) subproc SUBPROCESS(1) 
[58] SUBPROCESS(1) equal start_doa (S4)N_DOA - (S4)AXIS_DEFAULT - (S4)30;
[59] MAINPROCESS(3) if <start> if ( 
[60] MAINPROCESS(3) if  fl_g_v_self_bsm_for_base < 20.0F 
[61] MAINPROCESS(3) if  ) 
[62] MAINPROCESS(3) subproc SUBPROCESS(1) 
[63] SUBPROCESS(1) equal start_doa (S4)N_DOA - (S4)AXIS_DEFAULT - (S4)60;
[64] MAINPROCESS(4) if <start> if ( 
[65] MAINPROCESS(4) if  fl_g_v_self_bsm_for_base < 13.0F 
[66] MAINPROCESS(4) if  ) 
[67] MAINPROCESS(4) subproc SUBPROCESS(1) 
[68] SUBPROCESS(1) equal start_doa (S4)N_DOA - (S4)AXIS_DEFAULT - (S4)60;
[69] MAINPROCESS(5) equal end_doa (S4)N_DOA - (S4)AXIS_DEFAULT + (S4)50;
[70] MAINPROCESS(5) if <start> if ( 
[71] MAINPROCESS(5) if  fl_g_v_self_bsm_for_base < (FL)30.0F 
[72] MAINPROCESS(5) if  ) 
[73] MAINPROCESS(5) subproc SUBPROCESS(1) 
[74] SUBPROCESS(1) equal end_doa (S4)N_DOA - (S4)AXIS_DEFAULT + (S4)30;
[75] MAINPROCESS(6) for <start> for ( 
[76] MAINPROCESS(6) for  k = 0; 
[77] MAINPROCESS(6) for  k < SLOW_SOT_FREQ_BIN_RANGE; 
[78] MAINPROCESS(6) for  k++) 
[79] MAINPROCESS(6) subproc SUBPROCESS(1) 
[80] SUBPROCESS(1) if <start> if ( 
[81] SUBPROCESS(1) if  ((SLOW_SOT_FREQ_BIN_START_Q - k) >= start_bin 
[82] SUBPROCESS(1) if  ) 
[83] SUBPROCESS(1) if  &&  ((SLOW_SOT_FREQ_BIN_START_Q - k) <= end_bin) 
[84] SUBPROCESS(1) if  &&  (afl_a_sot_check_object_q[k][0] != CFL_UNKNOWN_VALUE) 
[85] SUBPROCESS(1) if  &&  (afl_a_sot_check_object_q[k][0] > (FL)0.0F) 
[86] SUBPROCESS(1) if  &&  (afl_a_sot_check_object_q[k][0] < (st_g_bsm_loop_data.afl_wall_width[0] * (FL)1.5F)) 
[87] SUBPROCESS(1) if  &&  ((afl_a_sot_check_object_q[k][3] / (FL)3.6F) > (((FL)-1.0F * fl_g_v_self_bsm_for_base / (FL)3.6F) - (FL)10.0F)) 
[88] SUBPROCESS(1) if  &&  (afl_a_sot_check_object_q[k][1] > (FL)-20.0F)) 
[89] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[90] SUBSUBPROCESS(1) for<start> for( 
[91] SUBSUBPROCESS(1) for i = 0; 
[92] SUBSUBPROCESS(1) for i < nearfield_doa_peak_num[k]; 
[93] SUBSUBPROCESS(1) for i++ ) 
[94] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[95] SUBSUBSUBPROCESS(1) equal diff_th (S4)999;
[96] SUBSUBSUBPROCESS(1) if <start> if ( 
[97] SUBSUBSUBPROCESS(1) if  (nearfield_doa[k][i] > start_doa 
[98] SUBSUBSUBPROCESS(1) if  ) 
[99] SUBSUBSUBPROCESS(1) if  &&  (nearfield_doa[k][i] < end_doa)) 
[100] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[101] SUBSUBSUBSUBPROCESS(1) equal doa_nearfield (FL)nearfield_doa[k][i];
[102] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[103] SUBSUBSUBSUBPROCESS(1) if  fl_g_v_self_bsm_for_base > CFL_SoT_V_TH_FWD 
[104] SUBSUBSUBSUBPROCESS(1) if  ) 
[105] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[106] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[107] SUBSUBSUBSUBSUBPROCESS(1) if  afl_a_sot_check_object_q[k][1] < (FL)0.0F 
[108] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[109] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[110] SUBSUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin (FL)(-(SLOW_SOT_FREQ_BIN_START_Q - k - (NB_FFT_PT_2F / (S4)2))) * (FL)3.6F * VCOF_2F / v_sot_offset;
[111] SUBSUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[112] SUBSUBSUBSUBSUBSUBPROCESS(1) if  tmp_vsin > 1.0F 
[113] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[114] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[115] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[116] SUBSUBSUBSUBSUBSUBPROCESS(2) if <start> if ( 
[117] SUBSUBSUBSUBSUBSUBPROCESS(2) if  tmp_vsin < -1.0F 
[118] SUBSUBSUBSUBSUBSUBPROCESS(2) if  ) 
[119] SUBSUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[120] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[121] SUBSUBSUBSUBSUBSUBPROCESS(3) equal doa_sot_limit (FL)v0_doa - (FL)fl_cal_asin(tmp_vsin) * (FL)180.0F / PI;
[122] SUBSUBSUBSUBSUBSUBPROCESS(3) proc u1_t_num_backward++; 
[123] SUBSUBSUBSUBSUBSUBPROCESS(3) func<start> doa_dif_sotlimit_backward = (S4)(doa_sot_limit - doa_nearfield 
[124] SUBSUBSUBSUBSUBSUBPROCESS(3) func<end> ); 
[125] SUBSUBSUBSUBSUBPROCESS(2) else<start> else 
[126] SUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[127] SUBSUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin (FL)(-(SLOW_SOT_FREQ_BIN_START_Q - k - (NB_FFT_PT_2F / (S4)2))) * (FL)3.6F * VCOF_2F / fl_g_v_self_bsm_for_base;
[128] SUBSUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[129] SUBSUBSUBSUBSUBSUBPROCESS(1) if  tmp_vsin > 1.0F 
[130] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[131] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[132] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[133] SUBSUBSUBSUBSUBSUBPROCESS(2) if <start> if ( 
[134] SUBSUBSUBSUBSUBSUBPROCESS(2) if  tmp_vsin < -1.0F 
[135] SUBSUBSUBSUBSUBSUBPROCESS(2) if  ) 
[136] SUBSUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[137] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[138] SUBSUBSUBSUBSUBSUBPROCESS(3) equal doa_sot_limit (FL)v0_doa - (FL)fl_cal_asin(tmp_vsin) * (FL)180.0F / PI;
[139] SUBSUBSUBSUBSUBSUBPROCESS(3) proc u1_t_num_forward++; 
[140] SUBSUBSUBSUBSUBSUBPROCESS(3) func<start> s4_t_doa_dif_sotlimit_forward = (S4)(doa_sot_limit - doa_nearfield 
[141] SUBSUBSUBSUBSUBSUBPROCESS(3) func<end> ); 
[142] SUBSUBSUBSUBSUBPROCESS(3) equal diff_th CS4_SoT_DIFF_TH;
[143] SUBSUBSUBSUBPROCESS(2) else if <start> else if ( 
[144] SUBSUBSUBSUBPROCESS(2) else if  fl_g_v_self_bsm_for_base > (FL)5.0F 
[145] SUBSUBSUBSUBPROCESS(2) else if  ) 
[146] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[147] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[148] SUBSUBSUBSUBSUBPROCESS(1) if  afl_a_sot_check_object_q[k][1] < (FL)0.0F 
[149] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[150] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[151] SUBSUBSUBSUBSUBSUBPROCESS(1) equal fl_t_doa_sot_limit2 (FL)0.0F;
[152] SUBSUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin (FL)(-(SLOW_SOT_FREQ_BIN_START_Q - k - (NB_FFT_PT_2F / (S4)2))) * (FL)3.6F * VCOF_2F / fl_g_v_self_bsm_for_base;
[153] SUBSUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[154] SUBSUBSUBSUBSUBSUBPROCESS(1) if  tmp_vsin > 1.0F 
[155] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[156] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[157] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[158] SUBSUBSUBSUBSUBSUBPROCESS(2) if <start> if ( 
[159] SUBSUBSUBSUBSUBSUBPROCESS(2) if  tmp_vsin < -1.0F 
[160] SUBSUBSUBSUBSUBSUBPROCESS(2) if  ) 
[161] SUBSUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[162] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[163] SUBSUBSUBSUBSUBSUBPROCESS(3) equal fl_t_vsin2 (FL)(-(SLOW_SOT_FREQ_BIN_START_Q - k - (S4)1 - (NB_FFT_PT_2F / (S4)2))) * (FL)3.6F * VCOF_2F / fl_g_v_self_bsm_for_base;
[164] SUBSUBSUBSUBSUBSUBPROCESS(3) if <start> if ( 
[165] SUBSUBSUBSUBSUBSUBPROCESS(3) if  fl_t_vsin2 > 1.0F 
[166] SUBSUBSUBSUBSUBSUBPROCESS(3) if  ) 
[167] SUBSUBSUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[168] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal fl_t_vsin2 1.0F;
[169] SUBSUBSUBSUBSUBSUBPROCESS(4) if <start> if ( 
[170] SUBSUBSUBSUBSUBSUBPROCESS(4) if  fl_t_vsin2 < -1.0F 
[171] SUBSUBSUBSUBSUBSUBPROCESS(4) if  ) 
[172] SUBSUBSUBSUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[173] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal fl_t_vsin2 -1.0F;
[174] SUBSUBSUBSUBSUBSUBPROCESS(5) equal doa_sot_limit (FL)v0_doa - fl_cal_asin(tmp_vsin) * (FL)180.0F / PI;
[175] SUBSUBSUBSUBSUBSUBPROCESS(5) equal fl_t_doa_sot_limit2 (FL)v0_doa - fl_cal_asin(fl_t_vsin2) * (FL)180.0F / PI;
[176] SUBSUBSUBSUBSUBSUBPROCESS(5) func<start> doa_dif_sotlimit_backward = (S4)(doa_sot_limit - doa_nearfield 
[177] SUBSUBSUBSUBSUBSUBPROCESS(5) func<end> ); 
[178] SUBSUBSUBSUBSUBSUBPROCESS(5) if <start> if ( 
[179] SUBSUBSUBSUBSUBSUBPROCESS(5) if  (FL)doa_dif_sotlimit_backward < (doa_sot_limit - fl_t_doa_sot_limit2) 
[180] SUBSUBSUBSUBSUBSUBPROCESS(5) if  ) 
[181] SUBSUBSUBSUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[182] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal doa_dif_sotlimit_backward (S4)0;
[183] SUBSUBSUBSUBSUBSUBPROCESS(6) else<start> else 
[184] SUBSUBSUBSUBSUBSUBPROCESS(6) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[185] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal diff_th -CS4_SoT_DIFF_TH_SLOW;
[186] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) proc u1_t_num_backward++; 
[187] SUBSUBSUBSUBPROCESS(3) else<start> else 
[188] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[189] SUBSUBSUBSUBPROCESS(4) if <start> if ( 
[190] SUBSUBSUBSUBPROCESS(4) if  (doa_dif_sotlimit_backward > diff_th 
[191] SUBSUBSUBSUBPROCESS(4) if  ) 
[192] SUBSUBSUBSUBPROCESS(4) if  &&  (diff_th != (S4)999)) 
[193] SUBSUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[194] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_sot_check_sum[1][0][0] + doa_dif_sotlimit_backward;
[195] SUBSUBSUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.as4_sot_check_points[1][0][0]++; 
[196] SUBSUBSUBSUBPROCESS(5) if <start> if ( 
[197] SUBSUBSUBSUBPROCESS(5) if  (diff_th != (S4)999 
[198] SUBSUBSUBSUBPROCESS(5) if  ) 
[199] SUBSUBSUBSUBPROCESS(5) if  &&  (s4_t_doa_dif_sotlimit_forward < -diff_th) 
[200] SUBSUBSUBSUBPROCESS(5) if  &&  (afl_a_sot_check_object_q[k][1] > (FL)0.0F)) 
[201] SUBSUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[202] SUBSUBSUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_sot_check_sum[1][1][0] += s4_abs(s4_t_doa_dif_sotlimit_forward 
[203] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[204] SUBSUBSUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.as4_sot_check_points[1][1][0]++; 
[205] MAINPROCESS(7) proc return u1_t_num_backward; 
----------------- Total Codes : 205 lines
--------------------------
[Function Name] : check_sot_start 
-Return type : S4 
-Argument : 2 
     [0] : FL   dev[2] 
     [1] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iRes 0;
[2] MAINPROCESS(1) proc S4 i; 
[3] MAINPROCESS(1) equal S4 count_backward 0;
[4] MAINPROCESS(1) equal S4 count_backward_sum 0;
[5] MAINPROCESS(1) equal S4 count_forward_fast 0;
[6] MAINPROCESS(1) equal S4 count_forward_mid 0;
[7] MAINPROCESS(1) equal S4 count_forward_slow 0;
[8] MAINPROCESS(1) equal S4 fwd_fast_th 0;
[9] MAINPROCESS(1) equal S4 fwd_mid_th 0;
[10] MAINPROCESS(1) equal S4 fwd_slow_th 1;
[11] MAINPROCESS(1) equal S4 fwd_fast_diff_th 2;
[12] MAINPROCESS(1) proc S4 s4_t_fwd_peak_pos; 
[13] MAINPROCESS(1) proc S4 s4_t_bwd_peak_pos; 
[14] MAINPROCESS(1) proc S4 s4_t_fwd_peak_val; 
[15] MAINPROCESS(1) proc S4 s4_t_bwd_peak_val; 
[16] MAINPROCESS(1) proc U1 u1_t_jdg_h84_flg; 
[17] MAINPROCESS(1) equal s4_t_fwd_peak_pos (S4)-1;
[18] MAINPROCESS(1) equal s4_t_bwd_peak_pos (S4)-1;
[19] MAINPROCESS(1) equal s4_t_fwd_peak_val (S4)0;
[20] MAINPROCESS(1) equal s4_t_bwd_peak_val (S4)0;
[21] MAINPROCESS(1) if <start> if ( 
[22] MAINPROCESS(1) if  fl_g_v_self_bsm_for_base > (FL)30.0F 
[23] MAINPROCESS(1) if  ) 
[24] MAINPROCESS(1) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) equal fwd_fast_diff_th (S4)50;
[26] MAINPROCESS(2) for<start> for( 
[27] MAINPROCESS(2) for i = (S4)0; 
[28] MAINPROCESS(2) for i < CS4_SOT_CHECK_CYCLE_FWD; 
[29] MAINPROCESS(2) for i++) 
[30] MAINPROCESS(2) subproc SUBPROCESS(1) 
[31] SUBPROCESS(1) if <start> if ( 
[32] SUBPROCESS(1) if  st_g_bsm_loop_data.as4_sot_check_sum[0][0][i] > s4_t_fwd_peak_val 
[33] SUBPROCESS(1) if  ) 
[34] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[35] SUBSUBPROCESS(1) equal s4_t_fwd_peak_pos i;
[36] SUBSUBPROCESS(1) equal s4_t_fwd_peak_val st_g_bsm_loop_data.as4_sot_check_sum[0][0][i];
[37] SUBPROCESS(2) if <start> if ( 
[38] SUBPROCESS(2) if  st_g_bsm_loop_data.as4_sot_check_sum[1][0][i] > s4_t_bwd_peak_val 
[39] SUBPROCESS(2) if  ) 
[40] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[41] SUBSUBPROCESS(1) equal s4_t_bwd_peak_pos i;
[42] SUBSUBPROCESS(1) equal s4_t_bwd_peak_val st_g_bsm_loop_data.as4_sot_check_sum[1][0][i];
[43] SUBPROCESS(3) if <start> if ( 
[44] SUBPROCESS(3) if  st_g_bsm_loop_data.as4_sot_check_sum[0][0][i] > fwd_fast_diff_th 
[45] SUBPROCESS(3) if  ) 
[46] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[47] SUBSUBPROCESS(1) if <start> if ( 
[48] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_sot_check_points[0][2][i] > fwd_fast_th 
[49] SUBSUBPROCESS(1) if  ) 
[50] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[51] SUBSUBSUBPROCESS(1) proc count_forward_fast++; 
[52] SUBSUBPROCESS(2) if <start> if ( 
[53] SUBSUBPROCESS(2) if  st_g_bsm_loop_data.as4_sot_check_points[0][1][i] > fwd_mid_th 
[54] SUBSUBPROCESS(2) if  ) 
[55] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[56] SUBSUBSUBPROCESS(1) proc count_forward_mid++; 
[57] SUBSUBPROCESS(3) if <start> if ( 
[58] SUBSUBPROCESS(3) if  st_g_bsm_loop_data.as4_sot_check_points[0][0][i] > fwd_slow_th 
[59] SUBSUBPROCESS(3) if  ) 
[60] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[61] SUBSUBSUBPROCESS(1) proc count_forward_slow++; 
[62] SUBPROCESS(4) if <start> if ( 
[63] SUBPROCESS(4) if  st_g_bsm_loop_data.as4_sot_check_points[1][0][i] > 2 
[64] SUBPROCESS(4) if  ) 
[65] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[66] SUBSUBPROCESS(1) if <start> if ( 
[67] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_sot_check_sum[1][0][i] > (S4)0 
[68] SUBSUBPROCESS(1) if  ) 
[69] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[70] SUBSUBSUBPROCESS(1) proc count_backward++; 
[71] SUBPROCESS(5) if <start> if ( 
[72] SUBPROCESS(5) if  st_g_bsm_loop_data.as4_sot_check_sum[1][0][i] > CS4_SOT_WALL_DIFFSUM_TH_BWD 
[73] SUBPROCESS(5) if  ) 
[74] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[75] SUBSUBPROCESS(1) proc count_backward_sum++; 
[76] MAINPROCESS(3) func<start> u1_t_jdg_h84_flg = u1_check_sot_start_h84(s4_t_fwd_peak_val, s4_t_bwd_peak_val 
[77] MAINPROCESS(3) func<end> ); 
[78] MAINPROCESS(3) if <start> if ( 
[79] MAINPROCESS(3) if  (((s4_t_fwd_peak_pos != (S4)-1 
[80] MAINPROCESS(3) if  ) 
[81] MAINPROCESS(3) if  &&    (s4_t_fwd_peak_pos > s4_t_bwd_peak_pos)) 
[82] MAINPROCESS(3) if  ||   (u1_t_jdg_h84_flg == CU1_TRUE)) 
[83] MAINPROCESS(3) if  &&  ((st_g_bsm_loop_data.as4_sot_check_sum[0][1][0] < (S4)400) 
[84] MAINPROCESS(3) if  ||   (u1_a_alarming_flag != (U1)0))) 
[85] MAINPROCESS(3) subproc SUBPROCESS(1) 
[86] SUBPROCESS(1) if <start> if ( 
[87] SUBPROCESS(1) if  (count_forward_mid == (S4)0 
[88] SUBPROCESS(1) if  ) 
[89] SUBPROCESS(1) if  &&  (count_forward_slow == (S4)0)) 
[90] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[91] SUBSUBPROCESS(1) if <start> if ( 
[92] SUBSUBPROCESS(1) if  count_forward_fast > 2 
[93] SUBSUBPROCESS(1) if  ) 
[94] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[95] SUBSUBSUBPROCESS(1) equal iRes 1;
[96] SUBSUBPROCESS(2) else if <start> else if ( 
[97] SUBSUBPROCESS(2) else if  count_backward > 4 
[98] SUBSUBPROCESS(2) else if  ) 
[99] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[100] SUBSUBSUBPROCESS(1) equal iRes 1;
[101] SUBSUBPROCESS(3) else if <start> else if ( 
[102] SUBSUBPROCESS(3) else if  (fl_g_v_self_bsm_for_base < (FL)20.0F 
[103] SUBSUBPROCESS(3) else if  ) 
[104] SUBSUBPROCESS(3) else if  &&  (count_forward_fast != (S4)0) 
[105] SUBSUBPROCESS(3) else if  &&  (count_backward_sum > (S4)2)) 
[106] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[107] SUBSUBSUBPROCESS(1) equal iRes 1;
[108] SUBSUBPROCESS(4) else<start> else 
[109] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[110] SUBPROCESS(2) else if <start> else if ( 
[111] SUBPROCESS(2) else if  (count_forward_fast > 0 
[112] SUBPROCESS(2) else if  ) 
[113] SUBPROCESS(2) else if  ||  (count_forward_mid > 1) 
[114] SUBPROCESS(2) else if  ||  (count_forward_slow > 2)) 
[115] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[116] SUBSUBPROCESS(1) equal iRes 1;
[117] SUBPROCESS(3) else<start> else 
[118] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[119] SUBPROCESS(4) if <start> if ( 
[120] SUBPROCESS(4) if  fl_g_v_self_bsm_for_base < 20.0F 
[121] SUBPROCESS(4) if  ) 
[122] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[123] SUBSUBPROCESS(1) if <start> if ( 
[124] SUBSUBPROCESS(1) if  count_backward > 6 
[125] SUBSUBPROCESS(1) if  ) 
[126] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[127] SUBSUBSUBPROCESS(1) equal iRes 1;
[128] MAINPROCESS(4) proc return iRes; 
----------------- Total Codes : 128 lines
--------------------------
[Function Name] : u1_check_sot_start_h84 
-Return type : static U1 
-Argument : 2 
     [0] : S4   s4_a_fwd_peak_val 
     [1] : S4   s4_a_bwd_peak_val 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_h84_flag; 
[2] MAINPROCESS(1) equal u1_t_jdg_h84_flag CU1_FALSE;
[3] MAINPROCESS(1) if <start> if ( 
[4] MAINPROCESS(1) if  s4_a_fwd_peak_val > (s4_a_bwd_peak_val + (S4)30) 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_h84_flag CU1_TRUE;
[8] MAINPROCESS(2) else<start> else 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal u1_t_jdg_h84_flag CU1_FALSE;
[11] MAINPROCESS(3) proc return u1_t_jdg_h84_flag; 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : check_sot_stop 
-Return type : S4 
-Argument : 1 
     [0] : const FL   dev[2] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iRes 0;
[2] MAINPROCESS(1) proc S4 i,j; 
[3] MAINPROCESS(1) equal S4 count_backward 0;
[4] MAINPROCESS(1) equal S4 count_forward 0;
[5] MAINPROCESS(1) for<start> for( 
[6] MAINPROCESS(1) for i=0; 
[7] MAINPROCESS(1) for i<6; 
[8] MAINPROCESS(1) for i++) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) for<start> for( 
[11] SUBPROCESS(1) for j=0; 
[12] SUBPROCESS(1) for j<3; 
[13] SUBPROCESS(1) for j++) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] SUBSUBPROCESS(1) if <start> if ( 
[16] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_sot_check_points[0][j][i] != 0 
[17] SUBSUBPROCESS(1) if  ) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) proc count_forward++; 
[20] MAINPROCESS(2) for<start> for( 
[21] MAINPROCESS(2) for i=0; 
[22] MAINPROCESS(2) for i<6; 
[23] MAINPROCESS(2) for i++) 
[24] MAINPROCESS(2) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) if <start> if ( 
[26] SUBPROCESS(1) if  (st_g_bsm_loop_data.as4_sot_check_points[1][0][i] != 0 
[27] SUBPROCESS(1) if  ) 
[28] SUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_sot_check_sum[1][0][i] > (S4)0)) 
[29] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[30] SUBSUBPROCESS(1) proc count_backward++; 
[31] MAINPROCESS(3) if <start> if ( 
[32] MAINPROCESS(3) if  (count_forward < 1 
[33] MAINPROCESS(3) if  ) 
[34] MAINPROCESS(3) if  &&  (count_backward < 1)) 
[35] MAINPROCESS(3) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) equal iRes 1;
[37] MAINPROCESS(4) else if <start> else if ( 
[38] MAINPROCESS(4) else if  ((dev[0] < CFL_SOT_DEV_TH 
[39] MAINPROCESS(4) else if  ) 
[40] MAINPROCESS(4) else if  ||   (count_forward < 1)) 
[41] MAINPROCESS(4) else if  &&  (dev[1] < CFL_SOT_DEV_TH)) 
[42] MAINPROCESS(4) subproc SUBPROCESS(1) 
[43] SUBPROCESS(1) equal iRes 1;
[44] MAINPROCESS(5) else<start> else 
[45] MAINPROCESS(5) subproc SUBPROCESS(1) 
[46] MAINPROCESS(6) proc return iRes; 
----------------- Total Codes : 46 lines
--------------------------
[Function Name] : check_sot_on 
-Return type : S4 
-Argument : 1 
     [0] : const FL   dev[2] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iRes 0;
[2] MAINPROCESS(1) proc S4 i; 
[3] MAINPROCESS(1) equal S4 count_backward 0;
[4] MAINPROCESS(1) equal S4 count_fast_sot4 0;
[5] MAINPROCESS(1) equal S4 count_fast_sot5 0;
[6] MAINPROCESS(1) equal S4 count_forward_fast 0;
[7] MAINPROCESS(1) equal S4 count_forward_mid 0;
[8] MAINPROCESS(1) equal S4 count_forward_slow 0;
[9] MAINPROCESS(1) equal S4 count_forward 0;
[10] MAINPROCESS(1) equal S4 wall 0;
[11] MAINPROCESS(1) proc S4 s4_t_count_fast_sot; 
[12] MAINPROCESS(1) proc S4 s4_t_count_fast_sot_bwd; 
[13] MAINPROCESS(1) proc S4 s4_t_th_point_sum; 
[14] MAINPROCESS(1) proc S4 s4_t_fwd_point_sum; 
[15] MAINPROCESS(1) proc U1 u1_t_lp_data; 
[16] MAINPROCESS(1) equal s4_t_count_fast_sot (S4)0;
[17] MAINPROCESS(1) equal s4_t_count_fast_sot_bwd (S4)0;
[18] MAINPROCESS(1) for<start> for( 
[19] MAINPROCESS(1) for i=0; 
[20] MAINPROCESS(1) for i<12; 
[21] MAINPROCESS(1) for i++) 
[22] MAINPROCESS(1) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) if <start> if ( 
[24] SUBPROCESS(1) if  st_g_bsm_loop_data.as4_sot_check_sum[0][0][i] > -SoT_DIFF_TH3 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(1) if <start> if ( 
[28] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_sot_check_points[0][0][i] != (S4)0 
[29] SUBSUBPROCESS(1) if  ) 
[30] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[31] SUBSUBSUBPROCESS(1) proc count_forward_slow++; 
[32] SUBSUBSUBPROCESS(1) if <start> if ( 
[33] SUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_sot_check_points[0][0][i] > (S4)1 
[34] SUBSUBSUBPROCESS(1) if  ) 
[35] SUBSUBSUBPROCESS(1) if  &&  (i < CS4_SOT_CHECK_CYCLE_FWD)) 
[36] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[37] SUBSUBSUBSUBPROCESS(1) proc count_forward++; 
[38] SUBSUBPROCESS(2) if <start> if ( 
[39] SUBSUBPROCESS(2) if  st_g_bsm_loop_data.as4_sot_check_points[0][1][i] != (S4)0 
[40] SUBSUBPROCESS(2) if  ) 
[41] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[42] SUBSUBSUBPROCESS(1) proc count_forward_mid++; 
[43] SUBSUBSUBPROCESS(1) if <start> if ( 
[44] SUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_sot_check_points[0][1][i] > (S4)1 
[45] SUBSUBSUBPROCESS(1) if  ) 
[46] SUBSUBSUBPROCESS(1) if  &&  (i < CS4_SOT_CHECK_CYCLE_FWD)) 
[47] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[48] SUBSUBSUBSUBPROCESS(1) proc count_forward++; 
[49] SUBSUBPROCESS(3) if <start> if ( 
[50] SUBSUBPROCESS(3) if  st_g_bsm_loop_data.as4_sot_check_points[0][2][i] != (S4)0 
[51] SUBSUBPROCESS(3) if  ) 
[52] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[53] SUBSUBSUBPROCESS(1) proc count_forward_fast++; 
[54] SUBSUBSUBPROCESS(1) if <start> if ( 
[55] SUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_sot_check_points[0][2][i] > (S4)1 
[56] SUBSUBSUBPROCESS(1) if  ) 
[57] SUBSUBSUBPROCESS(1) if  &&  (i < CS4_SOT_CHECK_CYCLE_FWD)) 
[58] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBSUBPROCESS(1) proc count_forward++; 
[60] SUBSUBPROCESS(4) if <start> if ( 
[61] SUBSUBPROCESS(4) if  st_g_bsm_loop_data.as4_sot_check_sum[0][0][i] > (S4)115 
[62] SUBSUBPROCESS(4) if  ) 
[63] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[64] SUBSUBSUBPROCESS(1) proc s4_t_count_fast_sot++; 
[65] MAINPROCESS(2) for <start> for ( 
[66] MAINPROCESS(2) for  i = (S4)0; 
[67] MAINPROCESS(2) for  i < (S4)CU1_SOT_CHECK_CYCLE; 
[68] MAINPROCESS(2) for  i++) 
[69] MAINPROCESS(2) subproc SUBPROCESS(1) 
[70] SUBPROCESS(1) if <start> if ( 
[71] SUBPROCESS(1) if  (st_g_bsm_loop_data.as4_sot_check_points[1][0][i] != (S4)0 
[72] SUBPROCESS(1) if  ) 
[73] SUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_sot_check_sum[1][0][i] > CS4_SOT_WALL_DIFFSUM_TH_BWD)) 
[74] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[75] SUBSUBPROCESS(1) proc count_fast_sot4++; 
[76] SUBSUBPROCESS(1) if <start> if ( 
[77] SUBSUBPROCESS(1) if  i < CS4_SOT_CHECK_CYCLE_BWD 
[78] SUBSUBPROCESS(1) if  ) 
[79] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[80] SUBSUBSUBPROCESS(1) proc count_fast_sot5++; 
[81] SUBPROCESS(2) if <start> if ( 
[82] SUBPROCESS(2) if  st_g_bsm_loop_data.as4_sot_check_points[1][1][i] > (S4)1 
[83] SUBPROCESS(2) if  ) 
[84] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[85] SUBSUBPROCESS(1) proc s4_t_count_fast_sot_bwd++; 
[86] MAINPROCESS(3) if <start> if ( 
[87] MAINPROCESS(3) if  (count_forward_fast + count_forward_mid + count_forward_slow) < ((S4)CU1_SOT_CHECK_CYCLE * (S4)2) 
[88] MAINPROCESS(3) if  ) 
[89] MAINPROCESS(3) subproc SUBPROCESS(1) 
[90] SUBPROCESS(1) if <start> if ( 
[91] SUBPROCESS(1) if  ((count_forward_fast + count_forward_mid + count_forward_slow) <= (S4)((FL)CU1_SOT_CHECK_CYCLE * (FL)1.5F) 
[92] SUBPROCESS(1) if  ) 
[93] SUBPROCESS(1) if  &&  (count_fast_sot4 < (S4)3) 
[94] SUBPROCESS(1) if  &&  (s4_t_count_fast_sot_bwd < (S4)3)) 
[95] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[96] SUBSUBPROCESS(1) equal wall (S4)1;
[97] SUBPROCESS(2) if <start> if ( 
[98] SUBPROCESS(2) if  (count_fast_sot4 < (S4)3 
[99] SUBPROCESS(2) if  ) 
[100] SUBPROCESS(2) if  &&  (count_forward < (S4)1)) 
[101] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[102] SUBSUBPROCESS(1) equal wall (S4)1;
[103] SUBPROCESS(3) if <start> if ( 
[104] SUBPROCESS(3) if  (dev[1] < WALL_DEV_TH4 
[105] SUBPROCESS(3) if  ) 
[106] SUBPROCESS(3) if  &&  (count_fast_sot4 < (S4)5)) 
[107] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[108] SUBSUBPROCESS(1) equal wall (S4)1;
[109] MAINPROCESS(4) else<start> else 
[110] MAINPROCESS(4) subproc SUBPROCESS(1) 
[111] SUBPROCESS(1) if <start> if ( 
[112] SUBPROCESS(1) if  (dev[1] < WALL_DEV_TH4 
[113] SUBPROCESS(1) if  ) 
[114] SUBPROCESS(1) if  &&  (count_forward < (S4)4) 
[115] SUBPROCESS(1) if  &&  (count_fast_sot4 < (S4)4)) 
[116] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[117] SUBSUBPROCESS(1) equal wall (S4)1;
[118] SUBPROCESS(2) if <start> if ( 
[119] SUBPROCESS(2) if  (s4_t_count_fast_sot_bwd < (S4)3 
[120] SUBPROCESS(2) if  ) 
[121] SUBPROCESS(2) if  &&  (count_forward < (S4)2) 
[122] SUBPROCESS(2) if  &&  (count_fast_sot4 < (S4)1)) 
[123] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[124] SUBSUBPROCESS(1) equal wall (S4)1;
[125] MAINPROCESS(5) if <start> if ( 
[126] MAINPROCESS(5) if  wall == (S4)0 
[127] MAINPROCESS(5) if  ) 
[128] MAINPROCESS(5) subproc SUBPROCESS(1) 
[129] SUBPROCESS(1) equal iRes (S4)1;
[130] MAINPROCESS(6) if <start> if ( 
[131] MAINPROCESS(6) if  st_g_bsm_loop_data.u1_count_adjacent_lane_exist > (U1)10 
[132] MAINPROCESS(6) if  ) 
[133] MAINPROCESS(6) subproc SUBPROCESS(1) 
[134] SUBPROCESS(1) equal s4_t_th_point_sum (S4)3;
[135] MAINPROCESS(7) else<start> else 
[136] MAINPROCESS(7) subproc SUBPROCESS(1) 
[137] SUBPROCESS(1) equal s4_t_th_point_sum (S4)10;
[138] MAINPROCESS(8) equal s4_t_fwd_point_sum (S4)0;
[139] MAINPROCESS(8) for <start> for ( 
[140] MAINPROCESS(8) for  u1_t_lp_data = (U1)0; 
[141] MAINPROCESS(8) for  u1_t_lp_data < (U1)12; 
[142] MAINPROCESS(8) for  u1_t_lp_data++) 
[143] MAINPROCESS(8) subproc SUBPROCESS(1) 
[144] SUBPROCESS(1) func<start> s4_t_fwd_point_sum += (st_g_bsm_loop_data.as4_sot_check_points[0][0][u1_t_lp_data] + st_g_bsm_loop_data.as4_sot_check_points[0][1][u1_t_lp_data] 
[145] SUBPROCESS(1) func<end> ); 
[146] MAINPROCESS(9) if <start> if ( 
[147] MAINPROCESS(9) if  s4_t_fwd_point_sum < s4_t_th_point_sum 
[148] MAINPROCESS(9) if  ) 
[149] MAINPROCESS(9) subproc SUBPROCESS(1) 
[150] SUBPROCESS(1) equal iRes (S4)0;
[151] MAINPROCESS(10) if <start> if ( 
[152] MAINPROCESS(10) if  (st_g_bsm_loop_data.as4_sot_check_sum[0][0][11] - st_g_bsm_loop_data.as4_sot_check_sum[0][0][0] > (S4)100 
[153] MAINPROCESS(10) if  ) 
[154] MAINPROCESS(10) if  &&  (st_g_bsm_loop_data.as4_sot_check_points[0][0][0] < (S4)3) 
[155] MAINPROCESS(10) if  &&  (count_fast_sot5 < (S4)3)) 
[156] MAINPROCESS(10) subproc SUBPROCESS(1) 
[157] SUBPROCESS(1) equal iRes (S4)0;
[158] MAINPROCESS(11) proc return iRes; 
----------------- Total Codes : 158 lines
--------------------------
[Function Name] : check_sot_off 
-Return type : S4 
-Argument : 1 
     [0] : const FL   dev[2] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iRes 0;
[2] MAINPROCESS(1) proc S4 i,j; 
[3] MAINPROCESS(1) equal S4 count_backward1 0;
[4] MAINPROCESS(1) equal S4 count_backward2 0;
[5] MAINPROCESS(1) equal S4 count_forward1 0;
[6] MAINPROCESS(1) equal S4 count_forward2 0;
[7] MAINPROCESS(1) for<start> for( 
[8] MAINPROCESS(1) for i=0; 
[9] MAINPROCESS(1) for i<12; 
[10] MAINPROCESS(1) for i++) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) for<start> for( 
[13] SUBPROCESS(1) for j=0; 
[14] SUBPROCESS(1) for j<3; 
[15] SUBPROCESS(1) for j++) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) if <start> if ( 
[18] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_sot_check_points[0][j][i] != 0 
[19] SUBSUBPROCESS(1) if  ) 
[20] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[21] SUBSUBSUBPROCESS(1) proc count_forward1++; 
[22] SUBSUBSUBPROCESS(1) if <start> if ( 
[23] SUBSUBSUBPROCESS(1) if  (i < CS4_SOT_CHECK_CYCLE_FWD 
[24] SUBSUBSUBPROCESS(1) if  ) 
[25] SUBSUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_sot_check_points[0][j][i] > 1)) 
[26] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[27] SUBSUBSUBSUBPROCESS(1) proc count_forward2++; 
[28] MAINPROCESS(2) for<start> for( 
[29] MAINPROCESS(2) for i=0; 
[30] MAINPROCESS(2) for i<12; 
[31] MAINPROCESS(2) for i++) 
[32] MAINPROCESS(2) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) if <start> if ( 
[34] SUBPROCESS(1) if  (st_g_bsm_loop_data.as4_sot_check_points[1][0][i] != 0 
[35] SUBPROCESS(1) if  ) 
[36] SUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_sot_check_sum[1][0][i] > CS4_SOT_WALL_DIFFSUM_TH_BWD)) 
[37] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[38] SUBSUBPROCESS(1) proc count_backward1++; 
[39] SUBSUBPROCESS(1) if <start> if ( 
[40] SUBSUBPROCESS(1) if  (i < CS4_SOT_CHECK_CYCLE_FWD 
[41] SUBSUBPROCESS(1) if  ) 
[42] SUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_sot_check_points[1][0][i] > 1)) 
[43] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBPROCESS(1) proc count_backward2++; 
[45] MAINPROCESS(3) if <start> if ( 
[46] MAINPROCESS(3) if  (count_backward1 < 2 
[47] MAINPROCESS(3) if  ) 
[48] MAINPROCESS(3) if  &&  (count_forward1 < 2)) 
[49] MAINPROCESS(3) subproc SUBPROCESS(1) 
[50] SUBPROCESS(1) equal iRes 1;
[51] MAINPROCESS(4) else if <start> else if ( 
[52] MAINPROCESS(4) else if  (count_forward1 < 2 
[53] MAINPROCESS(4) else if  ) 
[54] MAINPROCESS(4) else if  &&  (count_forward2 < 1) 
[55] MAINPROCESS(4) else if  &&  (count_backward1 < 6)) 
[56] MAINPROCESS(4) subproc SUBPROCESS(1) 
[57] SUBPROCESS(1) equal iRes 1;
[58] MAINPROCESS(5) else if <start> else if ( 
[59] MAINPROCESS(5) else if  (count_forward2 < 2 
[60] MAINPROCESS(5) else if  ) 
[61] MAINPROCESS(5) else if  &&  ((dev[1] < CFL_SOT_DEV_TH) 
[62] MAINPROCESS(5) else if  ||   (count_backward1 < 2))) 
[63] MAINPROCESS(5) subproc SUBPROCESS(1) 
[64] SUBPROCESS(1) equal iRes 1;
[65] MAINPROCESS(6) else if <start> else if ( 
[66] MAINPROCESS(6) else if  count_forward1 < 2 
[67] MAINPROCESS(6) else if  ) 
[68] MAINPROCESS(6) subproc SUBPROCESS(1) 
[69] SUBPROCESS(1) equal iRes 1;
[70] MAINPROCESS(7) else if <start> else if ( 
[71] MAINPROCESS(7) else if  (count_forward2 < 1 
[72] MAINPROCESS(7) else if  ) 
[73] MAINPROCESS(7) else if  &&  ((count_backward2 < 1) 
[74] MAINPROCESS(7) else if  ||   (st_g_bsm_loop_data.as4_slow_sot_find[1] >= WALL_REJECT_TH3))) 
[75] MAINPROCESS(7) subproc SUBPROCESS(1) 
[76] SUBPROCESS(1) equal iRes 1;
[77] MAINPROCESS(8) else<start> else 
[78] MAINPROCESS(8) subproc SUBPROCESS(1) 
[79] MAINPROCESS(9) proc return iRes; 
----------------- Total Codes : 79 lines
--------------------------
[Function Name] : fn_bsm_low_judge_check_sot_doa 
-Return type : VD 
-Argument : 1 
     [0] : FL*   pfl_a_fast_sot_pow 
----- Codes -----
[1] MAINPROCESS(1) proc U2 u2_t_lp_fft_data; 
[2] MAINPROCESS(1) proc FL fl_t_max_peak_pow; 
[3] MAINPROCESS(1) proc S2 s2_t_fast_sot_check_bin; 
[4] MAINPROCESS(1) proc FL fl_t_fast_sot_check_doa_spec[N_DOA]; 
[5] MAINPROCESS(1) proc S4 s4_t_fast_sot_check_doa[1]; 
[6] MAINPROCESS(1) proc FL fl_t_fast_sot_check_doapow[1]; 
[7] MAINPROCESS(1) proc FL fl_t_sot_direction; 
[8] MAINPROCESS(1) equal fl_t_max_peak_pow (FL)0.0F;
[9] MAINPROCESS(1) equal s2_t_fast_sot_check_bin (S2)-1;
[10] MAINPROCESS(1) for <start> for ( 
[11] MAINPROCESS(1) for  u2_t_lp_fft_data = (U2)0; 
[12] MAINPROCESS(1) for  u2_t_lp_fft_data < N_DOA; 
[13] MAINPROCESS(1) for  u2_t_lp_fft_data++) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal fl_t_fast_sot_check_doa_spec[u2_t_lp_fft_data] (FL)0.0F;
[16] MAINPROCESS(2) equal s4_t_fast_sot_check_doa[0] (S4)-1;
[17] MAINPROCESS(2) equal fl_t_fast_sot_check_doapow[0] (FL)0.0F;
[18] MAINPROCESS(2) equal fl_t_sot_direction (FL)180.0F - st_g_bsm_loop_data.afl_installed_angle[0];
[19] MAINPROCESS(2) for <start> for ( 
[20] MAINPROCESS(2) for  u2_t_lp_fft_data = (U2)257; 
[21] MAINPROCESS(2) for  u2_t_lp_fft_data < (U2)265; 
[22] MAINPROCESS(2) for  u2_t_lp_fft_data++) 
[23] MAINPROCESS(2) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) if <start> if ( 
[25] SUBPROCESS(1) if  afl_g_cvw_lfm_ftt_power[0][u2_t_lp_fft_data] > fl_t_max_peak_pow 
[26] SUBPROCESS(1) if  ) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) equal fl_t_max_peak_pow afl_g_cvw_lfm_ftt_power[0][u2_t_lp_fft_data];
[29] SUBSUBPROCESS(1) equal s2_t_fast_sot_check_bin (S2)u2_t_lp_fft_data;
[30] MAINPROCESS(3) if <start> if ( 
[31] MAINPROCESS(3) if  (s2_t_fast_sot_check_bin != (S2)-1 
[32] MAINPROCESS(3) if  ) 
[33] MAINPROCESS(3) if  &&  (fl_t_max_peak_pow > (FL)53.0F)) 
[34] MAINPROCESS(3) subproc SUBPROCESS(1) 
[35] SUBPROCESS(1) func<start> fn_calc_spec_bf_4ch_fm((const FL *)(&afl_g_cvw_lfm_ryy_matrix[0][s2_t_fast_sot_check_bin][0]), fl_t_fast_sot_check_doa_spec, (S4)0, (S4)s2_t_fast_sot_check_bin 
[36] SUBPROCESS(1) func<end> ); 
[37] SUBPROCESS(1) func<start> s4_search_peak_bf((const FL *)fl_t_fast_sot_check_doa_spec, s4_t_fast_sot_check_doa, fl_t_fast_sot_check_doapow, (S4)1 
[38] SUBPROCESS(1) func<end> ); 
[39] MAINPROCESS(4) if <start> if ( 
[40] MAINPROCESS(4) if  (FL)s4_t_fast_sot_check_doa[0] > fl_t_sot_direction 
[41] MAINPROCESS(4) if  ) 
[42] MAINPROCESS(4) subproc SUBPROCESS(1) 
[43] SUBPROCESS(1) equal *pfl_a_fast_sot_pow fl_t_fast_sot_check_doapow[0];
[44] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[3] CU1_SOT_CHECK_CYCLE + (S4)1;
[45] MAINPROCESS(5) proc return; 
----------------- Total Codes : 45 lines
--------------------------
[Function Name] : calc_deviation_of_doa_freq_line_stationary_2 
-Return type : FL 
-Argument : 10 
     [0] : const S4   nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [1] : S4   start_freq_bin 
     [2] : const S4   stationary_doa_line[N_DOA] 
     [3] : S4   mode 
     [4] : S4   *backward_priod 
     [5] : S4   v0_doa 
     [6] : S4   *fast_sot_num 
     [7] : S4   *not_fast_sot_num 
     [8] : S4   fast_sot_limit_line[N_DOA] 
     [9] : const FL   afl_a_sot_check_object[SLOW_SOT_FREQ_BIN_RANGE][4] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal FL dev 0.0F;
[3] MAINPROCESS(1) equal S4 index 0;
[4] MAINPROCESS(1) equal S4 num 0;
[5] MAINPROCESS(1) equal S4 doa_min 0;
[6] MAINPROCESS(1) equal S4 doa_max N_DOA;
[7] MAINPROCESS(1) equal FL tmp_min (FL)N_DOA;
[8] MAINPROCESS(1) proc FL tmp_vsin; 
[9] MAINPROCESS(1) proc FL doa_stationary; 
[10] MAINPROCESS(1) equal S4 bin_min 0;
[11] MAINPROCESS(1) equal S4 bin_max NB_FFT_PT_2F;
[12] MAINPROCESS(1) proc S4 tmptmp_max; 
[13] MAINPROCESS(1) proc S4 tmptmp_min; 
[14] MAINPROCESS(1) proc S4 freq; 
[15] MAINPROCESS(1) proc FL v_limit; 
[16] MAINPROCESS(1) func<start> FL tmp = (FL)(NB_FFT_PT_2F / 2 - (S4)(CFL_SoT_V_TH_BWD / 3.6F / VCOF_2F) 
[17] MAINPROCESS(1) func<end> ); 
[18] MAINPROCESS(1) proc FL doa_limit; 
[19] MAINPROCESS(1) proc FL diff1, diff2; 
[20] MAINPROCESS(1) func<start> S4 num_th = (S4)(SLOW_SOT_FREQ_BIN_RANGE*0.6F 
[21] MAINPROCESS(1) func<end> ); 
[22] MAINPROCESS(1) equal *backward_priod 0;
[23] MAINPROCESS(1) if <start> if ( 
[24] MAINPROCESS(1) if  fl_g_v_self_bsm_for_base == 0.0F 
[25] MAINPROCESS(1) if  ) 
[26] MAINPROCESS(1) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) equal dev 999.9F;
[28] SUBPROCESS(1) proc return dev; 
[29] MAINPROCESS(2) equal tmp_min (FL)N_DOA;
[30] MAINPROCESS(2) for <start> for ( 
[31] MAINPROCESS(2) for  i = (S4)(((FL)N_DOA * 0.5F) - (FL)AXIS_DEFAULT 
[32] MAINPROCESS(2) for  ); 
[33] MAINPROCESS(2) for  i < N_DOA; 
[34] MAINPROCESS(2) for  i++) 
[35] MAINPROCESS(2) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) if <start> if ( 
[37] SUBPROCESS(1) if  fl_abs((FL)(stationary_doa_line[i] - start_freq_bin)) < tmp_min 
[38] SUBPROCESS(1) if  ) 
[39] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[40] SUBSUBPROCESS(1) func<start> tmp_min = fl_abs((FL)(stationary_doa_line[i]-start_freq_bin) 
[41] SUBSUBPROCESS(1) func<end> ); 
[42] SUBSUBPROCESS(1) equal doa_min i;
[43] MAINPROCESS(3) equal tmp_min (FL)N_DOA;
[44] MAINPROCESS(3) for <start> for ( 
[45] MAINPROCESS(3) for  i = (S4)(((FL)N_DOA * 0.5F) - (FL)AXIS_DEFAULT 
[46] MAINPROCESS(3) for  ); 
[47] MAINPROCESS(3) for  i < N_DOA; 
[48] MAINPROCESS(3) for  i++) 
[49] MAINPROCESS(3) subproc SUBPROCESS(1) 
[50] SUBPROCESS(1) if <start> if ( 
[51] SUBPROCESS(1) if  fl_abs((FL)(stationary_doa_line[i] - (start_freq_bin + SLOW_SOT_FREQ_BIN_RANGE))) < tmp_min 
[52] SUBPROCESS(1) if  ) 
[53] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[54] SUBSUBPROCESS(1) func<start> tmp_min = fl_abs((FL)(stationary_doa_line[i]-(start_freq_bin+SLOW_SOT_FREQ_BIN_RANGE)) 
[55] SUBSUBPROCESS(1) func<end> ); 
[56] SUBSUBPROCESS(1) equal doa_max i;
[57] MAINPROCESS(4) if <start> if ( 
[58] MAINPROCESS(4) if  mode == 0 
[59] MAINPROCESS(4) if  ) 
[60] MAINPROCESS(4) subproc SUBPROCESS(1) 
[61] SUBPROCESS(1) equal doa_min - 5;
[62] MAINPROCESS(5) else<start> else 
[63] MAINPROCESS(5) subproc SUBPROCESS(1) 
[64] SUBPROCESS(1) equal doa_min - 10;
[65] MAINPROCESS(6) if <start> if ( 
[66] MAINPROCESS(6) if  (fl_g_v_self_bsm_for_base < 20.0F 
[67] MAINPROCESS(6) if  ) 
[68] MAINPROCESS(6) if  &&  (mode == 1)) 
[69] MAINPROCESS(6) subproc SUBPROCESS(1) 
[70] SUBPROCESS(1) equal doa_min (S4)55;
[71] MAINPROCESS(7) if <start> if ( 
[72] MAINPROCESS(7) if  doa_min < 0 
[73] MAINPROCESS(7) if  ) 
[74] MAINPROCESS(7) subproc SUBPROCESS(1) 
[75] SUBPROCESS(1) equal doa_min 0;
[76] MAINPROCESS(8) equal doa_max + 10;
[77] MAINPROCESS(8) if <start> if ( 
[78] MAINPROCESS(8) if  doa_max > N_DOA 
[79] MAINPROCESS(8) if  ) 
[80] MAINPROCESS(8) subproc SUBPROCESS(1) 
[81] SUBPROCESS(1) equal doa_max N_DOA;
[82] MAINPROCESS(9) if <start> if ( 
[83] MAINPROCESS(9) if  fl_g_v_self_bsm_for_base < 20.0F 
[84] MAINPROCESS(9) if  ) 
[85] MAINPROCESS(9) subproc SUBPROCESS(1) 
[86] SUBPROCESS(1) if <start> if ( 
[87] SUBPROCESS(1) if  doa_max > (S4)N_DOA - (S4)AXIS_DEFAULT + (S4)65 
[88] SUBPROCESS(1) if  ) 
[89] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[90] SUBSUBPROCESS(1) equal doa_max (S4)N_DOA - (S4)AXIS_DEFAULT + (S4)65;
[91] MAINPROCESS(10) if <start> if ( 
[92] MAINPROCESS(10) if  fl_g_v_self_bsm_for_base < 13.0F 
[93] MAINPROCESS(10) if  ) 
[94] MAINPROCESS(10) subproc SUBPROCESS(1) 
[95] SUBPROCESS(1) if <start> if ( 
[96] SUBPROCESS(1) if  doa_max > (S4)N_DOA - (S4)AXIS_DEFAULT + (S4)60 
[97] SUBPROCESS(1) if  ) 
[98] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[99] SUBSUBPROCESS(1) equal doa_max (S4)N_DOA - (S4)AXIS_DEFAULT + (S4)60;
[100] MAINPROCESS(11) for <start> for ( 
[101] MAINPROCESS(11) for  i = (SLOW_SOT_FREQ_BIN_START_Q - SLOW_SOT_FREQ_BIN_RANGE + 1 
[102] MAINPROCESS(11) for  ); 
[103] MAINPROCESS(11) for  i < (SLOW_SOT_FREQ_BIN_START_I + SLOW_SOT_FREQ_BIN_RANGE 
[104] MAINPROCESS(11) for  ); 
[105] MAINPROCESS(11) for  i++) 
[106] MAINPROCESS(11) subproc SUBPROCESS(1) 
[107] SUBPROCESS(1) equal tmp_vsin (FL)(i - (NB_FFT_PT_2F/2))*3.6F*VCOF_2F/fl_g_v_self_bsm_for_base;
[108] SUBPROCESS(1) if<start> if( 
[109] SUBPROCESS(1) if tmp_vsin > 1.0F 
[110] SUBPROCESS(1) if ) 
[111] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[112] SUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[113] SUBPROCESS(2) if<start> if( 
[114] SUBPROCESS(2) if tmp_vsin < -1.0F 
[115] SUBPROCESS(2) if ) 
[116] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[117] SUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[118] SUBPROCESS(3) equal doa_stationary (FL)fl_cal_asin(tmp_vsin) * (FL)180.0F / PI + (FL)v0_doa;
[119] SUBPROCESS(3) if<start> if( 
[120] SUBPROCESS(3) if doa_stationary > N_DOA 
[121] SUBPROCESS(3) if ) 
[122] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[123] SUBSUBPROCESS(1) equal doa_stationary N_DOA;
[124] SUBSUBPROCESS(1) equal bin_max i - 1;
[125] SUBSUBPROCESS(1) proc break; 
[126] SUBPROCESS(4) if<start> if( 
[127] SUBPROCESS(4) if doa_stationary < 0 
[128] SUBPROCESS(4) if ) 
[129] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[130] SUBSUBPROCESS(1) equal doa_stationary 0;
[131] SUBSUBPROCESS(1) equal bin_min i + 1;
[132] SUBSUBPROCESS(1) proc break; 
[133] MAINPROCESS(12) if<start> if( 
[134] MAINPROCESS(12) if bin_max < (start_freq_bin + SLOW_SOT_FREQ_BIN_RANGE) 
[135] MAINPROCESS(12) if ) 
[136] MAINPROCESS(12) subproc SUBPROCESS(1) 
[137] SUBPROCESS(1) equal tmptmp_max bin_max;
[138] MAINPROCESS(13) else<start> else 
[139] MAINPROCESS(13) subproc SUBPROCESS(1) 
[140] SUBPROCESS(1) equal tmptmp_max start_freq_bin + SLOW_SOT_FREQ_BIN_RANGE - 1;
[141] MAINPROCESS(14) if<start> if( 
[142] MAINPROCESS(14) if bin_min > start_freq_bin 
[143] MAINPROCESS(14) if ) 
[144] MAINPROCESS(14) subproc SUBPROCESS(1) 
[145] SUBPROCESS(1) equal tmptmp_min bin_min;
[146] MAINPROCESS(15) else<start> else 
[147] MAINPROCESS(15) subproc SUBPROCESS(1) 
[148] SUBPROCESS(1) equal tmptmp_min start_freq_bin;
[149] MAINPROCESS(16) func<start> num_th = (S4)( (FL)(tmptmp_max - tmptmp_min + 1)*0.6F 
[150] MAINPROCESS(16) func<end> ); 
[151] MAINPROCESS(16) func<start> memset(as4_g_fast_sot_limit_line_diam, 0, sizeof(as4_g_fast_sot_limit_line_diam) 
[152] MAINPROCESS(16) func<end> ); 
[153] MAINPROCESS(16) if <start> if ( 
[154] MAINPROCESS(16) if  (mode == 1 
[155] MAINPROCESS(16) if  ) 
[156] MAINPROCESS(16) if  &&  (fl_g_v_self_bsm_for_base >= 30.0F)) 
[157] MAINPROCESS(16) subproc SUBPROCESS(1) 
[158] SUBPROCESS(1) if<start> if( 
[159] SUBPROCESS(1) if fl_g_v_self_bsm_for_base < 35.0F 
[160] SUBPROCESS(1) if ) 
[161] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[162] SUBSUBPROCESS(1) equal v_limit fl_g_v_self_bsm_for_base*0.8F;
[163] SUBPROCESS(2) else if<start> else if( 
[164] SUBPROCESS(2) else if fl_g_v_self_bsm_for_base < 40.0F 
[165] SUBPROCESS(2) else if ) 
[166] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[167] SUBSUBPROCESS(1) equal v_limit fl_g_v_self_bsm_for_base*0.75F;
[168] SUBPROCESS(3) else if<start> else if( 
[169] SUBPROCESS(3) else if fl_g_v_self_bsm_for_base < 45.0F 
[170] SUBPROCESS(3) else if ) 
[171] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[172] SUBSUBPROCESS(1) equal v_limit fl_g_v_self_bsm_for_base*0.7F;
[173] SUBPROCESS(4) else if<start> else if( 
[174] SUBPROCESS(4) else if fl_g_v_self_bsm_for_base < 50.0F 
[175] SUBPROCESS(4) else if ) 
[176] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[177] SUBSUBPROCESS(1) equal v_limit fl_g_v_self_bsm_for_base*0.65F;
[178] SUBPROCESS(5) else if<start> else if( 
[179] SUBPROCESS(5) else if fl_g_v_self_bsm_for_base < 55.0F 
[180] SUBPROCESS(5) else if ) 
[181] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[182] SUBSUBPROCESS(1) equal v_limit fl_g_v_self_bsm_for_base*0.6F;
[183] SUBPROCESS(6) else if<start> else if( 
[184] SUBPROCESS(6) else if fl_g_v_self_bsm_for_base < 60.0F 
[185] SUBPROCESS(6) else if ) 
[186] SUBPROCESS(6) subproc SUBSUBPROCESS(1) 
[187] SUBSUBPROCESS(1) equal v_limit fl_g_v_self_bsm_for_base*0.55F;
[188] SUBPROCESS(7) else if<start> else if( 
[189] SUBPROCESS(7) else if fl_g_v_self_bsm_for_base < 65.0F 
[190] SUBPROCESS(7) else if ) 
[191] SUBPROCESS(7) subproc SUBSUBPROCESS(1) 
[192] SUBSUBPROCESS(1) equal v_limit fl_g_v_self_bsm_for_base*0.5F;
[193] SUBPROCESS(8) else if<start> else if( 
[194] SUBPROCESS(8) else if fl_g_v_self_bsm_for_base < 70.0F 
[195] SUBPROCESS(8) else if ) 
[196] SUBPROCESS(8) subproc SUBSUBPROCESS(1) 
[197] SUBSUBPROCESS(1) equal v_limit fl_g_v_self_bsm_for_base*0.45F;
[198] SUBPROCESS(9) else<start> else 
[199] SUBPROCESS(9) subproc SUBSUBPROCESS(1) 
[200] SUBSUBPROCESS(1) equal v_limit fl_g_v_self_bsm_for_base*0.4F;
[201] SUBPROCESS(10) for<start> for( 
[202] SUBPROCESS(10) for i = (start_freq_bin + 1 
[203] SUBPROCESS(10) for ); 
[204] SUBPROCESS(10) for i <= (start_freq_bin + SLOW_SOT_FREQ_BIN_RANGE 
[205] SUBPROCESS(10) for ); 
[206] SUBPROCESS(10) for i++) 
[207] SUBPROCESS(10) subproc SUBSUBPROCESS(1) 
[208] SUBSUBPROCESS(1) equal tmp_vsin (FL)(i - (NB_FFT_PT_2F / (S4)2)) * (FL)3.6F * VCOF_2F / v_limit;
[209] SUBSUBPROCESS(1) if <start> if ( 
[210] SUBSUBPROCESS(1) if  tmp_vsin > 1.0F 
[211] SUBSUBPROCESS(1) if  ) 
[212] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[213] SUBSUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[214] SUBSUBPROCESS(2) if <start> if ( 
[215] SUBSUBPROCESS(2) if  tmp_vsin < -1.0F 
[216] SUBSUBPROCESS(2) if  ) 
[217] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[218] SUBSUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[219] SUBSUBPROCESS(3) equal doa_stationary (FL)fl_cal_asin(tmp_vsin) * 180.0F / PI + (FL)v0_doa;
[220] SUBSUBPROCESS(3) equal diff1 doa_stationary - (FL)nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE-(i-start_freq_bin)][index];
[221] SUBSUBPROCESS(3) if <start> if ( 
[222] SUBSUBPROCESS(3) if  i <= (S4)tmp 
[223] SUBSUBPROCESS(3) if  ) 
[224] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[225] SUBSUBSUBPROCESS(1) if <start> if ( 
[226] SUBSUBSUBPROCESS(1) if  (diff1 >= 0.0F 
[227] SUBSUBSUBPROCESS(1) if  ) 
[228] SUBSUBSUBPROCESS(1) if  &&  (nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE - (i - start_freq_bin)][index] != -1)) 
[229] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[230] SUBSUBSUBSUBPROCESS(1) equal *fast_sot_num + 1;
[231] SUBSUBPROCESS(4) else<start> else 
[232] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[233] SUBSUBSUBPROCESS(1) equal tmp_vsin (FL)(i - (NB_FFT_PT_2F / (S4)2)) * (FL)3.6F * VCOF_2F / CFL_SoT_V_TH_BWD;
[234] SUBSUBSUBPROCESS(1) if <start> if ( 
[235] SUBSUBSUBPROCESS(1) if  tmp_vsin > 1.0F 
[236] SUBSUBSUBPROCESS(1) if  ) 
[237] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[238] SUBSUBSUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[239] SUBSUBSUBPROCESS(2) if <start> if ( 
[240] SUBSUBSUBPROCESS(2) if  tmp_vsin < -1.0F 
[241] SUBSUBSUBPROCESS(2) if  ) 
[242] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[243] SUBSUBSUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[244] SUBSUBSUBPROCESS(3) equal doa_limit (FL)fl_cal_asin(tmp_vsin) * 180.0F / PI + (FL)v0_doa;
[245] SUBSUBSUBPROCESS(3) equal diff2 (FL)nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE-(i-start_freq_bin)][index] - doa_limit;
[246] SUBSUBSUBPROCESS(3) if <start> if ( 
[247] SUBSUBSUBPROCESS(3) if  (diff1 >= 0.0F 
[248] SUBSUBSUBPROCESS(3) if  ) 
[249] SUBSUBSUBPROCESS(3) if  &&  (diff2 >= 0.0F) 
[250] SUBSUBSUBPROCESS(3) if  &&  (nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE-(i-start_freq_bin)][index] != -1)) 
[251] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[252] SUBSUBSUBSUBPROCESS(1) equal *fast_sot_num + 1;
[253] SUBSUBSUBPROCESS(4) if <start> if ( 
[254] SUBSUBSUBPROCESS(4) if  (diff2 < 0.0F 
[255] SUBSUBSUBPROCESS(4) if  ) 
[256] SUBSUBSUBPROCESS(4) if  &&  (nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE-(i-start_freq_bin)][index] != -1)) 
[257] SUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBPROCESS(1) 
[258] SUBSUBSUBSUBPROCESS(1) equal *not_fast_sot_num + 1;
[259] SUBSUBSUBPROCESS(5) if <start> if ( 
[260] SUBSUBSUBPROCESS(5) if  (diff1 < (FL)-10.0F 
[261] SUBSUBSUBPROCESS(5) if  ) 
[262] SUBSUBSUBPROCESS(5) if  &&  (diff2 > (FL)30.0F) 
[263] SUBSUBSUBPROCESS(5) if  &&  (nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE - (i - start_freq_bin)][index] != (S4)-1)) 
[264] SUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBPROCESS(1) 
[265] SUBSUBSUBSUBPROCESS(1) equal *not_fast_sot_num + 1;
[266] SUBPROCESS(11) for<start> for( 
[267] SUBPROCESS(11) for i=0; 
[268] SUBPROCESS(11) for i<N_DOA; 
[269] SUBPROCESS(11) for i++) 
[270] SUBPROCESS(11) subproc SUBSUBPROCESS(1) 
[271] SUBSUBPROCESS(1) func<start> freq = NB_FFT_PT_2F / 2 + (S4)((v_limit) / 3.6F * fl_sin(PI / (FL)180.0F * (FL)(i - v0_doa)) / VCOF_2F 
[272] SUBSUBPROCESS(1) func<end> ); 
[273] SUBSUBPROCESS(1) if <start> if ( 
[274] SUBSUBPROCESS(1) if  (freq >= 0 
[275] SUBSUBPROCESS(1) if  ) 
[276] SUBSUBPROCESS(1) if  &&  (freq < NB_FFT_PT_2F)) 
[277] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[278] SUBSUBSUBPROCESS(1) equal fast_sot_limit_line[i] freq;
[279] SUBSUBPROCESS(2) else<start> else 
[280] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[281] SUBSUBSUBPROCESS(1) equal fast_sot_limit_line[i] 0;
[282] SUBPROCESS(12) func<start> memcpy(as4_g_fast_sot_limit_line_diam, fast_sot_limit_line, sizeof(S4)*N_DOA 
[283] SUBPROCESS(12) func<end> ); 
[284] MAINPROCESS(17) for<start> for( 
[285] MAINPROCESS(17) for i=0; 
[286] MAINPROCESS(17) for i<SLOW_SOT_FREQ_BIN_RANGE; 
[287] MAINPROCESS(17) for i++) 
[288] MAINPROCESS(17) subproc SUBPROCESS(1) 
[289] SUBPROCESS(1) equal index 0;
[290] SUBPROCESS(1) if <start> if ( 
[291] SUBPROCESS(1) if  mode == 0 
[292] SUBPROCESS(1) if  ) 
[293] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[294] SUBSUBPROCESS(1) if <start> if ( 
[295] SUBSUBPROCESS(1) if  (nearfield_doa[i][index] > doa_min 
[296] SUBSUBPROCESS(1) if  ) 
[297] SUBSUBPROCESS(1) if  &&  (nearfield_doa[i][index] < doa_max) 
[298] SUBSUBPROCESS(1) if  &&  (nearfield_doa[i][index] != -1) 
[299] SUBSUBPROCESS(1) if  &&  ((start_freq_bin + i) >= bin_min) 
[300] SUBSUBPROCESS(1) if  &&  ((start_freq_bin + i) <= bin_max) 
[301] SUBSUBPROCESS(1) if  &&  (afl_a_sot_check_object[i][0] != CFL_UNKNOWN_VALUE) 
[302] SUBSUBPROCESS(1) if  &&  (afl_a_sot_check_object[i][0] > (FL)0.0F) 
[303] SUBSUBPROCESS(1) if  &&  (afl_a_sot_check_object[i][1] > (FL)-0.2F)) 
[304] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[305] SUBSUBSUBPROCESS(1) equal tmp_vsin (FL)(start_freq_bin + i - (NB_FFT_PT_2F / (S4)2)) * (FL)3.6F * VCOF_2F / fl_g_v_self_bsm_for_base;
[306] SUBSUBSUBPROCESS(1) if <start> if ( 
[307] SUBSUBSUBPROCESS(1) if  tmp_vsin > 1.0F 
[308] SUBSUBSUBPROCESS(1) if  ) 
[309] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[310] SUBSUBSUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[311] SUBSUBSUBPROCESS(2) if <start> if ( 
[312] SUBSUBSUBPROCESS(2) if  tmp_vsin < -1.0F 
[313] SUBSUBSUBPROCESS(2) if  ) 
[314] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[315] SUBSUBSUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[316] SUBSUBSUBPROCESS(3) equal doa_stationary (FL)fl_cal_asin(tmp_vsin) * 180.0F / PI + (FL)v0_doa;
[317] SUBSUBSUBPROCESS(3) equal tmp doa_stationary - (FL)nearfield_doa[i][index];
[318] SUBSUBSUBPROCESS(3) equal dev + tmp*tmp;
[319] SUBSUBSUBPROCESS(3) proc num++; 
[320] SUBPROCESS(2) else<start> else 
[321] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[322] SUBSUBPROCESS(1) if <start> if ( 
[323] SUBSUBPROCESS(1) if  (nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE - i - 1][index] > doa_min 
[324] SUBSUBPROCESS(1) if  ) 
[325] SUBSUBPROCESS(1) if  && (nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE - i - 1][index] < doa_max) 
[326] SUBSUBPROCESS(1) if  && (nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE - i - 1][index] != -1) 
[327] SUBSUBPROCESS(1) if  && ((start_freq_bin + i + 1) >= bin_min) 
[328] SUBSUBPROCESS(1) if  && ((start_freq_bin + i + 1) <= bin_max) 
[329] SUBSUBPROCESS(1) if  && (afl_a_sot_check_object[SLOW_SOT_FREQ_BIN_RANGE - i - 1][0] != CFL_UNKNOWN_VALUE) 
[330] SUBSUBPROCESS(1) if  && (afl_a_sot_check_object[SLOW_SOT_FREQ_BIN_RANGE - i - 1][0] > (FL)0.0F) 
[331] SUBSUBPROCESS(1) if  && (afl_a_sot_check_object[SLOW_SOT_FREQ_BIN_RANGE - i - 1][1] < (FL)0.2F)) 
[332] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[333] SUBSUBSUBPROCESS(1) equal tmp_vsin (FL)(start_freq_bin + i + (S4)1 - (NB_FFT_PT_2F / (S4)2)) * (FL)3.6F * VCOF_2F / fl_g_v_self_bsm_for_base;
[334] SUBSUBSUBPROCESS(1) if <start> if ( 
[335] SUBSUBSUBPROCESS(1) if  tmp_vsin > 1.0F 
[336] SUBSUBSUBPROCESS(1) if  ) 
[337] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[338] SUBSUBSUBSUBPROCESS(1) equal tmp_vsin 1.0F;
[339] SUBSUBSUBPROCESS(2) if <start> if ( 
[340] SUBSUBSUBPROCESS(2) if  tmp_vsin < -1.0F 
[341] SUBSUBSUBPROCESS(2) if  ) 
[342] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[343] SUBSUBSUBSUBPROCESS(1) equal tmp_vsin -1.0F;
[344] SUBSUBSUBPROCESS(3) equal doa_stationary (FL)fl_cal_asin(tmp_vsin) * 180.0F / PI + (FL)v0_doa;
[345] SUBSUBSUBPROCESS(3) equal tmp doa_stationary - (FL)nearfield_doa[SLOW_SOT_FREQ_BIN_RANGE-i-1][index];
[346] SUBSUBSUBPROCESS(3) equal dev + tmp*tmp;
[347] SUBSUBSUBPROCESS(3) proc num++; 
[348] MAINPROCESS(18) if <start> if ( 
[349] MAINPROCESS(18) if  mode == 0 
[350] MAINPROCESS(18) if  ) 
[351] MAINPROCESS(18) subproc SUBPROCESS(1) 
[352] SUBPROCESS(1) if <start> if ( 
[353] SUBPROCESS(1) if  fl_g_v_self_bsm_for_base < 20.0F 
[354] SUBPROCESS(1) if  ) 
[355] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[356] SUBSUBPROCESS(1) equal num_th num_th - 1;
[357] SUBSUBPROCESS(1) if <start> if ( 
[358] SUBSUBPROCESS(1) if  num_th < 1 
[359] SUBSUBPROCESS(1) if  ) 
[360] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[361] SUBSUBSUBPROCESS(1) equal num_th 1;
[362] SUBPROCESS(2) else<start> else 
[363] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[364] SUBSUBPROCESS(1) if <start> if ( 
[365] SUBSUBPROCESS(1) if  num != (S4)0 
[366] SUBSUBPROCESS(1) if  ) 
[367] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[368] SUBSUBSUBPROCESS(1) if <start> if ( 
[369] SUBSUBSUBPROCESS(1) if  (dev / (FL)num) > WALL_DEV_TH5 
[370] SUBSUBSUBPROCESS(1) if  ) 
[371] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[372] SUBSUBSUBSUBPROCESS(1) proc return dev / (FL)num; 
[373] SUBSUBPROCESS(2) else<start> else 
[374] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[375] SUBSUBSUBPROCESS(1) equal dev (FL)999.9F;
[376] SUBSUBSUBPROCESS(1) equal *backward_priod (S4)1;
[377] SUBSUBSUBPROCESS(1) proc return dev; 
[378] MAINPROCESS(19) if <start> if ( 
[379] MAINPROCESS(19) if  mode == (S4)1 
[380] MAINPROCESS(19) if  ) 
[381] MAINPROCESS(19) subproc SUBPROCESS(1) 
[382] SUBPROCESS(1) if <start> if ( 
[383] SUBPROCESS(1) if  fl_g_v_self_bsm_for_base < (FL)20.0F 
[384] SUBPROCESS(1) if  ) 
[385] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[386] SUBSUBPROCESS(1) equal num_th num_th - (S4)3;
[387] SUBSUBPROCESS(1) if <start> if ( 
[388] SUBSUBPROCESS(1) if  num_th < (S4)1 
[389] SUBSUBPROCESS(1) if  ) 
[390] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[391] SUBSUBSUBPROCESS(1) equal num_th (S4)1;
[392] MAINPROCESS(20) if <start> if ( 
[393] MAINPROCESS(20) if  num > num_th 
[394] MAINPROCESS(20) if  ) 
[395] MAINPROCESS(20) subproc SUBPROCESS(1) 
[396] SUBPROCESS(1) equal dev dev / (FL)num;
[397] MAINPROCESS(21) else<start> else 
[398] MAINPROCESS(21) subproc SUBPROCESS(1) 
[399] SUBPROCESS(1) equal dev 999.9F;
[400] MAINPROCESS(22) if <start> if ( 
[401] MAINPROCESS(22) if  (mode == 0 
[402] MAINPROCESS(22) if  ) 
[403] MAINPROCESS(22) if  &&  (dev == 999.9F)) 
[404] MAINPROCESS(22) subproc SUBPROCESS(1) 
[405] SUBPROCESS(1) equal *backward_priod 1;
[406] MAINPROCESS(23) proc return dev; 
----------------- Total Codes : 406 lines
--------------------------
[Function Name] : calc_line_doa_fm 
-Return type : FL 
-Argument : 8 
     [0] : const FL   Ryy[NB_FFT_PT][CORRE_SIZE_4CH] 
     [1] : FL   power[NB_FFT_PT] 
     [2] : S4   start_bin 
     [3] : S4   end_bin 
     [4] : FL   pow_th 
     [5] : S4   line_doa[LINE_FREQ_BIN_RANGE][1] 
     [6] : S4   line_doa_peak_num[LINE_FREQ_BIN_RANGE] 
     [7] : S4   updn 
----- Codes -----
[1] MAINPROCESS(1) equal FL ave_pow_dbf 0.0F;
[2] MAINPROCESS(1) equal S4 ave_num_dbf 0;
[3] MAINPROCESS(1) proc S4 i, j; 
[4] MAINPROCESS(1) proc FL spec_doa[N_DOA]; 
[5] MAINPROCESS(1) proc S4 tmp_doa[1]; 
[6] MAINPROCESS(1) proc FL tmp_peak_power[1]; 
[7] MAINPROCESS(1) for<start> for( 
[8] MAINPROCESS(1) for i = 0; 
[9] MAINPROCESS(1) for i < N_DOA; 
[10] MAINPROCESS(1) for i++ ) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal spec_doa[i] 0.0F;
[13] MAINPROCESS(2) for<start> for( 
[14] MAINPROCESS(2) for i=0; 
[15] MAINPROCESS(2) for i<LINE_FREQ_BIN_RANGE; 
[16] MAINPROCESS(2) for i++) 
[17] MAINPROCESS(2) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) for<start> for( 
[19] SUBPROCESS(1) for j=0; 
[20] SUBPROCESS(1) for j<1; 
[21] SUBPROCESS(1) for j++) 
[22] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[23] SUBSUBPROCESS(1) equal line_doa[i][j] 0;
[24] SUBPROCESS(2) equal line_doa_peak_num[i] 0;
[25] MAINPROCESS(3) for<start> for( 
[26] MAINPROCESS(3) for i=0; 
[27] MAINPROCESS(3) for i<LINE_FREQ_BIN_RANGE; 
[28] MAINPROCESS(3) for i++) 
[29] MAINPROCESS(3) subproc SUBPROCESS(1) 
[30] SUBPROCESS(1) if <start> if ( 
[31] SUBPROCESS(1) if  (start_bin + i) < end_bin 
[32] SUBPROCESS(1) if  ) 
[33] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) func<start> fn_calc_spec_bf_4ch_fm( 
[35] SUBSUBPROCESS(1) func (const FL *)(Ryy[start_bin+i]), 
[36] SUBSUBPROCESS(1) func spec_doa, 
[37] SUBSUBPROCESS(1) func updn, 
[38] SUBSUBPROCESS(1) func start_bin+i 
[39] SUBSUBPROCESS(1) func<end> ); 
[40] SUBSUBPROCESS(1) func<start> line_doa_peak_num[i] = s4_search_peak_bf( 
[41] SUBSUBPROCESS(1) func (const FL *)spec_doa, 
[42] SUBSUBPROCESS(1) func tmp_doa, 
[43] SUBSUBPROCESS(1) func tmp_peak_power, 
[44] SUBSUBPROCESS(1) func 1 
[45] SUBSUBPROCESS(1) func<end> ); 
[46] SUBSUBPROCESS(1) for<start> for( 
[47] SUBSUBPROCESS(1) for j=0; 
[48] SUBSUBPROCESS(1) for j<line_doa_peak_num[i]; 
[49] SUBSUBPROCESS(1) for j++ ) 
[50] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[51] SUBSUBSUBPROCESS(1) equal line_doa[i][j] tmp_doa[j];
[52] SUBSUBSUBPROCESS(1) equal ave_pow_dbf + tmp_peak_power[j];
[53] SUBSUBSUBPROCESS(1) proc ave_num_dbf++; 
[54] SUBPROCESS(2) else<start> else 
[55] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[56] SUBSUBPROCESS(1) proc break; 
[57] MAINPROCESS(4) if<start> if( 
[58] MAINPROCESS(4) if ave_num_dbf!=0 
[59] MAINPROCESS(4) if ) 
[60] MAINPROCESS(4) subproc SUBPROCESS(1) 
[61] SUBPROCESS(1) equal ave_pow_dbf ave_pow_dbf / (FL)ave_num_dbf;
[62] MAINPROCESS(5) proc return ave_pow_dbf; 
----------------- Total Codes : 62 lines
--------------------------
[Function Name] : set_freq_threshold_without_center_mask 
-Return type : VD 
-Argument : 2 
     [0] : const FL   power[NB_FFT_PT] 
     [1] : FL   thres[NB_FFT_PT] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i, j; 
[2] MAINPROCESS(1) equal S4 ave_range AVE_BIN_WIDTH;
[3] MAINPROCESS(1) proc FL ave_power[NB_FFT_PT/AVE_BIN_WIDTH]; 
[4] MAINPROCESS(1) equal FL clearance AVE_POW_CLEARANCE;
[5] MAINPROCESS(1) proc S4 loop_max; 
[6] MAINPROCESS(1) equal loop_max NB_FFT_PT / ave_range;
[7] MAINPROCESS(1) for<start> for( 
[8] MAINPROCESS(1) for i=0; 
[9] MAINPROCESS(1) for i<loop_max; 
[10] MAINPROCESS(1) for i++) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal ave_power[i] 0.0F;
[13] SUBPROCESS(1) for<start> for( 
[14] SUBPROCESS(1) for j=0; 
[15] SUBPROCESS(1) for j<ave_range; 
[16] SUBPROCESS(1) for j++ ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal ave_power[i] ave_power[i] + power[i*ave_range+j];
[19] SUBPROCESS(2) equal ave_power[i] ave_power[i] / (FL)ave_range;
[20] SUBPROCESS(2) if<start> if( 
[21] SUBPROCESS(2) if ave_power[i]<PEAK_POW_TH_MIN 
[22] SUBPROCESS(2) if ) 
[23] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) equal ave_power[i] PEAK_POW_TH_MIN;
[25] SUBPROCESS(3) for<start> for( 
[26] SUBPROCESS(3) for j=0; 
[27] SUBPROCESS(3) for j<ave_range; 
[28] SUBPROCESS(3) for j++ ) 
[29] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[30] SUBSUBPROCESS(1) equal thres[i*ave_range+j] ave_power[i] + clearance;
----------------- Total Codes : 30 lines
--------------------------
[Function Name] : set_wall_freq_threshold 
-Return type : S4 
-Argument : 7 
     [0] : const FL   thres[NB_FFT_PT] 
     [1] : FL   wall_thres[NB_FFT_PT] 
     [2] : S4   wall_check[WALL_FREQ_BIN_TH_STEPS] 
     [3] : S4   wall_bin[WALL_FREQ_BIN_TH_STEPS] 
     [4] : FL   wall_pow[WALL_FREQ_BIN_TH_STEPS] 
     [5] : S4   freq_start 
     [6] : S4   freq_end 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iret 0;
[2] MAINPROCESS(1) proc S4 i, j; 
[3] MAINPROCESS(1) equal FL base_pow 0.0F;
[4] MAINPROCESS(1) equal FL tmp_pow 0.0F;
[5] MAINPROCESS(1) equal S4 tmp_count 0;
[6] MAINPROCESS(1) proc S4 tmp_wall_check[WALL_FREQ_BIN_TH_STEPS]; 
[7] MAINPROCESS(1) proc S4 index[WALL_FREQ_BIN_TH_STEPS+1]; 
[8] MAINPROCESS(1) proc FL pow[WALL_FREQ_BIN_TH_STEPS+1]; 
[9] MAINPROCESS(1) proc S4 count[WALL_FREQ_BIN_TH_STEPS]; 
[10] MAINPROCESS(1) equal S4 tmp_ret 1;
[11] MAINPROCESS(1) proc U1 u1_t_lp_freq_bin_th_steps; 
[12] MAINPROCESS(1) for <start> for ( 
[13] MAINPROCESS(1) for  u1_t_lp_freq_bin_th_steps = (U1)0; 
[14] MAINPROCESS(1) for  u1_t_lp_freq_bin_th_steps < (U1)WALL_FREQ_BIN_TH_STEPS; 
[15] MAINPROCESS(1) for  u1_t_lp_freq_bin_th_steps++) 
[16] MAINPROCESS(1) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) equal tmp_wall_check[u1_t_lp_freq_bin_th_steps] (S4)0;
[18] SUBPROCESS(1) equal count[u1_t_lp_freq_bin_th_steps] (S4)0;
[19] MAINPROCESS(2) for <start> for ( 
[20] MAINPROCESS(2) for  u1_t_lp_freq_bin_th_steps = (U1)0; 
[21] MAINPROCESS(2) for  u1_t_lp_freq_bin_th_steps < ((U1)WALL_FREQ_BIN_TH_STEPS + (U1)1 
[22] MAINPROCESS(2) for  ); 
[23] MAINPROCESS(2) for  u1_t_lp_freq_bin_th_steps++) 
[24] MAINPROCESS(2) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) equal index[u1_t_lp_freq_bin_th_steps] (S4)0;
[26] SUBPROCESS(1) equal pow[u1_t_lp_freq_bin_th_steps] (FL)0.0F;
[27] MAINPROCESS(3) equal base_pow thres[BASE_FREQ_BIN_LOWER_LIMIT];
[28] MAINPROCESS(3) equal tmp_count 1;
[29] MAINPROCESS(3) for<start> for( 
[30] MAINPROCESS(3) for i=BASE_FREQ_BIN_LOWER_LIMIT; 
[31] MAINPROCESS(3) for i<BASE_FREQ_BIN_UPPER_LIMIT; 
[32] MAINPROCESS(3) for i++) 
[33] MAINPROCESS(3) subproc SUBPROCESS(1) 
[34] SUBPROCESS(1) equal tmp_pow thres[i+1] - base_pow;
[35] SUBPROCESS(1) if<start> if( 
[36] SUBPROCESS(1) if fl_abs(tmp_pow) < BASE_FREQ_POW_RANGE 
[37] SUBPROCESS(1) if ) 
[38] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[39] SUBSUBPROCESS(1) proc tmp_count++; 
[40] SUBSUBPROCESS(1) equal base_pow + tmp_pow / (FL)tmp_count;
[41] MAINPROCESS(4) for<start> for( 
[42] MAINPROCESS(4) for i=0; 
[43] MAINPROCESS(4) for i<WALL_FREQ_BIN_TH_STEPS; 
[44] MAINPROCESS(4) for i++) 
[45] MAINPROCESS(4) subproc SUBPROCESS(1) 
[46] SUBPROCESS(1) equal pow[i] base_pow;
[47] MAINPROCESS(5) equal index[0] freq_start;
[48] MAINPROCESS(5) equal index[WALL_FREQ_BIN_TH_STEPS] freq_end;
[49] MAINPROCESS(5) for<start> for( 
[50] MAINPROCESS(5) for i=0; 
[51] MAINPROCESS(5) for i<WALL_FREQ_BIN_TH_STEPS; 
[52] MAINPROCESS(5) for i++) 
[53] MAINPROCESS(5) subproc SUBPROCESS(1) 
[54] SUBPROCESS(1) if<start> if( 
[55] SUBPROCESS(1) if tmp_ret!=0 
[56] SUBPROCESS(1) if ) 
[57] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[58] SUBSUBPROCESS(1) func<start> tmp_ret = seek_freq_step( 
[59] SUBSUBPROCESS(1) func (const FL *)thres, 
[60] SUBSUBPROCESS(1) func freq_end, 
[61] SUBSUBPROCESS(1) func WALL_FREQ_POW_RANGE, 
[62] SUBSUBPROCESS(1) func &pow[i], 
[63] SUBSUBPROCESS(1) func &index[i], 
[64] SUBSUBPROCESS(1) func &count[i], 
[65] SUBSUBPROCESS(1) func &index[i+1] 
[66] SUBSUBPROCESS(1) func<end> ); 
[67] SUBSUBPROCESS(1) equal pow[i+1] pow[i];
[68] SUBSUBPROCESS(1) if<start> if( 
[69] SUBSUBPROCESS(1) if count[i]!=0 
[70] SUBSUBPROCESS(1) if ) 
[71] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[72] SUBSUBSUBPROCESS(1) proc iret++; 
[73] SUBPROCESS(2) else<start> else 
[74] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[75] SUBSUBPROCESS(1) proc break; 
[76] MAINPROCESS(6) for<start> for( 
[77] MAINPROCESS(6) for i=0; 
[78] MAINPROCESS(6) for i<NB_FFT_PT; 
[79] MAINPROCESS(6) for i++) 
[80] MAINPROCESS(6) subproc SUBPROCESS(1) 
[81] SUBPROCESS(1) equal wall_thres[i] base_pow;
[82] MAINPROCESS(7) for<start> for( 
[83] MAINPROCESS(7) for j=0; 
[84] MAINPROCESS(7) for j<iret; 
[85] MAINPROCESS(7) for j++) 
[86] MAINPROCESS(7) subproc SUBPROCESS(1) 
[87] SUBPROCESS(1) if <start> if ( 
[88] SUBPROCESS(1) if  count[j] >= (0.5 * (index[j+1]-index[j])) 
[89] SUBPROCESS(1) if  ) 
[90] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[91] SUBSUBPROCESS(1) for<start> for( 
[92] SUBSUBPROCESS(1) for i=index[j]; 
[93] SUBSUBPROCESS(1) for i<NB_FFT_PT; 
[94] SUBSUBPROCESS(1) for i++) 
[95] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[96] SUBSUBSUBPROCESS(1) equal wall_thres[i] pow[j];
[97] SUBSUBSUBPROCESS(1) equal tmp_wall_check[j] 1;
[98] SUBPROCESS(2) else<start> else 
[99] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[100] SUBSUBPROCESS(1) equal tmp_wall_check[j] 0;
[101] MAINPROCESS(8) for<start> for( 
[102] MAINPROCESS(8) for i=freq_end; 
[103] MAINPROCESS(8) for i<NB_FFT_PT; 
[104] MAINPROCESS(8) for i++) 
[105] MAINPROCESS(8) subproc SUBPROCESS(1) 
[106] SUBPROCESS(1) equal wall_thres[i] base_pow;
[107] MAINPROCESS(9) for<start> for( 
[108] MAINPROCESS(9) for i=0; 
[109] MAINPROCESS(9) for i<WALL_FREQ_BIN_TH_STEPS; 
[110] MAINPROCESS(9) for i++) 
[111] MAINPROCESS(9) subproc SUBPROCESS(1) 
[112] SUBPROCESS(1) equal wall_check[i] tmp_wall_check[i];
[113] SUBPROCESS(1) equal wall_bin[i] index[i];
[114] SUBPROCESS(1) equal wall_pow[i] pow[i];
[115] MAINPROCESS(10) proc return iret; 
----------------- Total Codes : 115 lines
--------------------------
[Function Name] : seek_freq_step 
-Return type : S4 
-Argument : 7 
     [0] : const FL   thres[NB_FFT_PT] 
     [1] : S4   end_index 
     [2] : FL   pow_range 
     [3] : FL   pow[1] 
     [4] : S4   index[1] 
     [5] : S4   count[1] 
     [6] : S4   next_index[1] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iret 0;
[2] MAINPROCESS(1) proc S4 i; 
[3] MAINPROCESS(1) equal FL tmp_pow_diff 0.0F;
[4] MAINPROCESS(1) equal S4 start_index index[0];
[5] MAINPROCESS(1) equal S4 tmp_next_index next_index[0];
[6] MAINPROCESS(1) equal S4 tmp_index index[0];
[7] MAINPROCESS(1) equal S4 tmp_count count[0];
[8] MAINPROCESS(1) equal FL tmp_pow pow[0];
[9] MAINPROCESS(1) for<start> for( 
[10] MAINPROCESS(1) for i=start_index; 
[11] MAINPROCESS(1) for i<end_index; 
[12] MAINPROCESS(1) for i++) 
[13] MAINPROCESS(1) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal tmp_pow_diff thres[i] - tmp_pow;
[15] SUBPROCESS(1) if<start> if( 
[16] SUBPROCESS(1) if tmp_pow_diff > WALL_POW_TH 
[17] SUBPROCESS(1) if ) 
[18] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[19] SUBSUBPROCESS(1) equal tmp_pow thres[i];
[20] SUBSUBPROCESS(1) equal tmp_index i;
[21] SUBSUBPROCESS(1) proc break; 
[22] SUBPROCESS(2) else if<start> else if( 
[23] SUBPROCESS(2) else if tmp_pow_diff < -WALL_POW_TH 
[24] SUBPROCESS(2) else if ) 
[25] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[26] SUBSUBPROCESS(1) equal tmp_pow thres[i];
[27] SUBSUBPROCESS(1) equal tmp_index i;
[28] SUBSUBPROCESS(1) proc break; 
[29] SUBPROCESS(3) else<start> else 
[30] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[31] MAINPROCESS(2) for<start> for( 
[32] MAINPROCESS(2) for i=tmp_index; 
[33] MAINPROCESS(2) for i<end_index; 
[34] MAINPROCESS(2) for i++) 
[35] MAINPROCESS(2) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) equal tmp_pow_diff thres[i] - tmp_pow;
[37] SUBPROCESS(1) if<start> if( 
[38] SUBPROCESS(1) if fl_abs(tmp_pow_diff) < pow_range 
[39] SUBPROCESS(1) if ) 
[40] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[41] SUBSUBPROCESS(1) proc tmp_count++; 
[42] SUBSUBPROCESS(1) equal tmp_pow + tmp_pow_diff / (FL)tmp_count;
[43] SUBPROCESS(2) else<start> else 
[44] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[45] SUBSUBPROCESS(1) if<start> if( 
[46] SUBSUBPROCESS(1) if tmp_pow_diff > WALL_POW_TH 
[47] SUBSUBPROCESS(1) if ) 
[48] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[49] SUBSUBSUBPROCESS(1) equal iret 1;
[50] SUBSUBSUBPROCESS(1) equal tmp_next_index i+1;
[51] SUBSUBSUBPROCESS(1) proc break; 
[52] SUBSUBPROCESS(2) else<start> else 
[53] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[54] SUBSUBSUBPROCESS(1) equal iret -1;
[55] SUBSUBSUBPROCESS(1) equal tmp_next_index i+1;
[56] SUBSUBSUBPROCESS(1) proc break; 
[57] MAINPROCESS(3) equal pow[0] tmp_pow;
[58] MAINPROCESS(3) equal index[0] tmp_index;
[59] MAINPROCESS(3) equal count[0] tmp_count;
[60] MAINPROCESS(3) equal next_index[0] tmp_next_index;
[61] MAINPROCESS(3) proc return iret; 
----------------- Total Codes : 61 lines
--------------------------
[Function Name] : peak_search_music_fsk_all_doa 
-Return type : S4 
-Argument : 4 
     [0] : const FL   music_spec[N_DOA_2F] 
     [1] : S4   bin_music[2] 
     [2] : FL   power_music[2] 
     [3] : S4   wave_num_in 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i,j; 
[2] MAINPROCESS(1) proc S4 tmp_bin_music[4]; 
[3] MAINPROCESS(1) proc FL tmp_power_music[4]; 
[4] MAINPROCESS(1) equal S4 peak_num_music 0;
[5] MAINPROCESS(1) proc S4 tmp_int; 
[6] MAINPROCESS(1) proc FL tmp_float; 
[7] MAINPROCESS(1) equal S4 wave_num wave_num_in;
[8] MAINPROCESS(1) proc U1 u1_t_lp_peak_num; 
[9] MAINPROCESS(1) for <start> for ( 
[10] MAINPROCESS(1) for  u1_t_lp_peak_num = (U1)0; 
[11] MAINPROCESS(1) for  u1_t_lp_peak_num < (U1)4; 
[12] MAINPROCESS(1) for  u1_t_lp_peak_num++) 
[13] MAINPROCESS(1) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal tmp_bin_music[u1_t_lp_peak_num] (S4)0;
[15] SUBPROCESS(1) equal tmp_power_music[u1_t_lp_peak_num] (FL)0.0F;
[16] MAINPROCESS(2) equal j 0;
[17] MAINPROCESS(2) for<start> for( 
[18] MAINPROCESS(2) for i=0; 
[19] MAINPROCESS(2) for i<N_DOA; 
[20] MAINPROCESS(2) for i++ ) 
[21] MAINPROCESS(2) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) if <start> if ( 
[23] SUBPROCESS(1) if  (music_spec[i] < music_spec[i+1] 
[24] SUBPROCESS(1) if  ) 
[25] SUBPROCESS(1) if  &&  (music_spec[i+1] > music_spec[i+2]) 
[26] SUBPROCESS(1) if  &&  (j < 4)) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) if <start> if ( 
[29] SUBSUBPROCESS(1) if  music_spec[i+1] > 5 
[30] SUBSUBPROCESS(1) if  ) 
[31] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[32] SUBSUBSUBPROCESS(1) equal tmp_bin_music[j] i + 1;
[33] SUBSUBSUBPROCESS(1) equal tmp_power_music[j] music_spec[i+1];
[34] SUBSUBSUBPROCESS(1) proc j++; 
[35] MAINPROCESS(3) equal peak_num_music j;
[36] MAINPROCESS(3) if <start> if ( 
[37] MAINPROCESS(3) if  wave_num >= peak_num_music 
[38] MAINPROCESS(3) if  ) 
[39] MAINPROCESS(3) subproc SUBPROCESS(1) 
[40] SUBPROCESS(1) equal wave_num peak_num_music;
[41] SUBPROCESS(1) for <start> for ( 
[42] SUBPROCESS(1) for  i = 0; 
[43] SUBPROCESS(1) for  i < wave_num; 
[44] SUBPROCESS(1) for  i++ ) 
[45] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[46] SUBSUBPROCESS(1) equal bin_music[i] tmp_bin_music[i];
[47] SUBSUBPROCESS(1) equal power_music[i] tmp_power_music[i];
[48] MAINPROCESS(4) else<start> else 
[49] MAINPROCESS(4) subproc SUBPROCESS(1) 
[50] SUBPROCESS(1) for <start> for ( 
[51] SUBPROCESS(1) for  i = 0; 
[52] SUBPROCESS(1) for  i < peak_num_music; 
[53] SUBPROCESS(1) for  i++ ) 
[54] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[55] SUBSUBPROCESS(1) for <start> for ( 
[56] SUBSUBPROCESS(1) for  j = i+1; 
[57] SUBSUBPROCESS(1) for  j < peak_num_music; 
[58] SUBSUBPROCESS(1) for  j++ ) 
[59] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[60] SUBSUBSUBPROCESS(1) if <start> if ( 
[61] SUBSUBSUBPROCESS(1) if  tmp_power_music[i] < tmp_power_music[j] 
[62] SUBSUBSUBPROCESS(1) if  ) 
[63] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[64] SUBSUBSUBSUBPROCESS(1) equal tmp_float tmp_power_music[i];
[65] SUBSUBSUBSUBPROCESS(1) equal tmp_power_music[i] tmp_power_music[j];
[66] SUBSUBSUBSUBPROCESS(1) equal tmp_power_music[j] tmp_float;
[67] SUBSUBSUBSUBPROCESS(1) equal tmp_int tmp_bin_music[i];
[68] SUBSUBSUBSUBPROCESS(1) equal tmp_bin_music[i] tmp_bin_music[j];
[69] SUBSUBSUBSUBPROCESS(1) equal tmp_bin_music[j] tmp_int;
[70] SUBPROCESS(2) for <start> for ( 
[71] SUBPROCESS(2) for  i = 0; 
[72] SUBPROCESS(2) for  i < wave_num; 
[73] SUBPROCESS(2) for  i++ ) 
[74] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[75] SUBSUBPROCESS(1) equal bin_music[i] tmp_bin_music[i];
[76] SUBSUBPROCESS(1) equal power_music[i] tmp_power_music[i];
[77] MAINPROCESS(5) for <start> for ( 
[78] MAINPROCESS(5) for  i = 0; 
[79] MAINPROCESS(5) for  i < wave_num; 
[80] MAINPROCESS(5) for  i++ ) 
[81] MAINPROCESS(5) subproc SUBPROCESS(1) 
[82] SUBPROCESS(1) for <start> for ( 
[83] SUBPROCESS(1) for  j = i+1; 
[84] SUBPROCESS(1) for  j < wave_num; 
[85] SUBPROCESS(1) for  j++ ) 
[86] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[87] SUBSUBPROCESS(1) if <start> if ( 
[88] SUBSUBPROCESS(1) if  bin_music[i] > bin_music[j] 
[89] SUBSUBPROCESS(1) if  ) 
[90] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[91] SUBSUBSUBPROCESS(1) equal tmp_int bin_music[i];
[92] SUBSUBSUBPROCESS(1) equal bin_music[i] bin_music[j];
[93] SUBSUBSUBPROCESS(1) equal bin_music[j] tmp_int;
[94] SUBSUBSUBPROCESS(1) equal tmp_float power_music[i];
[95] SUBSUBSUBPROCESS(1) equal power_music[i] power_music[j];
[96] SUBSUBSUBPROCESS(1) equal power_music[j] tmp_float;
[97] MAINPROCESS(6) proc return wave_num; 
----------------- Total Codes : 97 lines
