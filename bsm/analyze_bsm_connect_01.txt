Total lines: 3546 
Total functions : 78 
--------------------------
[Function Name] : s4_bsm_connect 
-Return type : S4 
-Argument : 11 
     [0] : S4   pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   pair_num_sot 
     [7] : NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   Tx_int[TARGET_BUFFSIZE][NORM_INT] 
     [9] : FL   Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
     [10] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 iRet 0;
[3] MAINPROCESS ??? NORMAL_BSM	normal1[NORMAL_BUFFSIZE], 
[4] MAINPROCESS ??? normal2[NORMAL_BUFFSIZE], 
[5] MAINPROCESS ??? target1[TARGET_BUFFSIZE], 
[6] MAINPROCESS proc target2[TARGET_BUFFSIZE]; 
[7] MAINPROCESS proc S4		pair_num_current[2]; 
[8] MAINPROCESS equal S4 trk_num 0;
[9] MAINPROCESS ??? S4		pair_connect_prev[NORMAL_BUFFSIZE], 
[10] MAINPROCESS proc pair_connect_current[NORMAL_BUFFSIZE]; 
[11] MAINPROCESS equal S4		pair_num_total 0;
[12] MAINPROCESS equal S4		pair_num_connected 0;
[13] MAINPROCESS equal S4		pair_num_lost 0;
[14] MAINPROCESS equal S4 s4_t_pair_num_selected 0;
[15] MAINPROCESS func fn_init(normal2, NORMAL_BUFFSIZE); 
[16] MAINPROCESS func fn_init(target2, TARGET_BUFFSIZE); 
[17] MAINPROCESS func fn_move(normal1, st_g_bsm_loop_data.ast_normal, NORMAL_BUFFSIZE); 
[18] MAINPROCESS func fn_move(target1, st_g_bsm_loop_data.ast_target, TARGET_BUFFSIZE); 
[19] MAINPROCESS equal pair_num_current[0] (S4)0;
[20] MAINPROCESS equal pair_num_current[1] (S4)0;
[21] MAINPROCESS equal for(i 0;
[22] MAINPROCESS proc i<NORMAL_BUFFSIZE; 
[23] MAINPROCESS ??? i++) 
[24] MAINPROCESS subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) equal pair_connect_prev[i] -1;
[26] SUBPROCESS(1) equal pair_connect_current[i] -1;
[27] MAINPROCESS equal st_g_bsm_loop_data.u1_truck_flg u1_check_long_truck(u1_a_alarming_flag);
[28] MAINPROCESS ??? fn_estimate_road_shape( 
[29] MAINPROCESS ??? st_g_bsm_loop_data.afl_Rx_right 
[30] MAINPROCESS proc ); 
[31] MAINPROCESS func memcpy (afl_g_Rx_right, st_g_bsm_loop_data.afl_Rx_right, sizeof(FL)*70); 
[32] MAINPROCESS equal for(i 0;
[33] MAINPROCESS proc i<70; 
[34] MAINPROCESS ??? i++) 
[35] MAINPROCESS subproc SUBPROCESS(2) 
[36] SUBPROCESS(2) equal afl_g_Ry_right[i] -(float)i;
[37] MAINPROCESS ??? fn_bsm_con_check_passing_pre( 
[38] MAINPROCESS ??? (const NORMAL_BSM (*))target1 
[39] MAINPROCESS proc ); 
[40] MAINPROCESS ??? fn_bsm_con_integ_object( 
[41] MAINPROCESS ??? pair_num_prior, 
[42] MAINPROCESS ??? ast_a_normal_prior, 
[43] MAINPROCESS ??? pair_num_ordinary, 
[44] MAINPROCESS ??? ast_a_normal_ordinary, 
[45] MAINPROCESS ??? pair_num_2f, 
[46] MAINPROCESS ??? ast_a_normal_2f, 
[47] MAINPROCESS ??? pair_num_sot, 
[48] MAINPROCESS ??? ast_a_normal_sot, 
[49] MAINPROCESS ??? &pair_num_total, 
[50] MAINPROCESS ??? normal2 
[51] MAINPROCESS proc ); 
[52] MAINPROCESS equal trk_num st_g_bsm_loop_data.as4_buf_pair_num[0];
[53] MAINPROCESS ??? if(trk_num==0) 
[54] MAINPROCESS subproc SUBPROCESS(3) 
[55] SUBPROCESS(3) ??? predict_object_trajectory_simple( 
[56] SUBPROCESS(3) ??? normal2, 
[57] SUBPROCESS(3) ??? pair_num_total 
[58] SUBPROCESS(3) proc ); 
[59] MAINPROCESS ??? else 
[60] MAINPROCESS subproc SUBPROCESS(4) 
[61] SUBPROCESS(4) ??? pair_num_connected = connect_previous_object( 
[62] SUBPROCESS(4) ??? normal1, 
[63] SUBPROCESS(4) ??? normal2, 
[64] SUBPROCESS(4) ??? pair_num_total, 
[65] SUBPROCESS(4) ??? pair_connect_prev, 
[66] SUBPROCESS(4) ??? pair_connect_current, 
[67] SUBPROCESS(4) ??? NORMAL_BUFFSIZE 
[68] SUBPROCESS(4) proc ); 
[69] SUBPROCESS(4) ??? fn_bsm_con_tracking( 
[70] SUBPROCESS(4) ??? pair_num_connected, 
[71] SUBPROCESS(4) ??? (const S4 (*))pair_connect_prev, 
[72] SUBPROCESS(4) ??? (const S4 (*))pair_connect_current, 
[73] SUBPROCESS(4) ??? st_g_bsm_loop_data.as4_buf_pair_num[0], 
[74] SUBPROCESS(4) ??? normal1, 
[75] SUBPROCESS(4) ??? pair_num_total, 
[76] SUBPROCESS(4) ??? normal2 
[77] SUBPROCESS(4) proc ); 
[78] MAINPROCESS ??? if( trk_num > 0 ) 
[79] MAINPROCESS subproc SUBPROCESS(5) 
[80] SUBPROCESS(5) ??? pair_num_lost = prediction_without_connected_data( 
[81] SUBPROCESS(5) ??? normal1, 
[82] SUBPROCESS(5) ??? normal2, 
[83] SUBPROCESS(5) ??? pair_num_total 
[84] SUBPROCESS(5) proc ); 
[85] MAINPROCESS equal pair_num_total pair_num_total + pair_num_lost;
[86] MAINPROCESS ??? fn_bsm_con_add_new_object( 
[87] MAINPROCESS ??? &pair_num_total, 
[88] MAINPROCESS ??? normal2 
[89] MAINPROCESS proc ); 
[90] MAINPROCESS func fn_bsm_con_jdg_object_probability(normal2); 
[91] MAINPROCESS equal s4_g_pair_num pair_num_total;
[92] MAINPROCESS func memcpy (ast_g_normal, normal2, sizeof(NORMAL_BSM)*NORMAL_BUFFSIZE); 
[93] MAINPROCESS ??? s4_t_pair_num_selected = select_target( 
[94] MAINPROCESS ??? st_g_bsm_loop_data.as4_buf_pair_num[1], 
[95] MAINPROCESS ??? (const NORMAL_BSM (*))target1, 
[96] MAINPROCESS ??? &pair_num_current[1], 
[97] MAINPROCESS ??? target2, 
[98] MAINPROCESS ??? (const S4 (*))&pair_num_total, 
[99] MAINPROCESS ??? (const NORMAL_BSM (*))normal2, 
[100] MAINPROCESS ??? u1_a_alarming_flag 
[101] MAINPROCESS proc ); 
[102] MAINPROCESS equal st_g_bsm_loop_data.as4_buf_pair_num[0] pair_num_total;
[103] MAINPROCESS equal st_g_bsm_loop_data.as4_buf_pair_num[1] pair_num_current[1];
[104] MAINPROCESS ??? fn_move( 
[105] MAINPROCESS ??? normal1, 
[106] MAINPROCESS ??? normal2, 
[107] MAINPROCESS ??? NORMAL_BUFFSIZE 
[108] MAINPROCESS proc ); 
[109] MAINPROCESS ??? fn_move( 
[110] MAINPROCESS ??? target1, 
[111] MAINPROCESS ??? target2, 
[112] MAINPROCESS ??? TARGET_BUFFSIZE 
[113] MAINPROCESS proc ); 
[114] MAINPROCESS func fn_move(st_g_bsm_loop_data.ast_normal, normal1, NORMAL_BUFFSIZE); 
[115] MAINPROCESS func fn_move(st_g_bsm_loop_data.ast_target, target1, TARGET_BUFFSIZE); 
[116] MAINPROCESS subproc SUBPROCESS(6) 
[117] SUBPROCESS(6) ??? if(st_g_bsm_loop_data.as4_buf_pair_num[1]==0) 
[118] SUBPROCESS(6) subproc SUBSUBPROCESS(1) 
[119] SUBPROCESS(6) ??? else 
[120] SUBPROCESS(6) subproc SUBSUBPROCESS(2) 
[121] SUBPROCESS(6) ??? if ((fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN) 
[122] SUBPROCESS(6) ??? &&  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0)) 
[123] SUBPROCESS(6) subproc SUBSUBPROCESS(3) 
[124] MAINPROCESS ??? fn_send_to_can( 
[125] MAINPROCESS ??? (const NORMAL_BSM (*))target1, 
[126] MAINPROCESS ??? Tx_int, 
[127] MAINPROCESS ??? Tx_float 
[128] MAINPROCESS proc ); 
[129] MAINPROCESS equal iRet st_g_bsm_loop_data.as4_buf_pair_num[1];
[130] MAINPROCESS subproc SUBPROCESS(7) 
[131] SUBPROCESS(7) proc S4 as4_t_used_ID[TARGET_BUFFSIZE]; 
[132] SUBPROCESS(7) proc S4 s4_t_lp_target_num; 
[133] SUBPROCESS(7) proc S4 s4_t_lp_used_id; 
[134] SUBPROCESS(7) equal for(s4_t_lp_target_num 0;
[135] SUBPROCESS(7) proc s4_t_lp_target_num<TARGET_BUFFSIZE; 
[136] SUBPROCESS(7) ??? s4_t_lp_target_num++) 
[137] SUBPROCESS(7) subproc SUBSUBPROCESS(1) 
[138] SUBPROCESS(7) equal for(s4_t_lp_target_num 0;
[139] SUBPROCESS(7) proc s4_t_lp_target_num<TARGET_BUFFSIZE; 
[140] SUBPROCESS(7) ??? s4_t_lp_target_num++) 
[141] SUBPROCESS(7) subproc SUBSUBPROCESS(2) 
[142] SUBPROCESS(7) equal for(s4_t_lp_target_num 0;
[143] SUBPROCESS(7) proc s4_t_lp_target_num<TARGET_BUFFSIZE; 
[144] SUBPROCESS(7) ??? s4_t_lp_target_num++) 
[145] SUBPROCESS(7) subproc SUBSUBPROCESS(3) 
[146] MAINPROCESS proc return iRet; 
[147] SUBSUBPROCESS(1) equal as4_t_used_ID[s4_t_lp_target_num] 0;
[148] SUBSUBPROCESS(2) ??? if ((Tx_int[s4_t_lp_target_num][11] != 0) 
[149] SUBSUBPROCESS(2) ??? &&  (Tx_float[s4_t_lp_target_num][7] != CFL_UNKNOWN_VALUE) 
[150] SUBSUBPROCESS(2) ??? &&  (Tx_float[s4_t_lp_target_num][8] != CFL_UNKNOWN_VALUE)) 
[151] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[152] SUBSUBPROCESS(3) ??? if ((Tx_int[s4_t_lp_target_num][11] == 0) 
[153] SUBSUBPROCESS(3) ??? &&  (Tx_float[s4_t_lp_target_num][7] != CFL_UNKNOWN_VALUE) 
[154] SUBSUBPROCESS(3) ??? &&  (Tx_float[s4_t_lp_target_num][8] != CFL_UNKNOWN_VALUE)) 
[155] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[156] SUBSUBSUBPROCESS(1) equal for(s4_t_lp_used_id 0;
[157] SUBSUBSUBPROCESS(1) proc s4_t_lp_used_id<TARGET_BUFFSIZE; 
[158] SUBSUBSUBPROCESS(1) ??? s4_t_lp_used_id++) 
[159] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[160] SUBSUBSUBSUBPROCESS(1) ??? if(as4_t_used_ID[s4_t_lp_used_id]==0) 
[161] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[162] SUBSUBSUBSUBSUBPROCESS(1) equal Tx_int[s4_t_lp_target_num][11] s4_t_lp_used_id+1;
[163] SUBSUBSUBSUBSUBPROCESS(1) equal as4_t_used_ID[s4_t_lp_used_id] 1;
[164] SUBSUBSUBSUBSUBPROCESS(1) proc break; 
----------------- Total Codes : 164 lines
--------------------------
[Function Name] : u1_check_long_truck 
-Return type : U1 
-Argument : 1 
     [0] : (U1   u1_a_alarming_flg 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS equal u1_t_jdg_truck_flg st_g_bsm_loop_data.u1_truck_flg;
[3] MAINPROCESS ??? if (st_g_bsm_loop_data.as4_low_speed_flg[0] == (U1)0) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) ??? if (st_g_bsm_loop_data.u1_truck_flg != (U1)0) 
[6] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[7] SUBPROCESS(1) ??? else if ((st_g_bsm_loop_data.as4_slow_sot_find[0] != (S4)0) 
[8] SUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_slow_sot_find[1] < WALL_REJECT_TH3) 
[9] SUBPROCESS(1) ??? &&  (u1_a_alarming_flg == (U1)1)) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[12] MAINPROCESS subproc SUBPROCESS(2) 
[13] SUBPROCESS(2) equal u1_t_jdg_truck_flg (U1)0;
[14] MAINPROCESS proc return u1_t_jdg_truck_flg; 
[15] MAINPROCESS equal u1_t_jdg_truck_flg (U1)0;
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : u1_jdg_truck_on_to_off 
-Return type : U1 
-Argument : 1 
     [0] : (U1   u1_a_alarming_flg 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS proc U2 u2_t_lp_fft_data; 
[3] MAINPROCESS proc U1 u1_t_count_up; 
[4] MAINPROCESS proc U4 u4_t_count_up2; 
[5] MAINPROCESS equal u4_t_count_up2 (U4)0;
[6] MAINPROCESS equal u1_t_jdg_truck_flg (U1)1;
[7] MAINPROCESS equal u1_t_count_up (U1)0;
[8] MAINPROCESS equal for (u2_t_lp_fft_data CU2_TRUCK_BIN_START_OFF;
[9] MAINPROCESS proc u2_t_lp_fft_data < CU2_TRUCK_BIN_END_OFF; 
[10] MAINPROCESS ??? u2_t_lp_fft_data++) 
[11] MAINPROCESS subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) ??? if (afl_g_cvw_lfm_ftt_power[0][u2_t_lp_fft_data] < CFL_TRUCK_POW_TH_OFF) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] MAINPROCESS equal for (u2_t_lp_fft_data (U2)TRUCK_BIN_START;
[15] MAINPROCESS proc u2_t_lp_fft_data < CU2_TRUCK_BIN_START_OFF; 
[16] MAINPROCESS ??? u2_t_lp_fft_data++) 
[17] MAINPROCESS subproc SUBPROCESS(2) 
[18] SUBPROCESS(2) ??? if (afl_g_cvw_lfm_ftt_power[1][u2_t_lp_fft_data] < (FL)55.0F) 
[19] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[20] MAINPROCESS ??? if ((u1_t_count_up > CU2_TRUCK_CNT_TH_OFF) 
[21] MAINPROCESS ??? ||  (u4_t_count_up2 > (U4)8)) 
[22] MAINPROCESS subproc SUBPROCESS(3) 
[23] SUBPROCESS(3) equal u1_t_jdg_truck_flg (U1)0;
[24] MAINPROCESS ??? &&  (u1_a_alarming_flg == (S4)0)) 
[25] MAINPROCESS subproc SUBPROCESS(4) 
[26] SUBPROCESS(4) ??? if( u1_jdg_truck_off_to_on()==(U1)0 ) 
[27] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[28] MAINPROCESS subproc SUBPROCESS(5) 
[29] MAINPROCESS proc return u1_t_jdg_truck_flg; 
----------------- Total Codes : 29 lines
--------------------------
[Function Name] : u1_jdg_truck_off_to_on 
-Return type : U1 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS proc U2 u2_t_lp_fft_data; 
[3] MAINPROCESS proc U1 u1_t_count_up; 
[4] MAINPROCESS proc U1 u1_t_count_dn; 
[5] MAINPROCESS equal u1_t_jdg_truck_flg (U1)0;
[6] MAINPROCESS equal u1_t_count_up (U1)0;
[7] MAINPROCESS equal u1_t_count_dn (U1)0;
[8] MAINPROCESS equal for (u2_t_lp_fft_data TRUCK_BIN_START;
[9] MAINPROCESS proc u2_t_lp_fft_data < TRUCK_BIN_END; 
[10] MAINPROCESS ??? u2_t_lp_fft_data++) 
[11] MAINPROCESS subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) ??? if (afl_g_cvw_lfm_ftt_power[0][u2_t_lp_fft_data] > TRUCK_POW_TH) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBPROCESS(1) ??? if (afl_g_cvw_lfm_ftt_power[1][u2_t_lp_fft_data] > TRUCK_POW_TH) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[16] MAINPROCESS equal u1_t_jdg_truck_flg (U1)0;
[17] MAINPROCESS proc return u1_t_jdg_truck_flg; 
[18] SUBSUBPROCESS(1) proc u1_t_count_up++; 
[19] SUBSUBPROCESS(2) proc u1_t_count_dn++; 
----------------- Total Codes : 19 lines
--------------------------
[Function Name] : fn_bsm_con_check_passing_pre 
-Return type : static VD 
-Argument : 1 
     [0] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for(i 0;
[3] MAINPROCESS proc i<st_g_bsm_loop_data.as4_buf_pair_num[1]; 
[4] MAINPROCESS ??? i++) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if (((ast_a_target_prev[i].s4_flg_heiso_up == 1) 
[7] SUBPROCESS(1) ??? &&   (ast_a_target_prev[i].s4_flg_heiso_dn == 1)) 
[8] SUBPROCESS(1) ??? ||  ((ast_a_target_prev[i].fl_Rxfil < (ALARM_X_OUT          + ALARM_X_OFFSET_OUT)) 
[9] SUBPROCESS(1) ??? &&   (ast_a_target_prev[i].fl_Rxfil > (ALARM_X_IN           + ALARM_X_OFFSET_IN)) 
[10] SUBPROCESS(1) ??? &&   (ast_a_target_prev[i].fl_Ryfil < (ALARM_Y_FORWARD)) 
[11] SUBPROCESS(1) ??? &&   (ast_a_target_prev[i].fl_Ryfil > (CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET))) 
[12] SUBPROCESS(1) ??? ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] MAINPROCESS ??? if ((fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN) 
[15] MAINPROCESS ??? &&  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0)) 
[16] MAINPROCESS subproc SUBPROCESS(2) 
[17] SUBPROCESS(2) equal st_g_bsm_loop_data.as4_flg_passing[0] 0;
[18] MAINPROCESS equal st_g_bsm_loop_data.as4_flg_passing[0] 0;
----------------- Total Codes : 18 lines
--------------------------
[Function Name] : fn_bsm_con_integ_object 
-Return type : static VD 
-Argument : 10 
     [0] : S4   s4_a_pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   s4_a_pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   s4_a_pair_num_sot 
     [7] : NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   *ps4_a_pair_num_total 
     [9] : NORMAL_BSM   ast_a_normal2[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS func fn_bsm_con_check_prior_ordinary(&s4_a_pair_num_prior, ast_a_normal_prior, &s4_a_pair_num_ordinary, ast_a_normal_ordinary); 
[2] MAINPROCESS ??? fn_bsm_con_copy_ordinay_to_sot( 
[3] MAINPROCESS ??? s4_a_pair_num_ordinary, 
[4] MAINPROCESS ??? (const NORMAL_BSM (*))ast_a_normal_ordinary, 
[5] MAINPROCESS ??? s4_a_pair_num_sot, 
[6] MAINPROCESS ??? ast_a_normal_sot 
[7] MAINPROCESS proc ); 
[8] MAINPROCESS ??? fn_bsm_con_add_object_to_normal2( 
[9] MAINPROCESS ??? s4_a_pair_num_prior, 
[10] MAINPROCESS ??? (const NORMAL_BSM (*))ast_a_normal_prior, 
[11] MAINPROCESS ??? s4_a_pair_num_ordinary, 
[12] MAINPROCESS ??? (const NORMAL_BSM (*))ast_a_normal_ordinary, 
[13] MAINPROCESS ??? s4_a_pair_num_2f, 
[14] MAINPROCESS ??? ast_a_normal_2f, 
[15] MAINPROCESS ??? s4_a_pair_num_sot, 
[16] MAINPROCESS ??? (const NORMAL_BSM (*))ast_a_normal_sot, 
[17] MAINPROCESS ??? ps4_a_pair_num_total, 
[18] MAINPROCESS ??? ast_a_normal2 
[19] MAINPROCESS proc ); 
----------------- Total Codes : 19 lines
--------------------------
[Function Name] : fn_bsm_con_check_prior_ordinary 
-Return type : static VD 
-Argument : 4 
     [0] : (S4   *ps4_a_pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   *ps4_a_pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 s4_t_lp_num_ordi; 
[2] MAINPROCESS proc S4 s4_t_lp_num_prior; 
[3] MAINPROCESS equal for (s4_t_lp_num_ordi (S4)0;
[4] MAINPROCESS proc s4_t_lp_num_ordi < *ps4_a_pair_num_ordinary; 
[5] MAINPROCESS ??? s4_t_lp_num_ordi++) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) ??? if (ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_Robs != CFL_UNKNOWN_VALUE) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] MAINPROCESS equal *ps4_a_pair_num_ordinary s4_trim_ordinary(ast_a_normal_ordinary);
[10] MAINPROCESS equal *ps4_a_pair_num_prior s4_trim_prior(ast_a_normal_prior);
[11] MAINPROCESS proc return; 
[12] SUBSUBPROCESS(1) equal for (s4_t_lp_num_prior (S4)0;
[13] SUBSUBPROCESS(1) proc s4_t_lp_num_prior < *ps4_a_pair_num_prior; 
[14] SUBSUBPROCESS(1) ??? s4_t_lp_num_prior++) 
[15] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[16] SUBSUBSUBPROCESS(1) ??? if (ast_a_normal_prior[s4_t_lp_num_prior].fl_Robs != CFL_UNKNOWN_VALUE) 
[17] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBSUBPROCESS(1) ??? if (((ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_up       == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_up) 
[19] SUBSUBSUBSUBPROCESS(1) ??? &&   (ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_up_music == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_up_music)) 
[20] SUBSUBSUBSUBPROCESS(1) ??? ||  ((ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_dn       == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_dn) 
[21] SUBSUBSUBSUBPROCESS(1) ??? &&   (ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_dn_music == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_dn_music))) 
[22] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBSUBSUBPROCESS(1) ??? if (fl_abs(ast_a_normal_prior[s4_t_lp_num_prior].fl_power_up_music - ast_a_normal_prior[s4_t_lp_num_prior].fl_power_dn_music) > 
[24] SUBSUBSUBSUBSUBPROCESS(1) ??? fl_abs(ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_power_up_music - ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_power_dn_music)) 
[25] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[26] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(2) 
[27] SUBSUBSUBSUBSUBSUBPROCESS(1) func fn_init(&ast_a_normal_prior[s4_t_lp_num_prior], (S4)1); 
[28] SUBSUBSUBSUBSUBSUBPROCESS(2) func fn_init(&ast_a_normal_ordinary[s4_t_lp_num_ordi], (S4)1); 
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : fn_bsm_con_copy_ordinay_to_sot 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_ordinary 
     [1] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_sot 
     [3] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS proc S4 tmp_sot_others_index; 
[2] MAINPROCESS ??? tmp_sot_others_index = s4_bsm_con_check_near_ordinary( 
[3] MAINPROCESS ??? s4_a_pair_num_ordinary, 
[4] MAINPROCESS ??? ast_a_normal_ordinary, 
[5] MAINPROCESS ??? s4_a_pair_num_sot, 
[6] MAINPROCESS ??? (const NORMAL_BSM (*))ast_a_normal_sot 
[7] MAINPROCESS proc ); 
[8] MAINPROCESS ??? if(tmp_sot_others_index!=-1) 
[9] MAINPROCESS subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) ??? fn_bsm_con_add_sot_object_to_normal2( 
[11] SUBPROCESS(1) ??? &ast_a_normal_ordinary[tmp_sot_others_index], 
[12] SUBPROCESS(1) ??? s4_a_pair_num_sot, 
[13] SUBPROCESS(1) ??? ast_a_normal_sot 
[14] SUBPROCESS(1) proc ); 
[15] MAINPROCESS proc return; 
[16] MAINPROCESS ??? fn_bsm_con_add_sot_object_to_normal2( 
[17] MAINPROCESS ??? &ast_a_normal_ordinary[tmp_sot_others_index], 
[18] MAINPROCESS ??? s4_a_pair_num_sot, 
[19] MAINPROCESS ??? ast_a_normal_sot 
[20] MAINPROCESS proc ); 
----------------- Total Codes : 20 lines
--------------------------
[Function Name] : s4_bsm_con_check_near_ordinary 
-Return type : static S4 
-Argument : 4 
     [0] : S4   s4_a_pair_num_ordinary 
     [1] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_sot 
     [3] : const NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal FL tmp_sot_others_diff_min fl_abs(CFL_UNKNOWN_VALUE*2);
[3] MAINPROCESS equal FL tmp_sot_truck_x_min fl_abs(CFL_UNKNOWN_VALUE);
[4] MAINPROCESS equal S4 tmp_sot_others_index -1;
[5] MAINPROCESS equal for(i 0;
[6] MAINPROCESS proc i<s4_a_pair_num_ordinary; 
[7] MAINPROCESS ??? i++) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) ??? if( s4_a_pair_num_sot != 0 ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_flg_passing[0] > 0) 
[12] SUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_slow_sot_find[0] != 0)) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[15] SUBPROCESS(1) ??? if ((fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN) 
[16] SUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0)) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(4) 
[18] MAINPROCESS proc return tmp_sot_others_index; 
[19] SUBSUBPROCESS(1) ??? if (((fl_abs(ast_a_normal_sot[0].fl_Rxfil - ast_a_normal_ordinary[i].fl_Rxobs)) < 2.5F) 
[20] SUBSUBPROCESS(1) ??? &&  ((fl_abs(ast_a_normal_sot[0].fl_Ryfil - ast_a_normal_ordinary[i].fl_Ryobs)) < 0.5F) 
[21] SUBSUBPROCESS(1) ??? &&  (ast_a_normal_sot[0].fl_Rxfil > ast_a_normal_ordinary[i].fl_Rxobs) 
[22] SUBSUBPROCESS(1) ??? &&  (tmp_sot_others_diff_min > (fl_abs(ast_a_normal_sot[0].fl_Rxfil - ast_a_normal_ordinary[i].fl_Rxobs) 
[23] SUBSUBPROCESS(1) ??? +  fl_abs(ast_a_normal_sot[0].fl_Ryfil - ast_a_normal_ordinary[i].fl_Ryobs)))) 
[24] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(2) ??? if ((fl_abs(ast_a_normal_ordinary[i].fl_Ryobs) < 0.5F) 
[26] SUBSUBPROCESS(2) ??? &&  (ast_a_normal_ordinary[i].fl_Rxobs < st_g_bsm_loop_data.afl_wall_width[0]) 
[27] SUBSUBPROCESS(2) ??? &&  (tmp_sot_truck_x_min > fl_abs(ast_a_normal_ordinary[i].fl_Rxobs))) 
[28] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(4) equal st_g_bsm_loop_data.as4_flg_leading[0] 0;
----------------- Total Codes : 29 lines
--------------------------
[Function Name] : fn_bsm_con_add_sot_object_to_normal2 
-Return type : static VD 
-Argument : 3 
     [0] : const NORMAL_BSM   *pst_a_normal_ordinary 
     [1] : S4   s4_a_pair_num_sot 
     [2] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS proc S4 tmptmp_passing_flg[1]; 
[2] MAINPROCESS proc S4 tmptmp_leading_flg[1]; 
[3] MAINPROCESS equal S4 tmptmp_erased_num 0;
[4] MAINPROCESS equal tmptmp_passing_flg[0] (S4)0;
[5] MAINPROCESS equal tmptmp_leading_flg[0] (S4)0;
[6] MAINPROCESS func copy_normal_data( pst_a_normal_ordinary, &ast_a_normal_sot[0], 1); 
[7] MAINPROCESS equal ast_a_normal_sot[0].s4_flg_heiso_up 1;
[8] MAINPROCESS equal ast_a_normal_sot[0].s4_flg_heiso_dn 1;
[9] MAINPROCESS equal ast_a_normal_sot[0].s4_flg_dc OBJECT_TYPE_SOT;
[10] MAINPROCESS ??? tmptmp_erased_num = s4_start_prediction( 
[11] MAINPROCESS ??? ast_a_normal_sot, 
[12] MAINPROCESS ??? 1, 
[13] MAINPROCESS ??? 1, 
[14] MAINPROCESS ??? (const S4 (*))tmptmp_passing_flg, 
[15] MAINPROCESS ??? (const S4 (*))tmptmp_leading_flg 
[16] MAINPROCESS proc ); 
[17] MAINPROCESS ??? if(tmptmp_erased_num==1) 
[18] MAINPROCESS subproc SUBPROCESS(1) 
[19] SUBPROCESS(1) func fn_init(&ast_a_normal_sot[0], 1); 
[20] MAINPROCESS ??? else 
[21] MAINPROCESS subproc SUBPROCESS(2) 
[22] SUBPROCESS(2) equal ast_a_normal_sot[0].s4_flg_new 1;
[23] SUBPROCESS(2) equal ast_a_normal_sot[0].s4_flg_track (S4)(PRIOR_TRK_NUM+1);
[24] MAINPROCESS ??? s4_copy_prediction_to_filtered_data( 
[25] MAINPROCESS ??? ast_a_normal_sot, 
[26] MAINPROCESS ??? 1 
[27] MAINPROCESS proc ); 
[28] MAINPROCESS proc return; 
[29] MAINPROCESS equal ast_a_normal_sot[0].s4_flg_new 1;
[30] MAINPROCESS equal ast_a_normal_sot[0].s4_flg_track (S4)(PRIOR_TRK_NUM+1);
----------------- Total Codes : 30 lines
--------------------------
[Function Name] : fn_bsm_con_add_object_to_normal2 
-Return type : static VD 
-Argument : 10 
     [0] : S4   s4_a_pair_num_prior 
     [1] : const NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_ordinary 
     [3] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   s4_a_pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   s4_a_pair_num_sot 
     [7] : const NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   *ps4_a_pair_num_total 
     [9] : NORMAL_BSM   ast_a_normal2[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 index 0;
[3] MAINPROCESS ??? if ((st_g_bsm_loop_data.as4_flg_leading[0] != 0) 
[4] MAINPROCESS ??? &&  (ast_a_normal_sot[0].s4_bin_up != 0) 
[5] MAINPROCESS ??? &&  (ast_a_normal_sot[0].s4_bin_dn != 0)) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal ast_a_normal2[index] ast_a_normal_sot[0];
[8] SUBPROCESS(1) proc index++; 
[9] MAINPROCESS equal for(i 0;
[10] MAINPROCESS proc i<s4_a_pair_num_prior; 
[11] MAINPROCESS ??? i++) 
[12] MAINPROCESS subproc SUBPROCESS(2) 
[13] SUBPROCESS(2) ??? if(index>(S4)(NORMAL_BUFFSIZE-1)) 
[14] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[15] SUBPROCESS(2) equal ast_a_normal2[index] ast_a_normal_prior[i];
[16] SUBPROCESS(2) proc index++; 
[17] MAINPROCESS equal for(i 0;
[18] MAINPROCESS proc i<s4_a_pair_num_ordinary; 
[19] MAINPROCESS ??? i++) 
[20] MAINPROCESS subproc SUBPROCESS(3) 
[21] SUBPROCESS(3) ??? if(index>(S4)(NORMAL_BUFFSIZE-1)) 
[22] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[23] SUBPROCESS(3) equal ast_a_normal2[index] ast_a_normal_ordinary[i];
[24] SUBPROCESS(3) proc index++; 
[25] MAINPROCESS equal for(i 0;
[26] MAINPROCESS proc i<s4_a_pair_num_2f; 
[27] MAINPROCESS ??? i++) 
[28] MAINPROCESS subproc SUBPROCESS(4) 
[29] SUBPROCESS(4) ??? if(index>(S4)(NORMAL_BUFFSIZE-1)) 
[30] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[31] SUBPROCESS(4) equal ast_a_normal2[index] ast_a_normal_2f[i];
[32] SUBPROCESS(4) proc index++; 
[33] MAINPROCESS equal *ps4_a_pair_num_total index;
[34] MAINPROCESS proc return; 
[35] SUBSUBPROCESS(1) proc break; 
----------------- Total Codes : 35 lines
--------------------------
[Function Name] : fn_bsm_con_tracking 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_pair_num_connected 
     [1] : const S4   *ps4_pair_connect_prev 
     [2] : const S4   *ps4_pair_connect_current 
     [3] : S4   s4_a_pair_num_normal1 
     [4] : NORMAL_BSM   *pst_a_normal1 
     [5] : S4   s4_a_pair_num_total 
     [6] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for( i 0;
[3] MAINPROCESS proc i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[4] MAINPROCESS ??? i++ ) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal pst_a_normal1[i].s4_flg_used 0;
[7] SUBPROCESS(1) equal pst_a_normal1[i].s4_tracked 0;
[8] MAINPROCESS equal for( i 0;
[9] MAINPROCESS proc i < s4_a_pair_num_total; 
[10] MAINPROCESS ??? i++ ) 
[11] MAINPROCESS subproc SUBPROCESS(2) 
[12] SUBPROCESS(2) equal pst_a_normal2[i].s4_flg_used 0;
[13] SUBPROCESS(2) equal pst_a_normal2[i].s4_tracked 0;
[14] MAINPROCESS ??? if ((s4_a_pair_num_connected > 0) 
[15] MAINPROCESS ??? &&  (st_g_bsm_loop_data.as4_buf_pair_num[0] > 0)) 
[16] MAINPROCESS subproc SUBPROCESS(3) 
[17] SUBPROCESS(3) ??? prediction_with_connected_data( 
[18] SUBPROCESS(3) ??? pst_a_normal1, 
[19] SUBPROCESS(3) ??? pst_a_normal2, 
[20] SUBPROCESS(3) ??? ps4_pair_connect_prev, 
[21] SUBPROCESS(3) ??? ps4_pair_connect_current, 
[22] SUBPROCESS(3) ??? s4_a_pair_num_connected 
[23] SUBPROCESS(3) proc ); 
[24] MAINPROCESS proc return; 
[25] MAINPROCESS ??? prediction_with_connected_data( 
[26] MAINPROCESS ??? pst_a_normal1, 
[27] MAINPROCESS ??? pst_a_normal2, 
[28] MAINPROCESS ??? ps4_pair_connect_prev, 
[29] MAINPROCESS ??? ps4_pair_connect_current, 
[30] MAINPROCESS ??? s4_a_pair_num_connected 
[31] MAINPROCESS proc ); 
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : fn_bsm_con_add_new_object 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num_total 
     [1] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 s4_t_pair_num_erased; 
[3] MAINPROCESS ??? s4_t_pair_num_erased = s4_start_prediction( 
[4] MAINPROCESS ??? pst_a_normal2, 
[5] MAINPROCESS ??? *ps4_a_pair_num_total, 
[6] MAINPROCESS ??? NORMAL_BUFFSIZE, 
[7] MAINPROCESS ??? (const S4 (*))st_g_bsm_loop_data.as4_flg_passing, 
[8] MAINPROCESS ??? (const S4 (*))st_g_bsm_loop_data.as4_flg_leading 
[9] MAINPROCESS proc ); 
[10] MAINPROCESS equal *ps4_a_pair_num_total *ps4_a_pair_num_total - s4_t_pair_num_erased;
[11] MAINPROCESS equal for(i 0;
[12] MAINPROCESS proc i<NORMAL_BUFFSIZE; 
[13] MAINPROCESS ??? i++) 
[14] MAINPROCESS subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) ??? if ((pst_a_normal2[i].s4_bin_up_pred > NB_FFT_PT) 
[16] SUBPROCESS(1) ??? ||  (pst_a_normal2[i].s4_bin_dn_pred > NB_FFT_PT)) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] MAINPROCESS ??? fn_bsm_con_pack_object( 
[19] MAINPROCESS ??? ps4_a_pair_num_total, 
[20] MAINPROCESS ??? pst_a_normal2 
[21] MAINPROCESS proc ); 
[22] MAINPROCESS proc return; 
[23] SUBSUBPROCESS(1) func fn_init(&pst_a_normal2[i], 1); 
[24] SUBSUBPROCESS(1) func (*ps4_a_pair_num_total)--; 
----------------- Total Codes : 24 lines
--------------------------
[Function Name] : fn_bsm_con_pack_object 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num_total 
     [1] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS proc S4 s2_t_in[NORMAL_BUFFSIZE]; 
[2] MAINPROCESS proc S4 s2_t_loop; 
[3] MAINPROCESS proc S4 s2_t_num; 
[4] MAINPROCESS equal s2_t_num 0;
[5] MAINPROCESS equal for (s2_t_loop 0;
[6] MAINPROCESS proc s2_t_loop < NORMAL_BUFFSIZE; 
[7] MAINPROCESS ??? s2_t_loop++) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) ??? if ( 
[10] SUBPROCESS(1) ??? pst_a_normal2[s2_t_loop].fl_Robs != CFL_UNKNOWN_VALUE 
[11] SUBPROCESS(1) ??? ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] MAINPROCESS ??? if (s2_t_num > 0) 
[14] MAINPROCESS subproc SUBPROCESS(2) 
[15] SUBPROCESS(2) equal for (s2_t_loop 0;
[16] SUBPROCESS(2) proc s2_t_loop < s2_t_num; 
[17] SUBPROCESS(2) ??? s2_t_loop++) 
[18] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[19] SUBPROCESS(2) equal for (s2_t_loop s2_t_num;
[20] SUBPROCESS(2) proc s2_t_loop < NORMAL_BUFFSIZE; 
[21] SUBPROCESS(2) ??? s2_t_loop++) 
[22] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[23] MAINPROCESS ??? *ps4_a_pair_num_total = s4_copy_prediction_to_filtered_data( 
[24] MAINPROCESS ??? pst_a_normal2, 
[25] MAINPROCESS ??? NORMAL_BUFFSIZE 
[26] MAINPROCESS proc ); 
[27] MAINPROCESS proc return; 
[28] SUBSUBPROCESS(1) equal pst_a_normal2[s2_t_loop] pst_a_normal2[s2_t_in[s2_t_loop]];
[29] SUBSUBPROCESS(2) func fn_init(&pst_a_normal2[s2_t_loop], 1); 
----------------- Total Codes : 29 lines
--------------------------
[Function Name] : fn_bsm_con_jdg_object_probability 
-Return type : VD 
-Argument : 1 
     [0] : (NORMAL_BSM*   past_a_normal2 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_lp_num_normal; 
[2] MAINPROCESS proc U1 u1_t_lp_num_normal2; 
[3] MAINPROCESS proc FL fl_t_power_bin; 
[4] MAINPROCESS proc FL fl_t_power_doa; 
[5] MAINPROCESS proc U1 u1_t_num_around; 
[6] MAINPROCESS proc U1 u1_t_jdg_m2_flg; 
[7] MAINPROCESS proc U1 u1_t_jdg_m8_flg; 
[8] MAINPROCESS equal for (u1_t_lp_num_normal (U1)0;
[9] MAINPROCESS proc u1_t_lp_num_normal < NORMAL_BUFFSIZE; 
[10] MAINPROCESS ??? u1_t_lp_num_normal ++) 
[11] MAINPROCESS subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) ??? if (past_a_normal2[u1_t_lp_num_normal].fl_Robs != CFL_UNKNOWN_VALUE) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] MAINPROCESS proc return; 
[15] SUBSUBPROCESS(1) equal u1_t_jdg_m2_flg u1_bsm_con_jdg_obj_probability_m2(past_a_normal2[u1_t_lp_num_normal].fl_Ryfil);
[16] SUBSUBPROCESS(1) ??? if ((u1_t_jdg_m2_flg == CU1_TRUE) 
[17] SUBSUBPROCESS(1) ??? &&  ((past_a_normal2[u1_t_lp_num_normal].fl_Ryfil + past_a_normal2[u1_t_lp_num_normal].fl_Vyfil) >= ((CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET) - (FL)3.0F)) 
[18] SUBSUBPROCESS(1) ??? &&	(past_a_normal2[u1_t_lp_num_normal].s4_flg_dc != OBJECT_TYPE_SOT)) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[21] SUBSUBSUBPROCESS(1) equal fl_t_power_bin (FL)0.5F * (past_a_normal2[u1_t_lp_num_normal].fl_power_up + past_a_normal2[u1_t_lp_num_normal].fl_power_dn);
[22] SUBSUBSUBPROCESS(1) equal fl_t_power_doa (FL)0.5F * (past_a_normal2[u1_t_lp_num_normal].fl_power_up_music + past_a_normal2[u1_t_lp_num_normal].fl_power_dn_music);
[23] SUBSUBSUBPROCESS(1) equal u1_t_jdg_m8_flg u1_bsm_con_jdg_obj_probability_m8(fl_t_power_doa);
[24] SUBSUBSUBPROCESS(1) ??? if ((fl_t_power_doa > (fl_t_power_bin - (FL)5.0F)) 
[25] SUBSUBSUBPROCESS(1) ??? ||	(u1_t_jdg_m8_flg == CU1_TRUE)) 
[26] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[27] SUBSUBSUBPROCESS(1) ??? if (past_a_normal2[u1_t_lp_num_normal].s4_flg_lost >= (S4)5) 
[28] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[29] SUBSUBSUBPROCESS(1) ??? if (past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable == (S4)0) 
[30] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(3) 
[31] SUBSUBSUBPROCESS(2) equal past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable (S4)1;
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : u1_bsm_con_jdg_obj_probability_m2 
-Return type : U1 
-Argument : 1 
     [0] : (FL   fl_a_Ryfil 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_m2_flag; 
[2] MAINPROCESS equal u1_t_jdg_m2_flag CU1_FALSE;
[3] MAINPROCESS ??? if (fl_abs(fl_a_Ryfil) > EKF_RY_SIDE) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal u1_t_jdg_m2_flag CU1_TRUE;
[6] MAINPROCESS subproc SUBPROCESS(2) 
[7] SUBPROCESS(2) equal u1_t_jdg_m2_flag CU1_FALSE;
[8] MAINPROCESS proc return u1_t_jdg_m2_flag; 
[9] MAINPROCESS equal u1_t_jdg_m2_flag CU1_FALSE;
----------------- Total Codes : 9 lines
--------------------------
[Function Name] : u1_bsm_con_jdg_obj_probability_m8 
-Return type : U1 
-Argument : 1 
     [0] : (FL   fl_a_power_doa 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_m8_flag; 
[2] MAINPROCESS equal u1_t_jdg_m8_flag CU1_FALSE;
[3] MAINPROCESS ??? if (fl_a_power_doa > (FL)50.0F) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal u1_t_jdg_m8_flag CU1_TRUE;
[6] MAINPROCESS subproc SUBPROCESS(2) 
[7] SUBPROCESS(2) equal u1_t_jdg_m8_flag CU1_FALSE;
[8] MAINPROCESS proc return u1_t_jdg_m8_flag; 
[9] MAINPROCESS equal u1_t_jdg_m8_flag CU1_FALSE;
----------------- Total Codes : 9 lines
--------------------------
[Function Name] : select_target 
-Return type : S4 
-Argument : 7 
     [0] : S4   target_num_prev 
     [1] : const NORMAL_BSM*   target_prev 
     [2] : S4*   target_num 
     [3] : NORMAL_BSM*   target_current 
     [4] : const S4*   normal_num 
     [5] : const NORMAL_BSM*   normal_current 
     [6] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc NORMAL_BSM copy_target_prev[TARGET_BUFFSIZE]; 
[3] MAINPROCESS proc NORMAL_BSM copy_normal_current[NORMAL_BUFFSIZE]; 
[4] MAINPROCESS proc NORMAL_BSM tmp_normal_buff[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS proc S4 tmp_normal_num[1]; 
[6] MAINPROCESS proc S4 tmp_target_num[1]; 
[7] MAINPROCESS proc S4 object_num; 
[8] MAINPROCESS proc S4 used_ID[TARGET_BUFFSIZE]; 
[9] MAINPROCESS equal S4 tmptmp_target_num 0;
[10] MAINPROCESS equal S4 wall_bin 270;
[11] MAINPROCESS func copy_normal_data(target_prev, copy_target_prev, TARGET_BUFFSIZE); 
[12] MAINPROCESS func copy_normal_data(normal_current, copy_normal_current, NORMAL_BUFFSIZE); 
[13] MAINPROCESS func fn_init(tmp_normal_buff, NORMAL_BUFFSIZE); 
[14] MAINPROCESS equal for(i 0;
[15] MAINPROCESS proc i<TARGET_BUFFSIZE; 
[16] MAINPROCESS ??? i++) 
[17] MAINPROCESS subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) equal copy_target_prev[i].s4_flg_used 0;
[19] SUBPROCESS(1) equal used_ID[i] 0;
[20] MAINPROCESS equal tmp_normal_num[0] *normal_num;
[21] MAINPROCESS equal tmp_target_num[0] 0;
[22] MAINPROCESS ??? fn_bsm_sel_exclude_object( 
[23] MAINPROCESS ??? tmp_normal_num[0], 
[24] MAINPROCESS ??? copy_normal_current, 
[25] MAINPROCESS ??? target_num_prev, 
[26] MAINPROCESS ??? (const NORMAL_BSM (*))copy_target_prev 
[27] MAINPROCESS proc ); 
[28] MAINPROCESS ??? object_num = s4_bsm_sel_empty_buf_trimming( 
[29] MAINPROCESS ??? copy_normal_current 
[30] MAINPROCESS proc ); 
[31] MAINPROCESS func fn_sort_normal(copy_normal_current); 
[32] MAINPROCESS func fn_sort_target(copy_target_prev); 
[33] MAINPROCESS equal tmp_target_num[0] 0;
[34] MAINPROCESS equal wall_bin (S4)(st_g_bsm_loop_data.afl_wall_width[0]/RCOF*0.5F)+NB_FFT_PT/2 - 1;
[35] MAINPROCESS ??? fn_bsm_sel_connect_target( 
[36] MAINPROCESS ??? object_num, 
[37] MAINPROCESS ??? copy_normal_current, 
[38] MAINPROCESS ??? target_num_prev, 
[39] MAINPROCESS ??? copy_target_prev, 
[40] MAINPROCESS ??? used_ID, 
[41] MAINPROCESS ??? &tmp_target_num[0], 
[42] MAINPROCESS ??? target_current 
[43] MAINPROCESS proc ); 
[44] MAINPROCESS equal tmptmp_target_num 0;
[45] MAINPROCESS ??? tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[46] MAINPROCESS ??? target_current, 
[47] MAINPROCESS ??? TARGET_BUFFSIZE 
[48] MAINPROCESS proc ); 
[49] MAINPROCESS equal tmp_target_num[0] tmptmp_target_num;
[50] MAINPROCESS ??? fn_bsm_sel_extrapolate_target( 
[51] MAINPROCESS ??? target_num_prev, 
[52] MAINPROCESS ??? copy_target_prev, 
[53] MAINPROCESS ??? &tmp_target_num[0], 
[54] MAINPROCESS ??? target_current, 
[55] MAINPROCESS ??? used_ID 
[56] MAINPROCESS proc ); 
[57] MAINPROCESS ??? tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[58] MAINPROCESS ??? target_current, 
[59] MAINPROCESS ??? TARGET_BUFFSIZE 
[60] MAINPROCESS proc ); 
[61] MAINPROCESS equal tmp_target_num[0] tmptmp_target_num;
[62] MAINPROCESS ??? fn_bsm_sel_add_target( 
[63] MAINPROCESS ??? object_num, 
[64] MAINPROCESS ??? copy_normal_current, 
[65] MAINPROCESS ??? &tmp_target_num[0], 
[66] MAINPROCESS ??? target_current, 
[67] MAINPROCESS ??? used_ID 
[68] MAINPROCESS proc ); 
[69] MAINPROCESS ??? tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[70] MAINPROCESS ??? target_current, 
[71] MAINPROCESS ??? TARGET_BUFFSIZE 
[72] MAINPROCESS proc ); 
[73] MAINPROCESS equal tmp_target_num[0] tmptmp_target_num;
[74] MAINPROCESS ??? tmp_target_num[0] = cluster_target( 
[75] MAINPROCESS ??? tmp_target_num[0], 
[76] MAINPROCESS ??? target_current, 
[77] MAINPROCESS ??? used_ID 
[78] MAINPROCESS proc ); 
[79] MAINPROCESS ??? fn_bsm_sel_exclude_target( 
[80] MAINPROCESS ??? tmp_target_num[0], 
[81] MAINPROCESS ??? target_current 
[82] MAINPROCESS proc ); 
[83] MAINPROCESS ??? fn_bsm_sel_empty_buf_trgt_trimming( 
[84] MAINPROCESS ??? &tmp_target_num[0], 
[85] MAINPROCESS ??? target_current 
[86] MAINPROCESS proc ); 
[87] MAINPROCESS func fn_bsm_sel_target_marking(tmp_target_num[0], target_current, u1_a_alarming_flag); 
[88] MAINPROCESS equal *target_num tmp_target_num[0];
[89] MAINPROCESS equal object_num tmp_target_num[0];
[90] MAINPROCESS proc return object_num; 
[91] MAINPROCESS equal copy_target_prev[i].s4_flg_used 0;
[92] MAINPROCESS equal used_ID[i] 0;
----------------- Total Codes : 92 lines
--------------------------
[Function Name] : fn_bsm_sel_exclude_object 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS ??? fn_bsm_sel_reset_stop_flg( 
[2] MAINPROCESS ??? s4_a_pair_num_current, 
[3] MAINPROCESS ??? ast_a_normal_current, 
[4] MAINPROCESS ??? s4_a_target_num_prev, 
[5] MAINPROCESS ??? ast_a_target_prev 
[6] MAINPROCESS proc ); 
[7] MAINPROCESS ??? fn_bsm_sel_exobj_same_peaks( 
[8] MAINPROCESS ??? s4_a_pair_num_current, 
[9] MAINPROCESS ??? ast_a_normal_current 
[10] MAINPROCESS proc ); 
[11] MAINPROCESS ??? fn_bsm_sel_exobj_stationary( 
[12] MAINPROCESS ??? s4_a_pair_num_current, 
[13] MAINPROCESS ??? ast_a_normal_current 
[14] MAINPROCESS proc ); 
[15] MAINPROCESS ??? fn_bsm_sel_exobj_around_mycar( 
[16] MAINPROCESS ??? s4_a_pair_num_current, 
[17] MAINPROCESS ??? ast_a_normal_current 
[18] MAINPROCESS proc ); 
[19] MAINPROCESS ??? fn_bsm_sel_exobj_outside_load( 
[20] MAINPROCESS ??? s4_a_pair_num_current, 
[21] MAINPROCESS ??? ast_a_normal_current 
[22] MAINPROCESS proc ); 
[23] MAINPROCESS ??? fn_bsm_sel_exobj_outside_to_fr( 
[24] MAINPROCESS ??? s4_a_pair_num_current, 
[25] MAINPROCESS ??? ast_a_normal_current 
[26] MAINPROCESS proc ); 
[27] MAINPROCESS ??? fn_bsm_sel_exobj_like_wall( 
[28] MAINPROCESS ??? s4_a_pair_num_current, 
[29] MAINPROCESS ??? ast_a_normal_current 
[30] MAINPROCESS proc ); 
[31] MAINPROCESS ??? fn_bsm_sel_exobj_stag_just_beside( 
[32] MAINPROCESS ??? s4_a_pair_num_current, 
[33] MAINPROCESS ??? ast_a_normal_current, 
[34] MAINPROCESS ??? s4_a_target_num_prev, 
[35] MAINPROCESS ??? ast_a_target_prev 
[36] MAINPROCESS proc ); 
[37] MAINPROCESS ??? fn_bsm_sel_exobj_outside( 
[38] MAINPROCESS ??? s4_a_pair_num_current, 
[39] MAINPROCESS ??? ast_a_normal_current, 
[40] MAINPROCESS ??? s4_a_target_num_prev, 
[41] MAINPROCESS ??? ast_a_target_prev 
[42] MAINPROCESS proc ); 
[43] MAINPROCESS ??? fn_bsm_sel_exobj_non_sot_obj( 
[44] MAINPROCESS ??? s4_a_pair_num_current, 
[45] MAINPROCESS ??? ast_a_normal_current 
[46] MAINPROCESS proc ); 
[47] MAINPROCESS ??? fn_bsm_sel_exobj_bumper_reflection( 
[48] MAINPROCESS ??? s4_a_pair_num_current, 
[49] MAINPROCESS ??? ast_a_normal_current 
[50] MAINPROCESS proc ); 
[51] MAINPROCESS proc return; 
----------------- Total Codes : 51 lines
--------------------------
[Function Name] : fn_bsm_sel_reset_stop_flg 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 j; 
[3] MAINPROCESS equal for(i 0;
[4] MAINPROCESS proc i<s4_a_target_num_prev; 
[5] MAINPROCESS ??? i++) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal for(j 0;
[8] SUBPROCESS(1) proc j<s4_a_pair_num_current; 
[9] SUBPROCESS(1) ??? j++) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] MAINPROCESS proc return; 
[12] SUBSUBPROCESS(1) ??? if ((fl_abs(ast_a_target_prev[i].fl_Rxfil-ast_a_normal_current[j].fl_Rxfil) < RX_TH_TT) 
[13] SUBSUBPROCESS(1) ??? &&  (fl_abs(ast_a_target_prev[i].fl_Ryfil-ast_a_normal_current[j].fl_Ryfil) < RY_TH_TT)) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) equal ast_a_normal_current[j].s4_flg_stop 0;
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_same_peaks 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 j; 
[3] MAINPROCESS equal for( i 0;
[4] MAINPROCESS proc i<s4_a_pair_num_current; 
[5] MAINPROCESS ??? i++ ) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal for( j 0;
[8] SUBPROCESS(1) proc j<s4_a_pair_num_current; 
[9] SUBPROCESS(1) ??? j++ ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] MAINPROCESS proc return; 
[12] SUBSUBPROCESS(1) ??? if ((i!= j) 
[13] SUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[14] SUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[j].fl_Robs != CFL_UNKNOWN_VALUE) 
[15] SUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_bin_up == ast_a_normal_current[j].s4_bin_up) 
[16] SUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_bin_dn == ast_a_normal_current[j].s4_bin_dn) 
[17] SUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_bin_up_music == ast_a_normal_current[j].s4_bin_up_music) 
[18] SUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_bin_dn_music == ast_a_normal_current[j].s4_bin_dn_music)) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) ??? if ((ast_a_normal_current[i].s4_flg_dc != OBJECT_TYPE_PRIOR) 
[21] SUBSUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[j].s4_flg_dc == OBJECT_TYPE_PRIOR)) 
[22] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBPROCESS(1) ??? if ((ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_PRIOR) 
[24] SUBSUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[j].s4_flg_dc != OBJECT_TYPE_PRIOR)) 
[25] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[26] SUBSUBSUBSUBPROCESS(1) ??? if (ast_a_normal_current[j].s4_flg_track > ast_a_normal_current[i].s4_flg_track) 
[27] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBSUBPROCESS(1) func fn_init( &ast_a_normal_current[j], 1 ); 
[29] SUBSUBSUBSUBPROCESS(2) ??? if (ast_a_normal_current[i].s4_flg_track > ast_a_normal_current[j].s4_flg_track) 
[30] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[31] SUBSUBSUBSUBPROCESS(2) func fn_init( &ast_a_normal_current[i], 1 ); 
[32] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_normal_current[j].s4_flg_track ast_a_normal_current[i].s4_flg_track;
----------------- Total Codes : 32 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_stationary 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for( i 0;
[3] MAINPROCESS proc i<s4_a_pair_num_current; 
[4] MAINPROCESS ??? i++ ) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if( ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE ) 
[7] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[8] MAINPROCESS proc return; 
[9] SUBSUBPROCESS(1) ??? if(	ast_a_normal_current[i].s4_flg_stop ==1 ) 
[10] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[11] SUBSUBSUBPROCESS(1) func fn_init( &ast_a_normal_current[i], 1 ); 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_around_mycar 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for( i 0;
[3] MAINPROCESS proc i<s4_a_pair_num_current; 
[4] MAINPROCESS ??? i++ ) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[7] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM) 
[8] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[9] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] MAINPROCESS proc return; 
[12] SUBSUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Rxfil < RX_AROUND_TH_TT) 
[13] SUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].fl_Ryfil > RY_AROUND_TH_TT)) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) func fn_init( &ast_a_normal_current[i], 1 ); 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside_load 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 tmp_Rx_i; 
[3] MAINPROCESS proc FL tmp_tmp_Rx; 
[4] MAINPROCESS equal for( i 0;
[5] MAINPROCESS proc i < s4_a_pair_num_current; 
[6] MAINPROCESS ??? i++ ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[9] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM) 
[10] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[11] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_track > PRIOR_TRK_NUM)) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[16] MAINPROCESS proc return; 
[17] SUBSUBPROCESS(1) ??? if (ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBPROCESS(2) ??? if (ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT) 
[20] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
----------------- Total Codes : 20 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside_to_fr 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for( i 0;
[3] MAINPROCESS proc i < s4_a_pair_num_current; 
[4] MAINPROCESS ??? i++ ) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[7] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[8] MAINPROCESS proc return; 
[9] SUBSUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Vyfil >= 0.0F) 
[10] SUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].fl_Ryfil > CANOUT_Y_MAX_TOS)) 
[11] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[13] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(3) 
[14] SUBSUBSUBPROCESS(1) func fn_init( &ast_a_normal_current[i], 1 ); 
[15] SUBSUBSUBPROCESS(2) func fn_init( &ast_a_normal_current[i], 1 ); 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_like_wall 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for( i 0;
[3] MAINPROCESS proc i < s4_a_pair_num_current; 
[4] MAINPROCESS ??? i++ ) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[7] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM) 
[8] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[9] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] MAINPROCESS proc return; 
[12] SUBSUBPROCESS(1) ??? if (ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT) 
[13] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[14] SUBSUBSUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Rxfil >= (st_g_bsm_loop_data.afl_wall_width[0] - 0.3F)) 
[15] SUBSUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].fl_Ryfil < 0) 
[16] SUBSUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].fl_Vyfil <= 0)) 
[17] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBSUBPROCESS(1) func fn_init( &ast_a_normal_current[i], 1 ); 
----------------- Total Codes : 18 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_stag_just_beside 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 j; 
[3] MAINPROCESS equal for( i 0;
[4] MAINPROCESS proc i < s4_a_pair_num_current; 
[5] MAINPROCESS ??? i++ ) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[8] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[9] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] MAINPROCESS proc return; 
[12] SUBSUBPROCESS(1) ??? if ((fl_abs(ast_a_normal_current[i].fl_Ryobs) < 0.5F) 
[13] SUBSUBPROCESS(1) ??? &&  (fl_abs(ast_a_normal_current[i].fl_Rypred) < 1.0F) 
[14] SUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].fl_Rxfil > (st_g_bsm_loop_data.afl_wall_width[0] - 1.0F))) 
[15] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[16] SUBSUBSUBPROCESS(1) ??? if ((st_g_bsm_loop_data.as4_flg_leading[0] == 0) 
[17] SUBSUBSUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN)) 
[18] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[20] SUBSUBSUBSUBPROCESS(1) func fn_init( &ast_a_normal_current[i], 1 ); 
[21] SUBSUBSUBSUBPROCESS(2) equal for( j 0;
[22] SUBSUBSUBSUBPROCESS(2) proc j < TARGET_BUFFSIZE; 
[23] SUBSUBSUBSUBPROCESS(2) ??? j++ ) 
[24] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[25] SUBSUBSUBSUBSUBPROCESS(1) ??? if (ast_a_target_prev[j].fl_Robs != CFL_UNKNOWN_VALUE) 
[26] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[27] SUBSUBSUBSUBSUBSUBPROCESS(1) ??? if ((fl_abs(ast_a_target_prev[j].fl_Rxpred - ast_a_normal_current[i].fl_Rxfil) > TOS_SIDE_RX_DIFF) 
[28] SUBSUBSUBSUBSUBSUBPROCESS(1) ??? ||  (fl_abs(ast_a_target_prev[j].fl_Rypred - ast_a_normal_current[i].fl_Ryfil) > TOS_SIDE_RY_DIFF)) 
[29] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[30] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) func fn_init( &ast_a_normal_current[i], 1 ); 
[31] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) proc break; 
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 tmp_side_passing_flg; 
[3] MAINPROCESS equal tmp_side_passing_flg 0;
[4] MAINPROCESS ??? if (st_g_bsm_loop_data.as4_flg_passing[0] > PASSING_COUNT_MIN) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal for (i 0;
[7] SUBPROCESS(1) proc i < s4_a_target_num_prev; 
[8] SUBPROCESS(1) ??? i++) 
[9] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[10] MAINPROCESS equal for (i 0;
[11] MAINPROCESS proc i < s4_a_pair_num_current; 
[12] MAINPROCESS ??? i++) 
[13] MAINPROCESS subproc SUBPROCESS(2) 
[14] SUBPROCESS(2) ??? if (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[15] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[16] MAINPROCESS proc return; 
[17] SUBSUBPROCESS(1) ??? if ((st_g_bsm_loop_data.as4_slow_sot_find[0] == 0) 
[18] SUBSUBPROCESS(1) ??? &&  (tmp_side_passing_flg == 0) 
[19] SUBSUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_flg_leading[0] == 0) 
[20] SUBSUBPROCESS(1) ??? &&  (fl_abs(ast_a_normal_current[i].fl_Ryfil) < EKF_RY_SIDE)) 
[21] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBPROCESS(1) func fn_init( &ast_a_normal_current[i], 1 ); 
----------------- Total Codes : 22 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_non_sot_obj 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 tmp_Rx_i; 
[3] MAINPROCESS proc FL tmp_tmp_Rx; 
[4] MAINPROCESS equal for( i 0;
[5] MAINPROCESS proc i < s4_a_pair_num_current; 
[6] MAINPROCESS ??? i++ ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) ??? if (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[9] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[10] MAINPROCESS proc return; 
[11] SUBSUBPROCESS(1) equal tmp_Rx_i (S4)(-ast_a_normal_current[i].fl_Ryfil);
[12] SUBSUBPROCESS(1) ??? if(tmp_Rx_i < 0) 
[13] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) ??? if(tmp_Rx_i > 69) 
[15] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[16] SUBSUBPROCESS(1) equal tmp_tmp_Rx st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_i];
[17] SUBSUBPROCESS(1) ??? if (st_g_bsm_loop_data.as4_slow_sot_find[1] >= WALL_REJECT_TH3) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(3) 
[19] SUBSUBSUBPROCESS(1) equal tmp_Rx_i 0;
[20] SUBSUBSUBPROCESS(2) equal tmp_Rx_i 69;
[21] SUBSUBSUBPROCESS(3) ??? if ((ast_a_normal_current[i].fl_Rxobs >= (tmp_tmp_Rx - 1.5F)) 
[22] SUBSUBSUBPROCESS(3) ??? &&  (fl_abs(ast_a_normal_current[i].fl_Ryfil) > EKF_RY_SIDE)) 
[23] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBPROCESS(3) ??? &&  (ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT)) 
[25] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(2) 
[26] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(3) 
[27] SUBSUBSUBSUBPROCESS(1) func fn_init( &ast_a_normal_current[i], 1 ); 
[28] SUBSUBSUBSUBPROCESS(2) func fn_init( &ast_a_normal_current[i], 1 ); 
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_bumper_reflection 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 s4_t_lp_normal; 
[2] MAINPROCESS proc FL fl_t_thd_exobj_range; 
[3] MAINPROCESS proc FL fl_t_thd_exobj_power; 
[4] MAINPROCESS proc FL fl_t_obj_power; 
[5] MAINPROCESS proc FL fl_t_abs_robs; 
[6] MAINPROCESS proc FL fl_t_abs_vobs; 
[7] MAINPROCESS ??? const FL CFL_D_MAP_EXOBJ_POWER[CU2_MAP_EXOBJ_POWER_INDEX][2] = 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[10] SUBPROCESS(1) ??? , 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[12] SUBPROCESS(1) ??? , 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[14] SUBPROCESS(1) ??? , 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(4) 
[16] SUBPROCESS(1) ??? , 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(5) 
[18] SUBPROCESS(1) ??? , 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(6) 
[20] SUBPROCESS(1) ??? , 
[21] SUBPROCESS(1) subproc SUBSUBPROCESS(7) 
[22] SUBPROCESS(1) ??? , 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(8) 
[24] MAINPROCESS equal for (s4_t_lp_normal (S4)0;
[25] MAINPROCESS proc s4_t_lp_normal < s4_a_pair_num_current; 
[26] MAINPROCESS ??? s4_t_lp_normal++) 
[27] MAINPROCESS subproc SUBPROCESS(2) 
[28] SUBPROCESS(2) ??? if (ast_a_normal_current[s4_t_lp_normal].fl_Robs != CFL_UNKNOWN_VALUE) 
[29] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[30] MAINPROCESS proc return; 
[31] SUBSUBPROCESS(1) equal fl_t_obj_power (ast_a_normal_current[s4_t_lp_normal].fl_power_up_music + ast_a_normal_current[s4_t_lp_normal].fl_power_dn_music) * (FL)0.5;
[32] SUBSUBPROCESS(1) equal fl_t_abs_robs fl_abs(ast_a_normal_current[s4_t_lp_normal].fl_Robs);
[33] SUBSUBPROCESS(1) equal fl_t_abs_vobs fl_abs(ast_a_normal_current[s4_t_lp_normal].fl_Vobs);
[34] SUBSUBPROCESS(1) equal fl_t_thd_exobj_range (FL)9.0;
[35] SUBSUBPROCESS(1) equal fl_t_thd_exobj_power fl_smap_new(CFL_D_MAP_EXOBJ_POWER, CU2_MAP_EXOBJ_POWER_INDEX, fl_t_abs_robs);
[36] SUBSUBPROCESS(1) ??? if ((ast_a_normal_current[s4_t_lp_normal].s4_flg_dc != (S4)OBJECT_TYPE_2F) 
[37] SUBSUBPROCESS(1) ??? &&	(fl_t_abs_robs < fl_t_thd_exobj_range) 
[38] SUBSUBPROCESS(1) ??? &&	(ast_a_normal_current[s4_t_lp_normal].fl_Ryobs < (FL)-EKF_RY_SIDE) 
[39] SUBSUBPROCESS(1) ??? &&	(fl_t_abs_vobs < ((FL)5.0 * (FL)VCOF)) 
[40] SUBSUBPROCESS(1) ??? &&	(fl_t_obj_power < fl_t_thd_exobj_power)) 
[41] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[42] SUBSUBSUBPROCESS(1) func fn_init(&ast_a_normal_current[s4_t_lp_normal], (S4)1); 
----------------- Total Codes : 42 lines
--------------------------
[Function Name] : s4_bsm_sel_empty_buf_trimming 
-Return type : static S4 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 s2_t_in[NORMAL_BUFFSIZE]; 
[2] MAINPROCESS proc S4 s2_t_loop; 
[3] MAINPROCESS proc S4 s2_t_num; 
[4] MAINPROCESS proc S4 s4_t_object_num; 
[5] MAINPROCESS equal s4_t_object_num 0;
[6] MAINPROCESS equal s2_t_num 0;
[7] MAINPROCESS equal for (s2_t_loop 0;
[8] MAINPROCESS proc s2_t_loop < NORMAL_BUFFSIZE; 
[9] MAINPROCESS ??? s2_t_loop++) 
[10] MAINPROCESS subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) ??? if (ast_a_normal_current[s2_t_loop].fl_Robs != CFL_UNKNOWN_VALUE) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] MAINPROCESS equal s4_t_object_num s2_t_num;
[14] MAINPROCESS ??? if (s2_t_num > 0) 
[15] MAINPROCESS subproc SUBPROCESS(2) 
[16] SUBPROCESS(2) equal for (s2_t_loop 0;
[17] SUBPROCESS(2) proc s2_t_loop < s2_t_num; 
[18] SUBPROCESS(2) ??? s2_t_loop++) 
[19] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[20] SUBPROCESS(2) equal for (s2_t_loop s2_t_num;
[21] SUBPROCESS(2) proc s2_t_loop < NORMAL_BUFFSIZE; 
[22] SUBPROCESS(2) ??? s2_t_loop++) 
[23] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[24] MAINPROCESS proc return s4_t_object_num; 
[25] SUBSUBPROCESS(1) equal ast_a_normal_current[s2_t_loop] ast_a_normal_current[s2_t_in[s2_t_loop]];
[26] SUBSUBPROCESS(2) func fn_init(&ast_a_normal_current[s2_t_loop], 1); 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_bsm_sel_connect_target 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [4] : S4   as4_t_used_ID[TARGET_BUFFSIZE] 
     [5] : S4   *ps4_a_target_num_current 
     [6] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 k; 
[3] MAINPROCESS proc S4 s4_t_sample_num; 
[4] MAINPROCESS proc S4 as4_t_sample_indexs[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS proc S4 as4_t_sample_indexs_prev[NORMAL_BUFFSIZE]; 
[6] MAINPROCESS proc S4 s4_t_select_index; 
[7] MAINPROCESS equal for( i 0;
[8] MAINPROCESS proc i < s4_a_target_num_prev; 
[9] MAINPROCESS ??? i++ ) 
[10] MAINPROCESS subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal s4_t_sample_num 0;
[12] SUBPROCESS(1) equal for( k 0;
[13] SUBPROCESS(1) proc k < NORMAL_BUFFSIZE; 
[14] SUBPROCESS(1) ??? k++ ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBPROCESS(1) ??? if ((ast_a_target_prev[i].fl_Vypred > 5.0F) 
[17] SUBPROCESS(1) ??? &&  (ast_a_target_prev[i].fl_Rypred > -1.5F)) 
[18] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[19] SUBPROCESS(1) ??? fn_bsm_sel_search_sample( 
[20] SUBPROCESS(1) ??? s4_a_pair_num_current, 
[21] SUBPROCESS(1) ??? (const NORMAL_BSM (*))ast_a_normal_current, 
[22] SUBPROCESS(1) ??? i, 
[23] SUBPROCESS(1) ??? (const NORMAL_BSM (*))ast_a_target_prev, 
[24] SUBPROCESS(1) ??? &s4_t_sample_num, 
[25] SUBPROCESS(1) ??? as4_t_sample_indexs, 
[26] SUBPROCESS(1) ??? as4_t_sample_indexs_prev 
[27] SUBPROCESS(1) proc ); 
[28] SUBPROCESS(1) ??? s4_t_select_index = s4_bsm_sel_select_sample( 
[29] SUBPROCESS(1) ??? s4_a_pair_num_current, 
[30] SUBPROCESS(1) ??? (const NORMAL_BSM (*))ast_a_normal_current, 
[31] SUBPROCESS(1) ??? s4_a_target_num_prev, 
[32] SUBPROCESS(1) ??? (const NORMAL_BSM (*))ast_a_target_prev, 
[33] SUBPROCESS(1) ??? s4_t_sample_num, 
[34] SUBPROCESS(1) ??? (const S4 (*))as4_t_sample_indexs, 
[35] SUBPROCESS(1) ??? (const S4 (*))as4_t_sample_indexs_prev 
[36] SUBPROCESS(1) proc ); 
[37] SUBPROCESS(1) ??? if( s4_t_select_index != -1 ) 
[38] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[39] MAINPROCESS proc return; 
[40] SUBSUBPROCESS(1) equal as4_t_sample_indexs[k] -1;
[41] SUBSUBPROCESS(1) equal as4_t_sample_indexs_prev[k] -1;
[42] SUBSUBPROCESS(2) equal ast_a_target_prev[i].s4_flg_single_peak_up 1;
[43] SUBSUBPROCESS(3) ??? fn_bsm_tracking_target( 
[44] SUBSUBPROCESS(3) ??? &ast_a_normal_current[s4_t_select_index], 
[45] SUBSUBPROCESS(3) ??? &ast_a_target_prev[i], 
[46] SUBSUBPROCESS(3) ??? as4_t_used_ID, 
[47] SUBSUBPROCESS(3) ??? &ast_a_target_current[*ps4_a_target_num_current] 
[48] SUBSUBPROCESS(3) proc ); 
[49] SUBSUBPROCESS(3) func (*ps4_a_target_num_current)++; 
----------------- Total Codes : 49 lines
--------------------------
[Function Name] : fn_bsm_sel_search_sample 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_pair_num_current 
     [1] : const NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_prev_index 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [4] : S4   *ps4_a_sample_num 
     [5] : S4   as4_a_sample_indexs[NORMAL_BUFFSIZE] 
     [6] : S4   as4_a_sample_indexs_prev[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 s4_t_wall_bin 270;
[3] MAINPROCESS proc S4 s4_t_connect; 
[4] MAINPROCESS proc FL fl_t_rx_th; 
[5] MAINPROCESS proc FL fl_t_ry_th; 
[6] MAINPROCESS proc FL fl_t_vx_th; 
[7] MAINPROCESS proc FL fl_t_vy_th; 
[8] MAINPROCESS equal s4_t_wall_bin (S4)(st_g_bsm_loop_data.afl_wall_width[0]/RCOF*0.5F)+NB_FFT_PT/2 - 1;
[9] MAINPROCESS equal for( i 0;
[10] MAINPROCESS proc i < s4_a_pair_num_current; 
[11] MAINPROCESS ??? i++ ) 
[12] MAINPROCESS subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[14] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_used == 0) 
[15] SUBPROCESS(1) ??? &&  ((ast_a_normal_current[i].s4_flg_lost <= 1) 
[16] SUBPROCESS(1) ??? ||   (fl_abs( (FL)(ast_a_normal_current[i].s4_bin_up - s4_t_wall_bin) ) < TARGET_LOST_WALL_BIN_DIFF) 
[17] SUBPROCESS(1) ??? ||   (fl_abs( (FL)(ast_a_normal_current[i].s4_bin_dn - s4_t_wall_bin) ) < TARGET_LOST_WALL_BIN_DIFF)) 
[18] SUBPROCESS(1) ??? &&  (ast_a_target_prev[s4_a_target_prev_index].fl_Robs != CFL_UNKNOWN_VALUE) 
[19] SUBPROCESS(1) ??? &&  (ast_a_target_prev[s4_a_target_prev_index].s4_flg_used == 0)) 
[20] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[21] MAINPROCESS proc return; 
[22] SUBSUBPROCESS(1) equal s4_t_connect 0;
[23] SUBSUBPROCESS(1) ??? fn_bsm_sel_set_search_area( 
[24] SUBSUBPROCESS(1) ??? &ast_a_normal_current[i], 
[25] SUBSUBPROCESS(1) ??? &ast_a_target_prev[s4_a_target_prev_index], 
[26] SUBSUBPROCESS(1) ??? &fl_t_rx_th, 
[27] SUBSUBPROCESS(1) ??? &fl_t_ry_th, 
[28] SUBSUBPROCESS(1) ??? &fl_t_vx_th, 
[29] SUBSUBPROCESS(1) ??? &fl_t_vy_th 
[30] SUBSUBPROCESS(1) proc ); 
[31] SUBSUBPROCESS(1) ??? s4_t_connect = s4_bsm_sel_check_condition( 
[32] SUBSUBPROCESS(1) ??? &ast_a_normal_current[i], 
[33] SUBSUBPROCESS(1) ??? &ast_a_target_prev[s4_a_target_prev_index], 
[34] SUBSUBPROCESS(1) ??? fl_t_rx_th, 
[35] SUBSUBPROCESS(1) ??? fl_t_ry_th, 
[36] SUBSUBPROCESS(1) ??? fl_t_vx_th, 
[37] SUBSUBPROCESS(1) ??? fl_t_vy_th 
[38] SUBSUBPROCESS(1) proc ); 
[39] SUBSUBPROCESS(1) ??? if(s4_t_connect==1) 
[40] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[41] SUBSUBSUBPROCESS(1) equal as4_a_sample_indexs[*ps4_a_sample_num] i;
[42] SUBSUBSUBPROCESS(1) equal as4_a_sample_indexs_prev[*ps4_a_sample_num] s4_a_target_prev_index;
[43] SUBSUBSUBPROCESS(1) func (*ps4_a_sample_num)++; 
----------------- Total Codes : 43 lines
--------------------------
[Function Name] : fn_bsm_sel_set_search_area 
-Return type : static VD 
-Argument : 6 
     [0] : const NORMAL_BSM   ast_a_normal_current[1] 
     [1] : const NORMAL_BSM   ast_a_target_prev[1] 
     [2] : FL   *pfl_a_rx_th 
     [3] : FL   *pfl_a_ry_th 
     [4] : FL   *pfl_a_vx_th 
     [5] : FL   *pfl_a_vy_th 
----- Codes -----
[1] MAINPROCESS equal *pfl_a_rx_th RX_TH_TT;
[2] MAINPROCESS equal *pfl_a_ry_th RY_TH_TT;
[3] MAINPROCESS ??? if(ast_a_normal_current[0].fl_Ryfil < RY_WALL_LIMIT_TT) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal *pfl_a_rx_th RX_TH_TT + 1.0F;
[6] SUBPROCESS(1) equal *pfl_a_ry_th RY_TH_TT + 1.0F;
[7] MAINPROCESS equal *pfl_a_vx_th VX_TH_TT;
[8] MAINPROCESS equal *pfl_a_vy_th VY_TH_TT;
[9] MAINPROCESS ??? if (fl_abs(ast_a_target_prev[0].fl_Rypred) < RY_CONNECT_WO_VY) 
[10] MAINPROCESS subproc SUBPROCESS(2) 
[11] SUBPROCESS(2) equal *pfl_a_vx_th TH_TT_MAX;
[12] SUBPROCESS(2) equal *pfl_a_vy_th TH_TT_MAX;
[13] MAINPROCESS ??? if ((ast_a_target_prev[0].s4_flg_dc == OBJECT_TYPE_SOT) 
[14] MAINPROCESS ??? &&  (fl_abs(ast_a_target_prev[0].fl_Rypred) < EKF_RY_SIDE)) 
[15] MAINPROCESS subproc SUBPROCESS(3) 
[16] SUBPROCESS(3) equal *pfl_a_rx_th RX_TH_TT_SOT;
[17] SUBPROCESS(3) equal *pfl_a_ry_th RY_TH_TT_SOT;
[18] SUBPROCESS(3) equal *pfl_a_vy_th TH_TT_MAX;
[19] MAINPROCESS ??? if (s4_abs((S4)s2_g_curvr_for_base) < (S4)130) 
[20] MAINPROCESS subproc SUBPROCESS(4) 
[21] SUBPROCESS(4) equal *pfl_a_rx_th CFL_RX_TH_TT_CURVE;
[22] SUBPROCESS(4) equal *pfl_a_ry_th CFL_RY_TH_TT_CURVE;
[23] MAINPROCESS proc return; 
[24] MAINPROCESS equal *pfl_a_rx_th CFL_RX_TH_TT_CURVE;
[25] MAINPROCESS equal *pfl_a_ry_th CFL_RY_TH_TT_CURVE;
----------------- Total Codes : 25 lines
--------------------------
[Function Name] : s4_bsm_sel_check_condition 
-Return type : static S4 
-Argument : 6 
     [0] : const NORMAL_BSM   ast_a_normal_current[1] 
     [1] : const NORMAL_BSM   ast_a_target_prev[1] 
     [2] : FL   fl_a_rx_th 
     [3] : FL   fl_a_ry_th 
     [4] : FL   fl_a_vx_th 
     [5] : FL   fl_a_vy_th 
----- Codes -----
[1] MAINPROCESS proc S4 s4_t_connect; 
[2] MAINPROCESS equal s4_t_connect 0;
[3] MAINPROCESS ??? if ((fl_abs(ast_a_target_prev[0].fl_Rxpred - ast_a_normal_current[0].fl_Rxfil) < fl_a_rx_th) 
[4] MAINPROCESS ??? &&  (fl_abs(ast_a_target_prev[0].fl_Rypred - ast_a_normal_current[0].fl_Ryfil) < fl_a_ry_th)) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if ((ast_a_target_prev[0].s4_flg_dc != OBJECT_TYPE_2F) 
[7] SUBPROCESS(1) ??? &&  (ast_a_normal_current[0].s4_flg_dc != OBJECT_TYPE_2F)) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] SUBPROCESS(1) ??? else 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[11] MAINPROCESS proc return s4_t_connect; 
[12] SUBSUBPROCESS(1) ??? if ((fl_abs(ast_a_target_prev[0].fl_Vxpred - ast_a_normal_current[0].fl_Vxfil) < fl_a_vx_th) 
[13] SUBSUBPROCESS(1) ??? &&  (fl_abs(ast_a_target_prev[0].fl_Vypred - ast_a_normal_current[0].fl_Vyfil) < fl_a_vy_th)) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBPROCESS(2) equal s4_t_connect 1;
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : s4_bsm_sel_select_sample 
-Return type : static S4 
-Argument : 7 
     [0] : S4   s4_a_pair_num_current 
     [1] : const NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_prev_index 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [4] : S4   s4_a_sample_num 
     [5] : const S4   as4_a_sample_indexs[NORMAL_BUFFSIZE] 
     [6] : const S4   as4_a_sample_indexs_prev[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 k; 
[2] MAINPROCESS proc S4 s4_t_select_index; 
[3] MAINPROCESS proc FL fl_t_min; 
[4] MAINPROCESS proc FL fl_t_diff; 
[5] MAINPROCESS equal FL fl_t_diff_x TH_TT_MAX;
[6] MAINPROCESS equal FL fl_t_diff_y TH_TT_MAX;
[7] MAINPROCESS equal s4_t_select_index -1;
[8] MAINPROCESS ??? if(s4_a_sample_num!=0) 
[9] MAINPROCESS subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal fl_t_min RX_TH_TT + RY_TH_TT+3.1F;
[11] SUBPROCESS(1) equal for(k 0;
[12] SUBPROCESS(1) proc k<s4_a_sample_num; 
[13] SUBPROCESS(1) ??? k++) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] MAINPROCESS proc return s4_t_select_index; 
[16] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal fl_t_diff fl_t_diff_x + fl_t_diff_y;
[18] SUBSUBPROCESS(1) ??? if(fl_t_diff < fl_t_min) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[20] SUBSUBSUBPROCESS(1) equal fl_t_diff_x (FL) (fl_abs(ast_a_normal_current[as4_a_sample_indexs[k]].fl_Rxfil - ast_a_target_prev[as4_a_sample_indexs_prev[k]].fl_Rxpred) );
[21] SUBSUBSUBPROCESS(1) equal fl_t_diff_y (FL) (fl_abs(ast_a_normal_current[as4_a_sample_indexs[k]].fl_Ryfil - ast_a_target_prev[as4_a_sample_indexs_prev[k]].fl_Rypred) );
[22] SUBSUBSUBPROCESS(2) equal fl_t_min fl_t_diff;
[23] SUBSUBSUBPROCESS(2) equal s4_t_select_index as4_a_sample_indexs[k];
----------------- Total Codes : 23 lines
--------------------------
[Function Name] : fn_bsm_tracking_target 
-Return type : static VD 
-Argument : 4 
     [0] : NORMAL_BSM   ast_a_normal_current[1] 
     [1] : NORMAL_BSM   ast_a_target_prev[1] 
     [2] : S4   as4_a_used_ID[TARGET_BUFFSIZE] 
     [3] : NORMAL_BSM   ast_a_target_current[1] 
----- Codes -----
[1] MAINPROCESS equal ast_a_normal_current[0].s4_flg_used 1;
[2] MAINPROCESS equal ast_a_target_current[0] ast_a_normal_current[0];
[3] MAINPROCESS ??? if ((ast_a_target_current[0].s4_flg_dc == OBJECT_TYPE_2F) 
[4] MAINPROCESS ??? &&  (ast_a_target_prev[0].s4_flg_dc != OBJECT_TYPE_2F)) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vobs ast_a_target_prev[0].fl_Vobs_pred;
[7] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vxobs ast_a_target_prev[0].fl_Vxpred;
[8] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vyobs ast_a_target_prev[0].fl_Vypred;
[9] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vxfil ast_a_target_prev[0].fl_Vxpred;
[10] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vyfil ast_a_target_prev[0].fl_Vypred;
[11] MAINPROCESS ??? if ((ast_a_target_current[0].s4_flg_dc != OBJECT_TYPE_2F) 
[12] MAINPROCESS ??? &&  (ast_a_target_prev[0].s4_flg_dc == OBJECT_TYPE_2F)) 
[13] MAINPROCESS subproc SUBPROCESS(2) 
[14] SUBPROCESS(2) equal ast_a_target_prev[0].fl_Vxpred ast_a_target_current[0].fl_Vxfil;
[15] SUBPROCESS(2) equal ast_a_target_prev[0].fl_Vypred ast_a_target_current[0].fl_Vyfil;
[16] MAINPROCESS ??? if ((st_g_bsm_loop_data.u1_truck_flg != (U1)0) 
[17] MAINPROCESS ??? &&  (ast_a_target_current[0].fl_Ryfil > CFL_TRUCK_RY_MIN) 
[18] MAINPROCESS ??? &&  ((ast_a_target_current[0].fl_Rxfil - ast_a_target_prev[0].fl_Rxpred) > (FL)0.0F) 
[19] MAINPROCESS ??? &&  (ast_a_target_current[0].fl_Rxfil > CFL_TRUCK_RX_MIN) 
[20] MAINPROCESS ??? &&  (ast_a_target_current[0].fl_Rxfil < CFL_TRUCK_RX_MAX)) 
[21] MAINPROCESS subproc SUBPROCESS(3) 
[22] SUBPROCESS(3) equal ast_a_target_current[0].fl_Rxfil - CFL_TRUCK_WIDTH;
[23] SUBPROCESS(3) equal ast_a_target_current[0].fl_Vxfil (FL)0.0F;
[24] MAINPROCESS equal ast_a_target_prev[0].s4_flg_used 1;
[25] MAINPROCESS ??? fn_ab_track( 
[26] MAINPROCESS ??? &ast_a_target_prev[0], 
[27] MAINPROCESS ??? &ast_a_target_current[0], 
[28] MAINPROCESS ??? 1 
[29] MAINPROCESS proc ); 
[30] MAINPROCESS ??? calc_prediction_of_normaldata( 
[31] MAINPROCESS ??? &ast_a_target_current[0] 
[32] MAINPROCESS proc ); 
[33] MAINPROCESS ??? if (ast_a_target_current[0].s4_flg_track == CS4_S4MAX) 
[34] MAINPROCESS subproc SUBPROCESS(4) 
[35] MAINPROCESS subproc SUBPROCESS(5) 
[36] SUBPROCESS(5) equal ast_a_target_current[0].s4_flg_track ast_a_target_prev[0].s4_flg_track+(S4)1;
[37] MAINPROCESS equal ast_a_target_current[0].s4_flg_new 0;
[38] MAINPROCESS ??? if (((S2)s4_abs(s2_g_curvr_for_base) < (S2)2200) 
[39] MAINPROCESS ??? &&  (ast_a_normal_current[0].s4_flg_dc == OBJECT_TYPE_2F)) 
[40] MAINPROCESS subproc SUBPROCESS(6) 
[41] SUBPROCESS(6) equal ast_a_target_current[0].s4_flg_new ast_a_normal_current[0].s4_flg_new;
[42] MAINPROCESS equal ast_a_target_current[0].s4_flg_lost 0;
[43] MAINPROCESS ??? if (((S2)s4_abs(s2_g_curvr_for_base) < (S2)2200) 
[44] MAINPROCESS ??? &&  (ast_a_normal_current[0].s4_flg_dc == OBJECT_TYPE_2F)) 
[45] MAINPROCESS subproc SUBPROCESS(7) 
[46] SUBPROCESS(7) equal ast_a_target_current[0].s4_flg_lost ast_a_normal_current[0].s4_flg_lost;
[47] MAINPROCESS equal ast_a_target_current[0].s4_tracked (S4)1;
[48] MAINPROCESS equal ast_a_target_prev[0].s4_tracked (S4)1;
[49] MAINPROCESS equal ast_a_target_current[0].s4_flg_used 1;
[50] MAINPROCESS equal ast_a_target_current[0].s4_flg_single_peak_up ast_a_target_prev[0].s4_flg_single_peak_up;
[51] MAINPROCESS equal ast_a_target_current[0].u4_ctr_fa ast_a_target_prev[0].u4_ctr_fa;
[52] MAINPROCESS equal ast_a_target_current[0].s4_ctr_sot_cut ast_a_target_prev[0].s4_ctr_sot_cut;
[53] MAINPROCESS ??? if ((ast_a_normal_current[0].s4_flg_reliable == (S4)1) 
[54] MAINPROCESS ??? ||  (ast_a_target_prev[0].s4_flg_reliable == (S4)1)) 
[55] MAINPROCESS subproc SUBPROCESS(8) 
[56] SUBPROCESS(8) equal ast_a_target_current[0].s4_flg_reliable (S4)1;
[57] MAINPROCESS ??? if ((ast_a_normal_current[0].s4_flg_lost >= (S4)5) 
[58] MAINPROCESS ??? &&  (ast_a_normal_current[0].s4_flg_track < (S4)36)) 
[59] MAINPROCESS subproc SUBPROCESS(9) 
[60] SUBPROCESS(9) equal ast_a_target_current[0].s4_flg_reliable (S4)0;
[61] MAINPROCESS equal ast_a_target_current[0].s4_ctr_tos ast_a_target_prev[0].s4_ctr_tos;
[62] MAINPROCESS equal ast_a_target_current[0].s4_ID_num ast_a_target_prev[0].s4_ID_num;
[63] MAINPROCESS equal as4_a_used_ID[ast_a_target_prev[0].s4_ID_num-1] 1;
[64] MAINPROCESS proc return; 
[65] MAINPROCESS equal ast_a_target_current[0].s4_flg_reliable (S4)0;
----------------- Total Codes : 65 lines
--------------------------
[Function Name] : fn_bsm_sel_extrapolate_target 
-Return type : static VD 
-Argument : 5 
     [0] : S4   s4_a_target_num_prev 
     [1] : NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [2] : S4   *ps4_a_target_num_current 
     [3] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
     [4] : S4   as4_t_used_ID[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 tmp_connect_num TARGET_CONNECT_NUM;
[3] MAINPROCESS equal S4 tmp_lost_max TARGET_LOST_MAX;
[4] MAINPROCESS proc S4 s4_t_wall_bin; 
[5] MAINPROCESS equal FL fl_t_tmp_alarm_x_min ALARM_X_IN       + ALARM_X_OFFSET_IN;
[6] MAINPROCESS equal FL fl_t_tmp_alarm_x_max ALARM_X_OUT      + ALARM_X_OFFSET_OUT;
[7] MAINPROCESS equal FL fl_t_tmp_alarm_y_min CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET;
[8] MAINPROCESS equal FL fl_t_tmp_alarm_y_max ALARM_Y_FORWARD;
[9] MAINPROCESS equal s4_t_wall_bin (S4)(st_g_bsm_loop_data.afl_wall_width[0]/RCOF*0.5F)+NB_FFT_PT/2 - 1;
[10] MAINPROCESS equal for(i 0;
[11] MAINPROCESS proc i<s4_a_target_num_prev; 
[12] MAINPROCESS ??? i++ ) 
[13] MAINPROCESS subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal tmp_connect_num TARGET_CONNECT_NUM;
[15] SUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX;
[16] SUBPROCESS(1) ??? if ((st_g_bsm_loop_data.as4_flg_leading[0] != 0) 
[17] SUBPROCESS(1) ??? ||  (st_g_bsm_loop_data.as4_flg_passing[0] > PASSING_COUNT_MIN)) 
[18] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[19] SUBPROCESS(1) ??? if ((ast_a_target_prev[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[20] SUBPROCESS(1) ??? &&  (ast_a_target_prev[i].s4_flg_used == 0) 
[21] SUBPROCESS(1) ??? &&  (ast_a_target_prev[i].s4_flg_track > tmp_connect_num) 
[22] SUBPROCESS(1) ??? &&  (ast_a_target_prev[i].s4_flg_lost < tmp_lost_max) 
[23] SUBPROCESS(1) ??? &&  (*ps4_a_target_num_current < TARGET_BUFFSIZE)) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[25] MAINPROCESS proc return; 
[26] SUBSUBPROCESS(1) ??? if ((ast_a_target_prev[i].fl_Rxpred > fl_t_tmp_alarm_x_min) 
[27] SUBSUBPROCESS(1) ??? &&  (ast_a_target_prev[i].fl_Rxpred < fl_t_tmp_alarm_x_max) 
[28] SUBSUBPROCESS(1) ??? &&  (ast_a_target_prev[i].fl_Rypred > fl_t_tmp_alarm_y_min) 
[29] SUBSUBPROCESS(1) ??? &&  (ast_a_target_prev[i].fl_Rypred < fl_t_tmp_alarm_y_max)) 
[30] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[32] SUBSUBPROCESS(2) ??? predict_target( 
[33] SUBSUBPROCESS(2) ??? (const NORMAL_BSM (*))&ast_a_target_prev[i], 
[34] SUBSUBPROCESS(2) ??? &ast_a_target_current[*ps4_a_target_num_current] 
[35] SUBSUBPROCESS(2) proc ); 
[36] SUBSUBPROCESS(2) ??? if (((fl_abs((FL)(ast_a_target_current[*ps4_a_target_num_current].s4_bin_up - s4_t_wall_bin)) < TARGET_LOST_WALL_BIN_DIFF) 
[37] SUBSUBPROCESS(2) ??? ||   (fl_abs((FL)(ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn - s4_t_wall_bin)) < TARGET_LOST_WALL_BIN_DIFF)) 
[38] SUBSUBPROCESS(2) ??? &&  (fl_abs((FL)(ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_music) 
[39] SUBSUBPROCESS(2) ??? - (180.0F - st_g_bsm_loop_data.afl_installed_angle[0])) > TARGET_LOST_WALL_DOA_DIFF) 
[40] SUBSUBPROCESS(2) ??? &&  (fl_abs((FL)(ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_music) 
[41] SUBSUBPROCESS(2) ??? - (180.0F - st_g_bsm_loop_data.afl_installed_angle[0])) > TARGET_LOST_WALL_DOA_DIFF) 
[42] SUBSUBPROCESS(2) ??? &&  (ast_a_target_current[*ps4_a_target_num_current].fl_power_up > WALL_OBJECT_POW_TH) 
[43] SUBSUBPROCESS(2) ??? &&  (ast_a_target_current[*ps4_a_target_num_current].fl_power_dn > WALL_OBJECT_POW_TH) 
[44] SUBSUBPROCESS(2) ??? &&  (!((ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_up) 
[45] SUBSUBPROCESS(2) ??? &&     (ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn) 
[46] SUBSUBPROCESS(2) ??? &&     (ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_music_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_music) 
[47] SUBSUBPROCESS(2) ??? &&     (ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_music_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_music))) 
[48] SUBSUBPROCESS(2) ??? &&  ((afl_g_cvw_lfm_ftt_power[0][ast_a_target_current[*ps4_a_target_num_current].s4_bin_up] 
[49] SUBSUBPROCESS(2) ??? - ast_a_target_current[*ps4_a_target_num_current].fl_power_up_music) > 0.0F) 
[50] SUBSUBPROCESS(2) ??? &&  ((afl_g_cvw_lfm_ftt_power[1][ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn] 
[51] SUBSUBPROCESS(2) ??? - ast_a_target_current[*ps4_a_target_num_current].fl_power_dn_music) > 0.0F)) 
[52] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[53] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(2) 
[54] SUBSUBPROCESS(2) equal as4_t_used_ID[ast_a_target_prev[i].s4_ID_num-1] 1;
[55] SUBSUBPROCESS(2) equal ast_a_target_prev[i].s4_flg_used 1;
[56] SUBSUBPROCESS(2) func (*ps4_a_target_num_current)++; 
[57] SUBSUBSUBPROCESS(2) proc ast_a_target_current[*ps4_a_target_num_current].s4_flg_lost++; 
----------------- Total Codes : 57 lines
--------------------------
[Function Name] : fn_bsm_sel_add_target 
-Return type : static VD 
-Argument : 5 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   *ps4_a_target_num_current 
     [3] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
     [4] : S4   as4_t_used_ID[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 j; 
[3] MAINPROCESS equal S4 tmp_connect_th CANOUT_TRK_MIN;
[4] MAINPROCESS proc FL tmp_r_max; 
[5] MAINPROCESS proc S4 index; 
[6] MAINPROCESS equal for( i 0;
[7] MAINPROCESS proc i < s4_a_pair_num_current; 
[8] MAINPROCESS ??? i++ ) 
[9] MAINPROCESS subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal tmp_connect_th CANOUT_TRK_MIN;
[11] SUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[12] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].fl_Vyfil < 0.0F) 
[13] SUBPROCESS(1) ??? &&  (fl_g_v_self_bsm_for_base < CANOUT_VSELF_SLOW)) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] SUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[16] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_2F) 
[17] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].fl_Ryfil > (CFL_ALARM_Y_BACKWARD + 3.0F))) 
[18] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[19] SUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[20] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_SOT) 
[21] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].fl_Rxfil < st_g_bsm_loop_data.afl_wall_width[0])) 
[22] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[23] SUBPROCESS(1) ??? if ((ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[24] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_used == 0) 
[25] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_stop == 0) 
[26] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_track > tmp_connect_th) 
[27] SUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_lost == 0) 
[28] SUBPROCESS(1) ??? &&  ((S4)fl_abs( (FL)s2_g_curvr_for_base ) > CANOUT_CURVER_MIN) 
[29] SUBPROCESS(1) ??? &&  (fl_abs(fl_g_v_self_bsm_for_base) > CFL_CANOUT_VSELF_MIN)) 
[30] SUBPROCESS(1) subproc SUBSUBPROCESS(4) 
[31] MAINPROCESS proc return; 
[32] SUBSUBPROCESS(1) equal tmp_connect_th CANOUT_TRK_MIN_SLOW;
[33] SUBSUBPROCESS(2) equal tmp_connect_th CANOUT_TRK_MIN_2FCW;
[34] SUBSUBPROCESS(3) equal tmp_connect_th CANOUT_TRK_MIN_SOT;
[35] SUBSUBPROCESS(4) ??? if ((*ps4_a_target_num_current) < TARGET_BUFFSIZE) 
[36] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[37] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(2) 
[38] SUBSUBSUBPROCESS(1) equal ast_a_target_current[(*ps4_a_target_num_current)] ast_a_normal_current[i];
[39] SUBSUBSUBPROCESS(1) equal ast_a_normal_current[i].s4_flg_used 1;
[40] SUBSUBSUBPROCESS(1) ??? predict_object_trajectory_simple( 
[41] SUBSUBSUBPROCESS(1) ??? &ast_a_target_current[(*ps4_a_target_num_current)], 
[42] SUBSUBSUBPROCESS(1) ??? 1 
[43] SUBSUBSUBPROCESS(1) proc ); 
[44] SUBSUBSUBPROCESS(1) ??? if ((ast_a_normal_current[i].s4_flg_heiso_up != 0) 
[45] SUBSUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_heiso_dn != 0)) 
[46] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[47] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[48] SUBSUBSUBPROCESS(1) equal ast_a_target_current[(*ps4_a_target_num_current)].s4_flg_lost 0;
[49] SUBSUBSUBPROCESS(1) ??? if (((S2)s4_abs(s2_g_curvr_for_base) < (S2)2200) 
[50] SUBSUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_2F)) 
[51] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(3) 
[52] SUBSUBSUBPROCESS(1) ??? if ((ast_a_normal_current[i].s4_flg_heiso_up != 0) 
[53] SUBSUBSUBPROCESS(1) ??? &&  (ast_a_normal_current[i].s4_flg_heiso_dn != 0)) 
[54] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(4) 
[55] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(5) 
[56] SUBSUBSUBPROCESS(1) equal ast_a_target_current[(*ps4_a_target_num_current)].s4_flg_used 1;
[57] SUBSUBSUBPROCESS(1) equal for (j 0;
[58] SUBSUBSUBPROCESS(1) proc j < TARGET_BUFFSIZE; 
[59] SUBSUBSUBPROCESS(1) ??? j++) 
[60] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(6) 
[61] SUBSUBSUBPROCESS(1) func (*ps4_a_target_num_current)++; 
[62] SUBSUBSUBPROCESS(2) equal tmp_r_max 0.0F;
[63] SUBSUBSUBPROCESS(2) equal index -1;
[64] SUBSUBSUBPROCESS(2) equal for (j 0;
[65] SUBSUBSUBPROCESS(2) func j < (*ps4_a_target_num_current); 
[66] SUBSUBSUBPROCESS(2) ??? j++) 
[67] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[68] SUBSUBSUBPROCESS(2) ??? if (index != -1) 
[69] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(2) 
[70] SUBSUBSUBSUBPROCESS(1) ??? if ((fl_abs(ast_a_normal_current[i].fl_Robs) < fl_abs(ast_a_target_current[j].fl_Robs)) 
[71] SUBSUBSUBSUBPROCESS(1) ??? &&  (tmp_r_max <  fl_abs(ast_a_target_current[j].fl_Robs))) 
[72] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[73] SUBSUBSUBSUBPROCESS(2) equal as4_t_used_ID[ast_a_target_current[index].s4_ID_num-1] 0;
[74] SUBSUBSUBSUBPROCESS(2) func fn_init(&ast_a_target_current[index], 1); 
[75] SUBSUBSUBSUBPROCESS(2) func s4_trim_target(ast_a_target_current); 
[76] SUBSUBSUBSUBPROCESS(2) func (*ps4_a_target_num_current)--; 
[77] SUBSUBSUBSUBPROCESS(2) proc i--; 
[78] SUBSUBSUBSUBPROCESS(2) ??? if (i < -1) 
[79] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[80] SUBSUBSUBSUBSUBPROCESS(1) equal i -1;
----------------- Total Codes : 80 lines
--------------------------
[Function Name] : fn_bsm_sel_exclude_target 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS ??? fn_bsm_sel_extrgt_lot_exp( 
[2] MAINPROCESS ??? s4_a_target_num_current, 
[3] MAINPROCESS ??? ast_a_target_current 
[4] MAINPROCESS proc ); 
[5] MAINPROCESS ??? fn_bsm_sel_extrgt_stationary( 
[6] MAINPROCESS ??? s4_a_target_num_current, 
[7] MAINPROCESS ??? ast_a_target_current 
[8] MAINPROCESS proc ); 
[9] MAINPROCESS ??? fn_bsm_sel_extrgt_no_rel_spd( 
[10] MAINPROCESS ??? s4_a_target_num_current, 
[11] MAINPROCESS ??? ast_a_target_current 
[12] MAINPROCESS proc ); 
[13] MAINPROCESS ??? fn_bsm_sel_extrgt_stag_just_beside( 
[14] MAINPROCESS ??? s4_a_target_num_current, 
[15] MAINPROCESS ??? ast_a_target_current 
[16] MAINPROCESS proc ); 
[17] MAINPROCESS ??? fn_bsm_sel_extrgt_just_beside( 
[18] MAINPROCESS ??? s4_a_target_num_current, 
[19] MAINPROCESS ??? ast_a_target_current 
[20] MAINPROCESS proc ); 
[21] MAINPROCESS ??? fn_bsm_sel_extrgt_around_beside( 
[22] MAINPROCESS ??? s4_a_target_num_current, 
[23] MAINPROCESS ??? ast_a_target_current 
[24] MAINPROCESS proc ); 
[25] MAINPROCESS ??? fn_bsm_sel_extrgt_opst_sns_area( 
[26] MAINPROCESS ??? s4_a_target_num_current, 
[27] MAINPROCESS ??? ast_a_target_current 
[28] MAINPROCESS proc ); 
[29] MAINPROCESS ??? fn_bsm_sel_extrgt_around_mycar( 
[30] MAINPROCESS ??? s4_a_target_num_current, 
[31] MAINPROCESS ??? ast_a_target_current 
[32] MAINPROCESS proc ); 
[33] MAINPROCESS ??? fn_bsm_sel_extrgt_outside_load( 
[34] MAINPROCESS ??? s4_a_target_num_current, 
[35] MAINPROCESS ??? ast_a_target_current 
[36] MAINPROCESS proc ); 
[37] MAINPROCESS proc return; 
----------------- Total Codes : 37 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_lot_exp 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 tmp_lost_max TARGET_LOST_MAX;
[3] MAINPROCESS equal for (i 0;
[4] MAINPROCESS proc i < s4_a_target_num_current; 
[5] MAINPROCESS ??? i++) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) ??? if (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] MAINPROCESS proc return; 
[10] SUBSUBPROCESS(1) ??? if (fl_abs(ast_a_target_current[i].fl_Rypred) < EKF_RY_SIDE) 
[11] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[13] SUBSUBPROCESS(1) ??? if (ast_a_target_current[i].s4_flg_lost > tmp_lost_max) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(3) 
[15] SUBSUBSUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX_SIDE;
[16] SUBSUBSUBPROCESS(2) equal tmp_lost_max TARGET_LOST_MAX;
[17] SUBSUBSUBPROCESS(3) func fn_init(&ast_a_target_current[i], 1); 
----------------- Total Codes : 17 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_stationary 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal FL tmp_alarm_x_min ALARM_X_IN       + ALARM_X_OFFSET_IN;
[3] MAINPROCESS equal for (i 0;
[4] MAINPROCESS proc i < s4_a_target_num_current; 
[5] MAINPROCESS ??? i++) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) ??? if (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] MAINPROCESS proc return; 
[10] SUBSUBPROCESS(1) ??? if (((ast_a_target_current[i].fl_Vyfil < ((-fl_g_v_self_bsm_for_base / 3.6F) + 1.0F)) 
[11] SUBSUBPROCESS(1) ??? ||   (ast_a_target_current[i].s4_flg_stop == 1)) 
[12] SUBSUBPROCESS(1) ??? &&  ((ast_a_target_current[i].fl_Rxfil > tmp_alarm_x_min) 
[13] SUBSUBPROCESS(1) ??? ||   (ast_a_target_current[i].fl_Rxfil < st_g_bsm_loop_data.afl_wall_width[0]))) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) func fn_init(&ast_a_target_current[i], 1); 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_no_rel_spd 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for (i 0;
[3] MAINPROCESS proc i < s4_a_target_num_current; 
[4] MAINPROCESS ??? i++) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if ((ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[7] SUBPROCESS(1) ??? &&  (ast_a_target_current[i].s4_flg_track <= PRIOR_TRK_NUM)) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] MAINPROCESS proc return; 
[10] SUBSUBPROCESS(1) ??? if ((st_g_bsm_loop_data.as4_flg_leading[0] == 0) 
[11] SUBSUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN) 
[12] SUBSUBPROCESS(1) ??? &&  (ast_a_target_current[i].fl_Vyfil == 0.0F)) 
[13] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[14] SUBSUBSUBPROCESS(1) func fn_init(&ast_a_target_current[i], 1); 
----------------- Total Codes : 14 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_stag_just_beside 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for (i 0;
[3] MAINPROCESS proc i < s4_a_target_num_current; 
[4] MAINPROCESS ??? i++) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if ((ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[7] SUBPROCESS(1) ??? &&  (ast_a_target_current[i].s4_flg_track <= PRIOR_TRK_NUM)) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] MAINPROCESS proc return; 
[10] SUBSUBPROCESS(1) ??? if ((st_g_bsm_loop_data.as4_flg_leading[0] == 0) 
[11] SUBSUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN) 
[12] SUBSUBPROCESS(1) ??? &&  (fl_abs(ast_a_target_current[i].fl_Ryfil) < 0.5F) 
[13] SUBSUBPROCESS(1) ??? &&  (fl_abs(ast_a_target_current[i].fl_Rypred) < 1.0F) 
[14] SUBSUBPROCESS(1) ??? &&  (fl_abs(ast_a_target_current[i].fl_Vyfil) < 0.5F) 
[15] SUBSUBPROCESS(1) ??? &&  (fl_abs(ast_a_target_current[i].fl_Vypred) < 0.5F)) 
[16] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[17] SUBSUBSUBPROCESS(1) func fn_init(&ast_a_target_current[i], 1); 
----------------- Total Codes : 17 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_just_beside 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for (i 0;
[3] MAINPROCESS proc i < s4_a_target_num_current; 
[4] MAINPROCESS ??? i++) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if ((ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[7] SUBPROCESS(1) ??? &&  (ast_a_target_current[i].s4_flg_track <= PRIOR_TRK_NUM)) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] MAINPROCESS proc return; 
[10] SUBSUBPROCESS(1) ??? if ((st_g_bsm_loop_data.as4_flg_leading[0] == 0) 
[11] SUBSUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN) 
[12] SUBSUBPROCESS(1) ??? &&  (ast_a_target_current[i].fl_Ryfil > RY_WALL_LIMIT)) 
[13] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[14] SUBSUBSUBPROCESS(1) func fn_init(&ast_a_target_current[i], 1); 
----------------- Total Codes : 14 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_around_beside 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal FL min_x TH_TT_MAX;
[3] MAINPROCESS equal S4 min_index -1;
[4] MAINPROCESS equal S4 side_num 0;
[5] MAINPROCESS proc FL fl_t_rxfil_abs; 
[6] MAINPROCESS proc FL fl_t_rxfil_diff_min_abs; 
[7] MAINPROCESS equal for (i 0;
[8] MAINPROCESS proc i < s4_a_target_num_current; 
[9] MAINPROCESS ??? i++) 
[10] MAINPROCESS subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) ??? if ((ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[12] SUBPROCESS(1) ??? &&  (fl_abs(ast_a_target_current[i].fl_Ryfil) < EKF_RY_SIDE)) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] MAINPROCESS ??? if (side_num > 1) 
[15] MAINPROCESS subproc SUBPROCESS(2) 
[16] SUBPROCESS(2) equal for (i 0;
[17] SUBPROCESS(2) proc i < s4_a_target_num_current; 
[18] SUBPROCESS(2) ??? i++) 
[19] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[20] MAINPROCESS proc return; 
[21] SUBSUBPROCESS(1) equal fl_t_rxfil_abs fl_abs(ast_a_target_current[i].fl_Ryfil);
[22] SUBSUBPROCESS(1) equal fl_t_rxfil_diff_min_abs fl_abs(ast_a_target_current[i].fl_Rxfil - ast_a_target_current[min_index].fl_Rxfil);
[23] SUBSUBPROCESS(1) ??? if ((ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[24] SUBSUBPROCESS(1) ??? &&  (fl_t_rxfil_abs < EKF_RY_SIDE) 
[25] SUBSUBPROCESS(1) ??? &&  (i != min_index) 
[26] SUBSUBPROCESS(1) ??? &&  (fl_t_rxfil_diff_min_abs > (FL)0.5F)) 
[27] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBPROCESS(1) func fn_init(&ast_a_target_current[i], 1); 
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_opst_sns_area 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for (i 0;
[3] MAINPROCESS proc i < s4_a_target_num_current; 
[4] MAINPROCESS ??? i++) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[7] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[8] MAINPROCESS proc return; 
[9] SUBSUBPROCESS(1) ??? if (ast_a_target_current[i].fl_Rxfil <= (-st_g_bsm_loop_data.afl_installed_angle[1] - 1.5F)) 
[10] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[11] SUBSUBSUBPROCESS(1) func fn_init(&ast_a_target_current[i], 1); 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_around_mycar 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for (i 0;
[3] MAINPROCESS proc i < s4_a_target_num_current; 
[4] MAINPROCESS ??? i++) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[7] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[8] MAINPROCESS proc return; 
[9] SUBSUBPROCESS(1) ??? if ((ast_a_target_current[i].fl_Rxfil < RX_AROUND_TH_TT) 
[10] SUBSUBPROCESS(1) ??? &&  (ast_a_target_current[i].fl_Ryfil > RY_AROUND_TH_TT)) 
[11] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[12] SUBSUBSUBPROCESS(1) func fn_init(&ast_a_target_current[i], 1); 
----------------- Total Codes : 12 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_outside_load 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 tmp_Rx_index 0;
[3] MAINPROCESS equal for (i 0;
[4] MAINPROCESS proc i < s4_a_target_num_current; 
[5] MAINPROCESS ??? i++) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal tmp_Rx_index (S4) ast_a_target_current[i].fl_Ryfil;
[8] SUBPROCESS(1) ??? if (tmp_Rx_index < 0) 
[9] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[10] SUBPROCESS(1) ??? if (tmp_Rx_index > 69) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[12] SUBPROCESS(1) ??? if ((ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[13] SUBPROCESS(1) ??? &&  (ast_a_target_current[i].fl_Rxfil >= fl_abs(st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_index] - (FL)0.5F)) 
[14] SUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_flg_leading[0] == 0) 
[15] SUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN)) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[17] SUBPROCESS(1) ??? if ((ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[18] SUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_flg_leading[0] == (S4)0) 
[19] SUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.as4_slow_sot_find[0] == (S4)0) 
[20] SUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.u1_wall_flg_for_fa_judgement == (U1)1) 
[21] SUBPROCESS(1) ??? &&  (st_g_bsm_loop_data.afl_wall_width[0] - ast_a_target_current[i].fl_Rxfil < (FL)0.5F)) 
[22] SUBPROCESS(1) subproc SUBSUBPROCESS(4) 
[23] MAINPROCESS proc return; 
[24] SUBSUBPROCESS(1) equal tmp_Rx_index 0;
[25] SUBSUBPROCESS(2) equal tmp_Rx_index 69;
[26] SUBSUBPROCESS(3) func fn_init(&ast_a_target_current[i], 1); 
[27] SUBSUBPROCESS(4) func fn_init(&ast_a_target_current[i], (S4)1); 
----------------- Total Codes : 27 lines
--------------------------
[Function Name] : fn_bsm_sel_empty_buf_trgt_trimming 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 s2_t_in[TARGET_BUFFSIZE]; 
[2] MAINPROCESS proc S4 s2_t_loop; 
[3] MAINPROCESS proc S4 s2_t_num; 
[4] MAINPROCESS equal s2_t_num 0;
[5] MAINPROCESS equal for (s2_t_loop 0;
[6] MAINPROCESS proc s2_t_loop < TARGET_BUFFSIZE; 
[7] MAINPROCESS ??? s2_t_loop++) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) ??? if (ast_a_target_current[s2_t_loop].fl_Robs != CFL_UNKNOWN_VALUE) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] MAINPROCESS equal *ps4_a_target_num_current s2_t_num;
[12] MAINPROCESS ??? if (s2_t_num > 0) 
[13] MAINPROCESS subproc SUBPROCESS(2) 
[14] SUBPROCESS(2) equal for (s2_t_loop 0;
[15] SUBPROCESS(2) proc s2_t_loop < s2_t_num; 
[16] SUBPROCESS(2) ??? s2_t_loop++) 
[17] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[18] SUBPROCESS(2) equal for (s2_t_loop s2_t_num;
[19] SUBPROCESS(2) proc s2_t_loop < TARGET_BUFFSIZE; 
[20] SUBPROCESS(2) ??? s2_t_loop++) 
[21] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[22] MAINPROCESS proc return; 
[23] SUBSUBPROCESS(1) equal ast_a_target_current[s2_t_loop] ast_a_target_current[s2_t_in[s2_t_loop]];
[24] SUBSUBPROCESS(2) func fn_init(&ast_a_target_current[s2_t_loop], 1); 
----------------- Total Codes : 24 lines
--------------------------
[Function Name] : fn_bsm_sel_target_marking 
-Return type : static VD 
-Argument : 1 
     [0] : (S4   s4_a_target_num_current 
----- Codes -----
[1] MAINPROCESS func fn_bsm_sel_check_sot_target(s4_a_target_num_current, ast_a_target_current, u1_a_alarming_flag); 
[2] MAINPROCESS func fn_bsm_sel_check_tos_target(s4_a_target_num_current, ast_a_target_current); 
[3] MAINPROCESS proc return; 
----------------- Total Codes : 3 lines
--------------------------
[Function Name] : fn_bsm_sel_check_sot_target 
-Return type : static VD 
-Argument : 1 
     [0] : (S4   s4_a_target_num_current 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_lp_trgt_num; 
[2] MAINPROCESS proc FL fl_t_cos; 
[3] MAINPROCESS proc FL fl_t_vy; 
[4] MAINPROCESS ??? if ((st_g_bsm_loop_data.as4_fast_sot_flg[0] > (S4)0) 
[5] MAINPROCESS ??? &&  (u1_a_alarming_flag == (U1)0)) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal for (u1_t_lp_trgt_num (U1)0;
[8] SUBPROCESS(1) proc u1_t_lp_trgt_num < s4_a_target_num_current; 
[9] SUBPROCESS(1) ??? u1_t_lp_trgt_num++) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] MAINPROCESS subproc SUBPROCESS(2) 
[12] SUBPROCESS(2) equal for (u1_t_lp_trgt_num (U1)0;
[13] SUBPROCESS(2) proc u1_t_lp_trgt_num < s4_a_target_num_current; 
[14] SUBPROCESS(2) ??? u1_t_lp_trgt_num++) 
[15] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[16] MAINPROCESS proc return; 
[17] SUBSUBPROCESS(1) ??? if ((ast_a_target_current[u1_t_lp_trgt_num].s4_ID_num > (S4)0) 
[18] SUBSUBPROCESS(1) ??? &&  (ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_sot_cut > (S4)0)) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) equal fl_t_cos fl_cos((FL)0.5F * (ast_a_target_current[u1_t_lp_trgt_num].fl_theta_up + ast_a_target_current[u1_t_lp_trgt_num].fl_theta_dn));
[21] SUBSUBSUBPROCESS(1) ??? if (fl_abs(fl_t_cos) > (FL)0.1F) 
[22] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[24] SUBSUBSUBPROCESS(1) ??? if ((ast_a_target_current[u1_t_lp_trgt_num].fl_Ryfil >= (FL)-3.0) 
[25] SUBSUBSUBPROCESS(1) ??? ||  (fl_t_vy > (FL)-1.39F)) 
[26] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(3) 
[27] SUBSUBSUBSUBPROCESS(1) equal fl_t_vy ast_a_target_current[u1_t_lp_trgt_num].fl_Vobs / fl_t_cos;
[28] SUBSUBSUBSUBPROCESS(2) equal fl_t_vy ast_a_target_current[u1_t_lp_trgt_num].fl_Vobs;
[29] SUBSUBSUBSUBPROCESS(3) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_sot_cut - (S4)1;
----------------- Total Codes : 29 lines
--------------------------
[Function Name] : fn_bsm_sel_check_tos_target 
-Return type : static VD 
-Argument : 1 
     [0] : (S4   s4_a_target_num_current 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_lp_trgt_num; 
[2] MAINPROCESS equal for (u1_t_lp_trgt_num (U1)0;
[3] MAINPROCESS proc u1_t_lp_trgt_num < s4_a_target_num_current; 
[4] MAINPROCESS ??? u1_t_lp_trgt_num++) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if (ast_a_target_current[u1_t_lp_trgt_num].s4_ID_num > (S4)0) 
[7] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[8] MAINPROCESS proc return; 
[9] SUBSUBPROCESS(1) ??? if (ast_a_target_current[u1_t_lp_trgt_num].fl_Ryfil < (CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET)) 
[10] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[11] SUBSUBSUBPROCESS(1) ??? if (ast_a_target_current[u1_t_lp_trgt_num].fl_Vyfil > (FL)3.0F) 
[12] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[13] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[14] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(3) 
[15] SUBSUBSUBPROCESS(1) ??? if (ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos > (S4)10) 
[16] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(4) 
[17] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(5) 
[18] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(6) 
[19] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos + (S4)2;
[20] SUBSUBSUBSUBPROCESS(2) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos + (S4)1;
[21] SUBSUBSUBSUBPROCESS(3) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos - (S4)1;
[22] SUBSUBSUBSUBPROCESS(4) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos (S4)10;
[23] SUBSUBSUBSUBPROCESS(5) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos (S4)0;
----------------- Total Codes : 23 lines
--------------------------
[Function Name] : cluster_target 
-Return type : S4 
-Argument : 3 
     [0] : S4   target_num 
     [1] : NORMAL_BSM*   target 
     [2] : S4*   used_ID 
----- Codes -----
[1] MAINPROCESS equal S4 iret 0;
[2] MAINPROCESS proc S4 i, j; 
[3] MAINPROCESS equal S4 tmp_index_valid -1;
[4] MAINPROCESS equal S4 tmp_index_invalid -1;
[5] MAINPROCESS proc NORMAL_BSM tmp_target_buf[TARGET_BUFFSIZE]; 
[6] MAINPROCESS equal for(i 0;
[7] MAINPROCESS proc i<TARGET_BUFFSIZE; 
[8] MAINPROCESS ??? i++) 
[9] MAINPROCESS subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) func fn_init(&tmp_target_buf[i], 1); 
[11] MAINPROCESS equal for(i 0;
[12] MAINPROCESS proc i<target_num; 
[13] MAINPROCESS ??? i++) 
[14] MAINPROCESS subproc SUBPROCESS(2) 
[15] SUBPROCESS(2) equal tmp_target_buf[i] target[i];
[16] MAINPROCESS equal for(i 0;
[17] MAINPROCESS proc i<target_num; 
[18] MAINPROCESS ??? i++) 
[19] MAINPROCESS subproc SUBPROCESS(3) 
[20] SUBPROCESS(3) equal for(j 0;
[21] SUBPROCESS(3) proc j<target_num; 
[22] SUBPROCESS(3) ??? j++) 
[23] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[24] MAINPROCESS equal for(i 0;
[25] MAINPROCESS proc i<TARGET_BUFFSIZE; 
[26] MAINPROCESS ??? i++) 
[27] MAINPROCESS subproc SUBPROCESS(4) 
[28] SUBPROCESS(4) func fn_init(&target[i], 1); 
[29] SUBPROCESS(4) ??? if( tmp_target_buf[i].fl_Robs != CFL_UNKNOWN_VALUE ) 
[30] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[31] MAINPROCESS proc return iret; 
[32] SUBSUBPROCESS(1) equal target[iret] tmp_target_buf[i];
[33] SUBSUBPROCESS(1) proc iret++; 
----------------- Total Codes : 33 lines
--------------------------
[Function Name] : s4_start_prediction 
-Return type : S4 
-Argument : 5 
     [0] : NORMAL_BSM*   pst_a_normal_current 
     [1] : S4   s4_a_pair_num_current 
     [2] : S4   s4_a_size 
     [3] : const S4   as4_a_flg_passing[1] 
     [4] : const S4   as4_a_flg_leading[1] 
----- Codes -----
[1] MAINPROCESS equal S4 s4_t_iRet 0;
[2] MAINPROCESS proc S4 s4_t_lp_i; 
[3] MAINPROCESS equal S4 s4_t_new_num 0;
[4] MAINPROCESS equal S4 s4_t_tmp_Rx_index 0;
[5] MAINPROCESS proc S4 s4_t_erased; 
[6] MAINPROCESS equal S4 s4_t_tmp_erased_num 0;
[7] MAINPROCESS proc S4 as4_t_in[NORMAL_BUFFSIZE]; 
[8] MAINPROCESS proc S4 s4_t_loop; 
[9] MAINPROCESS proc S4 s4_t_num; 
[10] MAINPROCESS proc FL fl_t_Ryobs_abs; 
[11] MAINPROCESS proc U1 u1_t_jdg_c5_flg; 
[12] MAINPROCESS proc U1 u1_t_jdg_c6_flg; 
[13] MAINPROCESS equal u1_t_jdg_c5_flg CU1_DF_OFF;
[14] MAINPROCESS equal u1_t_jdg_c6_flg CU1_DF_OFF;
[15] MAINPROCESS equal for (s4_t_lp_i 0;
[16] MAINPROCESS proc s4_t_lp_i < s4_a_pair_num_current; 
[17] MAINPROCESS ??? s4_t_lp_i++) 
[18] MAINPROCESS subproc SUBPROCESS(1) 
[19] SUBPROCESS(1) equal s4_t_erased 0;
[20] SUBPROCESS(1) ??? if ( 
[21] SUBPROCESS(1) ??? (pst_a_normal_current[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE) 
[22] SUBPROCESS(1) ??? && (pst_a_normal_current[s4_t_lp_i].s4_tracked == 0) 
[23] SUBPROCESS(1) ??? && (pst_a_normal_current[s4_t_lp_i].s4_flg_track == 0) 
[24] SUBPROCESS(1) ??? ) 
[25] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[26] MAINPROCESS equal s4_t_num 0;
[27] MAINPROCESS equal for (s4_t_loop 0;
[28] MAINPROCESS proc s4_t_loop < s4_a_size; 
[29] MAINPROCESS ??? s4_t_loop++) 
[30] MAINPROCESS subproc SUBPROCESS(2) 
[31] SUBPROCESS(2) ??? if (pst_a_normal_current[s4_t_loop].fl_Robs != CFL_UNKNOWN_VALUE) 
[32] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[33] MAINPROCESS ??? if (s4_t_num > 0) 
[34] MAINPROCESS subproc SUBPROCESS(3) 
[35] SUBPROCESS(3) equal for (s4_t_loop 0;
[36] SUBPROCESS(3) proc s4_t_loop < s4_t_num; 
[37] SUBPROCESS(3) ??? s4_t_loop++) 
[38] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[39] SUBPROCESS(3) equal for (s4_t_loop s4_t_num;
[40] SUBPROCESS(3) proc s4_t_loop < s4_a_size; 
[41] SUBPROCESS(3) ??? s4_t_loop++) 
[42] SUBPROCESS(3) subproc SUBSUBPROCESS(2) 
[43] MAINPROCESS equal s4_t_iRet s4_t_tmp_erased_num;
[44] MAINPROCESS func return (s4_t_iRet); 
[45] SUBSUBPROCESS(1) equal pst_a_normal_current[s4_t_loop] pst_a_normal_current[as4_t_in[s4_t_loop]];
[46] SUBSUBPROCESS(2) func fn_init(&pst_a_normal_current[s4_t_loop], 1); 
----------------- Total Codes : 46 lines
--------------------------
[Function Name] : u1_start_prediction_c5 
-Return type : static U1 
-Argument : 1 
     [0] : (S4   s4_a_slow_sot_doa_diff_sum4 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_c5_flag; 
[2] MAINPROCESS equal u1_t_jdg_c5_flag CU1_FALSE;
[3] MAINPROCESS ??? if (s4_a_slow_sot_doa_diff_sum4 < (S4)CFL_WALL_DEV_TH12) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal u1_t_jdg_c5_flag CU1_TRUE;
[6] MAINPROCESS subproc SUBPROCESS(2) 
[7] SUBPROCESS(2) equal u1_t_jdg_c5_flag CU1_FALSE;
[8] MAINPROCESS proc return u1_t_jdg_c5_flag; 
[9] MAINPROCESS equal u1_t_jdg_c5_flag CU1_FALSE;
----------------- Total Codes : 9 lines
--------------------------
[Function Name] : u1_start_prediction_c6 
-Return type : static U1 
-Argument : 1 
     [0] : (S4   s4_a_slow_sot_doa_diff_sum5 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_c6_flag; 
[2] MAINPROCESS equal u1_t_jdg_c6_flag CU1_FALSE;
[3] MAINPROCESS ??? if (s4_a_slow_sot_doa_diff_sum5 < (S4)WALL_DEV_TH1) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal u1_t_jdg_c6_flag CU1_TRUE;
[6] MAINPROCESS subproc SUBPROCESS(2) 
[7] SUBPROCESS(2) equal u1_t_jdg_c6_flag CU1_FALSE;
[8] MAINPROCESS proc return u1_t_jdg_c6_flag; 
[9] MAINPROCESS equal u1_t_jdg_c6_flag CU1_FALSE;
----------------- Total Codes : 9 lines
--------------------------
[Function Name] : s4_copy_prediction_to_filtered_data 
-Return type : S4 
-Argument : 2 
     [0] : NORMAL_BSM   *pst_a_normal 
     [1] : S4   s4_a_size 
----- Codes -----
[1] MAINPROCESS proc S4 s4_t_lp_i; 
[2] MAINPROCESS equal S4 s4_t_object_num 0;
[3] MAINPROCESS proc NORMAL_BSM ast_t_buf_normal[NORMAL_BUFFSIZE]; 
[4] MAINPROCESS func fn_init(ast_t_buf_normal, NORMAL_BUFFSIZE); 
[5] MAINPROCESS equal for (s4_t_lp_i 0;
[6] MAINPROCESS proc s4_t_lp_i < s4_a_size; 
[7] MAINPROCESS ??? s4_t_lp_i++) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) ??? if ( 
[10] SUBPROCESS(1) ??? (pst_a_normal[s4_t_lp_i].fl_Rxobs != CFL_UNKNOWN_VALUE) 
[11] SUBPROCESS(1) ??? && (pst_a_normal[s4_t_lp_i].fl_Ryobs != CFL_UNKNOWN_VALUE) 
[12] SUBPROCESS(1) ??? && (pst_a_normal[s4_t_lp_i].fl_Rxpred != CFL_UNKNOWN_VALUE) 
[13] SUBPROCESS(1) ??? && (pst_a_normal[s4_t_lp_i].fl_Rypred != CFL_UNKNOWN_VALUE) 
[14] SUBPROCESS(1) ??? ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[17] MAINPROCESS equal s4_t_object_num 0;
[18] MAINPROCESS equal for (s4_t_lp_i 0;
[19] MAINPROCESS proc s4_t_lp_i < s4_a_size; 
[20] MAINPROCESS ??? s4_t_lp_i++) 
[21] MAINPROCESS subproc SUBPROCESS(2) 
[22] SUBPROCESS(2) ??? if (pst_a_normal[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE) 
[23] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[24] MAINPROCESS ??? if (s4_t_object_num > 0) 
[25] MAINPROCESS subproc SUBPROCESS(3) 
[26] SUBPROCESS(3) equal for (s4_t_lp_i 0;
[27] SUBPROCESS(3) proc s4_t_lp_i < s4_a_size; 
[28] SUBPROCESS(3) ??? s4_t_lp_i++) 
[29] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[30] MAINPROCESS func return (s4_t_object_num); 
[31] SUBSUBPROCESS(1) equal pst_a_normal[s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : fn_calc_prediction_of_normaldata 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM*   pst_a_normal 
----- Codes -----
[1] MAINPROCESS ??? fn_transform_xy_to_polar( 
[2] MAINPROCESS ??? pst_a_normal[0].fl_Rxpred, 
[3] MAINPROCESS ??? pst_a_normal[0].fl_Rypred, 
[4] MAINPROCESS ??? &pst_a_normal[0].fl_Robs_pred, 
[5] MAINPROCESS ??? &pst_a_normal[0].fl_theta_up_pred 
[6] MAINPROCESS proc ); 
[7] MAINPROCESS equal pst_a_normal[0].fl_theta_dn_pred pst_a_normal[0].fl_theta_up_pred;
[8] MAINPROCESS ??? fn_transform_vxvy_to_vr( 
[9] MAINPROCESS ??? pst_a_normal[0].fl_Vxpred, 
[10] MAINPROCESS ??? pst_a_normal[0].fl_Vypred, 
[11] MAINPROCESS ??? pst_a_normal[0].fl_theta_dn_pred, 
[12] MAINPROCESS ??? &pst_a_normal[0].fl_Vobs_pred 
[13] MAINPROCESS proc ); 
[14] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[15] MAINPROCESS ??? pst_a_normal[0].fl_Robs_pred, 
[16] MAINPROCESS ??? pst_a_normal[0].fl_Vobs_pred, 
[17] MAINPROCESS ??? &pst_a_normal[0].s4_bin_up_pred, 
[18] MAINPROCESS ??? 0 
[19] MAINPROCESS proc ); 
[20] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[21] MAINPROCESS ??? pst_a_normal[0].fl_Robs_pred, 
[22] MAINPROCESS ??? pst_a_normal[0].fl_Vobs_pred, 
[23] MAINPROCESS ??? &pst_a_normal[0].s4_bin_dn_pred, 
[24] MAINPROCESS ??? 1 
[25] MAINPROCESS proc ); 
[26] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[27] MAINPROCESS ??? pst_a_normal[0].fl_Robs_pred, 
[28] MAINPROCESS ??? pst_a_normal[0].fl_Vobs_pred, 
[29] MAINPROCESS ??? &pst_a_normal[0].fl_bin_up_interpolate_pred, 
[30] MAINPROCESS ??? 0 
[31] MAINPROCESS proc ); 
[32] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[33] MAINPROCESS ??? pst_a_normal[0].fl_Robs_pred, 
[34] MAINPROCESS ??? pst_a_normal[0].fl_Vobs_pred, 
[35] MAINPROCESS ??? &pst_a_normal[0].fl_bin_dn_interpolate_pred, 
[36] MAINPROCESS ??? 1 
[37] MAINPROCESS proc ); 
[38] MAINPROCESS ??? fn_transform_rad_to_doabin( 
[39] MAINPROCESS ??? pst_a_normal[0].fl_theta_dn_pred, 
[40] MAINPROCESS ??? &pst_a_normal[0].s4_bin_up_music_pred 
[41] MAINPROCESS proc ); 
[42] MAINPROCESS equal pst_a_normal[0].s4_bin_dn_music_pred pst_a_normal[0].s4_bin_up_music_pred;
[43] MAINPROCESS ??? fn_transform_rad_to_doabin_interpolate( 
[44] MAINPROCESS ??? pst_a_normal[0].fl_theta_up_pred, 
[45] MAINPROCESS ??? &pst_a_normal[0].fl_doa_up_interpolate_pred 
[46] MAINPROCESS proc ); 
[47] MAINPROCESS equal pst_a_normal[0].fl_doa_dn_interpolate_pred pst_a_normal[0].fl_doa_up_interpolate_pred;
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fn_estimate_road_shape 
-Return type : VD 
-Argument : 1 
     [0] : FL   afl_a_Rx_right[70] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for( i 0;
[3] MAINPROCESS proc i < 70; 
[4] MAINPROCESS ??? i++ ) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal afl_a_Rx_right[i] fl_get_road_width(s2_g_curvr_for_base, (FL)(-i)) + st_g_bsm_loop_data.afl_wall_width[0];
[7] MAINPROCESS equal afl_a_Rx_right[i] fl_get_road_width(s2_g_curvr_for_base, (FL)(-i)) + st_g_bsm_loop_data.afl_wall_width[0];
----------------- Total Codes : 7 lines
--------------------------
[Function Name] : fl_get_road_width 
-Return type : FL 
-Argument : 1 
     [0] : (S4   s4_a_curve_r 
----- Codes -----
[1] MAINPROCESS proc FL fl_t_fret; 
[2] MAINPROCESS equal FL fl_t_tmp_Ry fl_a_Ry;
[3] MAINPROCESS ??? if (fl_t_tmp_Ry > (FL)0.0F) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal fl_t_tmp_Ry (FL)0.0F;
[6] MAINPROCESS ??? if (s4_a_curve_r == (S4)0) 
[7] MAINPROCESS subproc SUBPROCESS(2) 
[8] SUBPROCESS(2) equal fl_t_fret (FL)0.0F;
[9] MAINPROCESS subproc SUBPROCESS(3) 
[10] SUBPROCESS(3) equal fl_t_fret ((FL)0.5F / (FL)s4_a_curve_r) * fl_t_tmp_Ry * fl_t_tmp_Ry;
[11] MAINPROCESS proc return fl_t_fret; 
[12] MAINPROCESS equal fl_t_fret ((FL)0.5F / (FL)s4_a_curve_r) * fl_t_tmp_Ry * fl_t_tmp_Ry;
----------------- Total Codes : 12 lines
--------------------------
[Function Name] : connect_previous_object 
-Return type : S4 
-Argument : 6 
     [0] : NORMAL_BSM   normal_prev[NORMAL_BUFFSIZE] 
     [1] : NORMAL_BSM   normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   pair_num_current 
     [3] : S4*   pair_res_prev 
     [4] : S4*   pair_res_current 
     [5] : S4   size 
----- Codes -----
[1] MAINPROCESS equal S4 iRet 0;
[2] MAINPROCESS proc S4 i, j, k; 
[3] MAINPROCESS proc FL compare[NORMAL_BUFFSIZE][NORMAL_BUFFSIZE]; 
[4] MAINPROCESS proc FL min; 
[5] MAINPROCESS proc S4 found; 
[6] MAINPROCESS proc S4 tmp_pair_prev; 
[7] MAINPROCESS proc S4 tmp_pair_current; 
[8] MAINPROCESS equal FL rx_th RX_TH_NT;
[9] MAINPROCESS equal FL ry_th RY_TH_NT;
[10] MAINPROCESS equal FL vx_th VX_TH_NT;
[11] MAINPROCESS equal FL vy_th VY_TH_NT;
[12] MAINPROCESS equal for( i 0;
[13] MAINPROCESS proc i < size; 
[14] MAINPROCESS ??? i++ ) 
[15] MAINPROCESS subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) equal normal_prev[i].s4_flg_used 0;
[17] SUBPROCESS(1) equal normal_current[i].s4_flg_used 0;
[18] MAINPROCESS equal for( i 0;
[19] MAINPROCESS proc i < NORMAL_BUFFSIZE; 
[20] MAINPROCESS ??? i++ ) 
[21] MAINPROCESS subproc SUBPROCESS(2) 
[22] SUBPROCESS(2) equal for( j 0;
[23] SUBPROCESS(2) proc j < NORMAL_BUFFSIZE; 
[24] SUBPROCESS(2) ??? j++ ) 
[25] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[26] MAINPROCESS equal for( i 0;
[27] MAINPROCESS proc i < pair_num_current; 
[28] MAINPROCESS ??? i++ ) 
[29] MAINPROCESS subproc SUBPROCESS(3) 
[30] SUBPROCESS(3) equal for( j 0;
[31] SUBPROCESS(3) proc j < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[32] SUBPROCESS(3) ??? j++ ) 
[33] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[34] MAINPROCESS equal iRet 0;
[35] MAINPROCESS equal for (k 0;
[36] MAINPROCESS proc k < pair_num_current; 
[37] MAINPROCESS ??? k++) 
[38] MAINPROCESS subproc SUBPROCESS(4) 
[39] SUBPROCESS(4) equal min 1000.0F;
[40] SUBPROCESS(4) equal found 0;
[41] SUBPROCESS(4) equal for (i 0;
[42] SUBPROCESS(4) proc i < pair_num_current; 
[43] SUBPROCESS(4) ??? i++) 
[44] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[45] SUBPROCESS(4) ??? if( found == 1 ) 
[46] SUBPROCESS(4) subproc SUBSUBPROCESS(2) 
[47] MAINPROCESS proc return iRet; 
[48] SUBSUBPROCESS(1) equal for (j 0;
[49] SUBSUBPROCESS(1) proc j < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[50] SUBSUBPROCESS(1) ??? j++) 
[51] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[52] SUBSUBPROCESS(2) equal *(pair_res_current + iRet) tmp_pair_current;
[53] SUBSUBPROCESS(2) equal *(pair_res_prev + iRet) tmp_pair_prev;
[54] SUBSUBPROCESS(2) proc iRet++; 
[55] SUBSUBPROCESS(2) equal normal_prev[tmp_pair_prev].s4_flg_used 1;
[56] SUBSUBPROCESS(2) equal normal_current[tmp_pair_current].s4_flg_used 1;
----------------- Total Codes : 56 lines
--------------------------
[Function Name] : predict_object_trajectory_simple 
-Return type : VD 
-Argument : 2 
     [0] : NORMAL_BSM*   normal_current 
     [1] : S4   pair_num 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for(i 0;
[3] MAINPROCESS proc i<pair_num; 
[4] MAINPROCESS ??? i++) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal normal_current[i].fl_Vypred normal_current[i].fl_Vyobs;
[7] SUBPROCESS(1) equal normal_current[i].fl_Rypred normal_current[i].fl_Ryobs + normal_current[i].fl_Vyobs*CFL_SAMPLING_TIME;
[8] SUBPROCESS(1) equal normal_current[i].fl_Vxpred normal_current[i].fl_Vxobs;
[9] SUBPROCESS(1) equal normal_current[i].fl_Rxpred normal_current[i].fl_Rxobs + normal_current[i].fl_Vxobs*CFL_SAMPLING_TIME;
[10] SUBPROCESS(1) ??? fn_transform_xy_to_polar( 
[11] SUBPROCESS(1) ??? normal_current[i].fl_Rxpred, 
[12] SUBPROCESS(1) ??? normal_current[i].fl_Rypred, 
[13] SUBPROCESS(1) ??? &normal_current[i].fl_Robs_pred, 
[14] SUBPROCESS(1) ??? &normal_current[i].fl_theta_up_pred 
[15] SUBPROCESS(1) proc ); 
[16] SUBPROCESS(1) equal normal_current[i].fl_theta_dn_pred normal_current[i].fl_theta_up_pred;
[17] SUBPROCESS(1) ??? fn_transform_vxvy_to_vr( 
[18] SUBPROCESS(1) ??? normal_current[i].fl_Vxpred, 
[19] SUBPROCESS(1) ??? normal_current[i].fl_Vypred, 
[20] SUBPROCESS(1) ??? normal_current[i].fl_theta_dn_pred, 
[21] SUBPROCESS(1) ??? &normal_current[i].fl_Vobs_pred 
[22] SUBPROCESS(1) proc ); 
[23] SUBPROCESS(1) ??? fn_transform_rv_to_freqbin( 
[24] SUBPROCESS(1) ??? normal_current[i].fl_Robs_pred, 
[25] SUBPROCESS(1) ??? normal_current[i].fl_Vobs_pred, 
[26] SUBPROCESS(1) ??? &normal_current[i].s4_bin_up_pred, 
[27] SUBPROCESS(1) ??? 0 
[28] SUBPROCESS(1) proc ); 
[29] SUBPROCESS(1) ??? fn_transform_rv_to_freqbin( 
[30] SUBPROCESS(1) ??? normal_current[i].fl_Robs_pred, 
[31] SUBPROCESS(1) ??? normal_current[i].fl_Vobs_pred, 
[32] SUBPROCESS(1) ??? &normal_current[i].s4_bin_dn_pred, 
[33] SUBPROCESS(1) ??? 1 
[34] SUBPROCESS(1) proc ); 
[35] SUBPROCESS(1) ??? fn_transform_rv_to_freqbin_interpolate( 
[36] SUBPROCESS(1) ??? normal_current[i].fl_Robs_pred, 
[37] SUBPROCESS(1) ??? normal_current[i].fl_Vobs_pred, 
[38] SUBPROCESS(1) ??? &normal_current[i].fl_bin_up_interpolate_pred, 
[39] SUBPROCESS(1) ??? 0 
[40] SUBPROCESS(1) proc ); 
[41] SUBPROCESS(1) ??? fn_transform_rv_to_freqbin_interpolate( 
[42] SUBPROCESS(1) ??? normal_current[i].fl_Robs_pred, 
[43] SUBPROCESS(1) ??? normal_current[i].fl_Vobs_pred, 
[44] SUBPROCESS(1) ??? &normal_current[i].fl_bin_dn_interpolate_pred, 
[45] SUBPROCESS(1) ??? 1 
[46] SUBPROCESS(1) proc ); 
[47] SUBPROCESS(1) ??? fn_transform_rad_to_doabin( 
[48] SUBPROCESS(1) ??? normal_current[i].fl_theta_up_pred, 
[49] SUBPROCESS(1) ??? &normal_current[i].s4_bin_up_music_pred 
[50] SUBPROCESS(1) proc ); 
[51] SUBPROCESS(1) equal normal_current[i].s4_bin_dn_music_pred normal_current[i].s4_bin_up_music_pred;
[52] SUBPROCESS(1) ??? fn_transform_rad_to_doabin_interpolate( 
[53] SUBPROCESS(1) ??? normal_current[i].fl_theta_up_pred, 
[54] SUBPROCESS(1) ??? &normal_current[i].fl_doa_up_interpolate_pred 
[55] SUBPROCESS(1) proc ); 
[56] SUBPROCESS(1) equal normal_current[i].fl_doa_dn_interpolate_pred normal_current[i].fl_doa_up_interpolate_pred;
[57] SUBPROCESS(1) equal normal_current[i].fl_Rxfil normal_current[i].fl_Rxobs;
[58] SUBPROCESS(1) equal normal_current[i].fl_Ryfil normal_current[i].fl_Ryobs;
[59] SUBPROCESS(1) equal normal_current[i].fl_Vxfil normal_current[i].fl_Vxobs;
[60] SUBPROCESS(1) equal normal_current[i].fl_Vyfil normal_current[i].fl_Vyobs;
[61] MAINPROCESS proc return; 
[62] MAINPROCESS equal normal_current[i].fl_Vypred normal_current[i].fl_Vyobs;
[63] MAINPROCESS equal normal_current[i].fl_Rypred normal_current[i].fl_Ryobs + normal_current[i].fl_Vyobs*CFL_SAMPLING_TIME;
[64] MAINPROCESS equal normal_current[i].fl_Vxpred normal_current[i].fl_Vxobs;
[65] MAINPROCESS equal normal_current[i].fl_Rxpred normal_current[i].fl_Rxobs + normal_current[i].fl_Vxobs*CFL_SAMPLING_TIME;
[66] MAINPROCESS ??? fn_transform_xy_to_polar( 
[67] MAINPROCESS ??? normal_current[i].fl_Rxpred, 
[68] MAINPROCESS ??? normal_current[i].fl_Rypred, 
[69] MAINPROCESS ??? &normal_current[i].fl_Robs_pred, 
[70] MAINPROCESS ??? &normal_current[i].fl_theta_up_pred 
[71] MAINPROCESS proc ); 
[72] MAINPROCESS equal normal_current[i].fl_theta_dn_pred normal_current[i].fl_theta_up_pred;
[73] MAINPROCESS ??? fn_transform_vxvy_to_vr( 
[74] MAINPROCESS ??? normal_current[i].fl_Vxpred, 
[75] MAINPROCESS ??? normal_current[i].fl_Vypred, 
[76] MAINPROCESS ??? normal_current[i].fl_theta_dn_pred, 
[77] MAINPROCESS ??? &normal_current[i].fl_Vobs_pred 
[78] MAINPROCESS proc ); 
[79] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[80] MAINPROCESS ??? normal_current[i].fl_Robs_pred, 
[81] MAINPROCESS ??? normal_current[i].fl_Vobs_pred, 
[82] MAINPROCESS ??? &normal_current[i].s4_bin_up_pred, 
[83] MAINPROCESS ??? 0 
[84] MAINPROCESS proc ); 
[85] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[86] MAINPROCESS ??? normal_current[i].fl_Robs_pred, 
[87] MAINPROCESS ??? normal_current[i].fl_Vobs_pred, 
[88] MAINPROCESS ??? &normal_current[i].s4_bin_dn_pred, 
[89] MAINPROCESS ??? 1 
[90] MAINPROCESS proc ); 
[91] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[92] MAINPROCESS ??? normal_current[i].fl_Robs_pred, 
[93] MAINPROCESS ??? normal_current[i].fl_Vobs_pred, 
[94] MAINPROCESS ??? &normal_current[i].fl_bin_up_interpolate_pred, 
[95] MAINPROCESS ??? 0 
[96] MAINPROCESS proc ); 
[97] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[98] MAINPROCESS ??? normal_current[i].fl_Robs_pred, 
[99] MAINPROCESS ??? normal_current[i].fl_Vobs_pred, 
[100] MAINPROCESS ??? &normal_current[i].fl_bin_dn_interpolate_pred, 
[101] MAINPROCESS ??? 1 
[102] MAINPROCESS proc ); 
[103] MAINPROCESS ??? fn_transform_rad_to_doabin( 
[104] MAINPROCESS ??? normal_current[i].fl_theta_up_pred, 
[105] MAINPROCESS ??? &normal_current[i].s4_bin_up_music_pred 
[106] MAINPROCESS proc ); 
[107] MAINPROCESS equal normal_current[i].s4_bin_dn_music_pred normal_current[i].s4_bin_up_music_pred;
[108] MAINPROCESS ??? fn_transform_rad_to_doabin_interpolate( 
[109] MAINPROCESS ??? normal_current[i].fl_theta_up_pred, 
[110] MAINPROCESS ??? &normal_current[i].fl_doa_up_interpolate_pred 
[111] MAINPROCESS proc ); 
[112] MAINPROCESS equal normal_current[i].fl_doa_dn_interpolate_pred normal_current[i].fl_doa_up_interpolate_pred;
[113] MAINPROCESS equal normal_current[i].fl_Rxfil normal_current[i].fl_Rxobs;
[114] MAINPROCESS equal normal_current[i].fl_Ryfil normal_current[i].fl_Ryobs;
[115] MAINPROCESS equal normal_current[i].fl_Vxfil normal_current[i].fl_Vxobs;
[116] MAINPROCESS equal normal_current[i].fl_Vyfil normal_current[i].fl_Vyobs;
----------------- Total Codes : 116 lines
--------------------------
[Function Name] : prediction_with_connected_data 
-Return type : S4 
-Argument : 5 
     [0] : NORMAL_BSM*   normal_prev 
     [1] : NORMAL_BSM*   normal_current 
     [2] : const S4*   data_id_prev 
     [3] : const S4*   data_id_current 
     [4] : S4   paired_num 
----- Codes -----
[1] MAINPROCESS equal S4 iRet 0;
[2] MAINPROCESS proc S4 i; 
[3] MAINPROCESS equal S4 predict_num 0;
[4] MAINPROCESS proc S4 tmp_id_prev[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS proc S4 tmp_id_current[NORMAL_BUFFSIZE]; 
[6] MAINPROCESS equal for(i 0;
[7] MAINPROCESS proc i<paired_num; 
[8] MAINPROCESS ??? i++) 
[9] MAINPROCESS subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal tmp_id_prev[i] *data_id_prev;
[11] SUBPROCESS(1) equal tmp_id_current[i] *data_id_current;
[12] SUBPROCESS(1) proc data_id_prev++; 
[13] SUBPROCESS(1) proc data_id_current++; 
[14] SUBPROCESS(1) ??? if ((st_g_bsm_loop_data.u1_truck_flg != (U1)0) 
[15] SUBPROCESS(1) ??? &&  (normal_current[tmp_id_current[i]].fl_Ryobs > CFL_TRUCK_RY_MIN) 
[16] SUBPROCESS(1) ??? &&  ((normal_current[tmp_id_current[i]].fl_Rxobs - normal_prev[tmp_id_prev[i]].fl_Rxpred) > (FL)0.0F) 
[17] SUBPROCESS(1) ??? &&  (normal_current[tmp_id_current[i]].fl_Rxobs > CFL_TRUCK_RX_MIN) 
[18] SUBPROCESS(1) ??? &&  (normal_current[tmp_id_current[i]].fl_Rxobs < CFL_TRUCK_RX_MAX)) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] MAINPROCESS equal for(i 0;
[21] MAINPROCESS proc i<paired_num; 
[22] MAINPROCESS ??? i++) 
[23] MAINPROCESS subproc SUBPROCESS(2) 
[24] SUBPROCESS(2) ??? fn_ab_track( 
[25] SUBPROCESS(2) ??? &normal_prev[tmp_id_prev[i]], 
[26] SUBPROCESS(2) ??? &normal_current[tmp_id_current[i]], 
[27] SUBPROCESS(2) ??? 0 
[28] SUBPROCESS(2) proc ); 
[29] SUBPROCESS(2) ??? calc_prediction_of_normaldata( 
[30] SUBPROCESS(2) ??? &normal_current[tmp_id_current[i]] 
[31] SUBPROCESS(2) proc ); 
[32] SUBPROCESS(2) ??? if (normal_current[tmp_id_current[i]].s4_flg_track == CS4_S4MAX) 
[33] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[34] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[35] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_flg_lost 0;
[36] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_flg_new 0;
[37] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_tracked 1;
[38] SUBPROCESS(2) equal normal_prev[tmp_id_prev[i]].s4_tracked 1;
[39] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_ctr_sot_cut normal_prev[tmp_id_prev[i]].s4_ctr_sot_cut;
[40] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_flg_reliable normal_prev[tmp_id_prev[i]].s4_flg_reliable;
[41] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_ctr_tos normal_prev[tmp_id_prev[i]].s4_ctr_tos;
[42] SUBPROCESS(2) proc predict_num++; 
[43] MAINPROCESS equal iRet predict_num;
[44] MAINPROCESS proc return iRet; 
[45] SUBSUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_flg_track (S4)normal_prev[tmp_id_prev[i]].s4_flg_track + 1;
----------------- Total Codes : 45 lines
--------------------------
[Function Name] : prediction_without_connected_data 
-Return type : S4 
-Argument : 3 
     [0] : NORMAL_BSM*   normal_prev 
     [1] : NORMAL_BSM*   normal_current 
     [2] : S4   pair_num_current 
----- Codes -----
[1] MAINPROCESS equal S4 iRet 0;
[2] MAINPROCESS proc S4 i, j; 
[3] MAINPROCESS equal S4 lost_num 0;
[4] MAINPROCESS proc NORMAL_BSM tmptmp_normal_current[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS proc NORMAL_BSM tmp_normal_buff[NORMAL_BUFFSIZE]; 
[6] MAINPROCESS equal S4 tmp_connect_num EKF_CONNECT_NUM;
[7] MAINPROCESS equal S4 tmp_lost_max EKF_LOST_MAX;
[8] MAINPROCESS func fn_init(tmptmp_normal_current,NORMAL_BUFFSIZE); 
[9] MAINPROCESS func fn_init(tmp_normal_buff,NORMAL_BUFFSIZE); 
[10] MAINPROCESS equal for (i 0;
[11] MAINPROCESS proc i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[12] MAINPROCESS ??? i++) 
[13] MAINPROCESS subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) ??? if ((normal_prev[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[15] SUBPROCESS(1) ??? &&  (normal_prev[i].s4_tracked != 0)) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] MAINPROCESS equal for (i 0;
[18] MAINPROCESS proc i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[19] MAINPROCESS ??? i++) 
[20] MAINPROCESS subproc SUBPROCESS(2) 
[21] SUBPROCESS(2) ??? if (fl_abs(normal_prev[i].fl_Rypred) < EKF_RY_SIDE) 
[22] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[23] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[24] SUBPROCESS(2) subproc SUBSUBPROCESS(3) 
[25] SUBPROCESS(2) ??? if (fl_abs(normal_prev[i].fl_Robs - st_g_bsm_loop_data.afl_wall_width[0]) < 1.0F) 
[26] SUBPROCESS(2) subproc SUBSUBPROCESS(4) 
[27] SUBPROCESS(2) ??? if (st_g_bsm_loop_data.as4_fast_sot_flg[0] != (S4)0) 
[28] SUBPROCESS(2) subproc SUBSUBPROCESS(5) 
[29] SUBPROCESS(2) ??? if ((normal_prev[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[30] SUBPROCESS(2) ??? &&  (normal_prev[i].s4_tracked == 0) 
[31] SUBPROCESS(2) ??? &&  (normal_prev[i].s4_flg_track > tmp_connect_num) 
[32] SUBPROCESS(2) ??? &&  (i < NORMAL_BUFFSIZE)) 
[33] SUBPROCESS(2) subproc SUBSUBPROCESS(6) 
[34] MAINPROCESS equal for (i 0;
[35] MAINPROCESS proc i < lost_num; 
[36] MAINPROCESS ??? i++) 
[37] MAINPROCESS subproc SUBPROCESS(3) 
[38] SUBPROCESS(3) ??? if ((pair_num_current + i) < NORMAL_BUFFSIZE ) 
[39] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[40] SUBPROCESS(3) subproc SUBSUBPROCESS(2) 
[41] MAINPROCESS equal iRet i;
[42] MAINPROCESS proc return iRet; 
[43] SUBSUBPROCESS(1) ??? copy_normal_data( 
[44] SUBSUBPROCESS(1) ??? (const NORMAL_BSM (*))&tmptmp_normal_current[i], 
[45] SUBSUBPROCESS(1) ??? &normal_current[pair_num_current+i], 
[46] SUBSUBPROCESS(1) ??? 1 
[47] SUBSUBPROCESS(1) proc ); 
[48] SUBSUBPROCESS(2) proc break; 
----------------- Total Codes : 48 lines
--------------------------
[Function Name] : predict_target 
-Return type : VD 
-Argument : 2 
     [0] : const NORMAL_BSM   *target_prev 
     [1] : NORMAL_BSM   *target_current 
----- Codes -----
[1] MAINPROCESS equal target_current[0].s4_bin_up target_prev[0].s4_bin_up_pred;
[2] MAINPROCESS equal target_current[0].s4_bin_dn target_prev[0].s4_bin_dn_pred;
[3] MAINPROCESS equal target_current[0].fl_bin_up_interpolate target_prev[0].fl_bin_up_interpolate_pred;
[4] MAINPROCESS equal target_current[0].fl_bin_dn_interpolate target_prev[0].fl_bin_dn_interpolate_pred;
[5] MAINPROCESS equal target_current[0].s4_bin_up_music target_prev[0].s4_bin_up_music_pred;
[6] MAINPROCESS equal target_current[0].s4_bin_dn_music target_prev[0].s4_bin_dn_music_pred;
[7] MAINPROCESS equal target_current[0].fl_doa_up_interpolate target_prev[0].fl_doa_up_interpolate_pred;
[8] MAINPROCESS equal target_current[0].fl_doa_dn_interpolate target_prev[0].fl_doa_dn_interpolate_pred;
[9] MAINPROCESS equal target_current[0].fl_power_up target_prev[0].fl_power_up;
[10] MAINPROCESS equal target_current[0].fl_power_dn target_prev[0].fl_power_dn;
[11] MAINPROCESS equal target_current[0].fl_power_up_music target_prev[0].fl_power_up_music;
[12] MAINPROCESS equal target_current[0].fl_power_dn_music target_prev[0].fl_power_dn_music;
[13] MAINPROCESS equal target_current[0].fl_theta_up target_prev[0].fl_theta_up_pred;
[14] MAINPROCESS equal target_current[0].fl_theta_dn target_prev[0].fl_theta_dn_pred;
[15] MAINPROCESS equal target_current[0].fl_Robs target_prev[0].fl_Robs_pred;
[16] MAINPROCESS equal target_current[0].fl_Rxobs target_prev[0].fl_Rxpred;
[17] MAINPROCESS equal target_current[0].fl_Ryobs target_prev[0].fl_Rypred;
[18] MAINPROCESS equal target_current[0].fl_Vobs target_prev[0].fl_Vobs_pred;
[19] MAINPROCESS equal target_current[0].fl_Vxobs target_prev[0].fl_Vxpred;
[20] MAINPROCESS equal target_current[0].fl_Vyobs target_prev[0].fl_Vypred;
[21] MAINPROCESS equal target_current[0].fl_Rxfil target_prev[0].fl_Rxpred;
[22] MAINPROCESS equal target_current[0].fl_Ryfil target_prev[0].fl_Rypred;
[23] MAINPROCESS equal target_current[0].fl_Vxfil target_prev[0].fl_Vxpred;
[24] MAINPROCESS equal target_current[0].fl_Vyfil target_prev[0].fl_Vypred;
[25] MAINPROCESS equal target_current[0].fl_Axfil target_prev[0].fl_Axfil;
[26] MAINPROCESS equal target_current[0].fl_Ayfil target_prev[0].fl_Ayfil;
[27] MAINPROCESS equal target_current[0].s4_flg_stop target_prev[0].s4_flg_stop;
[28] MAINPROCESS equal target_current[0].s4_flg_track target_prev[0].s4_flg_track;
[29] MAINPROCESS equal target_current[0].s4_flg_lost target_prev[0].s4_flg_lost;
[30] MAINPROCESS equal target_current[0].s4_ID_num target_prev[0].s4_ID_num;
[31] MAINPROCESS equal target_current[0].s4_flg_single_peak_up target_prev[0].s4_flg_single_peak_up;
[32] MAINPROCESS equal target_current[0].u4_ctr_fa target_prev[0].u4_ctr_fa;
[33] MAINPROCESS equal target_current[0].s4_flg_reliable target_prev[0].s4_flg_reliable;
[34] MAINPROCESS equal target_current[0].s4_ctr_tos target_prev[0].s4_ctr_tos;
[35] MAINPROCESS equal target_current[0].s4_flg_heiso_up target_prev[0].s4_flg_heiso_up;
[36] MAINPROCESS equal target_current[0].s4_flg_heiso_dn target_prev[0].s4_flg_heiso_dn;
[37] MAINPROCESS equal target_current[0].s4_flg_dc target_prev[0].s4_flg_dc;
[38] MAINPROCESS equal target_current[0].s4_ctr_sot_cut target_prev[0].s4_ctr_sot_cut;
[39] MAINPROCESS equal target_current[0].s4_flg_reliable target_prev[0].s4_flg_reliable;
[40] MAINPROCESS equal target_current[0].s4_ctr_tos target_prev[0].s4_ctr_tos;
[41] MAINPROCESS ??? fn_ab_track( 
[42] MAINPROCESS ??? &target_prev[0], 
[43] MAINPROCESS ??? &target_current[0], 
[44] MAINPROCESS ??? 1 
[45] MAINPROCESS proc ); 
[46] MAINPROCESS ??? calc_prediction_of_normaldata( 
[47] MAINPROCESS ??? target_current 
[48] MAINPROCESS proc ); 
[49] MAINPROCESS ??? if (target_current[0].s4_flg_track == CS4_S4MAX) 
[50] MAINPROCESS subproc SUBPROCESS(1) 
[51] MAINPROCESS subproc SUBPROCESS(2) 
[52] SUBPROCESS(2) proc target_current[0].s4_flg_track++; 
[53] MAINPROCESS equal target_current[0].s4_flg_new 0;
[54] MAINPROCESS equal target_current[0].s4_tracked 1;
[55] MAINPROCESS equal target_current[0].s4_flg_used 1;
[56] MAINPROCESS proc target_current[0].s4_flg_track++; 
----------------- Total Codes : 56 lines
--------------------------
[Function Name] : copy_normal_data 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM   *normal_in 
     [1] : NORMAL_BSM   *normal_out 
     [2] : S4   size 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for(i 0;
[3] MAINPROCESS proc i<size; 
[4] MAINPROCESS ??? i++) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal *normal_out *normal_in;
[7] SUBPROCESS(1) proc normal_in++; 
[8] SUBPROCESS(1) proc normal_out++; 
[9] MAINPROCESS proc return; 
[10] MAINPROCESS equal *normal_out *normal_in;
[11] MAINPROCESS proc normal_in++; 
[12] MAINPROCESS proc normal_out++; 
----------------- Total Codes : 12 lines
--------------------------
[Function Name] : calc_prediction_of_normaldata 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM*   normal 
----- Codes -----
[1] MAINPROCESS ??? fn_transform_xy_to_polar( 
[2] MAINPROCESS ??? normal[0].fl_Rxpred, 
[3] MAINPROCESS ??? normal[0].fl_Rypred, 
[4] MAINPROCESS ??? &normal[0].fl_Robs_pred, 
[5] MAINPROCESS ??? &normal[0].fl_theta_up_pred 
[6] MAINPROCESS proc ); 
[7] MAINPROCESS equal normal[0].fl_theta_dn_pred normal[0].fl_theta_up_pred;
[8] MAINPROCESS ??? fn_transform_vxvy_to_vr( 
[9] MAINPROCESS ??? normal[0].fl_Vxpred, 
[10] MAINPROCESS ??? normal[0].fl_Vypred, 
[11] MAINPROCESS ??? normal[0].fl_theta_dn_pred, 
[12] MAINPROCESS ??? &normal[0].fl_Vobs_pred 
[13] MAINPROCESS proc ); 
[14] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[15] MAINPROCESS ??? normal[0].fl_Robs_pred, 
[16] MAINPROCESS ??? normal[0].fl_Vobs_pred, 
[17] MAINPROCESS ??? &normal[0].s4_bin_up_pred, 
[18] MAINPROCESS ??? 0 
[19] MAINPROCESS proc ); 
[20] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[21] MAINPROCESS ??? normal[0].fl_Robs_pred, 
[22] MAINPROCESS ??? normal[0].fl_Vobs_pred, 
[23] MAINPROCESS ??? &normal[0].s4_bin_dn_pred, 
[24] MAINPROCESS ??? 1 
[25] MAINPROCESS proc ); 
[26] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[27] MAINPROCESS ??? normal[0].fl_Robs_pred, 
[28] MAINPROCESS ??? normal[0].fl_Vobs_pred, 
[29] MAINPROCESS ??? &normal[0].fl_bin_up_interpolate_pred, 
[30] MAINPROCESS ??? 0 
[31] MAINPROCESS proc ); 
[32] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[33] MAINPROCESS ??? normal[0].fl_Robs_pred, 
[34] MAINPROCESS ??? normal[0].fl_Vobs_pred, 
[35] MAINPROCESS ??? &normal[0].fl_bin_dn_interpolate_pred, 
[36] MAINPROCESS ??? 1 
[37] MAINPROCESS proc ); 
[38] MAINPROCESS ??? fn_transform_rad_to_doabin( 
[39] MAINPROCESS ??? normal[0].fl_theta_up_pred, 
[40] MAINPROCESS ??? &normal[0].s4_bin_up_music_pred 
[41] MAINPROCESS proc ); 
[42] MAINPROCESS equal normal[0].s4_bin_dn_music_pred normal[0].s4_bin_up_music_pred;
[43] MAINPROCESS ??? fn_transform_rad_to_doabin_interpolate( 
[44] MAINPROCESS ??? normal[0].fl_theta_up_pred, 
[45] MAINPROCESS ??? &normal[0].fl_doa_up_interpolate_pred 
[46] MAINPROCESS proc ); 
[47] MAINPROCESS equal normal[0].fl_doa_dn_interpolate_pred normal[0].fl_doa_up_interpolate_pred;
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fn_transform_xy_to_polar 
-Return type : VD 
-Argument : 4 
     [0] : FL   x 
     [1] : FL   y 
     [2] : FL*   r 
     [3] : FL*   theta 
----- Codes -----
[1] MAINPROCESS equal FL sensor_pos_x st_g_bsm_loop_data.afl_installed_angle[1];
[2] MAINPROCESS ??? if(y<0.0) 
[3] MAINPROCESS subproc SUBPROCESS(1) 
[4] SUBPROCESS(1) equal *r -(FL)fl_sqrt( (x - sensor_pos_x)*(x - sensor_pos_x) + y*y );
[5] SUBPROCESS(1) equal *theta (FL)fl_atan( (x-sensor_pos_x) / y ,(FL)1.0F );
[6] MAINPROCESS ??? else if(y>0.0) 
[7] MAINPROCESS subproc SUBPROCESS(2) 
[8] SUBPROCESS(2) equal *r (FL)fl_sqrt( (x - sensor_pos_x)*(x - sensor_pos_x) + y*y );
[9] SUBPROCESS(2) ??? if (fl_abs(x - sensor_pos_x) > (FL)0.0F) 
[10] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[11] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[12] MAINPROCESS ??? else 
[13] MAINPROCESS subproc SUBPROCESS(3) 
[14] SUBPROCESS(3) equal *r x - sensor_pos_x;
[15] SUBPROCESS(3) equal *theta 90.0F*PI/180.0F;
[16] MAINPROCESS equal *r x - sensor_pos_x;
[17] MAINPROCESS equal *theta 90.0F*PI/180.0F;
----------------- Total Codes : 17 lines
--------------------------
[Function Name] : fn_transform_rad_to_doabin 
-Return type : VD 
-Argument : 2 
     [0] : FL   angle 
     [1] : S4*   doa_bin 
----- Codes -----
[1] MAINPROCESS proc S4 tmp_doabin; 
[2] MAINPROCESS equal tmp_doabin (S4)( ((-180.0F/PI*angle - DOA_BIN_START_ANG - st_g_bsm_loop_data.afl_installed_angle[0]) / DOA_ANG_PER_BIN) + (FL)0.5F );
[3] MAINPROCESS ??? if ( tmp_doabin < 0 ) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal tmp_doabin 0;
[6] MAINPROCESS ??? else if ( tmp_doabin > N_DOA ) 
[7] MAINPROCESS subproc SUBPROCESS(2) 
[8] SUBPROCESS(2) equal tmp_doabin N_DOA;
[9] MAINPROCESS subproc SUBPROCESS(3) 
[10] MAINPROCESS equal *doa_bin tmp_doabin;
----------------- Total Codes : 10 lines
--------------------------
[Function Name] : fn_transform_rad_to_doabin_interpolate 
-Return type : VD 
-Argument : 2 
     [0] : FL   angle 
     [1] : FL*   doa_bin 
----- Codes -----
[1] MAINPROCESS proc FL tmp_doabin; 
[2] MAINPROCESS equal tmp_doabin (-180.0F/PI*angle - DOA_BIN_START_ANG - st_g_bsm_loop_data.afl_installed_angle[0]) / DOA_ANG_PER_BIN;
[3] MAINPROCESS ??? if ( tmp_doabin < 0.0F ) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal tmp_doabin 0.0F;
[6] MAINPROCESS ??? else if ( tmp_doabin > (FL)N_DOA ) 
[7] MAINPROCESS subproc SUBPROCESS(2) 
[8] SUBPROCESS(2) equal tmp_doabin (FL)N_DOA;
[9] MAINPROCESS subproc SUBPROCESS(3) 
[10] MAINPROCESS equal *doa_bin tmp_doabin;
----------------- Total Codes : 10 lines
--------------------------
[Function Name] : fn_transform_rv_to_freqbin 
-Return type : VD 
-Argument : 4 
     [0] : FL   r 
     [1] : FL   v 
     [2] : S4*   freqbin 
     [3] : S4   updn 
----- Codes -----
[1] MAINPROCESS equal S4 tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT;
[2] MAINPROCESS ??? if ((r < FREQ_EXPAND_R_TH) 
[3] MAINPROCESS ??? &&  (v > FREQ_EXPAND_V_TH)) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT_PRIOR_EX;
[6] MAINPROCESS ??? if(updn==CU2_LFM_MOD_UP) 
[7] MAINPROCESS subproc SUBPROCESS(2) 
[8] SUBPROCESS(2) ??? if(r<0) 
[9] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[10] SUBPROCESS(2) ??? else 
[11] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[12] MAINPROCESS ??? else if(updn==CU2_LFM_MOD_DN) 
[13] MAINPROCESS subproc SUBPROCESS(3) 
[14] SUBPROCESS(3) ??? if(r<0) 
[15] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[16] SUBPROCESS(3) ??? else 
[17] SUBPROCESS(3) subproc SUBSUBPROCESS(2) 
[18] MAINPROCESS ??? else 
[19] MAINPROCESS subproc SUBPROCESS(4) 
[20] MAINPROCESS ??? if(*freqbin<tmp_lower_limit_th) 
[21] MAINPROCESS subproc SUBPROCESS(5) 
[22] SUBPROCESS(5) equal *freqbin tmp_lower_limit_th;
[23] MAINPROCESS proc return; 
[24] MAINPROCESS equal *freqbin tmp_lower_limit_th;
----------------- Total Codes : 24 lines
--------------------------
[Function Name] : fn_transform_rv_to_freqbin_interpolate 
-Return type : VD 
-Argument : 4 
     [0] : FL   r 
     [1] : FL   v 
     [2] : FL*   freqbin 
     [3] : S4   updn 
----- Codes -----
[1] MAINPROCESS equal S4 tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT;
[2] MAINPROCESS ??? if ((r < FREQ_EXPAND_R_TH) 
[3] MAINPROCESS ??? &&  (v > FREQ_EXPAND_V_TH)) 
[4] MAINPROCESS subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT_PRIOR_EX;
[6] MAINPROCESS ??? if(updn==CU2_LFM_MOD_UP) 
[7] MAINPROCESS subproc SUBPROCESS(2) 
[8] SUBPROCESS(2) ??? if(r<0.0F) 
[9] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[10] SUBPROCESS(2) ??? else 
[11] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[12] MAINPROCESS ??? else if(updn==CU2_LFM_MOD_DN) 
[13] MAINPROCESS subproc SUBPROCESS(3) 
[14] SUBPROCESS(3) ??? if(r<0.0F) 
[15] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[16] SUBPROCESS(3) ??? else 
[17] SUBPROCESS(3) subproc SUBSUBPROCESS(2) 
[18] MAINPROCESS ??? else 
[19] MAINPROCESS subproc SUBPROCESS(4) 
[20] MAINPROCESS ??? if (*freqbin < (FL)tmp_lower_limit_th) 
[21] MAINPROCESS subproc SUBPROCESS(5) 
[22] SUBPROCESS(5) equal *freqbin (FL)tmp_lower_limit_th;
[23] MAINPROCESS proc return; 
[24] MAINPROCESS equal *freqbin (FL)tmp_lower_limit_th;
----------------- Total Codes : 24 lines
--------------------------
[Function Name] : fn_transform_vxvy_to_vr 
-Return type : VD 
-Argument : 4 
     [0] : FL   vx 
     [1] : FL   vy 
     [2] : FL   theta 
     [3] : FL*   vr 
----- Codes -----
[1] MAINPROCESS proc FL tmp_vr; 
[2] MAINPROCESS ??? if ( vy > 0.0 ) 
[3] MAINPROCESS subproc SUBPROCESS(1) 
[4] SUBPROCESS(1) equal tmp_vr (FL)fl_sqrt( vx*vx + vy*vy );
[5] SUBPROCESS(1) ??? if ( tmp_vr > V_PREDICT_MAX ) 
[6] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[7] MAINPROCESS ??? else if ( vy < 0.0 ) 
[8] MAINPROCESS subproc SUBPROCESS(2) 
[9] SUBPROCESS(2) equal tmp_vr -(FL)fl_sqrt( vx*vx + vy*vy );
[10] SUBPROCESS(2) ??? if ( tmp_vr < -(FL)V_PREDICT_MAX ) 
[11] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[12] MAINPROCESS ??? else 
[13] MAINPROCESS subproc SUBPROCESS(3) 
[14] SUBPROCESS(3) equal tmp_vr 0.0;
[15] MAINPROCESS equal *vr tmp_vr;
[16] MAINPROCESS equal tmp_vr 0.0;
----------------- Total Codes : 16 lines
--------------------------
[Function Name] : fn_ab_track 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM*   st_a_normal_prev 
     [1] : NORMAL_BSM*   st_a_normal_current 
     [2] : S4   s4_a_ab_filt_cof 
----- Codes -----
[1] MAINPROCESS proc FL alpha1, alpha2, alpha3, alpha4; 
[2] MAINPROCESS proc FL beta1, beta2, beta3, beta4; 
[3] MAINPROCESS proc FL prev_Vy; 
[4] MAINPROCESS proc FL prev_Ry; 
[5] MAINPROCESS proc FL prev_Vx; 
[6] MAINPROCESS proc FL prev_Rx; 
[7] MAINPROCESS proc FL current_Vy; 
[8] MAINPROCESS proc FL current_Ry; 
[9] MAINPROCESS proc FL current_Vx; 
[10] MAINPROCESS proc FL current_Rx; 
[11] MAINPROCESS ??? if ( s4_a_ab_filt_cof == 1 ) 
[12] MAINPROCESS subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal prev_Vy st_a_normal_prev->fl_Vypred;
[14] SUBPROCESS(1) equal prev_Ry st_a_normal_prev->fl_Rypred;
[15] SUBPROCESS(1) equal prev_Vx st_a_normal_prev->fl_Vxpred;
[16] SUBPROCESS(1) equal prev_Rx st_a_normal_prev->fl_Rxpred;
[17] SUBPROCESS(1) equal current_Vy st_a_normal_current->fl_Vyfil;
[18] SUBPROCESS(1) equal current_Ry st_a_normal_current->fl_Ryfil;
[19] SUBPROCESS(1) equal current_Vx st_a_normal_current->fl_Vxfil;
[20] SUBPROCESS(1) equal current_Rx st_a_normal_current->fl_Rxfil;
[21] SUBPROCESS(1) equal alpha1 0.1F;
[22] SUBPROCESS(1) equal beta1 0.0014F;
[23] SUBPROCESS(1) equal alpha2 0.1F;
[24] SUBPROCESS(1) equal beta2 0.0529F;
[25] SUBPROCESS(1) equal alpha3 0.1F;
[26] SUBPROCESS(1) equal beta3 0.001F;
[27] SUBPROCESS(1) equal alpha4 0.2F;
[28] SUBPROCESS(1) equal beta4 0.01F;
[29] MAINPROCESS ??? else 
[30] MAINPROCESS subproc SUBPROCESS(2) 
[31] SUBPROCESS(2) equal prev_Vy st_a_normal_prev->fl_Vypred;
[32] SUBPROCESS(2) equal prev_Ry st_a_normal_prev->fl_Rypred;
[33] SUBPROCESS(2) equal prev_Vx st_a_normal_prev->fl_Vxpred;
[34] SUBPROCESS(2) equal prev_Rx st_a_normal_prev->fl_Rxpred;
[35] SUBPROCESS(2) equal current_Vy st_a_normal_current->fl_Vyobs;
[36] SUBPROCESS(2) equal current_Ry st_a_normal_current->fl_Ryobs;
[37] SUBPROCESS(2) equal current_Vx st_a_normal_current->fl_Vxobs;
[38] SUBPROCESS(2) equal current_Rx st_a_normal_current->fl_Rxobs;
[39] SUBPROCESS(2) equal alpha1 0.2F;
[40] SUBPROCESS(2) equal beta1 0.0014F;
[41] SUBPROCESS(2) equal alpha2 0.2F;
[42] SUBPROCESS(2) equal beta2 0.0529F;
[43] SUBPROCESS(2) equal alpha3 0.06F;
[44] SUBPROCESS(2) equal beta3 0.0F;
[45] SUBPROCESS(2) equal alpha4 0.06F;
[46] SUBPROCESS(2) equal beta4 0.0014F;
[47] MAINPROCESS equal st_a_normal_current->fl_Ayfil st_a_normal_prev->fl_Ayfil		+  beta1*( current_Vy - prev_Vy )/CFL_SAMPLING_TIME;
[48] MAINPROCESS equal st_a_normal_current->fl_Vyfil prev_Vy					+ alpha1*( current_Vy - prev_Vy );
[49] MAINPROCESS equal st_a_normal_current->fl_Vypred st_a_normal_current->fl_Vyfil	+ st_a_normal_current->fl_Ayfil*CFL_SAMPLING_TIME;
[50] MAINPROCESS equal st_a_normal_current->fl_Vyfil prev_Vy					+  beta2*( current_Ry - prev_Ry )/CFL_SAMPLING_TIME;
[51] MAINPROCESS equal st_a_normal_current->fl_Ryfil prev_Ry					+ alpha2*( current_Ry - prev_Ry );
[52] MAINPROCESS equal st_a_normal_current->fl_Rypred st_a_normal_current->fl_Ryfil	+ st_a_normal_current->fl_Vyfil*CFL_SAMPLING_TIME;
[53] MAINPROCESS equal st_a_normal_current->fl_Axfil st_a_normal_prev->fl_Axfil		+  beta3*( current_Vx - prev_Vx )/CFL_SAMPLING_TIME;
[54] MAINPROCESS equal st_a_normal_current->fl_Vxfil prev_Vx					+ alpha3*( current_Vx - prev_Vx );
[55] MAINPROCESS equal st_a_normal_current->fl_Vxpred st_a_normal_current->fl_Vxfil    + st_a_normal_current->fl_Axfil*CFL_SAMPLING_TIME;
[56] MAINPROCESS equal st_a_normal_current->fl_Vxfil prev_Vx					+  beta4*( current_Rx - prev_Rx )/CFL_SAMPLING_TIME;
[57] MAINPROCESS equal st_a_normal_current->fl_Rxfil prev_Rx					+ alpha4*( current_Rx - prev_Rx );
[58] MAINPROCESS equal st_a_normal_current->fl_Rxpred st_a_normal_current->fl_Rxfil	+ st_a_normal_current->fl_Vxfil*CFL_SAMPLING_TIME;
[59] MAINPROCESS proc return; 
[60] MAINPROCESS equal prev_Vy st_a_normal_prev->fl_Vypred;
[61] MAINPROCESS equal prev_Ry st_a_normal_prev->fl_Rypred;
[62] MAINPROCESS equal prev_Vx st_a_normal_prev->fl_Vxpred;
[63] MAINPROCESS equal prev_Rx st_a_normal_prev->fl_Rxpred;
[64] MAINPROCESS equal current_Vy st_a_normal_current->fl_Vyobs;
[65] MAINPROCESS equal current_Ry st_a_normal_current->fl_Ryobs;
[66] MAINPROCESS equal current_Vx st_a_normal_current->fl_Vxobs;
[67] MAINPROCESS equal current_Rx st_a_normal_current->fl_Rxobs;
[68] MAINPROCESS equal alpha1 0.2F;
[69] MAINPROCESS equal beta1 0.0014F;
[70] MAINPROCESS equal alpha2 0.2F;
[71] MAINPROCESS equal beta2 0.0529F;
[72] MAINPROCESS equal alpha3 0.06F;
[73] MAINPROCESS equal beta3 0.0F;
[74] MAINPROCESS equal alpha4 0.06F;
[75] MAINPROCESS equal beta4 0.0014F;
----------------- Total Codes : 75 lines
--------------------------
[Function Name] : fn_ab_track_wall 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM*   st_a_normal_prev 
     [1] : NORMAL_BSM*   st_a_normal_current 
     [2] : S4   s4_a_ab_filt_cof 
----- Codes -----
[1] MAINPROCESS proc FL alpha1, alpha2; 
[2] MAINPROCESS proc FL beta1, beta2; 
[3] MAINPROCESS equal FL sensor_pos_x st_g_bsm_loop_data.afl_installed_angle[1];
[4] MAINPROCESS ??? if ( s4_a_ab_filt_cof == 1 ) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal alpha1 0.85F;
[7] SUBPROCESS(1) equal beta1 0.0014F;
[8] SUBPROCESS(1) equal alpha2 0.80F;
[9] SUBPROCESS(1) equal beta2 0.0529F;
[10] MAINPROCESS ??? else 
[11] MAINPROCESS subproc SUBPROCESS(2) 
[12] SUBPROCESS(2) equal alpha1 0.35F;
[13] SUBPROCESS(2) equal beta1 0.0014F;
[14] SUBPROCESS(2) equal alpha2 0.30F;
[15] SUBPROCESS(2) equal beta2 0.0529F;
[16] MAINPROCESS equal st_a_normal_current->fl_Axfil st_a_normal_prev->fl_Axfil		+  beta1*( st_a_normal_current->fl_Vxobs - st_a_normal_prev->fl_Vxpred )/CFL_SAMPLING_TIME;
[17] MAINPROCESS equal st_a_normal_current->fl_Vxfil st_a_normal_prev->fl_Vxpred		+ alpha1*( st_a_normal_current->fl_Vxobs - st_a_normal_prev->fl_Vxpred );
[18] MAINPROCESS equal st_a_normal_current->fl_Vxpred st_a_normal_current->fl_Vxfil	+ st_a_normal_current->fl_Axfil*CFL_SAMPLING_TIME;
[19] MAINPROCESS equal st_a_normal_current->fl_Rxfil st_a_normal_prev->fl_Rxpred		+ alpha2*( st_a_normal_current->fl_Rxobs - st_a_normal_prev->fl_Rxpred );
[20] MAINPROCESS equal st_a_normal_current->fl_Rxpred st_a_normal_current->fl_Rxfil	+ st_a_normal_current->fl_Vxfil*CFL_SAMPLING_TIME;
[21] MAINPROCESS equal st_a_normal_current->fl_Ayfil 0.0F;
[22] MAINPROCESS equal st_a_normal_current->fl_Vyfil 0.0F;
[23] MAINPROCESS equal st_a_normal_current->fl_Vypred 0.0F;
[24] MAINPROCESS equal st_a_normal_current->fl_Ryfil 0.0F;
[25] MAINPROCESS equal st_a_normal_current->fl_Rypred 0.0F;
[26] MAINPROCESS ??? st_a_normal_current->fl_Robs_pred  = -(FL)fl_sqrt( 
[27] MAINPROCESS ??? ( st_a_normal_current->fl_Rxpred - sensor_pos_x )*( st_a_normal_current->fl_Rxpred - sensor_pos_x ) 
[28] MAINPROCESS ??? + st_a_normal_current->fl_Rypred*st_a_normal_current->fl_Rypred 
[29] MAINPROCESS proc ); 
[30] MAINPROCESS equal st_a_normal_current->fl_theta_up_pred PI / (FL)2.0F;
[31] MAINPROCESS equal st_a_normal_current->fl_theta_dn_pred st_a_normal_current->fl_theta_up_pred;
[32] MAINPROCESS ??? st_a_normal_current->fl_Vobs_pred = (FL)( 
[33] MAINPROCESS ??? st_a_normal_current->fl_Vxpred*fl_sin( 0.5F*(st_a_normal_current->fl_theta_up_pred + st_a_normal_current->fl_theta_up_pred) ) 
[34] MAINPROCESS ??? + st_a_normal_current->fl_Vypred*fl_cos( 0.5F*(st_a_normal_current->fl_theta_up_pred + st_a_normal_current->fl_theta_up_pred) ) 
[35] MAINPROCESS proc ); 
[36] MAINPROCESS proc return; 
[37] MAINPROCESS equal alpha1 0.35F;
[38] MAINPROCESS equal beta1 0.0014F;
[39] MAINPROCESS equal alpha2 0.30F;
[40] MAINPROCESS equal beta2 0.0529F;
----------------- Total Codes : 40 lines
--------------------------
[Function Name] : s4_check_passing_car 
-Return type : S4 
-Argument : 2 
     [0] : const NORMAL_BSM*   pst_a_target 
     [1] : S4   s4_a_prev_passing_flg 
----- Codes -----
[1] MAINPROCESS equal S4 bRes 0;
[2] MAINPROCESS equal S4 tmp_passing_flg 0;
[3] MAINPROCESS proc S4 i; 
[4] MAINPROCESS ??? if ((fl_abs((FL)s2_g_curvr_for_base) > CANOUT_CURVER_MIN) 
[5] MAINPROCESS ??? &&  (fl_abs(fl_g_v_self_bsm_for_base) > CFL_CANOUT_VSELF_MIN)) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal for (i 0;
[8] SUBPROCESS(1) proc i < st_g_bsm_loop_data.as4_buf_pair_num[1]; 
[9] SUBPROCESS(1) ??? i++) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] MAINPROCESS ??? if (tmp_passing_flg == 0) 
[12] MAINPROCESS subproc SUBPROCESS(2) 
[13] SUBPROCESS(2) equal bRes 0;
[14] MAINPROCESS subproc SUBPROCESS(3) 
[15] SUBPROCESS(3) equal bRes s4_a_prev_passing_flg + tmp_passing_flg;
[16] MAINPROCESS proc return bRes; 
[17] MAINPROCESS equal bRes s4_a_prev_passing_flg + tmp_passing_flg;
----------------- Total Codes : 17 lines
--------------------------
[Function Name] : fn_send_to_can 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM   ast_a_target[TARGET_BUFFSIZE] 
     [1] : S4   as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT] 
     [2] : FL   afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal for (i (S4)0;
[3] MAINPROCESS proc i < TARGET_BUFFSIZE; 
[4] MAINPROCESS ??? i++) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) ??? if (ast_a_target[i].s4_ID_num > 0) 
[7] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[8] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][0] ast_a_target[i].s4_bin_up;
[9] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][1] ast_a_target[i].s4_bin_up_music;
[10] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][2] ast_a_target[i].s4_bin_dn;
[11] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][3] ast_a_target[i].s4_bin_dn_music;
[12] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][4] ast_a_target[i].s4_bin_up_pred;
[13] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][5] ast_a_target[i].s4_bin_dn_pred;
[14] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][6] ast_a_target[i].s4_bin_up_music_pred;
[15] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][7] ast_a_target[i].s4_bin_dn_music_pred;
[16] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][8] ast_a_target[i].s4_flg_stop;
[17] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][9] ast_a_target[i].s4_flg_track;
[18] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][10] ast_a_target[i].s4_flg_lost;
[19] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][11] ast_a_target[i].s4_ID_num;
[20] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][12] ast_a_target[i].s4_flg_new;
[21] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][13] ast_a_target[i].s4_flg_used;
[22] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][14] ast_a_target[i].s4_flg_dc;
[23] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][15] ast_a_target[i].s4_ctr_sot_cut;
[24] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][16] ast_a_target[i].s4_flg_reliable;
[25] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][17] ast_a_target[i].s4_ctr_tos;
[26] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][18] 0;
[27] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][19] 0;
[28] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][20] 0;
[29] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][21] 0;
[30] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][22] 0;
[31] SUBSUBPROCESS(1) ??? if(u1_g_sns_pos==SENSOR_RIGHT) 
[32] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[33] SUBSUBPROCESS(1) ??? else 
[34] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[35] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][21] 0;
[36] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][22] 0;
[37] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][23] 0;
[38] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][24] 0;
[39] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][25] 0;
[40] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][26] 0;
[41] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][27] 0;
[42] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][28] 0;
[43] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][29] 0;
[44] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][30] 0;
[45] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][31] ast_a_target[i].fl_doa_up_interpolate;
[46] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][32] ast_a_target[i].fl_doa_dn_interpolate;
[47] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][33] ast_a_target[i].fl_doa_up_interpolate_pred;
[48] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][34] ast_a_target[i].fl_doa_dn_interpolate_pred;
[49] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][35] ast_a_target[i].fl_bin_up_interpolate;
[50] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][36] ast_a_target[i].fl_bin_dn_interpolate;
[51] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][37] ast_a_target[i].fl_bin_up_interpolate_pred;
[52] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][38] ast_a_target[i].fl_bin_dn_interpolate_pred;
[53] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][0] ast_a_target[i].fl_power_up_music;
[54] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][1] ast_a_target[i].fl_power_dn_music;
[55] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][2] ast_a_target[i].fl_theta_up;
[56] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][3] ast_a_target[i].fl_theta_dn;
[57] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][4] ast_a_target[i].fl_Robs;
[58] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][5] ast_a_target[i].fl_Rxobs;
[59] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][6] ast_a_target[i].fl_Ryobs;
[60] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][7] ast_a_target[i].fl_Ryfil;
[61] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][8] ast_a_target[i].fl_Rxfil;
[62] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][9] ast_a_target[i].fl_Rxpred;
[63] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][10] ast_a_target[i].fl_Rypred;
[64] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][11] ast_a_target[i].fl_Vobs;
[65] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][12] 0;
[66] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][13] ast_a_target[i].fl_Vyfil;
[67] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][14] ast_a_target[i].fl_Vxfil;
[68] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][15] ast_a_target[i].fl_Vxpred;
[69] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][16] ast_a_target[i].fl_Vypred;
[70] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][17] ast_a_target[i].fl_Ayfil;
[71] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][18] ast_a_target[i].fl_Axfil;
[72] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][19] ast_a_target[i].fl_prob;
[73] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][20] ast_a_target[i].fl_track_prob;
[74] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][0] ast_a_target[i].fl_power_up_music;
[75] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][1] ast_a_target[i].fl_power_dn_music;
[76] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][2] - ast_a_target[i].fl_theta_up;
[77] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][3] - ast_a_target[i].fl_theta_dn;
[78] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][4] ast_a_target[i].fl_Robs;
[79] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][5] - ast_a_target[i].fl_Rxobs;
[80] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][6] ast_a_target[i].fl_Ryobs;
[81] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][7] ast_a_target[i].fl_Ryfil;
[82] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][8] - ast_a_target[i].fl_Rxfil;
[83] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][9] - ast_a_target[i].fl_Rxpred;
[84] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][10] ast_a_target[i].fl_Rypred;
[85] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][11] ast_a_target[i].fl_Vobs;
[86] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][12] 0;
[87] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][13] ast_a_target[i].fl_Vyfil;
[88] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][14] - ast_a_target[i].fl_Vxfil;
[89] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][15] - ast_a_target[i].fl_Vxpred;
[90] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][16] ast_a_target[i].fl_Vypred;
[91] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][17] 0;
[92] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][18] 0;
[93] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][19] ast_a_target[i].fl_prob;
[94] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][20] ast_a_target[i].fl_track_prob;
----------------- Total Codes : 94 lines
