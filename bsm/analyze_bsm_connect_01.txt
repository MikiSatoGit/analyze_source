Total lines: 3604 
Total functions : 37 
--------------------------
[Function Name] : s4_bsm_connect 
-Return type : S4 
-Argument : 11 
     [0] : S4   pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   pair_num_sot 
     [7] : NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   Tx_int[TARGET_BUFFSIZE][NORM_INT] 
     [9] : FL   Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
     [10] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal S4 iRet 0;
[3] MAINPROCESS(1) ??? NORMAL_BSM	normal1[NORMAL_BUFFSIZE], 
[4] MAINPROCESS(1) ??? normal2[NORMAL_BUFFSIZE], 
[5] MAINPROCESS(1) ??? target1[TARGET_BUFFSIZE], 
[6] MAINPROCESS(1) proc target2[TARGET_BUFFSIZE]; 
[7] MAINPROCESS(1) proc S4		pair_num_current[2]; 
[8] MAINPROCESS(1) equal S4 trk_num 0;
[9] MAINPROCESS(1) ??? S4		pair_connect_prev[NORMAL_BUFFSIZE], 
[10] MAINPROCESS(1) proc pair_connect_current[NORMAL_BUFFSIZE]; 
[11] MAINPROCESS(1) equal S4		pair_num_total 0;
[12] MAINPROCESS(1) equal S4		pair_num_connected 0;
[13] MAINPROCESS(1) equal S4		pair_num_lost 0;
[14] MAINPROCESS(1) equal S4 s4_t_pair_num_selected 0;
[15] MAINPROCESS(1) func<start> fn_init(normal2, NORMAL_BUFFSIZE 
[16] MAINPROCESS(1) func<end> ); 
[17] MAINPROCESS(1) func<start> fn_init(target2, TARGET_BUFFSIZE 
[18] MAINPROCESS(1) func<end> ); 
[19] MAINPROCESS(1) func<start> fn_move(normal1, st_g_bsm_loop_data.ast_normal, NORMAL_BUFFSIZE 
[20] MAINPROCESS(1) func<end> ); 
[21] MAINPROCESS(1) func<start> fn_move(target1, st_g_bsm_loop_data.ast_target, TARGET_BUFFSIZE 
[22] MAINPROCESS(1) func<end> ); 
[23] MAINPROCESS(1) equal pair_num_current[0] (S4)0;
[24] MAINPROCESS(1) equal pair_num_current[1] (S4)0;
[25] MAINPROCESS(1) for<start> for( 
[26] MAINPROCESS(1) for i=0; 
[27] MAINPROCESS(1) for i<NORMAL_BUFFSIZE; 
[28] MAINPROCESS(1) for i++) 
[29] MAINPROCESS(1) subproc SUBPROCESS(1) 
[30] SUBPROCESS(1) equal pair_connect_prev[i] -1;
[31] SUBPROCESS(1) equal pair_connect_current[i] -1;
[32] MAINPROCESS(2) func<start> st_g_bsm_loop_data.u1_truck_flg = u1_check_long_truck(u1_a_alarming_flag 
[33] MAINPROCESS(2) func<end> ); 
[34] MAINPROCESS(2) func<start> fn_estimate_road_shape( 
[35] MAINPROCESS(2) func st_g_bsm_loop_data.afl_Rx_right 
[36] MAINPROCESS(2) func<end> ); 
[37] MAINPROCESS(2) func<start> memcpy (afl_g_Rx_right, st_g_bsm_loop_data.afl_Rx_right, sizeof(FL)*70 
[38] MAINPROCESS(2) func<end> ); 
[39] MAINPROCESS(2) for<start> for( 
[40] MAINPROCESS(2) for i=0; 
[41] MAINPROCESS(2) for i<70; 
[42] MAINPROCESS(2) for i++) 
[43] MAINPROCESS(2) subproc SUBPROCESS(1) 
[44] SUBPROCESS(1) equal afl_g_Ry_right[i] -(float)i;
[45] MAINPROCESS(3) func<start> fn_bsm_con_check_passing_pre( 
[46] MAINPROCESS(3) func (const NORMAL_BSM (*))target1 
[47] MAINPROCESS(3) func<end> ); 
[48] MAINPROCESS(3) func<start> fn_bsm_con_integ_object( 
[49] MAINPROCESS(3) func pair_num_prior, 
[50] MAINPROCESS(3) func ast_a_normal_prior, 
[51] MAINPROCESS(3) func pair_num_ordinary, 
[52] MAINPROCESS(3) func ast_a_normal_ordinary, 
[53] MAINPROCESS(3) func pair_num_2f, 
[54] MAINPROCESS(3) func ast_a_normal_2f, 
[55] MAINPROCESS(3) func pair_num_sot, 
[56] MAINPROCESS(3) func ast_a_normal_sot, 
[57] MAINPROCESS(3) func &pair_num_total, 
[58] MAINPROCESS(3) func normal2 
[59] MAINPROCESS(3) func<end> ); 
[60] MAINPROCESS(3) equal u1_g_bsm_connect_in_pair_num (U1)pair_num_total;
[61] MAINPROCESS(3) equal trk_num st_g_bsm_loop_data.as4_buf_pair_num[0];
[62] MAINPROCESS(3) if<start> if( 
[63] MAINPROCESS(3) if trk_num==0 
[64] MAINPROCESS(3) if ) 
[65] MAINPROCESS(3) subproc SUBPROCESS(1) 
[66] SUBPROCESS(1) func<start> predict_object_trajectory_simple( 
[67] SUBPROCESS(1) func normal2, 
[68] SUBPROCESS(1) func pair_num_total 
[69] SUBPROCESS(1) func<end> ); 
[70] MAINPROCESS(4) else<start> else 
[71] MAINPROCESS(4) subproc SUBPROCESS(1) 
[72] SUBPROCESS(1) func<start> pair_num_connected = connect_previous_object( 
[73] SUBPROCESS(1) func normal1, 
[74] SUBPROCESS(1) func normal2, 
[75] SUBPROCESS(1) func pair_num_total, 
[76] SUBPROCESS(1) func pair_connect_prev, 
[77] SUBPROCESS(1) func pair_connect_current, 
[78] SUBPROCESS(1) func NORMAL_BUFFSIZE 
[79] SUBPROCESS(1) func<end> ); 
[80] SUBPROCESS(1) func<start> fn_bsm_con_tracking( 
[81] SUBPROCESS(1) func pair_num_connected, 
[82] SUBPROCESS(1) func (const S4 (*))pair_connect_prev, 
[83] SUBPROCESS(1) func (const S4 (*))pair_connect_current, 
[84] SUBPROCESS(1) func st_g_bsm_loop_data.as4_buf_pair_num[0], 
[85] SUBPROCESS(1) func normal1, 
[86] SUBPROCESS(1) func pair_num_total, 
[87] SUBPROCESS(1) func normal2 
[88] SUBPROCESS(1) func<end> ); 
[89] MAINPROCESS(5) if<start> if( 
[90] MAINPROCESS(5) if trk_num > 0 
[91] MAINPROCESS(5) if ) 
[92] MAINPROCESS(5) subproc SUBPROCESS(1) 
[93] SUBPROCESS(1) func<start> pair_num_lost = prediction_without_connected_data( 
[94] SUBPROCESS(1) func normal1, 
[95] SUBPROCESS(1) func normal2, 
[96] SUBPROCESS(1) func pair_num_total 
[97] SUBPROCESS(1) func<end> ); 
[98] MAINPROCESS(6) equal pair_num_total pair_num_total + pair_num_lost;
[99] MAINPROCESS(6) func<start> fn_bsm_con_add_new_object( 
[100] MAINPROCESS(6) func &pair_num_total, 
[101] MAINPROCESS(6) func normal2 
[102] MAINPROCESS(6) func<end> ); 
[103] MAINPROCESS(6) func<start> fn_bsm_con_jdg_object_probability(normal2 
[104] MAINPROCESS(6) func<end> ); 
[105] MAINPROCESS(6) equal s4_g_pair_num pair_num_total;
[106] MAINPROCESS(6) func<start> memcpy (ast_g_normal, normal2, sizeof(NORMAL_BSM)*NORMAL_BUFFSIZE 
[107] MAINPROCESS(6) func<end> ); 
[108] MAINPROCESS(6) func<start> s4_t_pair_num_selected = select_target( 
[109] MAINPROCESS(6) func st_g_bsm_loop_data.as4_buf_pair_num[1], 
[110] MAINPROCESS(6) func (const NORMAL_BSM (*))target1, 
[111] MAINPROCESS(6) func &pair_num_current[1], 
[112] MAINPROCESS(6) func target2, 
[113] MAINPROCESS(6) func (const S4 (*))&pair_num_total, 
[114] MAINPROCESS(6) func (const NORMAL_BSM (*))normal2, 
[115] MAINPROCESS(6) func u1_a_alarming_flag 
[116] MAINPROCESS(6) func<end> ); 
[117] MAINPROCESS(6) equal u1_g_bsm_connect_target_num (U1)s4_t_pair_num_selected;
[118] MAINPROCESS(6) equal st_g_bsm_loop_data.as4_buf_pair_num[0] pair_num_total;
[119] MAINPROCESS(6) equal st_g_bsm_loop_data.as4_buf_pair_num[1] pair_num_current[1];
[120] MAINPROCESS(6) func<start> fn_move( 
[121] MAINPROCESS(6) func normal1, 
[122] MAINPROCESS(6) func normal2, 
[123] MAINPROCESS(6) func NORMAL_BUFFSIZE 
[124] MAINPROCESS(6) func<end> ); 
[125] MAINPROCESS(6) func<start> fn_move( 
[126] MAINPROCESS(6) func target1, 
[127] MAINPROCESS(6) func target2, 
[128] MAINPROCESS(6) func TARGET_BUFFSIZE 
[129] MAINPROCESS(6) func<end> ); 
[130] MAINPROCESS(6) func<start> fn_move(st_g_bsm_loop_data.ast_normal, normal1, NORMAL_BUFFSIZE 
[131] MAINPROCESS(6) func<end> ); 
[132] MAINPROCESS(6) func<start> fn_move(st_g_bsm_loop_data.ast_target, target1, TARGET_BUFFSIZE 
[133] MAINPROCESS(6) func<end> ); 
[134] MAINPROCESS(6) subproc SUBPROCESS(1) 
[135] SUBPROCESS(1) if<start> if( 
[136] SUBPROCESS(1) if st_g_bsm_loop_data.as4_buf_pair_num[1]==0 
[137] SUBPROCESS(1) if ) 
[138] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[139] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_passing[0] 0;
[140] SUBPROCESS(2) else<start> else 
[141] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[142] SUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_flg_passing[0] = s4_check_passing_car( 
[143] SUBSUBPROCESS(1) func (const NORMAL_BSM *)(&target1[0]), 
[144] SUBSUBPROCESS(1) func st_g_bsm_loop_data.as4_flg_passing[0] 
[145] SUBSUBPROCESS(1) func<end> ); 
[146] SUBPROCESS(3) if <start> if ( 
[147] SUBPROCESS(3) if  (fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[148] SUBPROCESS(3) if  ) 
[149] SUBPROCESS(3) if  &&  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0)) 
[150] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[151] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_passing[0] 0;
[152] MAINPROCESS(7) func<start> fn_send_to_can( 
[153] MAINPROCESS(7) func (const NORMAL_BSM (*))target1, 
[154] MAINPROCESS(7) func Tx_int, 
[155] MAINPROCESS(7) func Tx_float 
[156] MAINPROCESS(7) func<end> ); 
[157] MAINPROCESS(7) equal iRet st_g_bsm_loop_data.as4_buf_pair_num[1];
[158] MAINPROCESS(7) subproc SUBPROCESS(1) 
[159] SUBPROCESS(1) proc S4 as4_t_used_ID[TARGET_BUFFSIZE]; 
[160] SUBPROCESS(1) proc S4 s4_t_lp_target_num; 
[161] SUBPROCESS(1) proc S4 s4_t_lp_used_id; 
[162] SUBPROCESS(1) for<start> for( 
[163] SUBPROCESS(1) for s4_t_lp_target_num=0; 
[164] SUBPROCESS(1) for s4_t_lp_target_num<TARGET_BUFFSIZE; 
[165] SUBPROCESS(1) for s4_t_lp_target_num++) 
[166] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[167] SUBSUBPROCESS(1) equal as4_t_used_ID[s4_t_lp_target_num] 0;
[168] SUBPROCESS(2) for<start> for( 
[169] SUBPROCESS(2) for s4_t_lp_target_num=0; 
[170] SUBPROCESS(2) for s4_t_lp_target_num<TARGET_BUFFSIZE; 
[171] SUBPROCESS(2) for s4_t_lp_target_num++) 
[172] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[173] SUBSUBPROCESS(1) if <start> if ( 
[174] SUBSUBPROCESS(1) if  (Tx_int[s4_t_lp_target_num][11] != 0 
[175] SUBSUBPROCESS(1) if  ) 
[176] SUBSUBPROCESS(1) if  &&  (Tx_float[s4_t_lp_target_num][7] != CFL_UNKNOWN_VALUE) 
[177] SUBSUBPROCESS(1) if  &&  (Tx_float[s4_t_lp_target_num][8] != CFL_UNKNOWN_VALUE)) 
[178] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[179] SUBSUBSUBPROCESS(1) equal as4_t_used_ID[Tx_int[s4_t_lp_target_num][11]-1] 1;
[180] SUBPROCESS(3) for<start> for( 
[181] SUBPROCESS(3) for s4_t_lp_target_num=0; 
[182] SUBPROCESS(3) for s4_t_lp_target_num<TARGET_BUFFSIZE; 
[183] SUBPROCESS(3) for s4_t_lp_target_num++) 
[184] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[185] SUBSUBPROCESS(1) if <start> if ( 
[186] SUBSUBPROCESS(1) if  (Tx_int[s4_t_lp_target_num][11] == 0 
[187] SUBSUBPROCESS(1) if  ) 
[188] SUBSUBPROCESS(1) if  &&  (Tx_float[s4_t_lp_target_num][7] != CFL_UNKNOWN_VALUE) 
[189] SUBSUBPROCESS(1) if  &&  (Tx_float[s4_t_lp_target_num][8] != CFL_UNKNOWN_VALUE)) 
[190] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[191] SUBSUBSUBPROCESS(1) for<start> for( 
[192] SUBSUBSUBPROCESS(1) for s4_t_lp_used_id=0; 
[193] SUBSUBSUBPROCESS(1) for s4_t_lp_used_id<TARGET_BUFFSIZE; 
[194] SUBSUBSUBPROCESS(1) for s4_t_lp_used_id++) 
[195] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[196] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[197] SUBSUBSUBSUBPROCESS(1) if as4_t_used_ID[s4_t_lp_used_id]==0 
[198] SUBSUBSUBSUBPROCESS(1) if ) 
[199] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[200] SUBSUBSUBSUBSUBPROCESS(1) equal Tx_int[s4_t_lp_target_num][11] s4_t_lp_used_id+1;
[201] SUBSUBSUBSUBSUBPROCESS(1) equal as4_t_used_ID[s4_t_lp_used_id] 1;
[202] SUBSUBSUBSUBSUBPROCESS(1) proc break; 
[203] MAINPROCESS(8) proc return iRet; 
----------------- Total Codes : 203 lines
--------------------------
[Function Name] : u1_check_long_truck 
-Return type : U1 
-Argument : 1 
     [0] : U1   u1_a_alarming_flg 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[3] MAINPROCESS(1) equal u1_t_jdg_truck_flg st_g_bsm_loop_data.u1_truck_flg;
[4] MAINPROCESS(1) if <start> if ( 
[5] MAINPROCESS(1) if  st_g_bsm_loop_data.as4_low_speed_flg[0] == (U1)0 
[6] MAINPROCESS(1) if  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  st_g_bsm_loop_data.u1_truck_flg != (U1)0 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) func<start> u1_t_jdg_truck_flg = u1_jdg_truck_on_to_off(u1_a_alarming_flg 
[13] SUBSUBPROCESS(1) func<end> ); 
[14] SUBPROCESS(2) else if <start> else if ( 
[15] SUBPROCESS(2) else if  (st_g_bsm_loop_data.as4_slow_sot_find[0] != (S4)0 
[16] SUBPROCESS(2) else if  ) 
[17] SUBPROCESS(2) else if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[1] < WALL_REJECT_TH3) 
[18] SUBPROCESS(2) else if  &&  (u1_a_alarming_flg == (U1)1)) 
[19] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) func<start> u1_t_jdg_truck_flg = u1_jdg_truck_off_to_on( 
[21] SUBSUBPROCESS(1) func<end> ); 
[22] SUBPROCESS(3) else<start> else 
[23] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[24] MAINPROCESS(2) else<start> else 
[25] MAINPROCESS(2) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[27] MAINPROCESS(3) proc return u1_t_jdg_truck_flg; 
----------------- Total Codes : 27 lines
--------------------------
[Function Name] : u1_jdg_truck_on_to_off 
-Return type : U1 
-Argument : 1 
     [0] : U1   u1_a_alarming_flg 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS(1) proc U2 u2_t_lp_fft_data; 
[3] MAINPROCESS(1) proc U1 u1_t_count_up; 
[4] MAINPROCESS(1) proc U4 u4_t_count_up2; 
[5] MAINPROCESS(1) equal u4_t_count_up2 (U4)0;
[6] MAINPROCESS(1) equal u1_t_jdg_truck_flg (U1)1;
[7] MAINPROCESS(1) equal u1_t_count_up (U1)0;
[8] MAINPROCESS(1) for <start> for ( 
[9] MAINPROCESS(1) for  u2_t_lp_fft_data = CU2_TRUCK_BIN_START_OFF; 
[10] MAINPROCESS(1) for  u2_t_lp_fft_data < CU2_TRUCK_BIN_END_OFF; 
[11] MAINPROCESS(1) for  u2_t_lp_fft_data++) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if <start> if ( 
[14] SUBPROCESS(1) if  afl_g_cvw_lfm_ftt_power[0][u2_t_lp_fft_data] < CFL_TRUCK_POW_TH_OFF 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) proc u1_t_count_up++; 
[18] MAINPROCESS(2) if <start> if ( 
[19] MAINPROCESS(2) if  u1_t_count_up > CU2_TRUCK_CNT_TH_OFF 
[20] MAINPROCESS(2) if  ) 
[21] MAINPROCESS(2) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[23] MAINPROCESS(3) else if <start> else if ( 
[24] MAINPROCESS(3) else if  (st_g_bsm_loop_data.as4_slow_sot_find[0] == (S4)0 
[25] MAINPROCESS(3) else if  ) 
[26] MAINPROCESS(3) else if  &&  (u1_a_alarming_flg == (S4)0)) 
[27] MAINPROCESS(3) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[29] MAINPROCESS(4) else<start> else 
[30] MAINPROCESS(4) subproc SUBPROCESS(1) 
[31] MAINPROCESS(5) for <start> for ( 
[32] MAINPROCESS(5) for  u2_t_lp_fft_data = (U2)TRUCK_BIN_START; 
[33] MAINPROCESS(5) for  u2_t_lp_fft_data < CU2_TRUCK_BIN_START_OFF; 
[34] MAINPROCESS(5) for  u2_t_lp_fft_data++) 
[35] MAINPROCESS(5) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) if <start> if ( 
[37] SUBPROCESS(1) if  afl_g_cvw_lfm_ftt_power[1][u2_t_lp_fft_data] < (FL)55.0F 
[38] SUBPROCESS(1) if  ) 
[39] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[40] SUBSUBPROCESS(1) proc u4_t_count_up2++; 
[41] MAINPROCESS(6) if <start> if ( 
[42] MAINPROCESS(6) if  (u1_t_count_up > CU2_TRUCK_CNT_TH_OFF 
[43] MAINPROCESS(6) if  ) 
[44] MAINPROCESS(6) if  ||  (u4_t_count_up2 > (U4)8)) 
[45] MAINPROCESS(6) subproc SUBPROCESS(1) 
[46] SUBPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[47] MAINPROCESS(7) else if <start> else if ( 
[48] MAINPROCESS(7) else if  (st_g_bsm_loop_data.as4_slow_sot_find[0] == (S4)0 
[49] MAINPROCESS(7) else if  ) 
[50] MAINPROCESS(7) else if  &&  (u1_a_alarming_flg == (S4)0)) 
[51] MAINPROCESS(7) subproc SUBPROCESS(1) 
[52] SUBPROCESS(1) if<start> if( 
[53] SUBPROCESS(1) if u1_jdg_truck_off_to_on()==(U1)0 
[54] SUBPROCESS(1) if ) 
[55] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[56] SUBSUBPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[57] MAINPROCESS(8) else<start> else 
[58] MAINPROCESS(8) subproc SUBPROCESS(1) 
[59] MAINPROCESS(9) proc return u1_t_jdg_truck_flg; 
----------------- Total Codes : 59 lines
--------------------------
[Function Name] : u1_jdg_truck_off_to_on 
-Return type : U1 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS(1) proc U2 u2_t_lp_fft_data; 
[3] MAINPROCESS(1) proc U1 u1_t_count_up; 
[4] MAINPROCESS(1) proc U1 u1_t_count_dn; 
[5] MAINPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[6] MAINPROCESS(1) equal u1_t_count_up (U1)0;
[7] MAINPROCESS(1) equal u1_t_count_dn (U1)0;
[8] MAINPROCESS(1) for <start> for ( 
[9] MAINPROCESS(1) for  u2_t_lp_fft_data = TRUCK_BIN_START; 
[10] MAINPROCESS(1) for  u2_t_lp_fft_data < TRUCK_BIN_END; 
[11] MAINPROCESS(1) for  u2_t_lp_fft_data++) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if <start> if ( 
[14] SUBPROCESS(1) if  afl_g_cvw_lfm_ftt_power[0][u2_t_lp_fft_data] > TRUCK_POW_TH 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) proc u1_t_count_up++; 
[18] SUBPROCESS(2) if <start> if ( 
[19] SUBPROCESS(2) if  afl_g_cvw_lfm_ftt_power[1][u2_t_lp_fft_data] > TRUCK_POW_TH 
[20] SUBPROCESS(2) if  ) 
[21] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[22] SUBSUBPROCESS(1) proc u1_t_count_dn++; 
[23] MAINPROCESS(2) equal u1_t_jdg_truck_flg (U1)0;
[24] MAINPROCESS(2) proc return u1_t_jdg_truck_flg; 
----------------- Total Codes : 24 lines
--------------------------
[Function Name] : fn_bsm_con_check_passing_pre 
-Return type : static VD 
-Argument : 1 
     [0] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<st_g_bsm_loop_data.as4_buf_pair_num[1]; 
[5] MAINPROCESS(1) for i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if <start> if ( 
[8] SUBPROCESS(1) if  ((ast_a_target_prev[i].s4_flg_heiso_up == 1 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) if  &&   (ast_a_target_prev[i].s4_flg_heiso_dn == 1)) 
[11] SUBPROCESS(1) if  ||  ((ast_a_target_prev[i].fl_Rxfil < (ALARM_X_OUT          + ALARM_X_OFFSET_OUT)) 
[12] SUBPROCESS(1) if  &&   (ast_a_target_prev[i].fl_Rxfil > (ALARM_X_IN           + ALARM_X_OFFSET_IN)) 
[13] SUBPROCESS(1) if  &&   (ast_a_target_prev[i].fl_Ryfil < (ALARM_Y_FORWARD)) 
[14] SUBPROCESS(1) if  &&   (ast_a_target_prev[i].fl_Ryfil > (CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET))) 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_passing[0] + (S4)1;
[18] MAINPROCESS(2) if <start> if ( 
[19] MAINPROCESS(2) if  (fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[20] MAINPROCESS(2) if  ) 
[21] MAINPROCESS(2) if  &&  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0)) 
[22] MAINPROCESS(2) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_passing[0] 0;
----------------- Total Codes : 23 lines
--------------------------
[Function Name] : fn_bsm_con_integ_object 
-Return type : static VD 
-Argument : 10 
     [0] : S4   s4_a_pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   s4_a_pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   s4_a_pair_num_sot 
     [7] : NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   *ps4_a_pair_num_total 
     [9] : NORMAL_BSM   ast_a_normal2[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_bsm_con_check_prior_ordinary(&s4_a_pair_num_prior, ast_a_normal_prior, &s4_a_pair_num_ordinary, ast_a_normal_ordinary 
[2] MAINPROCESS(1) func<end> ); 
[3] MAINPROCESS(1) func<start> fn_bsm_con_copy_ordinay_to_sot( 
[4] MAINPROCESS(1) func s4_a_pair_num_ordinary, 
[5] MAINPROCESS(1) func (const NORMAL_BSM (*))ast_a_normal_ordinary, 
[6] MAINPROCESS(1) func s4_a_pair_num_sot, 
[7] MAINPROCESS(1) func ast_a_normal_sot 
[8] MAINPROCESS(1) func<end> ); 
[9] MAINPROCESS(1) func<start> fn_bsm_con_add_object_to_normal2( 
[10] MAINPROCESS(1) func s4_a_pair_num_prior, 
[11] MAINPROCESS(1) func (const NORMAL_BSM (*))ast_a_normal_prior, 
[12] MAINPROCESS(1) func s4_a_pair_num_ordinary, 
[13] MAINPROCESS(1) func (const NORMAL_BSM (*))ast_a_normal_ordinary, 
[14] MAINPROCESS(1) func s4_a_pair_num_2f, 
[15] MAINPROCESS(1) func ast_a_normal_2f, 
[16] MAINPROCESS(1) func s4_a_pair_num_sot, 
[17] MAINPROCESS(1) func (const NORMAL_BSM (*))ast_a_normal_sot, 
[18] MAINPROCESS(1) func ps4_a_pair_num_total, 
[19] MAINPROCESS(1) func ast_a_normal2 
[20] MAINPROCESS(1) func<end> ); 
----------------- Total Codes : 20 lines
--------------------------
[Function Name] : fn_bsm_con_check_prior_ordinary 
-Return type : static VD 
-Argument : 4 
     [0] : S4   *ps4_a_pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   *ps4_a_pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_num_ordi; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_num_prior; 
[3] MAINPROCESS(1) for <start> for ( 
[4] MAINPROCESS(1) for  s4_t_lp_num_ordi = (S4)0; 
[5] MAINPROCESS(1) for  s4_t_lp_num_ordi < *ps4_a_pair_num_ordinary; 
[6] MAINPROCESS(1) for  s4_t_lp_num_ordi++) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) for <start> for ( 
[13] SUBSUBPROCESS(1) for  s4_t_lp_num_prior = (S4)0; 
[14] SUBSUBPROCESS(1) for  s4_t_lp_num_prior < *ps4_a_pair_num_prior; 
[15] SUBSUBPROCESS(1) for  s4_t_lp_num_prior++) 
[16] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[17] SUBSUBSUBPROCESS(1) if <start> if ( 
[18] SUBSUBSUBPROCESS(1) if  ast_a_normal_prior[s4_t_lp_num_prior].fl_Robs != CFL_UNKNOWN_VALUE 
[19] SUBSUBSUBPROCESS(1) if  ) 
[20] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[21] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[22] SUBSUBSUBSUBPROCESS(1) if  ((ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_up       == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_up 
[23] SUBSUBSUBSUBPROCESS(1) if  ) 
[24] SUBSUBSUBSUBPROCESS(1) if  &&   (ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_up_music == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_up_music)) 
[25] SUBSUBSUBSUBPROCESS(1) if  ||  ((ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_dn       == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_dn) 
[26] SUBSUBSUBSUBPROCESS(1) if  &&   (ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_dn_music == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_dn_music))) 
[27] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[29] SUBSUBSUBSUBSUBPROCESS(1) if  fl_abs(ast_a_normal_prior[s4_t_lp_num_prior].fl_power_up_music - ast_a_normal_prior[s4_t_lp_num_prior].fl_power_dn_music) > 
[30] SUBSUBSUBSUBSUBPROCESS(1) if  fl_abs(ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_power_up_music - ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_power_dn_music)) 
[31] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[32] SUBSUBSUBSUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_prior[s4_t_lp_num_prior], (S4)1 
[33] SUBSUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[34] SUBSUBSUBSUBSUBPROCESS(2) else<start> else 
[35] SUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[36] SUBSUBSUBSUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_ordinary[s4_t_lp_num_ordi], (S4)1 
[37] SUBSUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[38] MAINPROCESS(2) proc return; 
----------------- Total Codes : 38 lines
--------------------------
[Function Name] : fn_bsm_con_copy_ordinay_to_sot 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_ordinary 
     [1] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_sot 
     [3] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 tmp_sot_others_index; 
[2] MAINPROCESS(1) func<start> tmp_sot_others_index = s4_bsm_con_check_near_ordinary( 
[3] MAINPROCESS(1) func s4_a_pair_num_ordinary, 
[4] MAINPROCESS(1) func ast_a_normal_ordinary, 
[5] MAINPROCESS(1) func s4_a_pair_num_sot, 
[6] MAINPROCESS(1) func (const NORMAL_BSM (*))ast_a_normal_sot 
[7] MAINPROCESS(1) func<end> ); 
[8] MAINPROCESS(1) if<start> if( 
[9] MAINPROCESS(1) if tmp_sot_others_index!=-1 
[10] MAINPROCESS(1) if ) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) func<start> fn_bsm_con_add_sot_object_to_normal2( 
[13] SUBPROCESS(1) func &ast_a_normal_ordinary[tmp_sot_others_index], 
[14] SUBPROCESS(1) func s4_a_pair_num_sot, 
[15] SUBPROCESS(1) func ast_a_normal_sot 
[16] SUBPROCESS(1) func<end> ); 
[17] MAINPROCESS(2) proc return; 
----------------- Total Codes : 17 lines
--------------------------
[Function Name] : s4_bsm_con_check_near_ordinary 
-Return type : static S4 
-Argument : 4 
     [0] : S4   s4_a_pair_num_ordinary 
     [1] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_sot 
     [3] : const NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) func<start> FL tmp_sot_others_diff_min = fl_abs(CFL_UNKNOWN_VALUE*2 
[3] MAINPROCESS(1) func<end> ); 
[4] MAINPROCESS(1) func<start> FL tmp_sot_truck_x_min = fl_abs(CFL_UNKNOWN_VALUE 
[5] MAINPROCESS(1) func<end> ); 
[6] MAINPROCESS(1) equal S4 tmp_sot_others_index -1;
[7] MAINPROCESS(1) for<start> for( 
[8] MAINPROCESS(1) for i=0; 
[9] MAINPROCESS(1) for i<s4_a_pair_num_ordinary; 
[10] MAINPROCESS(1) for i++) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if<start> if( 
[13] SUBPROCESS(1) if s4_a_pair_num_sot != 0 
[14] SUBPROCESS(1) if ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) if <start> if ( 
[17] SUBSUBPROCESS(1) if  ((fl_abs(ast_a_normal_sot[0].fl_Rxfil - ast_a_normal_ordinary[i].fl_Rxobs)) < 2.5F 
[18] SUBSUBPROCESS(1) if  ) 
[19] SUBSUBPROCESS(1) if  &&  ((fl_abs(ast_a_normal_sot[0].fl_Ryfil - ast_a_normal_ordinary[i].fl_Ryobs)) < 0.5F) 
[20] SUBSUBPROCESS(1) if  &&  (ast_a_normal_sot[0].fl_Rxfil > ast_a_normal_ordinary[i].fl_Rxobs) 
[21] SUBSUBPROCESS(1) if  &&  (tmp_sot_others_diff_min > (fl_abs(ast_a_normal_sot[0].fl_Rxfil - ast_a_normal_ordinary[i].fl_Rxobs) +  fl_abs(ast_a_normal_sot[0].fl_Ryfil - ast_a_normal_ordinary[i].fl_Ryobs)))) 
[22] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBPROCESS(1) func<start> tmp_sot_others_diff_min = fl_abs(ast_a_normal_sot[0].fl_Rxfil-ast_a_normal_ordinary[i].fl_Rxobs) +fl_abs(ast_a_normal_sot[0].fl_Ryfil-ast_a_normal_ordinary[i].fl_Ryobs 
[24] SUBSUBSUBPROCESS(1) func<end> ); 
[25] SUBSUBSUBPROCESS(1) equal tmp_sot_others_index i;
[26] SUBPROCESS(2) else if <start> else if ( 
[27] SUBPROCESS(2) else if  (st_g_bsm_loop_data.u1_truck_flg != 0 
[28] SUBPROCESS(2) else if  ) 
[29] SUBPROCESS(2) else if  &&  (st_g_bsm_loop_data.as4_flg_passing[0] > 0) 
[30] SUBPROCESS(2) else if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[0] != 0)) 
[31] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) if <start> if ( 
[33] SUBSUBPROCESS(1) if  (fl_abs(ast_a_normal_ordinary[i].fl_Ryobs) < 0.5F 
[34] SUBSUBPROCESS(1) if  ) 
[35] SUBSUBPROCESS(1) if  &&  (ast_a_normal_ordinary[i].fl_Rxobs < st_g_bsm_loop_data.afl_wall_width[0]) 
[36] SUBSUBPROCESS(1) if  &&  (tmp_sot_truck_x_min > fl_abs(ast_a_normal_ordinary[i].fl_Rxobs))) 
[37] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBPROCESS(1) func<start> tmp_sot_truck_x_min = fl_abs(ast_a_normal_ordinary[i].fl_Rxobs 
[39] SUBSUBSUBPROCESS(1) func<end> ); 
[40] SUBSUBSUBPROCESS(1) equal tmp_sot_others_index i;
[41] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_leading[0] 1;
[42] SUBPROCESS(3) else<start> else 
[43] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[44] SUBPROCESS(4) if <start> if ( 
[45] SUBPROCESS(4) if  (st_g_bsm_loop_data.as4_low_speed_flg[0] == 1 
[46] SUBPROCESS(4) if  ) 
[47] SUBPROCESS(4) if  &&  (st_g_bsm_loop_data.u1_flg_heisou_car == (U1)0)) 
[48] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[49] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_leading[0] 0;
[50] SUBPROCESS(5) if <start> if ( 
[51] SUBPROCESS(5) if  (fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[52] SUBPROCESS(5) if  ) 
[53] SUBPROCESS(5) if  &&  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0)) 
[54] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[55] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_leading[0] 0;
[56] MAINPROCESS(2) proc return tmp_sot_others_index; 
----------------- Total Codes : 56 lines
--------------------------
[Function Name] : fn_bsm_con_add_sot_object_to_normal2 
-Return type : static VD 
-Argument : 3 
     [0] : const NORMAL_BSM   *pst_a_normal_ordinary 
     [1] : S4   s4_a_pair_num_sot 
     [2] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 tmptmp_passing_flg[1]; 
[2] MAINPROCESS(1) proc S4 tmptmp_leading_flg[1]; 
[3] MAINPROCESS(1) equal S4 tmptmp_erased_num 0;
[4] MAINPROCESS(1) equal tmptmp_passing_flg[0] (S4)0;
[5] MAINPROCESS(1) equal tmptmp_leading_flg[0] (S4)0;
[6] MAINPROCESS(1) func<start> copy_normal_data( pst_a_normal_ordinary, &ast_a_normal_sot[0], 1 
[7] MAINPROCESS(1) func<end> ); 
[8] MAINPROCESS(1) equal ast_a_normal_sot[0].s4_flg_heiso_up 1;
[9] MAINPROCESS(1) equal ast_a_normal_sot[0].s4_flg_heiso_dn 1;
[10] MAINPROCESS(1) equal ast_a_normal_sot[0].s4_flg_dc OBJECT_TYPE_SOT;
[11] MAINPROCESS(1) func<start> tmptmp_erased_num = s4_start_prediction( 
[12] MAINPROCESS(1) func ast_a_normal_sot, 
[13] MAINPROCESS(1) func 1, 
[14] MAINPROCESS(1) func 1, 
[15] MAINPROCESS(1) func (const S4 (*))tmptmp_passing_flg, 
[16] MAINPROCESS(1) func (const S4 (*))tmptmp_leading_flg 
[17] MAINPROCESS(1) func<end> ); 
[18] MAINPROCESS(1) if<start> if( 
[19] MAINPROCESS(1) if tmptmp_erased_num==1 
[20] MAINPROCESS(1) if ) 
[21] MAINPROCESS(1) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) func<start> fn_init(&ast_a_normal_sot[0], 1 
[23] SUBPROCESS(1) func<end> ); 
[24] MAINPROCESS(2) else<start> else 
[25] MAINPROCESS(2) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal ast_a_normal_sot[0].s4_flg_new 1;
[27] SUBPROCESS(1) func<start> ast_a_normal_sot[0].s4_flg_track = (S4)(PRIOR_TRK_NUM+1 
[28] SUBPROCESS(1) func<end> ); 
[29] MAINPROCESS(3) func<start> s4_copy_prediction_to_filtered_data( 
[30] MAINPROCESS(3) func ast_a_normal_sot, 
[31] MAINPROCESS(3) func 1 
[32] MAINPROCESS(3) func<end> ); 
[33] MAINPROCESS(3) proc return; 
----------------- Total Codes : 33 lines
--------------------------
[Function Name] : fn_bsm_con_add_object_to_normal2 
-Return type : static VD 
-Argument : 10 
     [0] : S4   s4_a_pair_num_prior 
     [1] : const NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_ordinary 
     [3] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   s4_a_pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   s4_a_pair_num_sot 
     [7] : const NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   *ps4_a_pair_num_total 
     [9] : NORMAL_BSM   ast_a_normal2[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal S4 index 0;
[3] MAINPROCESS(1) if <start> if ( 
[4] MAINPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] != 0 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) if  &&  (ast_a_normal_sot[0].s4_bin_up != 0) 
[7] MAINPROCESS(1) if  &&  (ast_a_normal_sot[0].s4_bin_dn != 0)) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) equal ast_a_normal2[index] ast_a_normal_sot[0];
[10] SUBPROCESS(1) proc index++; 
[11] MAINPROCESS(2) for<start> for( 
[12] MAINPROCESS(2) for i=0; 
[13] MAINPROCESS(2) for i<s4_a_pair_num_prior; 
[14] MAINPROCESS(2) for i++) 
[15] MAINPROCESS(2) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) if<start> if( 
[17] SUBPROCESS(1) if index>(S4)(NORMAL_BUFFSIZE-1) 
[18] SUBPROCESS(1) if ) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) proc break; 
[21] SUBPROCESS(2) equal ast_a_normal2[index] ast_a_normal_prior[i];
[22] SUBPROCESS(2) proc index++; 
[23] MAINPROCESS(3) for<start> for( 
[24] MAINPROCESS(3) for i=0; 
[25] MAINPROCESS(3) for i<s4_a_pair_num_ordinary; 
[26] MAINPROCESS(3) for i++) 
[27] MAINPROCESS(3) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) if<start> if( 
[29] SUBPROCESS(1) if index>(S4)(NORMAL_BUFFSIZE-1) 
[30] SUBPROCESS(1) if ) 
[31] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) proc break; 
[33] SUBPROCESS(2) equal ast_a_normal2[index] ast_a_normal_ordinary[i];
[34] SUBPROCESS(2) proc index++; 
[35] MAINPROCESS(4) for<start> for( 
[36] MAINPROCESS(4) for i=0; 
[37] MAINPROCESS(4) for i<s4_a_pair_num_2f; 
[38] MAINPROCESS(4) for i++) 
[39] MAINPROCESS(4) subproc SUBPROCESS(1) 
[40] SUBPROCESS(1) if<start> if( 
[41] SUBPROCESS(1) if index>(S4)(NORMAL_BUFFSIZE-1) 
[42] SUBPROCESS(1) if ) 
[43] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[44] SUBSUBPROCESS(1) proc break; 
[45] SUBPROCESS(2) equal ast_a_normal2[index] ast_a_normal_2f[i];
[46] SUBPROCESS(2) proc index++; 
[47] MAINPROCESS(5) proc return; 
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fn_bsm_con_tracking 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_pair_num_connected 
     [1] : const S4   *ps4_pair_connect_prev 
     [2] : const S4   *ps4_pair_connect_current 
     [3] : S4   s4_a_pair_num_normal1 
     [4] : NORMAL_BSM   *pst_a_normal1 
     [5] : S4   s4_a_pair_num_total 
     [6] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i = 0; 
[4] MAINPROCESS(1) for i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal pst_a_normal1[i].s4_flg_used 0;
[8] SUBPROCESS(1) equal pst_a_normal1[i].s4_tracked 0;
[9] MAINPROCESS(2) for<start> for( 
[10] MAINPROCESS(2) for i = 0; 
[11] MAINPROCESS(2) for i < s4_a_pair_num_total; 
[12] MAINPROCESS(2) for i++ ) 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal pst_a_normal2[i].s4_flg_used 0;
[15] SUBPROCESS(1) equal pst_a_normal2[i].s4_tracked 0;
[16] MAINPROCESS(3) if <start> if ( 
[17] MAINPROCESS(3) if  (s4_a_pair_num_connected > 0 
[18] MAINPROCESS(3) if  ) 
[19] MAINPROCESS(3) if  &&  (st_g_bsm_loop_data.as4_buf_pair_num[0] > 0)) 
[20] MAINPROCESS(3) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) func<start> prediction_with_connected_data( 
[22] SUBPROCESS(1) func pst_a_normal1, 
[23] SUBPROCESS(1) func pst_a_normal2, 
[24] SUBPROCESS(1) func ps4_pair_connect_prev, 
[25] SUBPROCESS(1) func ps4_pair_connect_current, 
[26] SUBPROCESS(1) func s4_a_pair_num_connected 
[27] SUBPROCESS(1) func<end> ); 
[28] MAINPROCESS(4) proc return; 
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : fn_bsm_con_add_new_object 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num_total 
     [1] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 s4_t_pair_num_erased; 
[3] MAINPROCESS(1) func<start> s4_t_pair_num_erased = s4_start_prediction( 
[4] MAINPROCESS(1) func pst_a_normal2, *ps4_a_pair_num_total, 
[5] MAINPROCESS(1) func NORMAL_BUFFSIZE, 
[6] MAINPROCESS(1) func (const S4 (*))st_g_bsm_loop_data.as4_flg_passing, 
[7] MAINPROCESS(1) func (const S4 (*))st_g_bsm_loop_data.as4_flg_leading 
[8] MAINPROCESS(1) func<end> ); 
[9] MAINPROCESS(1) equal *ps4_a_pair_num_total *ps4_a_pair_num_total - s4_t_pair_num_erased;
[10] MAINPROCESS(1) for<start> for( 
[11] MAINPROCESS(1) for i=0; 
[12] MAINPROCESS(1) for i<NORMAL_BUFFSIZE; 
[13] MAINPROCESS(1) for i++) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) if <start> if ( 
[16] SUBPROCESS(1) if  (pst_a_normal2[i].s4_bin_up_pred > NB_FFT_PT 
[17] SUBPROCESS(1) if  ) 
[18] SUBPROCESS(1) if  ||  (pst_a_normal2[i].s4_bin_dn_pred > NB_FFT_PT)) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) func<start> fn_init(&pst_a_normal2[i], 1 
[21] SUBSUBPROCESS(1) func<end> ); 
[22] SUBSUBPROCESS(1) proc (*ps4_a_pair_num_total)--; 
[23] MAINPROCESS(2) func<start> fn_bsm_con_pack_object( 
[24] MAINPROCESS(2) func ps4_a_pair_num_total, 
[25] MAINPROCESS(2) func pst_a_normal2 
[26] MAINPROCESS(2) func<end> ); 
[27] MAINPROCESS(2) proc return; 
----------------- Total Codes : 27 lines
--------------------------
[Function Name] : fn_bsm_con_pack_object 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num_total 
     [1] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s2_t_in[NORMAL_BUFFSIZE]; 
[2] MAINPROCESS(1) proc S4 s2_t_loop; 
[3] MAINPROCESS(1) proc S4 s2_t_num; 
[4] MAINPROCESS(1) equal s2_t_num 0;
[5] MAINPROCESS(1) for <start> for ( 
[6] MAINPROCESS(1) for  s2_t_loop = 0; 
[7] MAINPROCESS(1) for  s2_t_loop < NORMAL_BUFFSIZE; 
[8] MAINPROCESS(1) for  s2_t_loop++) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if <start> if ( 
[11] SUBPROCESS(1) if  pst_a_normal2[s2_t_loop].fl_Robs != CFL_UNKNOWN_VALUE 
[12] SUBPROCESS(1) if  ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) equal s2_t_in[s2_t_num] s2_t_loop;
[15] SUBSUBPROCESS(1) proc s2_t_num++; 
[16] MAINPROCESS(2) if <start> if ( 
[17] MAINPROCESS(2) if  s2_t_num > 0 
[18] MAINPROCESS(2) if  ) 
[19] MAINPROCESS(2) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) for <start> for ( 
[21] SUBPROCESS(1) for  s2_t_loop = 0; 
[22] SUBPROCESS(1) for  s2_t_loop < s2_t_num; 
[23] SUBPROCESS(1) for  s2_t_loop++) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(1) equal pst_a_normal2[s2_t_loop] pst_a_normal2[s2_t_in[s2_t_loop]];
[26] SUBPROCESS(2) for <start> for ( 
[27] SUBPROCESS(2) for  s2_t_loop = s2_t_num; 
[28] SUBPROCESS(2) for  s2_t_loop < NORMAL_BUFFSIZE; 
[29] SUBPROCESS(2) for  s2_t_loop++) 
[30] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) func<start> fn_init(&pst_a_normal2[s2_t_loop], 1 
[32] SUBSUBPROCESS(1) func<end> ); 
[33] MAINPROCESS(3) func pst_a_normal2, 
[34] MAINPROCESS(3) func NORMAL_BUFFSIZE 
[35] MAINPROCESS(3) func<end> ); 
[36] MAINPROCESS(3) proc return; 
----------------- Total Codes : 36 lines
--------------------------
[Function Name] : fn_bsm_con_jdg_object_probability 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM*   past_a_normal2 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_lp_num_normal; 
[2] MAINPROCESS(1) proc U1 u1_t_lp_num_normal2; 
[3] MAINPROCESS(1) proc FL fl_t_power_bin; 
[4] MAINPROCESS(1) proc FL fl_t_power_doa; 
[5] MAINPROCESS(1) proc U1 u1_t_num_around; 
[6] MAINPROCESS(1) proc U1 u1_t_jdg_m2_flg; 
[7] MAINPROCESS(1) proc U1 u1_t_jdg_m8_flg; 
[8] MAINPROCESS(1) for <start> for ( 
[9] MAINPROCESS(1) for  u1_t_lp_num_normal = (U1)0; 
[10] MAINPROCESS(1) for  u1_t_lp_num_normal < NORMAL_BUFFSIZE; 
[11] MAINPROCESS(1) for  u1_t_lp_num_normal ++) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if <start> if ( 
[14] SUBPROCESS(1) if  past_a_normal2[u1_t_lp_num_normal].fl_Robs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) func<start> u1_t_jdg_m2_flg = u1_bsm_con_jdg_obj_probability_m2(past_a_normal2[u1_t_lp_num_normal].fl_Ryfil 
[18] SUBSUBPROCESS(1) func<end> ); 
[19] SUBSUBPROCESS(1) if <start> if ( 
[20] SUBSUBPROCESS(1) if  (u1_t_jdg_m2_flg == CU1_TRUE 
[21] SUBSUBPROCESS(1) if  ) 
[22] SUBSUBPROCESS(1) if  &&  ((past_a_normal2[u1_t_lp_num_normal].fl_Ryfil + past_a_normal2[u1_t_lp_num_normal].fl_Vyfil) >= ((CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET) - (FL)3.0F)) 
[23] SUBSUBPROCESS(1) if  &&	(past_a_normal2[u1_t_lp_num_normal].s4_flg_dc != OBJECT_TYPE_SOT)) 
[24] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[25] SUBSUBSUBPROCESS(1) func<start> fl_t_power_bin = (FL)0.5F * (past_a_normal2[u1_t_lp_num_normal].fl_power_up + past_a_normal2[u1_t_lp_num_normal].fl_power_dn 
[26] SUBSUBSUBPROCESS(1) func<end> ); 
[27] SUBSUBSUBPROCESS(1) func<start> fl_t_power_doa = (FL)0.5F * (past_a_normal2[u1_t_lp_num_normal].fl_power_up_music + past_a_normal2[u1_t_lp_num_normal].fl_power_dn_music 
[28] SUBSUBSUBPROCESS(1) func<end> ); 
[29] SUBSUBSUBPROCESS(1) func<start> u1_t_jdg_m8_flg = u1_bsm_con_jdg_obj_probability_m8(fl_t_power_doa 
[30] SUBSUBSUBPROCESS(1) func<end> ); 
[31] SUBSUBSUBPROCESS(1) if <start> if ( 
[32] SUBSUBSUBPROCESS(1) if  (fl_t_power_doa > (fl_t_power_bin - (FL)5.0F) 
[33] SUBSUBSUBPROCESS(1) if  ) 
[34] SUBSUBSUBPROCESS(1) if  ||	(u1_t_jdg_m8_flg == CU1_TRUE)) 
[35] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[36] SUBSUBSUBSUBPROCESS(1) equal past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable (S4)1;
[37] SUBSUBSUBPROCESS(2) if <start> if ( 
[38] SUBSUBSUBPROCESS(2) if  past_a_normal2[u1_t_lp_num_normal].s4_flg_lost >= (S4)5 
[39] SUBSUBSUBPROCESS(2) if  ) 
[40] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[41] SUBSUBSUBSUBPROCESS(1) equal past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable (S4)0;
[42] SUBSUBSUBPROCESS(3) if <start> if ( 
[43] SUBSUBSUBPROCESS(3) if  past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable == (S4)0 
[44] SUBSUBSUBPROCESS(3) if  ) 
[45] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[46] SUBSUBSUBSUBPROCESS(1) equal u1_t_num_around (U1)0;
[47] SUBSUBSUBSUBPROCESS(1) for <start> for ( 
[48] SUBSUBSUBSUBPROCESS(1) for  u1_t_lp_num_normal2 = (U1)0; 
[49] SUBSUBSUBSUBPROCESS(1) for  u1_t_lp_num_normal2 < NORMAL_BUFFSIZE; 
[50] SUBSUBSUBSUBPROCESS(1) for  u1_t_lp_num_normal2++) 
[51] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[52] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[53] SUBSUBSUBSUBSUBPROCESS(1) if  (u1_t_lp_num_normal != u1_t_lp_num_normal2 
[54] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[55] SUBSUBSUBSUBSUBPROCESS(1) if  &&	(fl_abs(past_a_normal2[u1_t_lp_num_normal].fl_Ryfil - past_a_normal2[u1_t_lp_num_normal2].fl_Ryfil) < (FL)2.0F) 
[56] SUBSUBSUBSUBSUBPROCESS(1) if  &&	(fl_abs(past_a_normal2[u1_t_lp_num_normal].fl_Rxfil - past_a_normal2[u1_t_lp_num_normal2].fl_Rxfil) < (FL)2.0F)) 
[57] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[58] SUBSUBSUBSUBSUBSUBPROCESS(1) proc u1_t_num_around++; 
[59] SUBSUBSUBSUBSUBPROCESS(2) if <start> if ( 
[60] SUBSUBSUBSUBSUBPROCESS(2) if  u1_t_num_around >= (U1)3 
[61] SUBSUBSUBSUBSUBPROCESS(2) if  ) 
[62] SUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBSUBSUBSUBPROCESS(1) equal past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable (S4)1;
[64] SUBSUBPROCESS(2) else<start> else 
[65] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[66] SUBSUBSUBPROCESS(1) equal past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable (S4)1;
[67] MAINPROCESS(2) proc return; 
----------------- Total Codes : 67 lines
--------------------------
[Function Name] : u1_bsm_con_jdg_obj_probability_m2 
-Return type : U1 
-Argument : 1 
     [0] : FL   fl_a_Ryfil 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_m2_flag; 
[2] MAINPROCESS(1) equal u1_t_jdg_m2_flag CU1_FALSE;
[3] MAINPROCESS(1) if <start> if ( 
[4] MAINPROCESS(1) if  fl_abs(fl_a_Ryfil) > EKF_RY_SIDE 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_m2_flag CU1_TRUE;
[8] MAINPROCESS(2) else<start> else 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal u1_t_jdg_m2_flag CU1_FALSE;
[11] MAINPROCESS(3) proc return u1_t_jdg_m2_flag; 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : u1_bsm_con_jdg_obj_probability_m8 
-Return type : U1 
-Argument : 1 
     [0] : FL   fl_a_power_doa 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_m8_flag; 
[2] MAINPROCESS(1) equal u1_t_jdg_m8_flag CU1_FALSE;
[3] MAINPROCESS(1) if <start> if ( 
[4] MAINPROCESS(1) if  fl_a_power_doa > (FL)50.0F 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_m8_flag CU1_TRUE;
[8] MAINPROCESS(2) else<start> else 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal u1_t_jdg_m8_flag CU1_FALSE;
[11] MAINPROCESS(3) proc return u1_t_jdg_m8_flag; 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : select_target 
-Return type : S4 
-Argument : 7 
     [0] : S4   target_num_prev 
     [1] : const NORMAL_BSM*   target_prev 
     [2] : S4*   target_num 
     [3] : NORMAL_BSM*   target_current 
     [4] : const S4*   normal_num 
     [5] : const NORMAL_BSM*   normal_current 
     [6] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc NORMAL_BSM copy_target_prev[TARGET_BUFFSIZE]; 
[3] MAINPROCESS(1) proc NORMAL_BSM copy_normal_current[NORMAL_BUFFSIZE]; 
[4] MAINPROCESS(1) proc NORMAL_BSM tmp_normal_buff[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS(1) proc S4 tmp_normal_num[1]; 
[6] MAINPROCESS(1) proc S4 tmp_target_num[1]; 
[7] MAINPROCESS(1) proc S4 object_num; 
[8] MAINPROCESS(1) proc S4 used_ID[TARGET_BUFFSIZE]; 
[9] MAINPROCESS(1) equal S4 tmptmp_target_num 0;
[10] MAINPROCESS(1) equal S4 wall_bin 270;
[11] MAINPROCESS(1) func<start> copy_normal_data(target_prev, copy_target_prev, TARGET_BUFFSIZE 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) func<start> copy_normal_data(normal_current, copy_normal_current, NORMAL_BUFFSIZE 
[14] MAINPROCESS(1) func<end> ); 
[15] MAINPROCESS(1) func<start> fn_init(tmp_normal_buff, NORMAL_BUFFSIZE 
[16] MAINPROCESS(1) func<end> ); 
[17] MAINPROCESS(1) for<start> for( 
[18] MAINPROCESS(1) for i=0; 
[19] MAINPROCESS(1) for i<TARGET_BUFFSIZE; 
[20] MAINPROCESS(1) for i++) 
[21] MAINPROCESS(1) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal copy_target_prev[i].s4_flg_used 0;
[23] SUBPROCESS(1) equal used_ID[i] 0;
[24] MAINPROCESS(2) equal tmp_normal_num[0] *normal_num;
[25] MAINPROCESS(2) equal tmp_target_num[0] 0;
[26] MAINPROCESS(2) func<start> fn_bsm_sel_exclude_object( 
[27] MAINPROCESS(2) func tmp_normal_num[0], 
[28] MAINPROCESS(2) func copy_normal_current, 
[29] MAINPROCESS(2) func target_num_prev, 
[30] MAINPROCESS(2) func (const NORMAL_BSM (*))copy_target_prev 
[31] MAINPROCESS(2) func<end> ); 
[32] MAINPROCESS(2) func<start> object_num = s4_bsm_sel_empty_buf_trimming( 
[33] MAINPROCESS(2) func copy_normal_current 
[34] MAINPROCESS(2) func<end> ); 
[35] MAINPROCESS(2) func<start> fn_sort_normal(copy_normal_current 
[36] MAINPROCESS(2) func<end> ); 
[37] MAINPROCESS(2) func<start> fn_sort_target(copy_target_prev 
[38] MAINPROCESS(2) func<end> ); 
[39] MAINPROCESS(2) equal tmp_target_num[0] 0;
[40] MAINPROCESS(2) equal wall_bin (S4)(st_g_bsm_loop_data.afl_wall_width[0]/RCOF*0.5F)+NB_FFT_PT/2 - 1;
[41] MAINPROCESS(2) func<start> fn_bsm_sel_connect_target( 
[42] MAINPROCESS(2) func object_num, 
[43] MAINPROCESS(2) func copy_normal_current, 
[44] MAINPROCESS(2) func target_num_prev, 
[45] MAINPROCESS(2) func copy_target_prev, 
[46] MAINPROCESS(2) func used_ID, 
[47] MAINPROCESS(2) func &tmp_target_num[0], 
[48] MAINPROCESS(2) func target_current 
[49] MAINPROCESS(2) func<end> ); 
[50] MAINPROCESS(2) equal tmptmp_target_num 0;
[51] MAINPROCESS(2) func<start> tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[52] MAINPROCESS(2) func target_current, 
[53] MAINPROCESS(2) func TARGET_BUFFSIZE 
[54] MAINPROCESS(2) func<end> ); 
[55] MAINPROCESS(2) equal tmp_target_num[0] tmptmp_target_num;
[56] MAINPROCESS(2) func<start> fn_bsm_sel_extrapolate_target( 
[57] MAINPROCESS(2) func target_num_prev, 
[58] MAINPROCESS(2) func copy_target_prev, 
[59] MAINPROCESS(2) func &tmp_target_num[0], 
[60] MAINPROCESS(2) func target_current, 
[61] MAINPROCESS(2) func used_ID 
[62] MAINPROCESS(2) func<end> ); 
[63] MAINPROCESS(2) func<start> tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[64] MAINPROCESS(2) func target_current, 
[65] MAINPROCESS(2) func TARGET_BUFFSIZE 
[66] MAINPROCESS(2) func<end> ); 
[67] MAINPROCESS(2) equal tmp_target_num[0] tmptmp_target_num;
[68] MAINPROCESS(2) func<start> fn_bsm_sel_add_target( 
[69] MAINPROCESS(2) func object_num, 
[70] MAINPROCESS(2) func copy_normal_current, 
[71] MAINPROCESS(2) func &tmp_target_num[0], 
[72] MAINPROCESS(2) func target_current, 
[73] MAINPROCESS(2) func used_ID 
[74] MAINPROCESS(2) func<end> ); 
[75] MAINPROCESS(2) func<start> tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[76] MAINPROCESS(2) func target_current, 
[77] MAINPROCESS(2) func TARGET_BUFFSIZE 
[78] MAINPROCESS(2) func<end> ); 
[79] MAINPROCESS(2) equal tmp_target_num[0] tmptmp_target_num;
[80] MAINPROCESS(2) func<start> tmp_target_num[0] = cluster_target( 
[81] MAINPROCESS(2) func tmp_target_num[0], 
[82] MAINPROCESS(2) func target_current, 
[83] MAINPROCESS(2) func used_ID 
[84] MAINPROCESS(2) func<end> ); 
[85] MAINPROCESS(2) func<start> fn_bsm_sel_exclude_target( 
[86] MAINPROCESS(2) func tmp_target_num[0], 
[87] MAINPROCESS(2) func target_current 
[88] MAINPROCESS(2) func<end> ); 
[89] MAINPROCESS(2) func<start> fn_bsm_sel_empty_buf_trgt_trimming( 
[90] MAINPROCESS(2) func &tmp_target_num[0], 
[91] MAINPROCESS(2) func target_current 
[92] MAINPROCESS(2) func<end> ); 
[93] MAINPROCESS(2) func<start> fn_bsm_sel_target_marking(tmp_target_num[0], target_current, u1_a_alarming_flag 
[94] MAINPROCESS(2) func<end> ); 
[95] MAINPROCESS(2) equal *target_num tmp_target_num[0];
[96] MAINPROCESS(2) equal object_num tmp_target_num[0];
[97] MAINPROCESS(2) proc return object_num; 
----------------- Total Codes : 97 lines
--------------------------
[Function Name] : fn_bsm_sel_exclude_object 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_bsm_sel_reset_stop_flg( 
[2] MAINPROCESS(1) func s4_a_pair_num_current, 
[3] MAINPROCESS(1) func ast_a_normal_current, 
[4] MAINPROCESS(1) func s4_a_target_num_prev, 
[5] MAINPROCESS(1) func ast_a_target_prev 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_same_peaks( 
[8] MAINPROCESS(1) func s4_a_pair_num_current, 
[9] MAINPROCESS(1) func ast_a_normal_current 
[10] MAINPROCESS(1) func<end> ); 
[11] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_stationary( 
[12] MAINPROCESS(1) func s4_a_pair_num_current, 
[13] MAINPROCESS(1) func ast_a_normal_current 
[14] MAINPROCESS(1) func<end> ); 
[15] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_around_mycar( 
[16] MAINPROCESS(1) func s4_a_pair_num_current, 
[17] MAINPROCESS(1) func ast_a_normal_current 
[18] MAINPROCESS(1) func<end> ); 
[19] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_outside_load( 
[20] MAINPROCESS(1) func s4_a_pair_num_current, 
[21] MAINPROCESS(1) func ast_a_normal_current 
[22] MAINPROCESS(1) func<end> ); 
[23] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_outside_to_fr( 
[24] MAINPROCESS(1) func s4_a_pair_num_current, 
[25] MAINPROCESS(1) func ast_a_normal_current 
[26] MAINPROCESS(1) func<end> ); 
[27] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_like_wall( 
[28] MAINPROCESS(1) func s4_a_pair_num_current, 
[29] MAINPROCESS(1) func ast_a_normal_current 
[30] MAINPROCESS(1) func<end> ); 
[31] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_stag_just_beside( 
[32] MAINPROCESS(1) func s4_a_pair_num_current, 
[33] MAINPROCESS(1) func ast_a_normal_current, 
[34] MAINPROCESS(1) func s4_a_target_num_prev, 
[35] MAINPROCESS(1) func ast_a_target_prev 
[36] MAINPROCESS(1) func<end> ); 
[37] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_outside( 
[38] MAINPROCESS(1) func s4_a_pair_num_current, 
[39] MAINPROCESS(1) func ast_a_normal_current, 
[40] MAINPROCESS(1) func s4_a_target_num_prev, 
[41] MAINPROCESS(1) func ast_a_target_prev 
[42] MAINPROCESS(1) func<end> ); 
[43] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_non_sot_obj( 
[44] MAINPROCESS(1) func s4_a_pair_num_current, 
[45] MAINPROCESS(1) func ast_a_normal_current 
[46] MAINPROCESS(1) func<end> ); 
[47] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_bumper_reflection( 
[48] MAINPROCESS(1) func s4_a_pair_num_current, 
[49] MAINPROCESS(1) func ast_a_normal_current 
[50] MAINPROCESS(1) func<end> ); 
[51] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_incor_trailer_obj( 
[52] MAINPROCESS(1) func s4_a_pair_num_current, 
[53] MAINPROCESS(1) func ast_a_normal_current 
[54] MAINPROCESS(1) func<end> ); 
[55] MAINPROCESS(1) proc return; 
----------------- Total Codes : 55 lines
--------------------------
[Function Name] : fn_bsm_sel_reset_stop_flg 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) for<start> for( 
[4] MAINPROCESS(1) for i=0; 
[5] MAINPROCESS(1) for i<s4_a_target_num_prev; 
[6] MAINPROCESS(1) for i++) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) for<start> for( 
[9] SUBPROCESS(1) for j=0; 
[10] SUBPROCESS(1) for j<s4_a_pair_num_current; 
[11] SUBPROCESS(1) for j++) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) if <start> if ( 
[14] SUBSUBPROCESS(1) if  (fl_abs(ast_a_target_prev[i].fl_Rxfil-ast_a_normal_current[j].fl_Rxfil) < RX_TH_TT 
[15] SUBSUBPROCESS(1) if  ) 
[16] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_target_prev[i].fl_Ryfil-ast_a_normal_current[j].fl_Ryfil) < RY_TH_TT)) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) equal ast_a_normal_current[j].s4_flg_stop 0;
[19] MAINPROCESS(2) proc return; 
----------------- Total Codes : 19 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_same_peaks 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) for<start> for( 
[4] MAINPROCESS(1) for i=0; 
[5] MAINPROCESS(1) for i<s4_a_pair_num_current; 
[6] MAINPROCESS(1) for i++ ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) for<start> for( 
[9] SUBPROCESS(1) for j=0; 
[10] SUBPROCESS(1) for j<s4_a_pair_num_current; 
[11] SUBPROCESS(1) for j++ ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) if <start> if ( 
[14] SUBSUBPROCESS(1) if  (i!= j 
[15] SUBSUBPROCESS(1) if  ) 
[16] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[17] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[j].fl_Robs != CFL_UNKNOWN_VALUE) 
[18] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_bin_up == ast_a_normal_current[j].s4_bin_up) 
[19] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_bin_dn == ast_a_normal_current[j].s4_bin_dn) 
[20] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_bin_up_music == ast_a_normal_current[j].s4_bin_up_music) 
[21] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_bin_dn_music == ast_a_normal_current[j].s4_bin_dn_music)) 
[22] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBPROCESS(1) if <start> if ( 
[24] SUBSUBSUBPROCESS(1) if  (ast_a_normal_current[i].s4_flg_dc != OBJECT_TYPE_PRIOR 
[25] SUBSUBSUBPROCESS(1) if  ) 
[26] SUBSUBSUBPROCESS(1) if  &&  (ast_a_normal_current[j].s4_flg_dc == OBJECT_TYPE_PRIOR)) 
[27] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[29] SUBSUBSUBSUBPROCESS(1) if  ast_a_normal_current[j].s4_flg_track > ast_a_normal_current[i].s4_flg_track 
[30] SUBSUBSUBSUBPROCESS(1) if  ) 
[31] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[32] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_normal_current[i].s4_flg_track ast_a_normal_current[j].s4_flg_track;
[33] SUBSUBSUBSUBPROCESS(2) func<start> fn_init( &ast_a_normal_current[j], 1 
[34] SUBSUBSUBSUBPROCESS(2) func<end> ); 
[35] SUBSUBSUBPROCESS(2) if <start> if ( 
[36] SUBSUBSUBPROCESS(2) if  (ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_PRIOR 
[37] SUBSUBSUBPROCESS(2) if  ) 
[38] SUBSUBSUBPROCESS(2) if  &&  (ast_a_normal_current[j].s4_flg_dc != OBJECT_TYPE_PRIOR)) 
[39] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[40] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[41] SUBSUBSUBSUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_track > ast_a_normal_current[j].s4_flg_track 
[42] SUBSUBSUBSUBPROCESS(1) if  ) 
[43] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_normal_current[j].s4_flg_track ast_a_normal_current[i].s4_flg_track;
[45] SUBSUBSUBSUBPROCESS(2) func<start> fn_init( &ast_a_normal_current[i], 1 
[46] SUBSUBSUBSUBPROCESS(2) func<end> ); 
[47] MAINPROCESS(2) proc return; 
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_stationary 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<s4_a_pair_num_current; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if<start> if( 
[8] SUBPROCESS(1) if ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if<start> if( 
[12] SUBSUBPROCESS(1) if ast_a_normal_current[i].s4_flg_stop ==1 
[13] SUBSUBPROCESS(1) if ) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[16] SUBSUBSUBPROCESS(1) func<end> ); 
[17] MAINPROCESS(2) proc return; 
----------------- Total Codes : 17 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_around_mycar 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<s4_a_pair_num_current; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if <start> if ( 
[8] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM) 
[11] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[12] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if <start> if ( 
[15] SUBSUBPROCESS(1) if  (ast_a_normal_current[i].fl_Rxfil < RX_AROUND_TH_TT 
[16] SUBSUBPROCESS(1) if  ) 
[17] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Ryfil > RY_AROUND_TH_TT)) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[20] SUBSUBSUBPROCESS(1) func<end> ); 
[21] MAINPROCESS(2) proc return; 
----------------- Total Codes : 21 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside_load 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 tmp_Rx_i; 
[3] MAINPROCESS(1) proc FL tmp_tmp_Rx; 
[4] MAINPROCESS(1) for<start> for( 
[5] MAINPROCESS(1) for i = 0; 
[6] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[7] MAINPROCESS(1) for i++ ) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if <start> if ( 
[10] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM) 
[13] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[14] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) if <start> if ( 
[17] SUBSUBPROCESS(1) if  ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT 
[18] SUBSUBPROCESS(1) if  ) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) func<start> tmp_Rx_i = (S4)(-ast_a_normal_current[i].fl_Ryfil 
[21] SUBSUBSUBPROCESS(1) func<end> ); 
[22] SUBSUBSUBPROCESS(1) if<start> if( 
[23] SUBSUBSUBPROCESS(1) if tmp_Rx_i < 0 
[24] SUBSUBSUBPROCESS(1) if ) 
[25] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[26] SUBSUBSUBSUBPROCESS(1) equal tmp_Rx_i 0;
[27] SUBSUBSUBPROCESS(2) if<start> if( 
[28] SUBSUBSUBPROCESS(2) if tmp_Rx_i > 69 
[29] SUBSUBSUBPROCESS(2) if ) 
[30] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[31] SUBSUBSUBSUBPROCESS(1) equal tmp_Rx_i 69;
[32] SUBSUBSUBPROCESS(3) equal tmp_tmp_Rx st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_i];
[33] SUBSUBSUBPROCESS(3) if <start> if ( 
[34] SUBSUBSUBPROCESS(3) if  (tmp_tmp_Rx - 0.5F) <= ast_a_normal_current[i].fl_Rxfil 
[35] SUBSUBSUBPROCESS(3) if  ) 
[36] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[37] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[38] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[39] SUBPROCESS(2) else if <start> else if ( 
[40] SUBPROCESS(2) else if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[41] SUBPROCESS(2) else if  ) 
[42] SUBPROCESS(2) else if  &&  (ast_a_normal_current[i].s4_flg_track > PRIOR_TRK_NUM)) 
[43] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[44] SUBSUBPROCESS(1) if <start> if ( 
[45] SUBSUBPROCESS(1) if  ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT 
[46] SUBSUBPROCESS(1) if  ) 
[47] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[48] SUBSUBSUBPROCESS(1) func<start> tmp_Rx_i = (S4)(-ast_a_normal_current[i].fl_Ryfil 
[49] SUBSUBSUBPROCESS(1) func<end> ); 
[50] SUBSUBSUBPROCESS(1) if<start> if( 
[51] SUBSUBSUBPROCESS(1) if tmp_Rx_i < 0 
[52] SUBSUBSUBPROCESS(1) if ) 
[53] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[54] SUBSUBSUBSUBPROCESS(1) equal tmp_Rx_i 0;
[55] SUBSUBSUBPROCESS(2) if<start> if( 
[56] SUBSUBSUBPROCESS(2) if tmp_Rx_i > 69 
[57] SUBSUBSUBPROCESS(2) if ) 
[58] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBSUBPROCESS(1) equal tmp_Rx_i 69;
[60] SUBSUBSUBPROCESS(3) equal tmp_tmp_Rx st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_i];
[61] SUBSUBSUBPROCESS(3) if <start> if ( 
[62] SUBSUBSUBPROCESS(3) if  (tmp_tmp_Rx + 1.5F) <= ast_a_normal_current[i].fl_Rxfil 
[63] SUBSUBSUBPROCESS(3) if  ) 
[64] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[65] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[66] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[67] SUBPROCESS(3) else<start> else 
[68] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[69] MAINPROCESS(2) proc return; 
----------------- Total Codes : 69 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside_to_fr 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i = 0; 
[4] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if <start> if ( 
[8] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if <start> if ( 
[12] SUBSUBPROCESS(1) if  (ast_a_normal_current[i].fl_Vyfil >= 0.0F 
[13] SUBSUBPROCESS(1) if  ) 
[14] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Ryfil > CANOUT_Y_MAX_TOS)) 
[15] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[16] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[17] SUBSUBSUBPROCESS(1) func<end> ); 
[18] SUBSUBPROCESS(2) else if <start> else if ( 
[19] SUBSUBPROCESS(2) else if  ast_a_normal_current[i].fl_Ryfil > CANOUT_Y_MAX_SOT 
[20] SUBSUBPROCESS(2) else if  ) 
[21] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[23] SUBSUBSUBPROCESS(1) func<end> ); 
[24] SUBSUBPROCESS(3) else<start> else 
[25] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[26] MAINPROCESS(2) proc return; 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_like_wall 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i = 0; 
[4] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if <start> if ( 
[8] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM) 
[11] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[12] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if <start> if ( 
[15] SUBSUBPROCESS(1) if  ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT 
[16] SUBSUBPROCESS(1) if  ) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) if <start> if ( 
[19] SUBSUBSUBPROCESS(1) if  (ast_a_normal_current[i].fl_Rxfil >= (st_g_bsm_loop_data.afl_wall_width[0] - 0.3F) 
[20] SUBSUBSUBPROCESS(1) if  ) 
[21] SUBSUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Ryfil < 0) 
[22] SUBSUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Vyfil <= 0)) 
[23] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[25] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[26] MAINPROCESS(2) proc return; 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_stag_just_beside 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) for<start> for( 
[4] MAINPROCESS(1) for i = 0; 
[5] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[6] MAINPROCESS(1) for i++ ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[12] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if <start> if ( 
[15] SUBSUBPROCESS(1) if  (fl_abs(ast_a_normal_current[i].fl_Ryobs) < 0.5F 
[16] SUBSUBPROCESS(1) if  ) 
[17] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_normal_current[i].fl_Rypred) < 1.0F) 
[18] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Rxfil > (st_g_bsm_loop_data.afl_wall_width[0] - 1.0F))) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) if <start> if ( 
[21] SUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[22] SUBSUBSUBPROCESS(1) if  ) 
[23] SUBSUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN)) 
[24] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[25] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[26] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[27] SUBSUBSUBPROCESS(2) else<start> else 
[28] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[29] SUBSUBSUBSUBPROCESS(1) for<start> for( 
[30] SUBSUBSUBSUBPROCESS(1) for j = 0; 
[31] SUBSUBSUBSUBPROCESS(1) for j < TARGET_BUFFSIZE; 
[32] SUBSUBSUBSUBPROCESS(1) for j++ ) 
[33] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[34] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[35] SUBSUBSUBSUBSUBPROCESS(1) if  ast_a_target_prev[j].fl_Robs != CFL_UNKNOWN_VALUE 
[36] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[37] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[39] SUBSUBSUBSUBSUBSUBPROCESS(1) if  (fl_abs(ast_a_target_prev[j].fl_Rxpred - ast_a_normal_current[i].fl_Rxfil) > TOS_SIDE_RX_DIFF 
[40] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[41] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ||  (fl_abs(ast_a_target_prev[j].fl_Rypred - ast_a_normal_current[i].fl_Ryfil) > TOS_SIDE_RY_DIFF)) 
[42] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[43] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[44] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[45] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) proc break; 
[46] MAINPROCESS(2) proc return; 
----------------- Total Codes : 46 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 tmp_side_passing_flg; 
[3] MAINPROCESS(1) equal tmp_side_passing_flg 0;
[4] MAINPROCESS(1) if <start> if ( 
[5] MAINPROCESS(1) if  st_g_bsm_loop_data.as4_flg_passing[0] > PASSING_COUNT_MIN 
[6] MAINPROCESS(1) if  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) for <start> for ( 
[9] SUBPROCESS(1) for  i = 0; 
[10] SUBPROCESS(1) for  i < s4_a_target_num_prev; 
[11] SUBPROCESS(1) for  i++) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) if <start> if ( 
[14] SUBSUBPROCESS(1) if  (ast_a_target_prev[i].fl_Rypred + RY_TH_TT) > -EKF_RY_SIDE 
[15] SUBSUBPROCESS(1) if  ) 
[16] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[17] SUBSUBSUBPROCESS(1) equal tmp_side_passing_flg 1;
[18] MAINPROCESS(2) for <start> for ( 
[19] MAINPROCESS(2) for  i = 0; 
[20] MAINPROCESS(2) for  i < s4_a_pair_num_current; 
[21] MAINPROCESS(2) for  i++) 
[22] MAINPROCESS(2) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) if <start> if ( 
[24] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(1) if <start> if ( 
[28] SUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_slow_sot_find[0] == 0 
[29] SUBSUBPROCESS(1) if  ) 
[30] SUBSUBPROCESS(1) if  &&  (tmp_side_passing_flg == 0) 
[31] SUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_flg_leading[0] == 0) 
[32] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_normal_current[i].fl_Ryfil) < EKF_RY_SIDE)) 
[33] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[34] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[35] SUBSUBSUBPROCESS(1) func<end> ); 
[36] MAINPROCESS(3) proc return; 
----------------- Total Codes : 36 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_non_sot_obj 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 tmp_Rx_i; 
[3] MAINPROCESS(1) proc FL tmp_tmp_Rx; 
[4] MAINPROCESS(1) for<start> for( 
[5] MAINPROCESS(1) for i = 0; 
[6] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[7] MAINPROCESS(1) for i++ ) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if <start> if ( 
[10] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) func<start> tmp_Rx_i = (S4)(-ast_a_normal_current[i].fl_Ryfil 
[14] SUBSUBPROCESS(1) func<end> ); 
[15] SUBSUBPROCESS(1) if<start> if( 
[16] SUBSUBPROCESS(1) if tmp_Rx_i < 0 
[17] SUBSUBPROCESS(1) if ) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) equal tmp_Rx_i 0;
[20] SUBSUBPROCESS(2) if<start> if( 
[21] SUBSUBPROCESS(2) if tmp_Rx_i > 69 
[22] SUBSUBPROCESS(2) if ) 
[23] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBPROCESS(1) equal tmp_Rx_i 69;
[25] SUBSUBPROCESS(3) equal tmp_tmp_Rx st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_i];
[26] SUBSUBPROCESS(3) if <start> if ( 
[27] SUBSUBPROCESS(3) if  st_g_bsm_loop_data.as4_slow_sot_find[1] >= WALL_REJECT_TH3 
[28] SUBSUBPROCESS(3) if  ) 
[29] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[30] SUBSUBSUBPROCESS(1) if <start> if ( 
[31] SUBSUBSUBPROCESS(1) if  (ast_a_normal_current[i].fl_Rxobs >= (tmp_tmp_Rx - 1.5F) 
[32] SUBSUBSUBPROCESS(1) if  ) 
[33] SUBSUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_normal_current[i].fl_Ryfil) > EKF_RY_SIDE)) 
[34] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[35] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[36] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[37] SUBSUBSUBPROCESS(2) else if <start> else if ( 
[38] SUBSUBSUBPROCESS(2) else if  (ast_a_normal_current[i].fl_Rxobs >= (tmp_tmp_Rx - 0.5F) 
[39] SUBSUBSUBPROCESS(2) else if  ) 
[40] SUBSUBSUBPROCESS(2) else if  &&  (ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT)) 
[41] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[42] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[43] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[44] SUBSUBSUBPROCESS(3) else<start> else 
[45] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[46] MAINPROCESS(2) proc return; 
----------------- Total Codes : 46 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_bumper_reflection 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
