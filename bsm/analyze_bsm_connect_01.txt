Total lines: 3546 
Total functions : 78 
--------------------------
[Function Name] : s4_bsm_connect 
-Return type : S4 
-Argument : 11 
     [0] : S4   pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   pair_num_sot 
     [7] : NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   Tx_int[TARGET_BUFFSIZE][NORM_INT] 
     [9] : FL   Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
     [10] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal S4 iRet 0;
[3] MAINPROCESS(1) proc target2[TARGET_BUFFSIZE]; 
[4] MAINPROCESS(1) proc S4		pair_num_current[2]; 
[5] MAINPROCESS(1) equal S4 trk_num 0;
[6] MAINPROCESS(1) proc pair_connect_current[NORMAL_BUFFSIZE]; 
[7] MAINPROCESS(1) equal S4		pair_num_total 0;
[8] MAINPROCESS(1) equal S4		pair_num_connected 0;
[9] MAINPROCESS(1) equal S4		pair_num_lost 0;
[10] MAINPROCESS(1) equal S4 s4_t_pair_num_selected 0;
[11] MAINPROCESS(1) func<start> fn_init(normal2, NORMAL_BUFFSIZE 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) func<start> fn_init(target2, TARGET_BUFFSIZE 
[14] MAINPROCESS(1) func<end> ); 
[15] MAINPROCESS(1) func<start> fn_move(normal1, st_g_bsm_loop_data.ast_normal, NORMAL_BUFFSIZE 
[16] MAINPROCESS(1) func<end> ); 
[17] MAINPROCESS(1) func<start> fn_move(target1, st_g_bsm_loop_data.ast_target, TARGET_BUFFSIZE 
[18] MAINPROCESS(1) func<end> ); 
[19] MAINPROCESS(1) equal pair_num_current[0] (S4)0;
[20] MAINPROCESS(1) equal pair_num_current[1] (S4)0;
[21] MAINPROCESS(1) for for( 
[22] MAINPROCESS(1) for i=0; 
[23] MAINPROCESS(1) for i<NORMAL_BUFFSIZE; 
[24] MAINPROCESS(1) for i++) 
[25] MAINPROCESS(1) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal pair_connect_prev[i] -1;
[27] SUBPROCESS(1) equal pair_connect_current[i] -1;
[28] MAINPROCESS(2) func<start> st_g_bsm_loop_data.u1_truck_flg = u1_check_long_truck(u1_a_alarming_flag 
[29] MAINPROCESS(2) func<end> ); 
[30] MAINPROCESS(2) func<start> fn_estimate_road_shape( 
[31] MAINPROCESS(2) func st_g_bsm_loop_data.afl_Rx_right 
[32] MAINPROCESS(2) func<end> ); 
[33] MAINPROCESS(2) func<start> memcpy (afl_g_Rx_right, st_g_bsm_loop_data.afl_Rx_right, sizeof(FL)*70 
[34] MAINPROCESS(2) func<end> ); 
[35] MAINPROCESS(2) for for( 
[36] MAINPROCESS(2) for i=0; 
[37] MAINPROCESS(2) for i<70; 
[38] MAINPROCESS(2) for i++) 
[39] MAINPROCESS(2) subproc SUBPROCESS(1) 
[40] SUBPROCESS(1) equal afl_g_Ry_right[i] -(float)i;
[41] MAINPROCESS(3) func<start> fn_bsm_con_check_passing_pre( 
[42] MAINPROCESS(3) func (const NORMAL_BSM (*))target1 
[43] MAINPROCESS(3) func<end> ); 
[44] MAINPROCESS(3) func<start> fn_bsm_con_integ_object( 
[45] MAINPROCESS(3) func normal2 
[46] MAINPROCESS(3) func<end> ); 
[47] MAINPROCESS(3) equal trk_num st_g_bsm_loop_data.as4_buf_pair_num[0];
[48] MAINPROCESS(3) if if( 
[49] MAINPROCESS(3) if trk_num==0 
[50] MAINPROCESS(3) if ) 
[51] MAINPROCESS(3) subproc SUBPROCESS(1) 
[52] SUBPROCESS(1) func<start> predict_object_trajectory_simple( 
[53] SUBPROCESS(1) func pair_num_total 
[54] SUBPROCESS(1) func<end> ); 
[55] MAINPROCESS(4) else else 
[56] MAINPROCESS(4) subproc SUBPROCESS(1) 
[57] SUBPROCESS(1) func<start> pair_num_connected = connect_previous_object( 
[58] SUBPROCESS(1) func NORMAL_BUFFSIZE 
[59] SUBPROCESS(1) func<end> ); 
[60] SUBPROCESS(1) func<start> fn_bsm_con_tracking( 
[61] SUBPROCESS(1) func normal2 
[62] SUBPROCESS(1) func<end> ); 
[63] MAINPROCESS(5) if if( 
[64] MAINPROCESS(5) if trk_num > 0 
[65] MAINPROCESS(5) if ) 
[66] MAINPROCESS(5) subproc SUBPROCESS(1) 
[67] SUBPROCESS(1) func<start> pair_num_lost = prediction_without_connected_data( 
[68] SUBPROCESS(1) func pair_num_total 
[69] SUBPROCESS(1) func<end> ); 
[70] MAINPROCESS(6) equal pair_num_total pair_num_total + pair_num_lost;
[71] MAINPROCESS(6) func<start> fn_bsm_con_add_new_object( 
[72] MAINPROCESS(6) func normal2 
[73] MAINPROCESS(6) func<end> ); 
[74] MAINPROCESS(6) func<start> fn_bsm_con_jdg_object_probability(normal2 
[75] MAINPROCESS(6) func<end> ); 
[76] MAINPROCESS(6) equal s4_g_pair_num pair_num_total;
[77] MAINPROCESS(6) func<start> memcpy (ast_g_normal, normal2, sizeof(NORMAL_BSM)*NORMAL_BUFFSIZE 
[78] MAINPROCESS(6) func<end> ); 
[79] MAINPROCESS(6) func<start> s4_t_pair_num_selected = select_target( 
[80] MAINPROCESS(6) func u1_a_alarming_flag 
[81] MAINPROCESS(6) func<end> ); 
[82] MAINPROCESS(6) equal st_g_bsm_loop_data.as4_buf_pair_num[0] pair_num_total;
[83] MAINPROCESS(6) equal st_g_bsm_loop_data.as4_buf_pair_num[1] pair_num_current[1];
[84] MAINPROCESS(6) func<start> fn_move( 
[85] MAINPROCESS(6) func NORMAL_BUFFSIZE 
[86] MAINPROCESS(6) func<end> ); 
[87] MAINPROCESS(6) func<start> fn_move( 
[88] MAINPROCESS(6) func TARGET_BUFFSIZE 
[89] MAINPROCESS(6) func<end> ); 
[90] MAINPROCESS(6) func<start> fn_move(st_g_bsm_loop_data.ast_normal, normal1, NORMAL_BUFFSIZE 
[91] MAINPROCESS(6) func<end> ); 
[92] MAINPROCESS(6) func<start> fn_move(st_g_bsm_loop_data.ast_target, target1, TARGET_BUFFSIZE 
[93] MAINPROCESS(6) func<end> ); 
[94] MAINPROCESS(6) subproc SUBPROCESS(1) 
[95] SUBPROCESS(1) if if( 
[96] SUBPROCESS(1) if st_g_bsm_loop_data.as4_buf_pair_num[1]==0 
[97] SUBPROCESS(1) if ) 
[98] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[99] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_passing[0] 0;
[100] SUBPROCESS(2) else else 
[101] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[102] SUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_flg_passing[0] = s4_check_passing_car( 
[103] SUBSUBPROCESS(1) func st_g_bsm_loop_data.as4_flg_passing[0] 
[104] SUBSUBPROCESS(1) func<end> ); 
[105] SUBPROCESS(3) if  if ( 
[106] SUBPROCESS(3) if  (fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[107] SUBPROCESS(3) if  ) 
[108] SUBPROCESS(3) if  &&  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0)) 
[109] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[110] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_passing[0] 0;
[111] MAINPROCESS(7) func<start> fn_send_to_can( 
[112] MAINPROCESS(7) func Tx_float 
[113] MAINPROCESS(7) func<end> ); 
[114] MAINPROCESS(7) equal iRet st_g_bsm_loop_data.as4_buf_pair_num[1];
[115] MAINPROCESS(7) subproc SUBPROCESS(1) 
[116] SUBPROCESS(1) proc S4 as4_t_used_ID[TARGET_BUFFSIZE]; 
[117] SUBPROCESS(1) proc S4 s4_t_lp_target_num; 
[118] SUBPROCESS(1) proc S4 s4_t_lp_used_id; 
[119] SUBPROCESS(1) for for( 
[120] SUBPROCESS(1) for s4_t_lp_target_num=0; 
[121] SUBPROCESS(1) for s4_t_lp_target_num<TARGET_BUFFSIZE; 
[122] SUBPROCESS(1) for s4_t_lp_target_num++) 
[123] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[124] SUBSUBPROCESS(1) equal as4_t_used_ID[s4_t_lp_target_num] 0;
[125] SUBPROCESS(2) for for( 
[126] SUBPROCESS(2) for s4_t_lp_target_num=0; 
[127] SUBPROCESS(2) for s4_t_lp_target_num<TARGET_BUFFSIZE; 
[128] SUBPROCESS(2) for s4_t_lp_target_num++) 
[129] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[130] SUBSUBPROCESS(1) if  if ( 
[131] SUBSUBPROCESS(1) if  (Tx_int[s4_t_lp_target_num][11] != 0 
[132] SUBSUBPROCESS(1) if  ) 
[133] SUBSUBPROCESS(1) if  &&  (Tx_float[s4_t_lp_target_num][7] != CFL_UNKNOWN_VALUE) 
[134] SUBSUBPROCESS(1) if  &&  (Tx_float[s4_t_lp_target_num][8] != CFL_UNKNOWN_VALUE)) 
[135] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[136] SUBSUBSUBPROCESS(1) equal as4_t_used_ID[Tx_int[s4_t_lp_target_num][11]-1] 1;
[137] SUBPROCESS(3) for for( 
[138] SUBPROCESS(3) for s4_t_lp_target_num=0; 
[139] SUBPROCESS(3) for s4_t_lp_target_num<TARGET_BUFFSIZE; 
[140] SUBPROCESS(3) for s4_t_lp_target_num++) 
[141] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[142] SUBSUBPROCESS(1) if  if ( 
[143] SUBSUBPROCESS(1) if  (Tx_int[s4_t_lp_target_num][11] == 0 
[144] SUBSUBPROCESS(1) if  ) 
[145] SUBSUBPROCESS(1) if  &&  (Tx_float[s4_t_lp_target_num][7] != CFL_UNKNOWN_VALUE) 
[146] SUBSUBPROCESS(1) if  &&  (Tx_float[s4_t_lp_target_num][8] != CFL_UNKNOWN_VALUE)) 
[147] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[148] SUBSUBSUBPROCESS(1) for for( 
[149] SUBSUBSUBPROCESS(1) for s4_t_lp_used_id=0; 
[150] SUBSUBSUBPROCESS(1) for s4_t_lp_used_id<TARGET_BUFFSIZE; 
[151] SUBSUBSUBPROCESS(1) for s4_t_lp_used_id++) 
[152] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[153] SUBSUBSUBSUBPROCESS(1) if if( 
[154] SUBSUBSUBSUBPROCESS(1) if as4_t_used_ID[s4_t_lp_used_id]==0 
[155] SUBSUBSUBSUBPROCESS(1) if ) 
[156] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[157] SUBSUBSUBSUBSUBPROCESS(1) equal Tx_int[s4_t_lp_target_num][11] s4_t_lp_used_id+1;
[158] SUBSUBSUBSUBSUBPROCESS(1) equal as4_t_used_ID[s4_t_lp_used_id] 1;
[159] SUBSUBSUBSUBSUBPROCESS(1) proc break; 
[160] MAINPROCESS(8) proc return iRet; 
----------------- Total Codes : 160 lines
--------------------------
[Function Name] : u1_check_long_truck 
-Return type : U1 
-Argument : 1 
     [0] : U1   u1_a_alarming_flg 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS(1) equal u1_t_jdg_truck_flg st_g_bsm_loop_data.u1_truck_flg;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  st_g_bsm_loop_data.as4_low_speed_flg[0] == (U1)0 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  st_g_bsm_loop_data.u1_truck_flg != (U1)0 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) func<start> u1_t_jdg_truck_flg = u1_jdg_truck_on_to_off(u1_a_alarming_flg 
[12] SUBSUBPROCESS(1) func<end> ); 
[13] SUBPROCESS(2) else if  else if ( 
[14] SUBPROCESS(2) else if  (st_g_bsm_loop_data.as4_slow_sot_find[0] != (S4)0 
[15] SUBPROCESS(2) else if  ) 
[16] SUBPROCESS(2) else if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[1] < WALL_REJECT_TH3) 
[17] SUBPROCESS(2) else if  &&  (u1_a_alarming_flg == (U1)1)) 
[18] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[19] SUBSUBPROCESS(1) func<start> u1_t_jdg_truck_flg = u1_jdg_truck_off_to_on( 
[20] SUBSUBPROCESS(1) func<end> ); 
[21] SUBPROCESS(3) else else 
[22] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[23] MAINPROCESS(2) else else 
[24] MAINPROCESS(2) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[26] MAINPROCESS(3) proc return u1_t_jdg_truck_flg; 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : u1_jdg_truck_on_to_off 
-Return type : U1 
-Argument : 1 
     [0] : U1   u1_a_alarming_flg 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS(1) proc U2 u2_t_lp_fft_data; 
[3] MAINPROCESS(1) proc U1 u1_t_count_up; 
[4] MAINPROCESS(1) proc U4 u4_t_count_up2; 
[5] MAINPROCESS(1) equal u4_t_count_up2 (U4)0;
[6] MAINPROCESS(1) equal u1_t_jdg_truck_flg (U1)1;
[7] MAINPROCESS(1) equal u1_t_count_up (U1)0;
[8] MAINPROCESS(1) for  for ( 
[9] MAINPROCESS(1) for  u2_t_lp_fft_data = CU2_TRUCK_BIN_START_OFF; 
[10] MAINPROCESS(1) for  u2_t_lp_fft_data < CU2_TRUCK_BIN_END_OFF; 
[11] MAINPROCESS(1) for  u2_t_lp_fft_data++) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if  if ( 
[14] SUBPROCESS(1) if  afl_g_cvw_lfm_ftt_power[0][u2_t_lp_fft_data] < CFL_TRUCK_POW_TH_OFF 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) proc u1_t_count_up++; 
[18] MAINPROCESS(2) for  for ( 
[19] MAINPROCESS(2) for  u2_t_lp_fft_data = (U2)TRUCK_BIN_START; 
[20] MAINPROCESS(2) for  u2_t_lp_fft_data < CU2_TRUCK_BIN_START_OFF; 
[21] MAINPROCESS(2) for  u2_t_lp_fft_data++) 
[22] MAINPROCESS(2) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) if  if ( 
[24] SUBPROCESS(1) if  afl_g_cvw_lfm_ftt_power[1][u2_t_lp_fft_data] < (FL)55.0F 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(1) proc u4_t_count_up2++; 
[28] MAINPROCESS(3) if  if ( 
[29] MAINPROCESS(3) if  (u1_t_count_up > CU2_TRUCK_CNT_TH_OFF 
[30] MAINPROCESS(3) if  ) 
[31] MAINPROCESS(3) if  ||  (u4_t_count_up2 > (U4)8)) 
[32] MAINPROCESS(3) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[34] MAINPROCESS(4) else if  else if ( 
[35] MAINPROCESS(4) else if  (st_g_bsm_loop_data.as4_slow_sot_find[0] == (S4)0 
[36] MAINPROCESS(4) else if  ) 
[37] MAINPROCESS(4) else if  &&  (u1_a_alarming_flg == (S4)0)) 
[38] MAINPROCESS(4) subproc SUBPROCESS(1) 
[39] SUBPROCESS(1) if if( 
[40] SUBPROCESS(1) if u1_jdg_truck_off_to_on()==(U1)0 
[41] SUBPROCESS(1) if ) 
[42] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[43] SUBSUBPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[44] MAINPROCESS(5) else else 
[45] MAINPROCESS(5) subproc SUBPROCESS(1) 
[46] MAINPROCESS(6) proc return u1_t_jdg_truck_flg; 
----------------- Total Codes : 46 lines
--------------------------
[Function Name] : u1_jdg_truck_off_to_on 
-Return type : U1 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS(1) proc U2 u2_t_lp_fft_data; 
[3] MAINPROCESS(1) proc U1 u1_t_count_up; 
[4] MAINPROCESS(1) proc U1 u1_t_count_dn; 
[5] MAINPROCESS(1) equal u1_t_jdg_truck_flg (U1)0;
[6] MAINPROCESS(1) equal u1_t_count_up (U1)0;
[7] MAINPROCESS(1) equal u1_t_count_dn (U1)0;
[8] MAINPROCESS(1) for  for ( 
[9] MAINPROCESS(1) for  u2_t_lp_fft_data = TRUCK_BIN_START; 
[10] MAINPROCESS(1) for  u2_t_lp_fft_data < TRUCK_BIN_END; 
[11] MAINPROCESS(1) for  u2_t_lp_fft_data++) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if  if ( 
[14] SUBPROCESS(1) if  afl_g_cvw_lfm_ftt_power[0][u2_t_lp_fft_data] > TRUCK_POW_TH 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) proc u1_t_count_up++; 
[18] SUBPROCESS(2) if  if ( 
[19] SUBPROCESS(2) if  afl_g_cvw_lfm_ftt_power[1][u2_t_lp_fft_data] > TRUCK_POW_TH 
[20] SUBPROCESS(2) if  ) 
[21] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[22] SUBSUBPROCESS(1) proc u1_t_count_dn++; 
[23] MAINPROCESS(2) equal u1_t_jdg_truck_flg (U1)0;
[24] MAINPROCESS(2) proc return u1_t_jdg_truck_flg; 
----------------- Total Codes : 24 lines
--------------------------
[Function Name] : fn_bsm_con_check_passing_pre 
-Return type : static VD 
-Argument : 1 
     [0] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<st_g_bsm_loop_data.as4_buf_pair_num[1]; 
[5] MAINPROCESS(1) for i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  ((ast_a_target_prev[i].s4_flg_heiso_up == 1 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) if  &&   (ast_a_target_prev[i].s4_flg_heiso_dn == 1)) 
[11] SUBPROCESS(1) if  ||  ((ast_a_target_prev[i].fl_Rxfil < (ALARM_X_OUT          + ALARM_X_OFFSET_OUT)) 
[12] SUBPROCESS(1) if  &&   (ast_a_target_prev[i].fl_Rxfil > (ALARM_X_IN           + ALARM_X_OFFSET_IN)) 
[13] SUBPROCESS(1) if  &&   (ast_a_target_prev[i].fl_Ryfil < (ALARM_Y_FORWARD)) 
[14] SUBPROCESS(1) if  &&   (ast_a_target_prev[i].fl_Ryfil > (CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET))) 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_passing[0] + (S4)1;
[18] MAINPROCESS(2) if  if ( 
[19] MAINPROCESS(2) if  (fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[20] MAINPROCESS(2) if  ) 
[21] MAINPROCESS(2) if  &&  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0)) 
[22] MAINPROCESS(2) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_passing[0] 0;
----------------- Total Codes : 23 lines
--------------------------
[Function Name] : fn_bsm_con_integ_object 
-Return type : static VD 
-Argument : 10 
     [0] : S4   s4_a_pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   s4_a_pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   s4_a_pair_num_sot 
     [7] : NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   *ps4_a_pair_num_total 
     [9] : NORMAL_BSM   ast_a_normal2[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_bsm_con_check_prior_ordinary(&s4_a_pair_num_prior, ast_a_normal_prior, &s4_a_pair_num_ordinary, ast_a_normal_ordinary 
[2] MAINPROCESS(1) func<end> ); 
[3] MAINPROCESS(1) func<start> fn_bsm_con_copy_ordinay_to_sot( 
[4] MAINPROCESS(1) func ast_a_normal_sot 
[5] MAINPROCESS(1) func<end> ); 
[6] MAINPROCESS(1) func<start> fn_bsm_con_add_object_to_normal2( 
[7] MAINPROCESS(1) func ast_a_normal2 
[8] MAINPROCESS(1) func<end> ); 
----------------- Total Codes : 8 lines
--------------------------
[Function Name] : fn_bsm_con_check_prior_ordinary 
-Return type : static VD 
-Argument : 4 
     [0] : S4   *ps4_a_pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   *ps4_a_pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_num_ordi; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_num_prior; 
[3] MAINPROCESS(1) for  for ( 
[4] MAINPROCESS(1) for  s4_t_lp_num_ordi = (S4)0; 
[5] MAINPROCESS(1) for  s4_t_lp_num_ordi < *ps4_a_pair_num_ordinary; 
[6] MAINPROCESS(1) for  s4_t_lp_num_ordi++) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if  if ( 
[9] SUBPROCESS(1) if  ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) for  for ( 
[13] SUBSUBPROCESS(1) for  s4_t_lp_num_prior = (S4)0; 
[14] SUBSUBPROCESS(1) for  s4_t_lp_num_prior < *ps4_a_pair_num_prior; 
[15] SUBSUBPROCESS(1) for  s4_t_lp_num_prior++) 
[16] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[17] SUBSUBSUBPROCESS(1) if  if ( 
[18] SUBSUBSUBPROCESS(1) if  ast_a_normal_prior[s4_t_lp_num_prior].fl_Robs != CFL_UNKNOWN_VALUE 
[19] SUBSUBSUBPROCESS(1) if  ) 
[20] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[21] SUBSUBSUBSUBPROCESS(1) if  if ( 
[22] SUBSUBSUBSUBPROCESS(1) if  ((ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_up       == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_up 
[23] SUBSUBSUBSUBPROCESS(1) if  ) 
[24] SUBSUBSUBSUBPROCESS(1) if  &&   (ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_up_music == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_up_music)) 
[25] SUBSUBSUBSUBPROCESS(1) if  ||  ((ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_dn       == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_dn) 
[26] SUBSUBSUBSUBPROCESS(1) if  &&   (ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_dn_music == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_dn_music))) 
[27] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[29] SUBSUBSUBSUBSUBPROCESS(1) if  fl_abs(ast_a_normal_prior[s4_t_lp_num_prior].fl_power_up_music - ast_a_normal_prior[s4_t_lp_num_prior].fl_power_dn_music) > 
[30] SUBSUBSUBSUBSUBPROCESS(1) if  fl_abs(ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_power_up_music - ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_power_dn_music)) 
[31] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[32] SUBSUBSUBSUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_prior[s4_t_lp_num_prior], (S4)1 
[33] SUBSUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[34] SUBSUBSUBSUBSUBPROCESS(2) else else 
[35] SUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[36] SUBSUBSUBSUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_ordinary[s4_t_lp_num_ordi], (S4)1 
[37] SUBSUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[38] MAINPROCESS(2) proc return; 
----------------- Total Codes : 38 lines
--------------------------
[Function Name] : fn_bsm_con_copy_ordinay_to_sot 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_ordinary 
     [1] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_sot 
     [3] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 tmp_sot_others_index; 
[2] MAINPROCESS(1) func<start> tmp_sot_others_index = s4_bsm_con_check_near_ordinary( 
[3] MAINPROCESS(1) func (const NORMAL_BSM (*))ast_a_normal_sot 
[4] MAINPROCESS(1) func<end> ); 
[5] MAINPROCESS(1) if if( 
[6] MAINPROCESS(1) if tmp_sot_others_index!=-1 
[7] MAINPROCESS(1) if ) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) func<start> fn_bsm_con_add_sot_object_to_normal2( 
[10] SUBPROCESS(1) func ast_a_normal_sot 
[11] SUBPROCESS(1) func<end> ); 
[12] MAINPROCESS(2) proc return; 
----------------- Total Codes : 12 lines
--------------------------
[Function Name] : s4_bsm_con_check_near_ordinary 
-Return type : static S4 
-Argument : 4 
     [0] : S4   s4_a_pair_num_ordinary 
     [1] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_sot 
     [3] : const NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) func<start> FL tmp_sot_others_diff_min = fl_abs(CFL_UNKNOWN_VALUE*2 
[3] MAINPROCESS(1) func<end> ); 
[4] MAINPROCESS(1) func<start> FL tmp_sot_truck_x_min = fl_abs(CFL_UNKNOWN_VALUE 
[5] MAINPROCESS(1) func<end> ); 
[6] MAINPROCESS(1) equal S4 tmp_sot_others_index -1;
[7] MAINPROCESS(1) for for( 
[8] MAINPROCESS(1) for i=0; 
[9] MAINPROCESS(1) for i<s4_a_pair_num_ordinary; 
[10] MAINPROCESS(1) for i++) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if if( 
[13] SUBPROCESS(1) if s4_a_pair_num_sot != 0 
[14] SUBPROCESS(1) if ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) if  if ( 
[17] SUBSUBPROCESS(1) if  ((fl_abs(ast_a_normal_sot[0].fl_Rxfil - ast_a_normal_ordinary[i].fl_Rxobs)) < 2.5F 
[18] SUBSUBPROCESS(1) if  ) 
[19] SUBSUBPROCESS(1) if  &&  ((fl_abs(ast_a_normal_sot[0].fl_Ryfil - ast_a_normal_ordinary[i].fl_Ryobs)) < 0.5F) 
[20] SUBSUBPROCESS(1) if  &&  (ast_a_normal_sot[0].fl_Rxfil > ast_a_normal_ordinary[i].fl_Rxobs) 
[21] SUBSUBPROCESS(1) if  &&  (tmp_sot_others_diff_min > (fl_abs(ast_a_normal_sot[0].fl_Rxfil - ast_a_normal_ordinary[i].fl_Rxobs) +  fl_abs(ast_a_normal_sot[0].fl_Ryfil - ast_a_normal_ordinary[i].fl_Ryobs)))) 
[22] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBPROCESS(1) func<start> tmp_sot_others_diff_min = fl_abs(ast_a_normal_sot[0].fl_Rxfil-ast_a_normal_ordinary[i].fl_Rxobs) +fl_abs(ast_a_normal_sot[0].fl_Ryfil-ast_a_normal_ordinary[i].fl_Ryobs 
[24] SUBSUBSUBPROCESS(1) func<end> ); 
[25] SUBSUBSUBPROCESS(1) equal tmp_sot_others_index i;
[26] SUBPROCESS(2) else if  else if ( 
[27] SUBPROCESS(2) else if  (st_g_bsm_loop_data.u1_truck_flg != 0 
[28] SUBPROCESS(2) else if  ) 
[29] SUBPROCESS(2) else if  &&  (st_g_bsm_loop_data.as4_flg_passing[0] > 0) 
[30] SUBPROCESS(2) else if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[0] != 0)) 
[31] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) if  if ( 
[33] SUBSUBPROCESS(1) if  (fl_abs(ast_a_normal_ordinary[i].fl_Ryobs) < 0.5F 
[34] SUBSUBPROCESS(1) if  ) 
[35] SUBSUBPROCESS(1) if  &&  (ast_a_normal_ordinary[i].fl_Rxobs < st_g_bsm_loop_data.afl_wall_width[0]) 
[36] SUBSUBPROCESS(1) if  &&  (tmp_sot_truck_x_min > fl_abs(ast_a_normal_ordinary[i].fl_Rxobs))) 
[37] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBPROCESS(1) func<start> tmp_sot_truck_x_min = fl_abs(ast_a_normal_ordinary[i].fl_Rxobs 
[39] SUBSUBSUBPROCESS(1) func<end> ); 
[40] SUBSUBSUBPROCESS(1) equal tmp_sot_others_index i;
[41] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_leading[0] 1;
[42] SUBPROCESS(3) else else 
[43] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[44] SUBPROCESS(4) if  if ( 
[45] SUBPROCESS(4) if  (fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[46] SUBPROCESS(4) if  ) 
[47] SUBPROCESS(4) if  &&  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0)) 
[48] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[49] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_leading[0] 0;
[50] MAINPROCESS(2) proc return tmp_sot_others_index; 
----------------- Total Codes : 50 lines
--------------------------
[Function Name] : fn_bsm_con_add_sot_object_to_normal2 
-Return type : static VD 
-Argument : 3 
     [0] : const NORMAL_BSM   *pst_a_normal_ordinary 
     [1] : S4   s4_a_pair_num_sot 
     [2] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 tmptmp_passing_flg[1]; 
[2] MAINPROCESS(1) proc S4 tmptmp_leading_flg[1]; 
[3] MAINPROCESS(1) equal S4 tmptmp_erased_num 0;
[4] MAINPROCESS(1) equal tmptmp_passing_flg[0] (S4)0;
[5] MAINPROCESS(1) equal tmptmp_leading_flg[0] (S4)0;
[6] MAINPROCESS(1) func<start> copy_normal_data( pst_a_normal_ordinary, &ast_a_normal_sot[0], 1 
[7] MAINPROCESS(1) func<end> ); 
[8] MAINPROCESS(1) equal ast_a_normal_sot[0].s4_flg_heiso_up 1;
[9] MAINPROCESS(1) equal ast_a_normal_sot[0].s4_flg_heiso_dn 1;
[10] MAINPROCESS(1) equal ast_a_normal_sot[0].s4_flg_dc OBJECT_TYPE_SOT;
[11] MAINPROCESS(1) func<start> tmptmp_erased_num = s4_start_prediction( 
[12] MAINPROCESS(1) func (const S4 (*))tmptmp_leading_flg 
[13] MAINPROCESS(1) func<end> ); 
[14] MAINPROCESS(1) if if( 
[15] MAINPROCESS(1) if tmptmp_erased_num==1 
[16] MAINPROCESS(1) if ) 
[17] MAINPROCESS(1) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) func<start> fn_init(&ast_a_normal_sot[0], 1 
[19] SUBPROCESS(1) func<end> ); 
[20] MAINPROCESS(2) else else 
[21] MAINPROCESS(2) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal ast_a_normal_sot[0].s4_flg_new 1;
[23] SUBPROCESS(1) func<start> ast_a_normal_sot[0].s4_flg_track = (S4)(PRIOR_TRK_NUM+1 
[24] SUBPROCESS(1) func<end> ); 
[25] MAINPROCESS(3) func<start> s4_copy_prediction_to_filtered_data( 
[26] MAINPROCESS(3) func 1 
[27] MAINPROCESS(3) func<end> ); 
[28] MAINPROCESS(3) proc return; 
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : fn_bsm_con_add_object_to_normal2 
-Return type : static VD 
-Argument : 10 
     [0] : S4   s4_a_pair_num_prior 
     [1] : const NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_ordinary 
     [3] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   s4_a_pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   s4_a_pair_num_sot 
     [7] : const NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   *ps4_a_pair_num_total 
     [9] : NORMAL_BSM   ast_a_normal2[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal S4 index 0;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] != 0 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) if  &&  (ast_a_normal_sot[0].s4_bin_up != 0) 
[7] MAINPROCESS(1) if  &&  (ast_a_normal_sot[0].s4_bin_dn != 0)) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) equal ast_a_normal2[index] ast_a_normal_sot[0];
[10] SUBPROCESS(1) proc index++; 
[11] MAINPROCESS(2) for for( 
[12] MAINPROCESS(2) for i=0; 
[13] MAINPROCESS(2) for i<s4_a_pair_num_prior; 
[14] MAINPROCESS(2) for i++) 
[15] MAINPROCESS(2) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) if if( 
[17] SUBPROCESS(1) if index>(S4)(NORMAL_BUFFSIZE-1) 
[18] SUBPROCESS(1) if ) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) proc break; 
[21] SUBPROCESS(2) equal ast_a_normal2[index] ast_a_normal_prior[i];
[22] SUBPROCESS(2) proc index++; 
[23] MAINPROCESS(3) for for( 
[24] MAINPROCESS(3) for i=0; 
[25] MAINPROCESS(3) for i<s4_a_pair_num_ordinary; 
[26] MAINPROCESS(3) for i++) 
[27] MAINPROCESS(3) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) if if( 
[29] SUBPROCESS(1) if index>(S4)(NORMAL_BUFFSIZE-1) 
[30] SUBPROCESS(1) if ) 
[31] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) proc break; 
[33] SUBPROCESS(2) equal ast_a_normal2[index] ast_a_normal_ordinary[i];
[34] SUBPROCESS(2) proc index++; 
[35] MAINPROCESS(4) for for( 
[36] MAINPROCESS(4) for i=0; 
[37] MAINPROCESS(4) for i<s4_a_pair_num_2f; 
[38] MAINPROCESS(4) for i++) 
[39] MAINPROCESS(4) subproc SUBPROCESS(1) 
[40] SUBPROCESS(1) if if( 
[41] SUBPROCESS(1) if index>(S4)(NORMAL_BUFFSIZE-1) 
[42] SUBPROCESS(1) if ) 
[43] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[44] SUBSUBPROCESS(1) proc break; 
[45] SUBPROCESS(2) equal ast_a_normal2[index] ast_a_normal_2f[i];
[46] SUBPROCESS(2) proc index++; 
[47] MAINPROCESS(5) proc return; 
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fn_bsm_con_tracking 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_pair_num_connected 
     [1] : const S4   *ps4_pair_connect_prev 
     [2] : const S4   *ps4_pair_connect_current 
     [3] : S4   s4_a_pair_num_normal1 
     [4] : NORMAL_BSM   *pst_a_normal1 
     [5] : S4   s4_a_pair_num_total 
     [6] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for i = 0; 
[4] MAINPROCESS(1) for i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal pst_a_normal1[i].s4_flg_used 0;
[8] SUBPROCESS(1) equal pst_a_normal1[i].s4_tracked 0;
[9] MAINPROCESS(2) for for( 
[10] MAINPROCESS(2) for i = 0; 
[11] MAINPROCESS(2) for i < s4_a_pair_num_total; 
[12] MAINPROCESS(2) for i++ ) 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal pst_a_normal2[i].s4_flg_used 0;
[15] SUBPROCESS(1) equal pst_a_normal2[i].s4_tracked 0;
[16] MAINPROCESS(3) if  if ( 
[17] MAINPROCESS(3) if  (s4_a_pair_num_connected > 0 
[18] MAINPROCESS(3) if  ) 
[19] MAINPROCESS(3) if  &&  (st_g_bsm_loop_data.as4_buf_pair_num[0] > 0)) 
[20] MAINPROCESS(3) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) func<start> prediction_with_connected_data( 
[22] SUBPROCESS(1) func s4_a_pair_num_connected 
[23] SUBPROCESS(1) func<end> ); 
[24] MAINPROCESS(4) proc return; 
----------------- Total Codes : 24 lines
--------------------------
[Function Name] : fn_bsm_con_add_new_object 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num_total 
     [1] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 s4_t_pair_num_erased; 
[3] MAINPROCESS(1) func<start> s4_t_pair_num_erased = s4_start_prediction( 
[4] MAINPROCESS(1) func pst_a_normal2, *ps4_a_pair_num_total, 
[5] MAINPROCESS(1) func (const S4 (*))st_g_bsm_loop_data.as4_flg_leading 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) equal *ps4_a_pair_num_total *ps4_a_pair_num_total - s4_t_pair_num_erased;
[8] MAINPROCESS(1) for for( 
[9] MAINPROCESS(1) for i=0; 
[10] MAINPROCESS(1) for i<NORMAL_BUFFSIZE; 
[11] MAINPROCESS(1) for i++) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if  if ( 
[14] SUBPROCESS(1) if  (pst_a_normal2[i].s4_bin_up_pred > NB_FFT_PT 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) if  ||  (pst_a_normal2[i].s4_bin_dn_pred > NB_FFT_PT)) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) func<start> fn_init(&pst_a_normal2[i], 1 
[19] SUBSUBPROCESS(1) func<end> ); 
[20] SUBSUBPROCESS(1) proc (*ps4_a_pair_num_total)--; 
[21] MAINPROCESS(2) func<start> fn_bsm_con_pack_object( 
[22] MAINPROCESS(2) func pst_a_normal2 
[23] MAINPROCESS(2) func<end> ); 
[24] MAINPROCESS(2) proc return; 
----------------- Total Codes : 24 lines
--------------------------
[Function Name] : fn_bsm_con_pack_object 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num_total 
     [1] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s2_t_in[NORMAL_BUFFSIZE]; 
[2] MAINPROCESS(1) proc S4 s2_t_loop; 
[3] MAINPROCESS(1) proc S4 s2_t_num; 
[4] MAINPROCESS(1) equal s2_t_num 0;
[5] MAINPROCESS(1) for  for ( 
[6] MAINPROCESS(1) for  s2_t_loop = 0; 
[7] MAINPROCESS(1) for  s2_t_loop < NORMAL_BUFFSIZE; 
[8] MAINPROCESS(1) for  s2_t_loop++) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if  if ( 
[11] SUBPROCESS(1) if  pst_a_normal2[s2_t_loop].fl_Robs != CFL_UNKNOWN_VALUE 
[12] SUBPROCESS(1) if  ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) equal s2_t_in[s2_t_num] s2_t_loop;
[15] SUBSUBPROCESS(1) proc s2_t_num++; 
[16] MAINPROCESS(2) if  if ( 
[17] MAINPROCESS(2) if  s2_t_num > 0 
[18] MAINPROCESS(2) if  ) 
[19] MAINPROCESS(2) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) for  for ( 
[21] SUBPROCESS(1) for  s2_t_loop = 0; 
[22] SUBPROCESS(1) for  s2_t_loop < s2_t_num; 
[23] SUBPROCESS(1) for  s2_t_loop++) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(1) equal pst_a_normal2[s2_t_loop] pst_a_normal2[s2_t_in[s2_t_loop]];
[26] SUBPROCESS(2) for  for ( 
[27] SUBPROCESS(2) for  s2_t_loop = s2_t_num; 
[28] SUBPROCESS(2) for  s2_t_loop < NORMAL_BUFFSIZE; 
[29] SUBPROCESS(2) for  s2_t_loop++) 
[30] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) func<start> fn_init(&pst_a_normal2[s2_t_loop], 1 
[32] SUBSUBPROCESS(1) func<end> ); 
[33] MAINPROCESS(3) func NORMAL_BUFFSIZE 
[34] MAINPROCESS(3) func<end> ); 
[35] MAINPROCESS(3) proc return; 
----------------- Total Codes : 35 lines
--------------------------
[Function Name] : fn_bsm_con_jdg_object_probability 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM*   past_a_normal2 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_lp_num_normal; 
[2] MAINPROCESS(1) proc U1 u1_t_lp_num_normal2; 
[3] MAINPROCESS(1) proc FL fl_t_power_bin; 
[4] MAINPROCESS(1) proc FL fl_t_power_doa; 
[5] MAINPROCESS(1) proc U1 u1_t_num_around; 
[6] MAINPROCESS(1) proc U1 u1_t_jdg_m2_flg; 
[7] MAINPROCESS(1) proc U1 u1_t_jdg_m8_flg; 
[8] MAINPROCESS(1) for  for ( 
[9] MAINPROCESS(1) for  u1_t_lp_num_normal = (U1)0; 
[10] MAINPROCESS(1) for  u1_t_lp_num_normal < NORMAL_BUFFSIZE; 
[11] MAINPROCESS(1) for  u1_t_lp_num_normal ++) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if  if ( 
[14] SUBPROCESS(1) if  past_a_normal2[u1_t_lp_num_normal].fl_Robs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) func<start> u1_t_jdg_m2_flg = u1_bsm_con_jdg_obj_probability_m2(past_a_normal2[u1_t_lp_num_normal].fl_Ryfil 
[18] SUBSUBPROCESS(1) func<end> ); 
[19] SUBSUBPROCESS(1) if  if ( 
[20] SUBSUBPROCESS(1) if  (u1_t_jdg_m2_flg == CU1_TRUE 
[21] SUBSUBPROCESS(1) if  ) 
[22] SUBSUBPROCESS(1) if  &&  ((past_a_normal2[u1_t_lp_num_normal].fl_Ryfil + past_a_normal2[u1_t_lp_num_normal].fl_Vyfil) >= ((CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET) - (FL)3.0F)) 
[23] SUBSUBPROCESS(1) if  &&	(past_a_normal2[u1_t_lp_num_normal].s4_flg_dc != OBJECT_TYPE_SOT)) 
[24] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[25] SUBSUBSUBPROCESS(1) func<start> fl_t_power_bin = (FL)0.5F * (past_a_normal2[u1_t_lp_num_normal].fl_power_up + past_a_normal2[u1_t_lp_num_normal].fl_power_dn 
[26] SUBSUBSUBPROCESS(1) func<end> ); 
[27] SUBSUBSUBPROCESS(1) func<start> fl_t_power_doa = (FL)0.5F * (past_a_normal2[u1_t_lp_num_normal].fl_power_up_music + past_a_normal2[u1_t_lp_num_normal].fl_power_dn_music 
[28] SUBSUBSUBPROCESS(1) func<end> ); 
[29] SUBSUBSUBPROCESS(1) func<start> u1_t_jdg_m8_flg = u1_bsm_con_jdg_obj_probability_m8(fl_t_power_doa 
[30] SUBSUBSUBPROCESS(1) func<end> ); 
[31] SUBSUBSUBPROCESS(1) if  if ( 
[32] SUBSUBSUBPROCESS(1) if  (fl_t_power_doa > (fl_t_power_bin - (FL)5.0F) 
[33] SUBSUBSUBPROCESS(1) if  ) 
[34] SUBSUBSUBPROCESS(1) if  ||	(u1_t_jdg_m8_flg == CU1_TRUE)) 
[35] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[36] SUBSUBSUBSUBPROCESS(1) equal past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable (S4)1;
[37] SUBSUBSUBPROCESS(2) if  if ( 
[38] SUBSUBSUBPROCESS(2) if  past_a_normal2[u1_t_lp_num_normal].s4_flg_lost >= (S4)5 
[39] SUBSUBSUBPROCESS(2) if  ) 
[40] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[41] SUBSUBSUBSUBPROCESS(1) equal past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable (S4)0;
[42] SUBSUBSUBPROCESS(3) if  if ( 
[43] SUBSUBSUBPROCESS(3) if  past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable == (S4)0 
[44] SUBSUBSUBPROCESS(3) if  ) 
[45] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[46] SUBSUBSUBSUBPROCESS(1) equal u1_t_num_around (U1)0;
[47] SUBSUBSUBSUBPROCESS(1) for  for ( 
[48] SUBSUBSUBSUBPROCESS(1) for  u1_t_lp_num_normal2 = (U1)0; 
[49] SUBSUBSUBSUBPROCESS(1) for  u1_t_lp_num_normal2 < NORMAL_BUFFSIZE; 
[50] SUBSUBSUBSUBPROCESS(1) for  u1_t_lp_num_normal2++) 
[51] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[52] SUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[53] SUBSUBSUBSUBSUBPROCESS(1) if  (u1_t_lp_num_normal != u1_t_lp_num_normal2 
[54] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[55] SUBSUBSUBSUBSUBPROCESS(1) if  &&	(fl_abs(past_a_normal2[u1_t_lp_num_normal].fl_Ryfil - past_a_normal2[u1_t_lp_num_normal2].fl_Ryfil) < (FL)2.0F) 
[56] SUBSUBSUBSUBSUBPROCESS(1) if  &&	(fl_abs(past_a_normal2[u1_t_lp_num_normal].fl_Rxfil - past_a_normal2[u1_t_lp_num_normal2].fl_Rxfil) < (FL)2.0F)) 
[57] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[58] SUBSUBSUBSUBSUBSUBPROCESS(1) proc u1_t_num_around++; 
[59] SUBSUBSUBSUBSUBPROCESS(2) if  if ( 
[60] SUBSUBSUBSUBSUBPROCESS(2) if  u1_t_num_around >= (U1)3 
[61] SUBSUBSUBSUBSUBPROCESS(2) if  ) 
[62] SUBSUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBSUBSUBSUBPROCESS(1) equal past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable (S4)1;
[64] SUBSUBPROCESS(2) else else 
[65] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[66] SUBSUBSUBPROCESS(1) equal past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable (S4)1;
[67] MAINPROCESS(2) proc return; 
----------------- Total Codes : 67 lines
--------------------------
[Function Name] : u1_bsm_con_jdg_obj_probability_m2 
-Return type : U1 
-Argument : 1 
     [0] : FL   fl_a_Ryfil 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_m2_flag; 
[2] MAINPROCESS(1) equal u1_t_jdg_m2_flag CU1_FALSE;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  fl_abs(fl_a_Ryfil) > EKF_RY_SIDE 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_m2_flag CU1_TRUE;
[8] MAINPROCESS(2) else else 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal u1_t_jdg_m2_flag CU1_FALSE;
[11] MAINPROCESS(3) proc return u1_t_jdg_m2_flag; 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : u1_bsm_con_jdg_obj_probability_m8 
-Return type : U1 
-Argument : 1 
     [0] : FL   fl_a_power_doa 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_m8_flag; 
[2] MAINPROCESS(1) equal u1_t_jdg_m8_flag CU1_FALSE;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  fl_a_power_doa > (FL)50.0F 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_m8_flag CU1_TRUE;
[8] MAINPROCESS(2) else else 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal u1_t_jdg_m8_flag CU1_FALSE;
[11] MAINPROCESS(3) proc return u1_t_jdg_m8_flag; 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : select_target 
-Return type : S4 
-Argument : 7 
     [0] : S4   target_num_prev 
     [1] : const NORMAL_BSM*   target_prev 
     [2] : S4*   target_num 
     [3] : NORMAL_BSM*   target_current 
     [4] : const S4*   normal_num 
     [5] : const NORMAL_BSM*   normal_current 
     [6] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc NORMAL_BSM copy_target_prev[TARGET_BUFFSIZE]; 
[3] MAINPROCESS(1) proc NORMAL_BSM copy_normal_current[NORMAL_BUFFSIZE]; 
[4] MAINPROCESS(1) proc NORMAL_BSM tmp_normal_buff[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS(1) proc S4 tmp_normal_num[1]; 
[6] MAINPROCESS(1) proc S4 tmp_target_num[1]; 
[7] MAINPROCESS(1) proc S4 object_num; 
[8] MAINPROCESS(1) proc S4 used_ID[TARGET_BUFFSIZE]; 
[9] MAINPROCESS(1) equal S4 tmptmp_target_num 0;
[10] MAINPROCESS(1) equal S4 wall_bin 270;
[11] MAINPROCESS(1) func<start> copy_normal_data(target_prev, copy_target_prev, TARGET_BUFFSIZE 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) func<start> copy_normal_data(normal_current, copy_normal_current, NORMAL_BUFFSIZE 
[14] MAINPROCESS(1) func<end> ); 
[15] MAINPROCESS(1) func<start> fn_init(tmp_normal_buff, NORMAL_BUFFSIZE 
[16] MAINPROCESS(1) func<end> ); 
[17] MAINPROCESS(1) for for( 
[18] MAINPROCESS(1) for i=0; 
[19] MAINPROCESS(1) for i<TARGET_BUFFSIZE; 
[20] MAINPROCESS(1) for i++) 
[21] MAINPROCESS(1) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal copy_target_prev[i].s4_flg_used 0;
[23] SUBPROCESS(1) equal used_ID[i] 0;
[24] MAINPROCESS(2) equal tmp_normal_num[0] *normal_num;
[25] MAINPROCESS(2) equal tmp_target_num[0] 0;
[26] MAINPROCESS(2) func<start> fn_bsm_sel_exclude_object( 
[27] MAINPROCESS(2) func (const NORMAL_BSM (*))copy_target_prev 
[28] MAINPROCESS(2) func<end> ); 
[29] MAINPROCESS(2) func<start> object_num = s4_bsm_sel_empty_buf_trimming( 
[30] MAINPROCESS(2) func copy_normal_current 
[31] MAINPROCESS(2) func<end> ); 
[32] MAINPROCESS(2) func<start> fn_sort_normal(copy_normal_current 
[33] MAINPROCESS(2) func<end> ); 
[34] MAINPROCESS(2) func<start> fn_sort_target(copy_target_prev 
[35] MAINPROCESS(2) func<end> ); 
[36] MAINPROCESS(2) equal tmp_target_num[0] 0;
[37] MAINPROCESS(2) equal wall_bin (S4)(st_g_bsm_loop_data.afl_wall_width[0]/RCOF*0.5F)+NB_FFT_PT/2 - 1;
[38] MAINPROCESS(2) func<start> fn_bsm_sel_connect_target( 
[39] MAINPROCESS(2) func target_current 
[40] MAINPROCESS(2) func<end> ); 
[41] MAINPROCESS(2) equal tmptmp_target_num 0;
[42] MAINPROCESS(2) func<start> tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[43] MAINPROCESS(2) func TARGET_BUFFSIZE 
[44] MAINPROCESS(2) func<end> ); 
[45] MAINPROCESS(2) equal tmp_target_num[0] tmptmp_target_num;
[46] MAINPROCESS(2) func<start> fn_bsm_sel_extrapolate_target( 
[47] MAINPROCESS(2) func used_ID 
[48] MAINPROCESS(2) func<end> ); 
[49] MAINPROCESS(2) func<start> tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[50] MAINPROCESS(2) func TARGET_BUFFSIZE 
[51] MAINPROCESS(2) func<end> ); 
[52] MAINPROCESS(2) equal tmp_target_num[0] tmptmp_target_num;
[53] MAINPROCESS(2) func<start> fn_bsm_sel_add_target( 
[54] MAINPROCESS(2) func used_ID 
[55] MAINPROCESS(2) func<end> ); 
[56] MAINPROCESS(2) func<start> tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[57] MAINPROCESS(2) func TARGET_BUFFSIZE 
[58] MAINPROCESS(2) func<end> ); 
[59] MAINPROCESS(2) equal tmp_target_num[0] tmptmp_target_num;
[60] MAINPROCESS(2) func<start> tmp_target_num[0] = cluster_target( 
[61] MAINPROCESS(2) func used_ID 
[62] MAINPROCESS(2) func<end> ); 
[63] MAINPROCESS(2) func<start> fn_bsm_sel_exclude_target( 
[64] MAINPROCESS(2) func target_current 
[65] MAINPROCESS(2) func<end> ); 
[66] MAINPROCESS(2) func<start> fn_bsm_sel_empty_buf_trgt_trimming( 
[67] MAINPROCESS(2) func target_current 
[68] MAINPROCESS(2) func<end> ); 
[69] MAINPROCESS(2) func<start> fn_bsm_sel_target_marking(tmp_target_num[0], target_current, u1_a_alarming_flag 
[70] MAINPROCESS(2) func<end> ); 
[71] MAINPROCESS(2) equal *target_num tmp_target_num[0];
[72] MAINPROCESS(2) equal object_num tmp_target_num[0];
[73] MAINPROCESS(2) proc return object_num; 
----------------- Total Codes : 73 lines
--------------------------
[Function Name] : fn_bsm_sel_exclude_object 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_bsm_sel_reset_stop_flg( 
[2] MAINPROCESS(1) func ast_a_target_prev 
[3] MAINPROCESS(1) func<end> ); 
[4] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_same_peaks( 
[5] MAINPROCESS(1) func ast_a_normal_current 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_stationary( 
[8] MAINPROCESS(1) func ast_a_normal_current 
[9] MAINPROCESS(1) func<end> ); 
[10] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_around_mycar( 
[11] MAINPROCESS(1) func ast_a_normal_current 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_outside_load( 
[14] MAINPROCESS(1) func ast_a_normal_current 
[15] MAINPROCESS(1) func<end> ); 
[16] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_outside_to_fr( 
[17] MAINPROCESS(1) func ast_a_normal_current 
[18] MAINPROCESS(1) func<end> ); 
[19] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_like_wall( 
[20] MAINPROCESS(1) func ast_a_normal_current 
[21] MAINPROCESS(1) func<end> ); 
[22] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_stag_just_beside( 
[23] MAINPROCESS(1) func ast_a_target_prev 
[24] MAINPROCESS(1) func<end> ); 
[25] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_outside( 
[26] MAINPROCESS(1) func ast_a_target_prev 
[27] MAINPROCESS(1) func<end> ); 
[28] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_non_sot_obj( 
[29] MAINPROCESS(1) func ast_a_normal_current 
[30] MAINPROCESS(1) func<end> ); 
[31] MAINPROCESS(1) func<start> fn_bsm_sel_exobj_bumper_reflection( 
[32] MAINPROCESS(1) func ast_a_normal_current 
[33] MAINPROCESS(1) func<end> ); 
[34] MAINPROCESS(1) proc return; 
----------------- Total Codes : 34 lines
--------------------------
[Function Name] : fn_bsm_sel_reset_stop_flg 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) for for( 
[4] MAINPROCESS(1) for i=0; 
[5] MAINPROCESS(1) for i<s4_a_target_num_prev; 
[6] MAINPROCESS(1) for i++) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) for for( 
[9] SUBPROCESS(1) for j=0; 
[10] SUBPROCESS(1) for j<s4_a_pair_num_current; 
[11] SUBPROCESS(1) for j++) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) if  if ( 
[14] SUBSUBPROCESS(1) if  (fl_abs(ast_a_target_prev[i].fl_Rxfil-ast_a_normal_current[j].fl_Rxfil) < RX_TH_TT 
[15] SUBSUBPROCESS(1) if  ) 
[16] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_target_prev[i].fl_Ryfil-ast_a_normal_current[j].fl_Ryfil) < RY_TH_TT)) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) equal ast_a_normal_current[j].s4_flg_stop 0;
[19] MAINPROCESS(2) proc return; 
----------------- Total Codes : 19 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_same_peaks 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) for for( 
[4] MAINPROCESS(1) for i=0; 
[5] MAINPROCESS(1) for i<s4_a_pair_num_current; 
[6] MAINPROCESS(1) for i++ ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) for for( 
[9] SUBPROCESS(1) for j=0; 
[10] SUBPROCESS(1) for j<s4_a_pair_num_current; 
[11] SUBPROCESS(1) for j++ ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) if  if ( 
[14] SUBSUBPROCESS(1) if  (i!= j 
[15] SUBSUBPROCESS(1) if  ) 
[16] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE) 
[17] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[j].fl_Robs != CFL_UNKNOWN_VALUE) 
[18] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_bin_up == ast_a_normal_current[j].s4_bin_up) 
[19] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_bin_dn == ast_a_normal_current[j].s4_bin_dn) 
[20] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_bin_up_music == ast_a_normal_current[j].s4_bin_up_music) 
[21] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_bin_dn_music == ast_a_normal_current[j].s4_bin_dn_music)) 
[22] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBPROCESS(1) if  if ( 
[24] SUBSUBSUBPROCESS(1) if  (ast_a_normal_current[i].s4_flg_dc != OBJECT_TYPE_PRIOR 
[25] SUBSUBSUBPROCESS(1) if  ) 
[26] SUBSUBSUBPROCESS(1) if  &&  (ast_a_normal_current[j].s4_flg_dc == OBJECT_TYPE_PRIOR)) 
[27] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBSUBPROCESS(1) if  if ( 
[29] SUBSUBSUBSUBPROCESS(1) if  ast_a_normal_current[j].s4_flg_track > ast_a_normal_current[i].s4_flg_track 
[30] SUBSUBSUBSUBPROCESS(1) if  ) 
[31] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[32] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_normal_current[i].s4_flg_track ast_a_normal_current[j].s4_flg_track;
[33] SUBSUBSUBSUBPROCESS(2) func<start> fn_init( &ast_a_normal_current[j], 1 
[34] SUBSUBSUBSUBPROCESS(2) func<end> ); 
[35] SUBSUBSUBPROCESS(2) if  if ( 
[36] SUBSUBSUBPROCESS(2) if  (ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_PRIOR 
[37] SUBSUBSUBPROCESS(2) if  ) 
[38] SUBSUBSUBPROCESS(2) if  &&  (ast_a_normal_current[j].s4_flg_dc != OBJECT_TYPE_PRIOR)) 
[39] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[40] SUBSUBSUBSUBPROCESS(1) if  if ( 
[41] SUBSUBSUBSUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_track > ast_a_normal_current[j].s4_flg_track 
[42] SUBSUBSUBSUBPROCESS(1) if  ) 
[43] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_normal_current[j].s4_flg_track ast_a_normal_current[i].s4_flg_track;
[45] SUBSUBSUBSUBPROCESS(2) func<start> fn_init( &ast_a_normal_current[i], 1 
[46] SUBSUBSUBSUBPROCESS(2) func<end> ); 
[47] MAINPROCESS(2) proc return; 
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_stationary 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<s4_a_pair_num_current; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if if( 
[8] SUBPROCESS(1) if ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if if( 
[12] SUBSUBPROCESS(1) if ast_a_normal_current[i].s4_flg_stop ==1 
[13] SUBSUBPROCESS(1) if ) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[16] SUBSUBSUBPROCESS(1) func<end> ); 
[17] MAINPROCESS(2) proc return; 
----------------- Total Codes : 17 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_around_mycar 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<s4_a_pair_num_current; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM) 
[11] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[12] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if  if ( 
[15] SUBSUBPROCESS(1) if  (ast_a_normal_current[i].fl_Rxfil < RX_AROUND_TH_TT 
[16] SUBSUBPROCESS(1) if  ) 
[17] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Ryfil > RY_AROUND_TH_TT)) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[20] SUBSUBSUBPROCESS(1) func<end> ); 
[21] MAINPROCESS(2) proc return; 
----------------- Total Codes : 21 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside_load 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 tmp_Rx_i; 
[3] MAINPROCESS(1) proc FL tmp_tmp_Rx; 
[4] MAINPROCESS(1) for for( 
[5] MAINPROCESS(1) for i = 0; 
[6] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[7] MAINPROCESS(1) for i++ ) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if  if ( 
[10] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM) 
[13] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[14] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) if  if ( 
[17] SUBSUBPROCESS(1) if  ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT 
[18] SUBSUBPROCESS(1) if  ) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) func<start> tmp_Rx_i = (S4)(-ast_a_normal_current[i].fl_Ryfil 
[21] SUBSUBSUBPROCESS(1) func<end> ); 
[22] SUBSUBSUBPROCESS(1) if if( 
[23] SUBSUBSUBPROCESS(1) if tmp_Rx_i < 0 
[24] SUBSUBSUBPROCESS(1) if ) 
[25] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[26] SUBSUBSUBSUBPROCESS(1) equal tmp_Rx_i 0;
[27] SUBSUBSUBPROCESS(2) if if( 
[28] SUBSUBSUBPROCESS(2) if tmp_Rx_i > 69 
[29] SUBSUBSUBPROCESS(2) if ) 
[30] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[31] SUBSUBSUBSUBPROCESS(1) equal tmp_Rx_i 69;
[32] SUBSUBSUBPROCESS(3) equal tmp_tmp_Rx st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_i];
[33] SUBSUBSUBPROCESS(3) if  if ( 
[34] SUBSUBSUBPROCESS(3) if  (tmp_tmp_Rx - 0.5F) <= ast_a_normal_current[i].fl_Rxfil 
[35] SUBSUBSUBPROCESS(3) if  ) 
[36] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[37] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[38] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[39] SUBPROCESS(2) else if  else if ( 
[40] SUBPROCESS(2) else if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[41] SUBPROCESS(2) else if  ) 
[42] SUBPROCESS(2) else if  &&  (ast_a_normal_current[i].s4_flg_track > PRIOR_TRK_NUM)) 
[43] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[44] SUBSUBPROCESS(1) if  if ( 
[45] SUBSUBPROCESS(1) if  ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT 
[46] SUBSUBPROCESS(1) if  ) 
[47] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[48] SUBSUBSUBPROCESS(1) func<start> tmp_Rx_i = (S4)(-ast_a_normal_current[i].fl_Ryfil 
[49] SUBSUBSUBPROCESS(1) func<end> ); 
[50] SUBSUBSUBPROCESS(1) if if( 
[51] SUBSUBSUBPROCESS(1) if tmp_Rx_i < 0 
[52] SUBSUBSUBPROCESS(1) if ) 
[53] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[54] SUBSUBSUBSUBPROCESS(1) equal tmp_Rx_i 0;
[55] SUBSUBSUBPROCESS(2) if if( 
[56] SUBSUBSUBPROCESS(2) if tmp_Rx_i > 69 
[57] SUBSUBSUBPROCESS(2) if ) 
[58] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBSUBPROCESS(1) equal tmp_Rx_i 69;
[60] SUBSUBSUBPROCESS(3) equal tmp_tmp_Rx st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_i];
[61] SUBSUBSUBPROCESS(3) if  if ( 
[62] SUBSUBSUBPROCESS(3) if  (tmp_tmp_Rx + 1.5F) <= ast_a_normal_current[i].fl_Rxfil 
[63] SUBSUBSUBPROCESS(3) if  ) 
[64] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[65] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[66] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[67] SUBPROCESS(3) else else 
[68] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[69] MAINPROCESS(2) proc return; 
----------------- Total Codes : 69 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside_to_fr 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for i = 0; 
[4] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if  if ( 
[12] SUBSUBPROCESS(1) if  (ast_a_normal_current[i].fl_Vyfil >= 0.0F 
[13] SUBSUBPROCESS(1) if  ) 
[14] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Ryfil > CANOUT_Y_MAX_TOS)) 
[15] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[16] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[17] SUBSUBSUBPROCESS(1) func<end> ); 
[18] SUBSUBPROCESS(2) else if  else if ( 
[19] SUBSUBPROCESS(2) else if  ast_a_normal_current[i].fl_Ryfil > CANOUT_Y_MAX_SOT 
[20] SUBSUBPROCESS(2) else if  ) 
[21] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[23] SUBSUBSUBPROCESS(1) func<end> ); 
[24] SUBSUBPROCESS(3) else else 
[25] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[26] MAINPROCESS(2) proc return; 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_like_wall 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for i = 0; 
[4] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM) 
[11] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[12] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if  if ( 
[15] SUBSUBPROCESS(1) if  ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT 
[16] SUBSUBPROCESS(1) if  ) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) if  if ( 
[19] SUBSUBSUBPROCESS(1) if  (ast_a_normal_current[i].fl_Rxfil >= (st_g_bsm_loop_data.afl_wall_width[0] - 0.3F) 
[20] SUBSUBSUBPROCESS(1) if  ) 
[21] SUBSUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Ryfil < 0) 
[22] SUBSUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Vyfil <= 0)) 
[23] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[25] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[26] MAINPROCESS(2) proc return; 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_stag_just_beside 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) for for( 
[4] MAINPROCESS(1) for i = 0; 
[5] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[6] MAINPROCESS(1) for i++ ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if  if ( 
[9] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_up == 0) 
[12] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_dn == 0)) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if  if ( 
[15] SUBSUBPROCESS(1) if  (fl_abs(ast_a_normal_current[i].fl_Ryobs) < 0.5F 
[16] SUBSUBPROCESS(1) if  ) 
[17] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_normal_current[i].fl_Rypred) < 1.0F) 
[18] SUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Rxfil > (st_g_bsm_loop_data.afl_wall_width[0] - 1.0F))) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) if  if ( 
[21] SUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[22] SUBSUBSUBPROCESS(1) if  ) 
[23] SUBSUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN)) 
[24] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[25] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[26] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[27] SUBSUBSUBPROCESS(2) else else 
[28] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[29] SUBSUBSUBSUBPROCESS(1) for for( 
[30] SUBSUBSUBSUBPROCESS(1) for j = 0; 
[31] SUBSUBSUBSUBPROCESS(1) for j < TARGET_BUFFSIZE; 
[32] SUBSUBSUBSUBPROCESS(1) for j++ ) 
[33] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[34] SUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[35] SUBSUBSUBSUBSUBPROCESS(1) if  ast_a_target_prev[j].fl_Robs != CFL_UNKNOWN_VALUE 
[36] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[37] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[39] SUBSUBSUBSUBSUBSUBPROCESS(1) if  (fl_abs(ast_a_target_prev[j].fl_Rxpred - ast_a_normal_current[i].fl_Rxfil) > TOS_SIDE_RX_DIFF 
[40] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[41] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ||  (fl_abs(ast_a_target_prev[j].fl_Rypred - ast_a_normal_current[i].fl_Ryfil) > TOS_SIDE_RY_DIFF)) 
[42] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[43] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[44] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[45] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) proc break; 
[46] MAINPROCESS(2) proc return; 
----------------- Total Codes : 46 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 tmp_side_passing_flg; 
[3] MAINPROCESS(1) equal tmp_side_passing_flg 0;
[4] MAINPROCESS(1) if  if ( 
[5] MAINPROCESS(1) if  st_g_bsm_loop_data.as4_flg_passing[0] > PASSING_COUNT_MIN 
[6] MAINPROCESS(1) if  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) for  for ( 
[9] SUBPROCESS(1) for  i = 0; 
[10] SUBPROCESS(1) for  i < s4_a_target_num_prev; 
[11] SUBPROCESS(1) for  i++) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) if  if ( 
[14] SUBSUBPROCESS(1) if  (ast_a_target_prev[i].fl_Rypred + RY_TH_TT) > -EKF_RY_SIDE 
[15] SUBSUBPROCESS(1) if  ) 
[16] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[17] SUBSUBSUBPROCESS(1) equal tmp_side_passing_flg 1;
[18] MAINPROCESS(2) for  for ( 
[19] MAINPROCESS(2) for  i = 0; 
[20] MAINPROCESS(2) for  i < s4_a_pair_num_current; 
[21] MAINPROCESS(2) for  i++) 
[22] MAINPROCESS(2) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) if  if ( 
[24] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(1) if  if ( 
[28] SUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_slow_sot_find[0] == 0 
[29] SUBSUBPROCESS(1) if  ) 
[30] SUBSUBPROCESS(1) if  &&  (tmp_side_passing_flg == 0) 
[31] SUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_flg_leading[0] == 0) 
[32] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_normal_current[i].fl_Ryfil) < EKF_RY_SIDE)) 
[33] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[34] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[35] SUBSUBSUBPROCESS(1) func<end> ); 
[36] MAINPROCESS(3) proc return; 
----------------- Total Codes : 36 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_non_sot_obj 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 tmp_Rx_i; 
[3] MAINPROCESS(1) proc FL tmp_tmp_Rx; 
[4] MAINPROCESS(1) for for( 
[5] MAINPROCESS(1) for i = 0; 
[6] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[7] MAINPROCESS(1) for i++ ) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if  if ( 
[10] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) func<start> tmp_Rx_i = (S4)(-ast_a_normal_current[i].fl_Ryfil 
[14] SUBSUBPROCESS(1) func<end> ); 
[15] SUBSUBPROCESS(1) if if( 
[16] SUBSUBPROCESS(1) if tmp_Rx_i < 0 
[17] SUBSUBPROCESS(1) if ) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) equal tmp_Rx_i 0;
[20] SUBSUBPROCESS(2) if if( 
[21] SUBSUBPROCESS(2) if tmp_Rx_i > 69 
[22] SUBSUBPROCESS(2) if ) 
[23] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBPROCESS(1) equal tmp_Rx_i 69;
[25] SUBSUBPROCESS(3) equal tmp_tmp_Rx st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_i];
[26] SUBSUBPROCESS(3) if  if ( 
[27] SUBSUBPROCESS(3) if  st_g_bsm_loop_data.as4_slow_sot_find[1] >= WALL_REJECT_TH3 
[28] SUBSUBPROCESS(3) if  ) 
[29] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[30] SUBSUBSUBPROCESS(1) if  if ( 
[31] SUBSUBSUBPROCESS(1) if  (ast_a_normal_current[i].fl_Rxobs >= (tmp_tmp_Rx - 1.5F) 
[32] SUBSUBSUBPROCESS(1) if  ) 
[33] SUBSUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_normal_current[i].fl_Ryfil) > EKF_RY_SIDE)) 
[34] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[35] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[36] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[37] SUBSUBSUBPROCESS(2) else if  else if ( 
[38] SUBSUBSUBPROCESS(2) else if  (ast_a_normal_current[i].fl_Rxobs >= (tmp_tmp_Rx - 0.5F) 
[39] SUBSUBSUBPROCESS(2) else if  ) 
[40] SUBSUBSUBPROCESS(2) else if  &&  (ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT)) 
[41] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[42] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[43] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[44] SUBSUBSUBPROCESS(3) else else 
[45] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[46] MAINPROCESS(2) proc return; 
----------------- Total Codes : 46 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_bumper_reflection 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_normal; 
[2] MAINPROCESS(1) proc FL fl_t_thd_exobj_range; 
[3] MAINPROCESS(1) proc FL fl_t_thd_exobj_power; 
[4] MAINPROCESS(1) proc FL fl_t_obj_power; 
[5] MAINPROCESS(1) proc FL fl_t_abs_robs; 
[6] MAINPROCESS(1) proc FL fl_t_abs_vobs; 
[7] MAINPROCESS(1) ??? const FL CFL_D_MAP_EXOBJ_POWER[CU2_MAP_EXOBJ_POWER_INDEX][2] = 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[10] SUBSUBPROCESS(1) ??? (FL)1.0,		(FL)72.0 
[11] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) ??? (FL)2.0,		(FL)65.0 
[13] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) ??? (FL)2.5,		(FL)62.5 
[15] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) ??? (FL)3.0,		(FL)57.7 
[17] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) ??? (FL)4.0,		(FL)52.7 
[19] SUBPROCESS(6) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) ??? (FL)5.0,		(FL)48.9 
[21] SUBPROCESS(7) subproc SUBSUBPROCESS(1) 
[22] SUBSUBPROCESS(1) ??? (FL)6.0,		(FL)45.7 
[23] SUBPROCESS(8) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) ??? (FL)9.0,		(FL)38.6 
[25] MAINPROCESS(2) ??? ; 
[26] MAINPROCESS(2) for  for ( 
[27] MAINPROCESS(2) for  s4_t_lp_normal = (S4)0; 
[28] MAINPROCESS(2) for  s4_t_lp_normal < s4_a_pair_num_current; 
[29] MAINPROCESS(2) for  s4_t_lp_normal++) 
[30] MAINPROCESS(2) subproc SUBPROCESS(1) 
[31] SUBPROCESS(1) if  if ( 
[32] SUBPROCESS(1) if  ast_a_normal_current[s4_t_lp_normal].fl_Robs != CFL_UNKNOWN_VALUE 
[33] SUBPROCESS(1) if  ) 
[34] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[35] SUBSUBPROCESS(1) equal fl_t_obj_power (ast_a_normal_current[s4_t_lp_normal].fl_power_up_music + ast_a_normal_current[s4_t_lp_normal].fl_power_dn_music) * (FL)0.5;
[36] SUBSUBPROCESS(1) func<start> fl_t_abs_robs = fl_abs(ast_a_normal_current[s4_t_lp_normal].fl_Robs 
[37] SUBSUBPROCESS(1) func<end> ); 
[38] SUBSUBPROCESS(1) func<start> fl_t_abs_vobs = fl_abs(ast_a_normal_current[s4_t_lp_normal].fl_Vobs 
[39] SUBSUBPROCESS(1) func<end> ); 
[40] SUBSUBPROCESS(1) equal fl_t_thd_exobj_range (FL)9.0;
[41] SUBSUBPROCESS(1) func<start> fl_t_thd_exobj_power = fl_smap_new(CFL_D_MAP_EXOBJ_POWER, CU2_MAP_EXOBJ_POWER_INDEX, fl_t_abs_robs 
[42] SUBSUBPROCESS(1) func<end> ); 
[43] SUBSUBPROCESS(1) if  if ( 
[44] SUBSUBPROCESS(1) if  (ast_a_normal_current[s4_t_lp_normal].s4_flg_dc != (S4)OBJECT_TYPE_2F 
[45] SUBSUBPROCESS(1) if  ) 
[46] SUBSUBPROCESS(1) if  &&	(fl_t_abs_robs < fl_t_thd_exobj_range) 
[47] SUBSUBPROCESS(1) if  &&	(ast_a_normal_current[s4_t_lp_normal].fl_Ryobs < (FL)-EKF_RY_SIDE) 
[48] SUBSUBPROCESS(1) if  &&	(fl_t_abs_vobs < ((FL)5.0 * (FL)VCOF)) 
[49] SUBSUBPROCESS(1) if  &&	(fl_t_obj_power < fl_t_thd_exobj_power)) 
[50] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[51] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_current[s4_t_lp_normal], (S4)1 
[52] SUBSUBSUBPROCESS(1) func<end> ); 
[53] MAINPROCESS(3) proc return; 
----------------- Total Codes : 53 lines
--------------------------
[Function Name] : s4_bsm_sel_empty_buf_trimming 
-Return type : static S4 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s2_t_in[NORMAL_BUFFSIZE]; 
[2] MAINPROCESS(1) proc S4 s2_t_loop; 
[3] MAINPROCESS(1) proc S4 s2_t_num; 
[4] MAINPROCESS(1) proc S4 s4_t_object_num; 
[5] MAINPROCESS(1) equal s4_t_object_num 0;
[6] MAINPROCESS(1) equal s2_t_num 0;
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s2_t_loop = 0; 
[9] MAINPROCESS(1) for  s2_t_loop < NORMAL_BUFFSIZE; 
[10] MAINPROCESS(1) for  s2_t_loop++) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if  if ( 
[13] SUBPROCESS(1) if  ast_a_normal_current[s2_t_loop].fl_Robs != CFL_UNKNOWN_VALUE 
[14] SUBPROCESS(1) if  ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) equal s2_t_in[s2_t_num] s2_t_loop;
[17] SUBSUBPROCESS(1) equal ast_a_normal_current[s2_t_loop].s4_flg_used 0;
[18] SUBSUBPROCESS(1) proc s2_t_num++; 
[19] MAINPROCESS(2) equal s4_t_object_num s2_t_num;
[20] MAINPROCESS(2) if  if ( 
[21] MAINPROCESS(2) if  s2_t_num > 0 
[22] MAINPROCESS(2) if  ) 
[23] MAINPROCESS(2) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) for  for ( 
[25] SUBPROCESS(1) for  s2_t_loop = 0; 
[26] SUBPROCESS(1) for  s2_t_loop < s2_t_num; 
[27] SUBPROCESS(1) for  s2_t_loop++) 
[28] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(1) equal ast_a_normal_current[s2_t_loop] ast_a_normal_current[s2_t_in[s2_t_loop]];
[30] SUBPROCESS(2) for  for ( 
[31] SUBPROCESS(2) for  s2_t_loop = s2_t_num; 
[32] SUBPROCESS(2) for  s2_t_loop < NORMAL_BUFFSIZE; 
[33] SUBPROCESS(2) for  s2_t_loop++) 
[34] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[35] SUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_current[s2_t_loop], 1 
[36] SUBSUBPROCESS(1) func<end> ); 
[37] MAINPROCESS(3) proc return s4_t_object_num; 
----------------- Total Codes : 37 lines
--------------------------
[Function Name] : fn_bsm_sel_connect_target 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [4] : S4   as4_t_used_ID[TARGET_BUFFSIZE] 
     [5] : S4   *ps4_a_target_num_current 
     [6] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 k; 
[3] MAINPROCESS(1) proc S4 s4_t_sample_num; 
[4] MAINPROCESS(1) proc S4 as4_t_sample_indexs[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS(1) proc S4 as4_t_sample_indexs_prev[NORMAL_BUFFSIZE]; 
[6] MAINPROCESS(1) proc S4 s4_t_select_index; 
[7] MAINPROCESS(1) for for( 
[8] MAINPROCESS(1) for i = 0; 
[9] MAINPROCESS(1) for i < s4_a_target_num_prev; 
[10] MAINPROCESS(1) for i++ ) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal s4_t_sample_num 0;
[13] SUBPROCESS(1) for for( 
[14] SUBPROCESS(1) for k = 0; 
[15] SUBPROCESS(1) for k < NORMAL_BUFFSIZE; 
[16] SUBPROCESS(1) for k++ ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal as4_t_sample_indexs[k] -1;
[19] SUBSUBPROCESS(1) equal as4_t_sample_indexs_prev[k] -1;
[20] SUBPROCESS(2) if  if ( 
[21] SUBPROCESS(2) if  (ast_a_target_prev[i].fl_Vypred > 5.0F 
[22] SUBPROCESS(2) if  ) 
[23] SUBPROCESS(2) if  &&  (ast_a_target_prev[i].fl_Rypred > -1.5F)) 
[24] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(1) equal ast_a_target_prev[i].s4_flg_single_peak_up 1;
[26] SUBPROCESS(3) func<start> fn_bsm_sel_search_sample( 
[27] SUBPROCESS(3) func as4_t_sample_indexs_prev 
[28] SUBPROCESS(3) func<end> ); 
[29] SUBPROCESS(3) func<start> s4_t_select_index = s4_bsm_sel_select_sample( 
[30] SUBPROCESS(3) func (const S4 (*))as4_t_sample_indexs_prev 
[31] SUBPROCESS(3) func<end> ); 
[32] SUBPROCESS(3) if if( 
[33] SUBPROCESS(3) if s4_t_select_index != -1 
[34] SUBPROCESS(3) if ) 
[35] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[36] SUBSUBPROCESS(1) func<start> fn_bsm_tracking_target( 
[37] SUBSUBPROCESS(1) func &ast_a_target_current[*ps4_a_target_num_current] 
[38] SUBSUBPROCESS(1) func<end> ); 
[39] SUBSUBPROCESS(1) proc (*ps4_a_target_num_current)++; 
[40] MAINPROCESS(2) proc return; 
----------------- Total Codes : 40 lines
--------------------------
[Function Name] : fn_bsm_sel_search_sample 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_pair_num_current 
     [1] : const NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_prev_index 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [4] : S4   *ps4_a_sample_num 
     [5] : S4   as4_a_sample_indexs[NORMAL_BUFFSIZE] 
     [6] : S4   as4_a_sample_indexs_prev[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal S4 s4_t_wall_bin 270;
[3] MAINPROCESS(1) proc S4 s4_t_connect; 
[4] MAINPROCESS(1) proc FL fl_t_rx_th; 
[5] MAINPROCESS(1) proc FL fl_t_ry_th; 
[6] MAINPROCESS(1) proc FL fl_t_vx_th; 
[7] MAINPROCESS(1) proc FL fl_t_vy_th; 
[8] MAINPROCESS(1) equal s4_t_wall_bin (S4)(st_g_bsm_loop_data.afl_wall_width[0]/RCOF*0.5F)+NB_FFT_PT/2 - 1;
[9] MAINPROCESS(1) for for( 
[10] MAINPROCESS(1) for i = 0; 
[11] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[12] MAINPROCESS(1) for i++ ) 
[13] MAINPROCESS(1) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) if  if ( 
[15] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_used == 0) 
[18] SUBPROCESS(1) if  &&  ((ast_a_normal_current[i].s4_flg_lost <= 1) 
[19] SUBPROCESS(1) if  ||   (fl_abs( (FL)(ast_a_normal_current[i].s4_bin_up - s4_t_wall_bin) ) < TARGET_LOST_WALL_BIN_DIFF) 
[20] SUBPROCESS(1) if  ||   (fl_abs( (FL)(ast_a_normal_current[i].s4_bin_dn - s4_t_wall_bin) ) < TARGET_LOST_WALL_BIN_DIFF)) 
[21] SUBPROCESS(1) if  &&  (ast_a_target_prev[s4_a_target_prev_index].fl_Robs != CFL_UNKNOWN_VALUE) 
[22] SUBPROCESS(1) if  &&  (ast_a_target_prev[s4_a_target_prev_index].s4_flg_used == 0)) 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) equal s4_t_connect 0;
[25] SUBSUBPROCESS(1) func<start> fn_bsm_sel_set_search_area( 
[26] SUBSUBPROCESS(1) func &fl_t_vy_th 
[27] SUBSUBPROCESS(1) func<end> ); 
[28] SUBSUBPROCESS(1) func<start> s4_t_connect = s4_bsm_sel_check_condition( 
[29] SUBSUBPROCESS(1) func fl_t_vy_th 
[30] SUBSUBPROCESS(1) func<end> ); 
[31] SUBSUBPROCESS(1) if if( 
[32] SUBSUBPROCESS(1) if s4_t_connect==1 
[33] SUBSUBPROCESS(1) if ) 
[34] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[35] SUBSUBSUBPROCESS(1) equal as4_a_sample_indexs[*ps4_a_sample_num] i;
[36] SUBSUBSUBPROCESS(1) equal as4_a_sample_indexs_prev[*ps4_a_sample_num] s4_a_target_prev_index;
[37] SUBSUBSUBPROCESS(1) proc (*ps4_a_sample_num)++; 
[38] MAINPROCESS(2) proc return; 
----------------- Total Codes : 38 lines
--------------------------
[Function Name] : fn_bsm_sel_set_search_area 
-Return type : static VD 
-Argument : 6 
     [0] : const NORMAL_BSM   ast_a_normal_current[1] 
     [1] : const NORMAL_BSM   ast_a_target_prev[1] 
     [2] : FL   *pfl_a_rx_th 
     [3] : FL   *pfl_a_ry_th 
     [4] : FL   *pfl_a_vx_th 
     [5] : FL   *pfl_a_vy_th 
----- Codes -----
[1] MAINPROCESS(1) equal *pfl_a_rx_th RX_TH_TT;
[2] MAINPROCESS(1) equal *pfl_a_ry_th RY_TH_TT;
[3] MAINPROCESS(1) if if( 
[4] MAINPROCESS(1) if ast_a_normal_current[0].fl_Ryfil < RY_WALL_LIMIT_TT 
[5] MAINPROCESS(1) if ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal *pfl_a_rx_th RX_TH_TT + 1.0F;
[8] SUBPROCESS(1) equal *pfl_a_ry_th RY_TH_TT + 1.0F;
[9] MAINPROCESS(2) if  if ( 
[10] MAINPROCESS(2) if  fl_abs(ast_a_target_prev[0].fl_Rypred) < RY_CONNECT_WO_VY 
[11] MAINPROCESS(2) if  ) 
[12] MAINPROCESS(2) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal *pfl_a_vx_th TH_TT_MAX;
[14] SUBPROCESS(1) equal *pfl_a_vy_th TH_TT_MAX;
[15] MAINPROCESS(3) if  if ( 
[16] MAINPROCESS(3) if  (ast_a_target_prev[0].s4_flg_dc == OBJECT_TYPE_SOT 
[17] MAINPROCESS(3) if  ) 
[18] MAINPROCESS(3) if  &&  (fl_abs(ast_a_target_prev[0].fl_Rypred) < EKF_RY_SIDE)) 
[19] MAINPROCESS(3) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) equal *pfl_a_rx_th RX_TH_TT_SOT;
[21] SUBPROCESS(1) equal *pfl_a_ry_th RY_TH_TT_SOT;
[22] SUBPROCESS(1) equal *pfl_a_vy_th TH_TT_MAX;
[23] MAINPROCESS(4) if  if ( 
[24] MAINPROCESS(4) if  s4_abs((S4)s2_g_curvr_for_base) < (S4)130 
[25] MAINPROCESS(4) if  ) 
[26] MAINPROCESS(4) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) equal *pfl_a_rx_th CFL_RX_TH_TT_CURVE;
[28] SUBPROCESS(1) equal *pfl_a_ry_th CFL_RY_TH_TT_CURVE;
[29] MAINPROCESS(5) proc return; 
----------------- Total Codes : 29 lines
--------------------------
[Function Name] : s4_bsm_sel_check_condition 
-Return type : static S4 
-Argument : 6 
     [0] : const NORMAL_BSM   ast_a_normal_current[1] 
     [1] : const NORMAL_BSM   ast_a_target_prev[1] 
     [2] : FL   fl_a_rx_th 
     [3] : FL   fl_a_ry_th 
     [4] : FL   fl_a_vx_th 
     [5] : FL   fl_a_vy_th 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_connect; 
[2] MAINPROCESS(1) equal s4_t_connect 0;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  (fl_abs(ast_a_target_prev[0].fl_Rxpred - ast_a_normal_current[0].fl_Rxfil) < fl_a_rx_th 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) if  &&  (fl_abs(ast_a_target_prev[0].fl_Rypred - ast_a_normal_current[0].fl_Ryfil) < fl_a_ry_th)) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if  if ( 
[9] SUBPROCESS(1) if  (ast_a_target_prev[0].s4_flg_dc != OBJECT_TYPE_2F 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) if  &&  (ast_a_normal_current[0].s4_flg_dc != OBJECT_TYPE_2F)) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) if  if ( 
[14] SUBSUBPROCESS(1) if  (fl_abs(ast_a_target_prev[0].fl_Vxpred - ast_a_normal_current[0].fl_Vxfil) < fl_a_vx_th 
[15] SUBSUBPROCESS(1) if  ) 
[16] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_target_prev[0].fl_Vypred - ast_a_normal_current[0].fl_Vyfil) < fl_a_vy_th)) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) equal s4_t_connect 1;
[19] SUBPROCESS(2) else else 
[20] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[21] SUBSUBPROCESS(1) equal s4_t_connect 1;
[22] MAINPROCESS(2) proc return s4_t_connect; 
----------------- Total Codes : 22 lines
--------------------------
[Function Name] : s4_bsm_sel_select_sample 
-Return type : static S4 
-Argument : 7 
     [0] : S4   s4_a_pair_num_current 
     [1] : const NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_prev_index 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [4] : S4   s4_a_sample_num 
     [5] : const S4   as4_a_sample_indexs[NORMAL_BUFFSIZE] 
     [6] : const S4   as4_a_sample_indexs_prev[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 k; 
[2] MAINPROCESS(1) proc S4 s4_t_select_index; 
[3] MAINPROCESS(1) proc FL fl_t_min; 
[4] MAINPROCESS(1) proc FL fl_t_diff; 
[5] MAINPROCESS(1) equal FL fl_t_diff_x TH_TT_MAX;
[6] MAINPROCESS(1) equal FL fl_t_diff_y TH_TT_MAX;
[7] MAINPROCESS(1) equal s4_t_select_index -1;
[8] MAINPROCESS(1) if if( 
[9] MAINPROCESS(1) if s4_a_sample_num!=0 
[10] MAINPROCESS(1) if ) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal fl_t_min RX_TH_TT + RY_TH_TT+3.1F;
[13] SUBPROCESS(1) for for( 
[14] SUBPROCESS(1) for k=0; 
[15] SUBPROCESS(1) for k<s4_a_sample_num; 
[16] SUBPROCESS(1) for k++) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) func<start> fl_t_diff_x = (FL) (fl_abs(ast_a_normal_current[as4_a_sample_indexs[k]].fl_Rxfil - ast_a_target_prev[as4_a_sample_indexs_prev[k]].fl_Rxpred) 
[20] SUBSUBSUBPROCESS(1) func<end> ); 
[21] SUBSUBSUBPROCESS(1) func<start> fl_t_diff_y = (FL) (fl_abs(ast_a_normal_current[as4_a_sample_indexs[k]].fl_Ryfil - ast_a_target_prev[as4_a_sample_indexs_prev[k]].fl_Rypred) 
[22] SUBSUBSUBPROCESS(1) func<end> ); 
[23] SUBSUBPROCESS(2) equal fl_t_diff fl_t_diff_x + fl_t_diff_y;
[24] SUBSUBPROCESS(2) if if( 
[25] SUBSUBPROCESS(2) if fl_t_diff < fl_t_min 
[26] SUBSUBPROCESS(2) if ) 
[27] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBPROCESS(1) equal fl_t_min fl_t_diff;
[29] SUBSUBSUBPROCESS(1) equal s4_t_select_index as4_a_sample_indexs[k];
[30] MAINPROCESS(2) proc return s4_t_select_index; 
----------------- Total Codes : 30 lines
--------------------------
[Function Name] : fn_bsm_tracking_target 
-Return type : static VD 
-Argument : 4 
     [0] : NORMAL_BSM   ast_a_normal_current[1] 
     [1] : NORMAL_BSM   ast_a_target_prev[1] 
     [2] : S4   as4_a_used_ID[TARGET_BUFFSIZE] 
     [3] : NORMAL_BSM   ast_a_target_current[1] 
----- Codes -----
[1] MAINPROCESS(1) equal ast_a_normal_current[0].s4_flg_used 1;
[2] MAINPROCESS(1) equal ast_a_target_current[0] ast_a_normal_current[0];
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  (ast_a_target_current[0].s4_flg_dc == OBJECT_TYPE_2F 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) if  &&  (ast_a_target_prev[0].s4_flg_dc != OBJECT_TYPE_2F)) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vobs ast_a_target_prev[0].fl_Vobs_pred;
[9] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vxobs ast_a_target_prev[0].fl_Vxpred;
[10] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vyobs ast_a_target_prev[0].fl_Vypred;
[11] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vxfil ast_a_target_prev[0].fl_Vxpred;
[12] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vyfil ast_a_target_prev[0].fl_Vypred;
[13] MAINPROCESS(2) if  if ( 
[14] MAINPROCESS(2) if  (ast_a_target_current[0].s4_flg_dc != OBJECT_TYPE_2F 
[15] MAINPROCESS(2) if  ) 
[16] MAINPROCESS(2) if  &&  (ast_a_target_prev[0].s4_flg_dc == OBJECT_TYPE_2F)) 
[17] MAINPROCESS(2) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) equal ast_a_target_prev[0].fl_Vxpred ast_a_target_current[0].fl_Vxfil;
[19] SUBPROCESS(1) equal ast_a_target_prev[0].fl_Vypred ast_a_target_current[0].fl_Vyfil;
[20] MAINPROCESS(3) if  if ( 
[21] MAINPROCESS(3) if  (st_g_bsm_loop_data.u1_truck_flg != (U1)0 
[22] MAINPROCESS(3) if  ) 
[23] MAINPROCESS(3) if  &&  (ast_a_target_current[0].fl_Ryfil > CFL_TRUCK_RY_MIN) 
[24] MAINPROCESS(3) if  &&  ((ast_a_target_current[0].fl_Rxfil - ast_a_target_prev[0].fl_Rxpred) > (FL)0.0F) 
[25] MAINPROCESS(3) if  &&  (ast_a_target_current[0].fl_Rxfil > CFL_TRUCK_RX_MIN) 
[26] MAINPROCESS(3) if  &&  (ast_a_target_current[0].fl_Rxfil < CFL_TRUCK_RX_MAX)) 
[27] MAINPROCESS(3) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) equal ast_a_target_current[0].fl_Rxfil - CFL_TRUCK_WIDTH;
[29] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vxfil (FL)0.0F;
[30] MAINPROCESS(4) equal ast_a_target_prev[0].s4_flg_used 1;
[31] MAINPROCESS(4) func<start> fn_ab_track( 
[32] MAINPROCESS(4) func 1 
[33] MAINPROCESS(4) func<end> ); 
[34] MAINPROCESS(4) func<start> calc_prediction_of_normaldata( 
[35] MAINPROCESS(4) func &ast_a_target_current[0] 
[36] MAINPROCESS(4) func<end> ); 
[37] MAINPROCESS(4) if  if ( 
[38] MAINPROCESS(4) if  ast_a_target_current[0].s4_flg_track == CS4_S4MAX 
[39] MAINPROCESS(4) if  ) 
[40] MAINPROCESS(4) subproc SUBPROCESS(1) 
[41] MAINPROCESS(5) else else 
[42] MAINPROCESS(5) subproc SUBPROCESS(1) 
[43] SUBPROCESS(1) equal ast_a_target_current[0].s4_flg_track ast_a_target_prev[0].s4_flg_track+(S4)1;
[44] MAINPROCESS(6) equal ast_a_target_current[0].s4_flg_new 0;
[45] MAINPROCESS(6) if  if ( 
[46] MAINPROCESS(6) if  ((S2)s4_abs(s2_g_curvr_for_base) < (S2)2200 
[47] MAINPROCESS(6) if  ) 
[48] MAINPROCESS(6) if  &&  (ast_a_normal_current[0].s4_flg_dc == OBJECT_TYPE_2F)) 
[49] MAINPROCESS(6) subproc SUBPROCESS(1) 
[50] SUBPROCESS(1) equal ast_a_target_current[0].s4_flg_new ast_a_normal_current[0].s4_flg_new;
[51] MAINPROCESS(7) equal ast_a_target_current[0].s4_flg_lost 0;
[52] MAINPROCESS(7) if  if ( 
[53] MAINPROCESS(7) if  ((S2)s4_abs(s2_g_curvr_for_base) < (S2)2200 
[54] MAINPROCESS(7) if  ) 
[55] MAINPROCESS(7) if  &&  (ast_a_normal_current[0].s4_flg_dc == OBJECT_TYPE_2F)) 
[56] MAINPROCESS(7) subproc SUBPROCESS(1) 
[57] SUBPROCESS(1) equal ast_a_target_current[0].s4_flg_lost ast_a_normal_current[0].s4_flg_lost;
[58] MAINPROCESS(8) equal ast_a_target_current[0].s4_tracked (S4)1;
[59] MAINPROCESS(8) equal ast_a_target_prev[0].s4_tracked (S4)1;
[60] MAINPROCESS(8) equal ast_a_target_current[0].s4_flg_used 1;
[61] MAINPROCESS(8) equal ast_a_target_current[0].s4_flg_single_peak_up ast_a_target_prev[0].s4_flg_single_peak_up;
[62] MAINPROCESS(8) equal ast_a_target_current[0].u4_ctr_fa ast_a_target_prev[0].u4_ctr_fa;
[63] MAINPROCESS(8) equal ast_a_target_current[0].s4_ctr_sot_cut ast_a_target_prev[0].s4_ctr_sot_cut;
[64] MAINPROCESS(8) if  if ( 
[65] MAINPROCESS(8) if  (ast_a_normal_current[0].s4_flg_reliable == (S4)1 
[66] MAINPROCESS(8) if  ) 
[67] MAINPROCESS(8) if  ||  (ast_a_target_prev[0].s4_flg_reliable == (S4)1)) 
[68] MAINPROCESS(8) subproc SUBPROCESS(1) 
[69] SUBPROCESS(1) equal ast_a_target_current[0].s4_flg_reliable (S4)1;
[70] MAINPROCESS(9) if  if ( 
[71] MAINPROCESS(9) if  (ast_a_normal_current[0].s4_flg_lost >= (S4)5 
[72] MAINPROCESS(9) if  ) 
[73] MAINPROCESS(9) if  &&  (ast_a_normal_current[0].s4_flg_track < (S4)36)) 
[74] MAINPROCESS(9) subproc SUBPROCESS(1) 
[75] SUBPROCESS(1) equal ast_a_target_current[0].s4_flg_reliable (S4)0;
[76] MAINPROCESS(10) equal ast_a_target_current[0].s4_ctr_tos ast_a_target_prev[0].s4_ctr_tos;
[77] MAINPROCESS(10) equal ast_a_target_current[0].s4_ID_num ast_a_target_prev[0].s4_ID_num;
[78] MAINPROCESS(10) equal as4_a_used_ID[ast_a_target_prev[0].s4_ID_num-1] 1;
[79] MAINPROCESS(10) proc return; 
----------------- Total Codes : 79 lines
--------------------------
[Function Name] : fn_bsm_sel_extrapolate_target 
-Return type : static VD 
-Argument : 5 
     [0] : S4   s4_a_target_num_prev 
     [1] : NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [2] : S4   *ps4_a_target_num_current 
     [3] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
     [4] : S4   as4_t_used_ID[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal S4 tmp_connect_num TARGET_CONNECT_NUM;
[3] MAINPROCESS(1) equal S4 tmp_lost_max TARGET_LOST_MAX;
[4] MAINPROCESS(1) proc S4 s4_t_wall_bin; 
[5] MAINPROCESS(1) equal FL fl_t_tmp_alarm_x_min ALARM_X_IN       + ALARM_X_OFFSET_IN;
[6] MAINPROCESS(1) equal FL fl_t_tmp_alarm_x_max ALARM_X_OUT      + ALARM_X_OFFSET_OUT;
[7] MAINPROCESS(1) equal FL fl_t_tmp_alarm_y_min CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET;
[8] MAINPROCESS(1) equal FL fl_t_tmp_alarm_y_max ALARM_Y_FORWARD;
[9] MAINPROCESS(1) equal s4_t_wall_bin (S4)(st_g_bsm_loop_data.afl_wall_width[0]/RCOF*0.5F)+NB_FFT_PT/2 - 1;
[10] MAINPROCESS(1) for for( 
[11] MAINPROCESS(1) for i=0; 
[12] MAINPROCESS(1) for i<s4_a_target_num_prev; 
[13] MAINPROCESS(1) for i++ ) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal tmp_connect_num TARGET_CONNECT_NUM;
[16] SUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX;
[17] SUBPROCESS(1) if  if ( 
[18] SUBPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] != 0 
[19] SUBPROCESS(1) if  ) 
[20] SUBPROCESS(1) if  ||  (st_g_bsm_loop_data.as4_flg_passing[0] > PASSING_COUNT_MIN)) 
[21] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[22] SUBSUBPROCESS(1) if  if ( 
[23] SUBSUBPROCESS(1) if  (ast_a_target_prev[i].fl_Rxpred > fl_t_tmp_alarm_x_min 
[24] SUBSUBPROCESS(1) if  ) 
[25] SUBSUBPROCESS(1) if  &&  (ast_a_target_prev[i].fl_Rxpred < fl_t_tmp_alarm_x_max) 
[26] SUBSUBPROCESS(1) if  &&  (ast_a_target_prev[i].fl_Rypred > fl_t_tmp_alarm_y_min) 
[27] SUBSUBPROCESS(1) if  &&  (ast_a_target_prev[i].fl_Rypred < fl_t_tmp_alarm_y_max)) 
[28] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[29] SUBSUBSUBPROCESS(1) equal tmp_connect_num TARGET_CONNECT_NUM_SIDE;
[30] SUBSUBSUBPROCESS(1) if  if ( 
[31] SUBSUBSUBPROCESS(1) if  fl_abs(ast_a_target_prev[i].fl_Rypred) < EKF_RY_SIDE 
[32] SUBSUBSUBPROCESS(1) if  ) 
[33] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[34] SUBSUBSUBSUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX_SIDE;
[35] SUBSUBSUBSUBPROCESS(1) if  if ( 
[36] SUBSUBSUBSUBPROCESS(1) if  ast_a_target_prev[i].s4_flg_single_peak_up == 1 
[37] SUBSUBSUBSUBPROCESS(1) if  ) 
[38] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[39] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_lost_max 0;
[40] SUBSUBSUBPROCESS(2) else if  else if ( 
[41] SUBSUBSUBPROCESS(2) else if  (ast_a_target_prev[i].fl_Rxpred > (fl_t_tmp_alarm_x_min + 1.0F) 
[42] SUBSUBSUBPROCESS(2) else if  ) 
[43] SUBSUBSUBPROCESS(2) else if  &&  (ast_a_target_prev[i].fl_Rxpred < (fl_t_tmp_alarm_x_max - 1.0F)) 
[44] SUBSUBSUBPROCESS(2) else if  &&  (ast_a_target_prev[i].fl_Rypred > (fl_t_tmp_alarm_y_min + 2.0F)) 
[45] SUBSUBSUBPROCESS(2) else if  &&  (ast_a_target_prev[i].fl_Rypred < (fl_t_tmp_alarm_y_max - 2.0F))) 
[46] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[47] SUBSUBSUBSUBPROCESS(1) if  if ( 
[48] SUBSUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_fast_sot_flg[0] != (S4)0 
[49] SUBSUBSUBSUBPROCESS(1) if  ) 
[50] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[51] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_lost_max (S4)0;
[52] SUBSUBSUBSUBPROCESS(2) else else 
[53] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[54] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX_INAREA;
[55] SUBSUBSUBPROCESS(3) else else 
[56] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[57] SUBSUBSUBSUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX_SOT;
[58] SUBSUBPROCESS(2) else else 
[59] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[60] SUBSUBSUBPROCESS(1) if  if ( 
[61] SUBSUBSUBPROCESS(1) if  ast_a_target_prev[i].s4_flg_dc == OBJECT_TYPE_2F 
[62] SUBSUBSUBPROCESS(1) if  ) 
[63] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[64] SUBSUBSUBSUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX_2F_OUTAREA;
[65] SUBSUBSUBPROCESS(2) if  if ( 
[66] SUBSUBSUBPROCESS(2) if  (st_g_bsm_loop_data.afl_wall_width[0] - ast_a_target_prev[i].fl_Rxpred) < CFL_WALL_RANGE 
[67] SUBSUBSUBPROCESS(2) if  ) 
[68] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[69] SUBSUBSUBSUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX_SIDE;
[70] SUBSUBSUBPROCESS(3) if  if ( 
[71] SUBSUBSUBPROCESS(3) if  (st_g_bsm_loop_data.as4_slow_sot_find[0] == (S4)0 
[72] SUBSUBSUBPROCESS(3) if  ) 
[73] SUBSUBSUBPROCESS(3) if  &&  (st_g_bsm_loop_data.as4_flg_leading[0] == (S4)0) 
[74] SUBSUBSUBPROCESS(3) if  &&  (ast_a_target_prev[i].fl_Rypred > (FL)ALARM_Y_FORWARD)) 
[75] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[76] SUBSUBSUBSUBPROCESS(1) equal tmp_lost_max (S4)0;
[77] SUBPROCESS(2) if  if ( 
[78] SUBPROCESS(2) if  (ast_a_target_prev[i].fl_Robs != CFL_UNKNOWN_VALUE 
[79] SUBPROCESS(2) if  ) 
[80] SUBPROCESS(2) if  &&  (ast_a_target_prev[i].s4_flg_used == 0) 
[81] SUBPROCESS(2) if  &&  (ast_a_target_prev[i].s4_flg_track > tmp_connect_num) 
[82] SUBPROCESS(2) if  &&  (ast_a_target_prev[i].s4_flg_lost < tmp_lost_max) 
[83] SUBPROCESS(2) if  &&  (*ps4_a_target_num_current < TARGET_BUFFSIZE)) 
[84] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[85] SUBSUBPROCESS(1) func<start> predict_target( 
[86] SUBSUBPROCESS(1) func &ast_a_target_current[*ps4_a_target_num_current] 
[87] SUBSUBPROCESS(1) func<end> ); 
[88] SUBSUBPROCESS(1) if  if ( 
[89] SUBSUBPROCESS(1) if  ((fl_abs((FL)(ast_a_target_current[*ps4_a_target_num_current].s4_bin_up - s4_t_wall_bin)) < TARGET_LOST_WALL_BIN_DIFF 
[90] SUBSUBPROCESS(1) if  ) 
[91] SUBSUBPROCESS(1) if  ||   (fl_abs((FL)(ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn - s4_t_wall_bin)) < TARGET_LOST_WALL_BIN_DIFF)) 
[92] SUBSUBPROCESS(1) if  &&  (fl_abs((FL)(ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_music) - (180.0F - st_g_bsm_loop_data.afl_installed_angle[0])) > TARGET_LOST_WALL_DOA_DIFF) 
[93] SUBSUBPROCESS(1) if  &&  (fl_abs((FL)(ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_music) - (180.0F - st_g_bsm_loop_data.afl_installed_angle[0])) > TARGET_LOST_WALL_DOA_DIFF) 
[94] SUBSUBPROCESS(1) if  &&  (ast_a_target_current[*ps4_a_target_num_current].fl_power_up > WALL_OBJECT_POW_TH) 
[95] SUBSUBPROCESS(1) if  &&  (ast_a_target_current[*ps4_a_target_num_current].fl_power_dn > WALL_OBJECT_POW_TH) 
[96] SUBSUBPROCESS(1) if  &&  (!((ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_up) 
[97] SUBSUBPROCESS(1) if  &&     (ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn) 
[98] SUBSUBPROCESS(1) if  &&     (ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_music_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_music) 
[99] SUBSUBPROCESS(1) if  &&     (ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_music_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_music))) 
[100] SUBSUBPROCESS(1) if  &&  ((afl_g_cvw_lfm_ftt_power[0][ast_a_target_current[*ps4_a_target_num_current].s4_bin_up] - ast_a_target_current[*ps4_a_target_num_current].fl_power_up_music) > 0.0F) 
[101] SUBSUBPROCESS(1) if  &&  ((afl_g_cvw_lfm_ftt_power[1][ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn] - ast_a_target_current[*ps4_a_target_num_current].fl_power_dn_music) > 0.0F)) 
[102] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[103] SUBSUBPROCESS(2) else else 
[104] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[105] SUBSUBSUBPROCESS(1) proc ast_a_target_current[*ps4_a_target_num_current].s4_flg_lost++; 
[106] SUBSUBPROCESS(3) equal as4_t_used_ID[ast_a_target_prev[i].s4_ID_num-1] 1;
[107] SUBSUBPROCESS(3) equal ast_a_target_prev[i].s4_flg_used 1;
[108] SUBSUBPROCESS(3) proc (*ps4_a_target_num_current)++; 
[109] MAINPROCESS(2) proc return; 
----------------- Total Codes : 109 lines
--------------------------
[Function Name] : fn_bsm_sel_add_target 
-Return type : static VD 
-Argument : 5 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   *ps4_a_target_num_current 
     [3] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
     [4] : S4   as4_t_used_ID[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) equal S4 tmp_connect_th CANOUT_TRK_MIN;
[4] MAINPROCESS(1) proc FL tmp_r_max; 
[5] MAINPROCESS(1) proc S4 index; 
[6] MAINPROCESS(1) for for( 
[7] MAINPROCESS(1) for i = 0; 
[8] MAINPROCESS(1) for i < s4_a_pair_num_current; 
[9] MAINPROCESS(1) for i++ ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal tmp_connect_th CANOUT_TRK_MIN;
[12] SUBPROCESS(1) if  if ( 
[13] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[14] SUBPROCESS(1) if  ) 
[15] SUBPROCESS(1) if  &&  (ast_a_normal_current[i].fl_Vyfil < 0.0F) 
[16] SUBPROCESS(1) if  &&  (fl_g_v_self_bsm_for_base < CANOUT_VSELF_SLOW)) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal tmp_connect_th CANOUT_TRK_MIN_SLOW;
[19] SUBPROCESS(2) if  if ( 
[20] SUBPROCESS(2) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[21] SUBPROCESS(2) if  ) 
[22] SUBPROCESS(2) if  &&  (ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_2F) 
[23] SUBPROCESS(2) if  &&  (ast_a_normal_current[i].fl_Ryfil > (CFL_ALARM_Y_BACKWARD + 3.0F))) 
[24] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(1) equal tmp_connect_th CANOUT_TRK_MIN_2FCW;
[26] SUBPROCESS(3) if  if ( 
[27] SUBPROCESS(3) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[28] SUBPROCESS(3) if  ) 
[29] SUBPROCESS(3) if  &&  (ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_SOT) 
[30] SUBPROCESS(3) if  &&  (ast_a_normal_current[i].fl_Rxfil < st_g_bsm_loop_data.afl_wall_width[0])) 
[31] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) equal tmp_connect_th CANOUT_TRK_MIN_SOT;
[33] SUBPROCESS(4) if  if ( 
[34] SUBPROCESS(4) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[35] SUBPROCESS(4) if  ) 
[36] SUBPROCESS(4) if  &&  (ast_a_normal_current[i].s4_flg_used == 0) 
[37] SUBPROCESS(4) if  &&  (ast_a_normal_current[i].s4_flg_stop == 0) 
[38] SUBPROCESS(4) if  &&  (ast_a_normal_current[i].s4_flg_track > tmp_connect_th) 
[39] SUBPROCESS(4) if  &&  (ast_a_normal_current[i].s4_flg_lost == 0) 
[40] SUBPROCESS(4) if  &&  ((S4)fl_abs( (FL)s2_g_curvr_for_base ) > CANOUT_CURVER_MIN) 
[41] SUBPROCESS(4) if  &&  (fl_abs(fl_g_v_self_bsm_for_base) > CFL_CANOUT_VSELF_MIN)) 
[42] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[43] SUBSUBPROCESS(1) if  if ( 
[44] SUBSUBPROCESS(1) if  (*ps4_a_target_num_current) < TARGET_BUFFSIZE 
[45] SUBSUBPROCESS(1) if  ) 
[46] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[47] SUBSUBSUBPROCESS(1) equal ast_a_target_current[(*ps4_a_target_num_current)] ast_a_normal_current[i];
[48] SUBSUBSUBPROCESS(1) equal ast_a_normal_current[i].s4_flg_used 1;
[49] SUBSUBSUBPROCESS(1) func<start> predict_object_trajectory_simple( 
[50] SUBSUBSUBPROCESS(1) func 1 
[51] SUBSUBSUBPROCESS(1) func<end> ); 
[52] SUBSUBSUBPROCESS(1) if  if ( 
[53] SUBSUBSUBPROCESS(1) if  (ast_a_normal_current[i].s4_flg_heiso_up != 0 
[54] SUBSUBSUBPROCESS(1) if  ) 
[55] SUBSUBSUBPROCESS(1) if  &&  (ast_a_normal_current[i].s4_flg_heiso_dn != 0)) 
[56] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[57] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_target_current[(*ps4_a_target_num_current)].s4_flg_track = (S4)(PRIOR_TRK_NUM+1 
[58] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[59] SUBSUBSUBPROCESS(2) else else 
[60] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[61] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[(*ps4_a_target_num_current)].s4_flg_track 1;
[62] SUBSUBSUBPROCESS(3) equal ast_a_target_current[(*ps4_a_target_num_current)].s4_flg_lost 0;
[63] SUBSUBSUBPROCESS(3) if  if ( 
[64] SUBSUBSUBPROCESS(3) if  ((S2)s4_abs(s2_g_curvr_for_base) < (S2)2200 
[65] SUBSUBSUBPROCESS(3) if  ) 
[66] SUBSUBSUBPROCESS(3) if  &&  (ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_2F)) 
[67] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[68] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[(*ps4_a_target_num_current)].s4_flg_lost ast_a_normal_current[i].s4_flg_lost;
[69] SUBSUBSUBPROCESS(4) if  if ( 
[70] SUBSUBSUBPROCESS(4) if  (ast_a_normal_current[i].s4_flg_heiso_up != 0 
[71] SUBSUBSUBPROCESS(4) if  ) 
[72] SUBSUBSUBPROCESS(4) if  &&  (ast_a_normal_current[i].s4_flg_heiso_dn != 0)) 
[73] SUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBPROCESS(1) 
[74] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[(*ps4_a_target_num_current)].s4_flg_new 0;
[75] SUBSUBSUBPROCESS(5) else else 
[76] SUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBPROCESS(1) 
[77] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[(*ps4_a_target_num_current)].s4_flg_new 1;
[78] SUBSUBSUBPROCESS(6) equal ast_a_target_current[(*ps4_a_target_num_current)].s4_flg_used 1;
[79] SUBSUBSUBPROCESS(6) for  for ( 
[80] SUBSUBSUBPROCESS(6) for  j = 0; 
[81] SUBSUBSUBPROCESS(6) for  j < TARGET_BUFFSIZE; 
[82] SUBSUBSUBPROCESS(6) for  j++) 
[83] SUBSUBSUBPROCESS(6) subproc SUBSUBSUBSUBPROCESS(1) 
[84] SUBSUBSUBSUBPROCESS(1) if  if ( 
[85] SUBSUBSUBSUBPROCESS(1) if  as4_t_used_ID[j] == 0 
[86] SUBSUBSUBSUBPROCESS(1) if  ) 
[87] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[88] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[(*ps4_a_target_num_current)].s4_ID_num j+(S4)1;
[89] SUBSUBSUBSUBSUBPROCESS(1) equal as4_t_used_ID[j] 1;
[90] SUBSUBSUBSUBSUBPROCESS(1) proc break; 
[91] SUBSUBSUBPROCESS(7) proc (*ps4_a_target_num_current)++; 
[92] SUBSUBPROCESS(2) else else 
[93] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[94] SUBSUBSUBPROCESS(1) equal tmp_r_max 0.0F;
[95] SUBSUBSUBPROCESS(1) equal index -1;
[96] SUBSUBSUBPROCESS(1) for  for ( 
[97] SUBSUBSUBPROCESS(1) for  j = 0; 
[98] SUBSUBSUBPROCESS(1) for  j < (*ps4_a_target_num_current 
[99] SUBSUBSUBPROCESS(1) for  ); 
[100] SUBSUBSUBPROCESS(1) for  j++) 
[101] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[102] SUBSUBSUBSUBPROCESS(1) if  if ( 
[103] SUBSUBSUBSUBPROCESS(1) if  (fl_abs(ast_a_normal_current[i].fl_Robs) < fl_abs(ast_a_target_current[j].fl_Robs) 
[104] SUBSUBSUBSUBPROCESS(1) if  ) 
[105] SUBSUBSUBSUBPROCESS(1) if  &&  (tmp_r_max <  fl_abs(ast_a_target_current[j].fl_Robs))) 
[106] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[107] SUBSUBSUBSUBSUBPROCESS(1) func<start> tmp_r_max =  fl_abs(ast_a_target_current[j].fl_Robs 
[108] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[109] SUBSUBSUBSUBSUBPROCESS(1) equal index j;
[110] SUBSUBSUBPROCESS(2) if  if ( 
[111] SUBSUBSUBPROCESS(2) if  index != -1 
[112] SUBSUBSUBPROCESS(2) if  ) 
[113] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[114] SUBSUBSUBSUBPROCESS(1) equal as4_t_used_ID[ast_a_target_current[index].s4_ID_num-1] 0;
[115] SUBSUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[index], 1 
[116] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[117] SUBSUBSUBSUBPROCESS(1) func<start> s4_trim_target(ast_a_target_current 
[118] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[119] SUBSUBSUBSUBPROCESS(1) proc (*ps4_a_target_num_current)--; 
[120] SUBSUBSUBSUBPROCESS(1) proc i--; 
[121] SUBSUBSUBSUBPROCESS(1) if  if ( 
[122] SUBSUBSUBSUBPROCESS(1) if  i < -1 
[123] SUBSUBSUBSUBPROCESS(1) if  ) 
[124] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[125] SUBSUBSUBSUBSUBPROCESS(1) equal i -1;
[126] MAINPROCESS(2) proc return; 
----------------- Total Codes : 126 lines
--------------------------
[Function Name] : fn_bsm_sel_exclude_target 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_bsm_sel_extrgt_lot_exp( 
[2] MAINPROCESS(1) func ast_a_target_current 
[3] MAINPROCESS(1) func<end> ); 
[4] MAINPROCESS(1) func<start> fn_bsm_sel_extrgt_stationary( 
[5] MAINPROCESS(1) func ast_a_target_current 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) func<start> fn_bsm_sel_extrgt_no_rel_spd( 
[8] MAINPROCESS(1) func ast_a_target_current 
[9] MAINPROCESS(1) func<end> ); 
[10] MAINPROCESS(1) func<start> fn_bsm_sel_extrgt_stag_just_beside( 
[11] MAINPROCESS(1) func ast_a_target_current 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) func<start> fn_bsm_sel_extrgt_just_beside( 
[14] MAINPROCESS(1) func ast_a_target_current 
[15] MAINPROCESS(1) func<end> ); 
[16] MAINPROCESS(1) func<start> fn_bsm_sel_extrgt_around_beside( 
[17] MAINPROCESS(1) func ast_a_target_current 
[18] MAINPROCESS(1) func<end> ); 
[19] MAINPROCESS(1) func<start> fn_bsm_sel_extrgt_opst_sns_area( 
[20] MAINPROCESS(1) func ast_a_target_current 
[21] MAINPROCESS(1) func<end> ); 
[22] MAINPROCESS(1) func<start> fn_bsm_sel_extrgt_around_mycar( 
[23] MAINPROCESS(1) func ast_a_target_current 
[24] MAINPROCESS(1) func<end> ); 
[25] MAINPROCESS(1) func<start> fn_bsm_sel_extrgt_outside_load( 
[26] MAINPROCESS(1) func ast_a_target_current 
[27] MAINPROCESS(1) func<end> ); 
[28] MAINPROCESS(1) proc return; 
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_lot_exp 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal S4 tmp_lost_max TARGET_LOST_MAX;
[3] MAINPROCESS(1) for  for ( 
[4] MAINPROCESS(1) for  i = 0; 
[5] MAINPROCESS(1) for  i < s4_a_target_num_current; 
[6] MAINPROCESS(1) for  i++) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if  if ( 
[9] SUBPROCESS(1) if  ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) if  if ( 
[13] SUBSUBPROCESS(1) if  fl_abs(ast_a_target_current[i].fl_Rypred) < EKF_RY_SIDE 
[14] SUBSUBPROCESS(1) if  ) 
[15] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[16] SUBSUBSUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX_SIDE;
[17] SUBSUBPROCESS(2) else else 
[18] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX;
[20] SUBSUBPROCESS(3) if  if ( 
[21] SUBSUBPROCESS(3) if  ast_a_target_current[i].s4_flg_lost > tmp_lost_max 
[22] SUBSUBPROCESS(3) if  ) 
[23] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[25] SUBSUBSUBPROCESS(1) func<end> ); 
[26] MAINPROCESS(2) proc return; 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_stationary 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal FL tmp_alarm_x_min ALARM_X_IN       + ALARM_X_OFFSET_IN;
[3] MAINPROCESS(1) for  for ( 
[4] MAINPROCESS(1) for  i = 0; 
[5] MAINPROCESS(1) for  i < s4_a_target_num_current; 
[6] MAINPROCESS(1) for  i++) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if  if ( 
[9] SUBPROCESS(1) if  ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) if  if ( 
[13] SUBSUBPROCESS(1) if  ((ast_a_target_current[i].fl_Vyfil < ((-fl_g_v_self_bsm_for_base / 3.6F) + 1.0F) 
[14] SUBSUBPROCESS(1) if  ) 
[15] SUBSUBPROCESS(1) if  ||   (ast_a_target_current[i].s4_flg_stop == 1)) 
[16] SUBSUBPROCESS(1) if  &&  ((ast_a_target_current[i].fl_Rxfil > tmp_alarm_x_min) 
[17] SUBSUBPROCESS(1) if  ||   (ast_a_target_current[i].fl_Rxfil < st_g_bsm_loop_data.afl_wall_width[0]))) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[20] SUBSUBSUBPROCESS(1) func<end> ); 
[21] MAINPROCESS(2) proc return; 
----------------- Total Codes : 21 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_no_rel_spd 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  i = 0; 
[4] MAINPROCESS(1) for  i < s4_a_target_num_current; 
[5] MAINPROCESS(1) for  i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) if  &&  (ast_a_target_current[i].s4_flg_track <= PRIOR_TRK_NUM)) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) if  if ( 
[13] SUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[14] SUBSUBPROCESS(1) if  ) 
[15] SUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN) 
[16] SUBSUBPROCESS(1) if  &&  (ast_a_target_current[i].fl_Vyfil == 0.0F)) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[19] SUBSUBSUBPROCESS(1) func<end> ); 
[20] MAINPROCESS(2) proc return; 
----------------- Total Codes : 20 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_stag_just_beside 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  i = 0; 
[4] MAINPROCESS(1) for  i < s4_a_target_num_current; 
[5] MAINPROCESS(1) for  i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) if  &&  (ast_a_target_current[i].s4_flg_track <= PRIOR_TRK_NUM)) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) if  if ( 
[13] SUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[14] SUBSUBPROCESS(1) if  ) 
[15] SUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN) 
[16] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_target_current[i].fl_Ryfil) < 0.5F) 
[17] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_target_current[i].fl_Rypred) < 1.0F) 
[18] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_target_current[i].fl_Vyfil) < 0.5F) 
[19] SUBSUBPROCESS(1) if  &&  (fl_abs(ast_a_target_current[i].fl_Vypred) < 0.5F)) 
[20] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[21] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[22] SUBSUBSUBPROCESS(1) func<end> ); 
[23] MAINPROCESS(2) proc return; 
----------------- Total Codes : 23 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_just_beside 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  i = 0; 
[4] MAINPROCESS(1) for  i < s4_a_target_num_current; 
[5] MAINPROCESS(1) for  i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) if  &&  (ast_a_target_current[i].s4_flg_track <= PRIOR_TRK_NUM)) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) if  if ( 
[13] SUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[14] SUBSUBPROCESS(1) if  ) 
[15] SUBSUBPROCESS(1) if  &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN) 
[16] SUBSUBPROCESS(1) if  &&  (ast_a_target_current[i].fl_Ryfil > RY_WALL_LIMIT)) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[19] SUBSUBSUBPROCESS(1) func<end> ); 
[20] MAINPROCESS(2) proc return; 
----------------- Total Codes : 20 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_around_beside 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal FL min_x TH_TT_MAX;
[3] MAINPROCESS(1) equal S4 min_index -1;
[4] MAINPROCESS(1) equal S4 side_num 0;
[5] MAINPROCESS(1) proc FL fl_t_rxfil_abs; 
[6] MAINPROCESS(1) proc FL fl_t_rxfil_diff_min_abs; 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  i = 0; 
[9] MAINPROCESS(1) for  i < s4_a_target_num_current; 
[10] MAINPROCESS(1) for  i++) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if  if ( 
[13] SUBPROCESS(1) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[14] SUBPROCESS(1) if  ) 
[15] SUBPROCESS(1) if  &&  (fl_abs(ast_a_target_current[i].fl_Ryfil) < EKF_RY_SIDE)) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) proc side_num++; 
[18] SUBSUBPROCESS(1) if  if ( 
[19] SUBSUBPROCESS(1) if  ast_a_target_current[i].fl_Rxfil < min_x 
[20] SUBSUBPROCESS(1) if  ) 
[21] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBPROCESS(1) equal min_x ast_a_target_current[i].fl_Rxfil;
[23] SUBSUBSUBPROCESS(1) equal min_index i;
[24] MAINPROCESS(2) if  if ( 
[25] MAINPROCESS(2) if  side_num > 1 
[26] MAINPROCESS(2) if  ) 
[27] MAINPROCESS(2) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) for  for ( 
[29] SUBPROCESS(1) for  i = 0; 
[30] SUBPROCESS(1) for  i < s4_a_target_num_current; 
[31] SUBPROCESS(1) for  i++) 
[32] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[33] SUBSUBPROCESS(1) func<start> fl_t_rxfil_abs = fl_abs(ast_a_target_current[i].fl_Ryfil 
[34] SUBSUBPROCESS(1) func<end> ); 
[35] SUBSUBPROCESS(1) func<start> fl_t_rxfil_diff_min_abs = fl_abs(ast_a_target_current[i].fl_Rxfil - ast_a_target_current[min_index].fl_Rxfil 
[36] SUBSUBPROCESS(1) func<end> ); 
[37] SUBSUBPROCESS(1) if  if ( 
[38] SUBSUBPROCESS(1) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[39] SUBSUBPROCESS(1) if  ) 
[40] SUBSUBPROCESS(1) if  &&  (fl_t_rxfil_abs < EKF_RY_SIDE) 
[41] SUBSUBPROCESS(1) if  &&  (i != min_index) 
[42] SUBSUBPROCESS(1) if  &&  (fl_t_rxfil_diff_min_abs > (FL)0.5F)) 
[43] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[45] SUBSUBSUBPROCESS(1) func<end> ); 
[46] MAINPROCESS(3) proc return; 
----------------- Total Codes : 46 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_opst_sns_area 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  i = 0; 
[4] MAINPROCESS(1) for  i < s4_a_target_num_current; 
[5] MAINPROCESS(1) for  i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if  if ( 
[12] SUBSUBPROCESS(1) if  ast_a_target_current[i].fl_Rxfil <= (-st_g_bsm_loop_data.afl_installed_angle[1] - 1.5F) 
[13] SUBSUBPROCESS(1) if  ) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[16] SUBSUBSUBPROCESS(1) func<end> ); 
[17] MAINPROCESS(2) proc return; 
----------------- Total Codes : 17 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_around_mycar 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  i = 0; 
[4] MAINPROCESS(1) for  i < s4_a_target_num_current; 
[5] MAINPROCESS(1) for  i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if  if ( 
[12] SUBSUBPROCESS(1) if  (ast_a_target_current[i].fl_Rxfil < RX_AROUND_TH_TT 
[13] SUBSUBPROCESS(1) if  ) 
[14] SUBSUBPROCESS(1) if  &&  (ast_a_target_current[i].fl_Ryfil > RY_AROUND_TH_TT)) 
[15] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[16] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[17] SUBSUBSUBPROCESS(1) func<end> ); 
[18] MAINPROCESS(2) proc return; 
----------------- Total Codes : 18 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_outside_load 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) equal S4 tmp_Rx_index 0;
[3] MAINPROCESS(1) for  for ( 
[4] MAINPROCESS(1) for  i = 0; 
[5] MAINPROCESS(1) for  i < s4_a_target_num_current; 
[6] MAINPROCESS(1) for  i++) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal tmp_Rx_index (S4) ast_a_target_current[i].fl_Ryfil;
[9] SUBPROCESS(1) if  if ( 
[10] SUBPROCESS(1) if  tmp_Rx_index < 0 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) equal tmp_Rx_index 0;
[14] SUBPROCESS(2) if  if ( 
[15] SUBPROCESS(2) if  tmp_Rx_index > 69 
[16] SUBPROCESS(2) if  ) 
[17] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal tmp_Rx_index 69;
[19] SUBPROCESS(3) if  if ( 
[20] SUBPROCESS(3) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[21] SUBPROCESS(3) if  ) 
[22] SUBPROCESS(3) if  &&  (ast_a_target_current[i].fl_Rxfil >= fl_abs(st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_index] - (FL)0.5F)) 
[23] SUBPROCESS(3) if  &&  (st_g_bsm_loop_data.as4_flg_leading[0] == 0) 
[24] SUBPROCESS(3) if  &&  (st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN)) 
[25] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[26] SUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[27] SUBSUBPROCESS(1) func<end> ); 
[28] SUBPROCESS(4) if  if ( 
[29] SUBPROCESS(4) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[30] SUBPROCESS(4) if  ) 
[31] SUBPROCESS(4) if  &&  (st_g_bsm_loop_data.as4_flg_leading[0] == (S4)0) 
[32] SUBPROCESS(4) if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[0] == (S4)0) 
[33] SUBPROCESS(4) if  &&  (st_g_bsm_loop_data.u1_wall_flg_for_fa_judgement == (U1)1) 
[34] SUBPROCESS(4) if  &&  (st_g_bsm_loop_data.afl_wall_width[0] - ast_a_target_current[i].fl_Rxfil < (FL)0.5F)) 
[35] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[36] SUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], (S4)1 
[37] SUBSUBPROCESS(1) func<end> ); 
[38] MAINPROCESS(2) proc return; 
----------------- Total Codes : 38 lines
--------------------------
[Function Name] : fn_bsm_sel_empty_buf_trgt_trimming 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s2_t_in[TARGET_BUFFSIZE]; 
[2] MAINPROCESS(1) proc S4 s2_t_loop; 
[3] MAINPROCESS(1) proc S4 s2_t_num; 
[4] MAINPROCESS(1) equal s2_t_num 0;
[5] MAINPROCESS(1) for  for ( 
[6] MAINPROCESS(1) for  s2_t_loop = 0; 
[7] MAINPROCESS(1) for  s2_t_loop < TARGET_BUFFSIZE; 
[8] MAINPROCESS(1) for  s2_t_loop++) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if  if ( 
[11] SUBPROCESS(1) if  ast_a_target_current[s2_t_loop].fl_Robs != CFL_UNKNOWN_VALUE 
[12] SUBPROCESS(1) if  ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) equal s2_t_in[s2_t_num] s2_t_loop;
[15] SUBSUBPROCESS(1) proc s2_t_num++; 
[16] MAINPROCESS(2) if  if ( 
[17] MAINPROCESS(2) if  s2_t_num > 0 
[18] MAINPROCESS(2) if  ) 
[19] MAINPROCESS(2) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) for  for ( 
[21] SUBPROCESS(1) for  s2_t_loop = 0; 
[22] SUBPROCESS(1) for  s2_t_loop < s2_t_num; 
[23] SUBPROCESS(1) for  s2_t_loop++) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(1) equal ast_a_target_current[s2_t_loop] ast_a_target_current[s2_t_in[s2_t_loop]];
[26] SUBPROCESS(2) for  for ( 
[27] SUBPROCESS(2) for  s2_t_loop = s2_t_num; 
[28] SUBPROCESS(2) for  s2_t_loop < TARGET_BUFFSIZE; 
[29] SUBPROCESS(2) for  s2_t_loop++) 
[30] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[s2_t_loop], 1 
[32] SUBSUBPROCESS(1) func<end> ); 
[33] MAINPROCESS(3) proc return; 
----------------- Total Codes : 33 lines
--------------------------
[Function Name] : fn_bsm_sel_target_marking 
-Return type : static VD 
-Argument : 3 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
     [2] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_bsm_sel_check_sot_target(s4_a_target_num_current, ast_a_target_current, u1_a_alarming_flag 
[2] MAINPROCESS(1) func<end> ); 
[3] MAINPROCESS(1) func<start> fn_bsm_sel_check_tos_target(s4_a_target_num_current, ast_a_target_current 
[4] MAINPROCESS(1) func<end> ); 
[5] MAINPROCESS(1) proc return; 
----------------- Total Codes : 5 lines
--------------------------
[Function Name] : fn_bsm_sel_check_sot_target 
-Return type : static VD 
-Argument : 3 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
     [2] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_lp_trgt_num; 
[2] MAINPROCESS(1) proc FL fl_t_cos; 
[3] MAINPROCESS(1) proc FL fl_t_vy; 
[4] MAINPROCESS(1) if  if ( 
[5] MAINPROCESS(1) if  (st_g_bsm_loop_data.as4_fast_sot_flg[0] > (S4)0 
[6] MAINPROCESS(1) if  ) 
[7] MAINPROCESS(1) if  &&  (u1_a_alarming_flag == (U1)0)) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) for  for ( 
[10] SUBPROCESS(1) for  u1_t_lp_trgt_num = (U1)0; 
[11] SUBPROCESS(1) for  u1_t_lp_trgt_num < s4_a_target_num_current; 
[12] SUBPROCESS(1) for  u1_t_lp_trgt_num++) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if  if ( 
[15] SUBSUBPROCESS(1) if  ast_a_target_current[u1_t_lp_trgt_num].s4_ID_num > (S4)0 
[16] SUBSUBPROCESS(1) if  ) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) func<start> fl_t_cos = fl_cos((FL)0.5F * (ast_a_target_current[u1_t_lp_trgt_num].fl_theta_up + ast_a_target_current[u1_t_lp_trgt_num].fl_theta_dn) 
[19] SUBSUBSUBPROCESS(1) func<end> ); 
[20] SUBSUBSUBPROCESS(1) if  if ( 
[21] SUBSUBSUBPROCESS(1) if  fl_abs(fl_t_cos) > (FL)0.1F 
[22] SUBSUBSUBPROCESS(1) if  ) 
[23] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBSUBPROCESS(1) equal fl_t_vy ast_a_target_current[u1_t_lp_trgt_num].fl_Vobs / fl_t_cos;
[25] SUBSUBSUBPROCESS(2) else else 
[26] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[27] SUBSUBSUBSUBPROCESS(1) equal fl_t_vy ast_a_target_current[u1_t_lp_trgt_num].fl_Vobs;
[28] SUBSUBSUBPROCESS(3) if  if ( 
[29] SUBSUBSUBPROCESS(3) if  (ast_a_target_current[u1_t_lp_trgt_num].fl_Rxfil < (ALARM_X_OUT + ALARM_X_OFFSET_OUT) 
[30] SUBSUBSUBPROCESS(3) if  ) 
[31] SUBSUBSUBPROCESS(3) if  &&  (ast_a_target_current[u1_t_lp_trgt_num].fl_Rxfil > (ALARM_X_IN + ALARM_X_OFFSET_IN)) 
[32] SUBSUBSUBPROCESS(3) if  &&  (ast_a_target_current[u1_t_lp_trgt_num].fl_Ryfil < ((FL)-3.0F - ALARM_Y_OFFSET)) 
[33] SUBSUBSUBPROCESS(3) if  &&  (ast_a_target_current[u1_t_lp_trgt_num].fl_Ryfil > (CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET)) 
[34] SUBSUBSUBPROCESS(3) if  &&  (fl_t_vy < (FL)-2.78F)) 
[35] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[36] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_sot_cut (S4)3;
[37] MAINPROCESS(2) else else 
[38] MAINPROCESS(2) subproc SUBPROCESS(1) 
[39] SUBPROCESS(1) for  for ( 
[40] SUBPROCESS(1) for  u1_t_lp_trgt_num = (U1)0; 
[41] SUBPROCESS(1) for  u1_t_lp_trgt_num < s4_a_target_num_current; 
[42] SUBPROCESS(1) for  u1_t_lp_trgt_num++) 
[43] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[44] SUBSUBPROCESS(1) if  if ( 
[45] SUBSUBPROCESS(1) if  (ast_a_target_current[u1_t_lp_trgt_num].s4_ID_num > (S4)0 
[46] SUBSUBPROCESS(1) if  ) 
[47] SUBSUBPROCESS(1) if  &&  (ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_sot_cut > (S4)0)) 
[48] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[49] SUBSUBSUBPROCESS(1) func<start> fl_t_cos = fl_cos((FL)0.5F * (ast_a_target_current[u1_t_lp_trgt_num].fl_theta_up + ast_a_target_current[u1_t_lp_trgt_num].fl_theta_dn) 
[50] SUBSUBSUBPROCESS(1) func<end> ); 
[51] SUBSUBSUBPROCESS(1) if  if ( 
[52] SUBSUBSUBPROCESS(1) if  fl_abs(fl_t_cos) > (FL)0.1F 
[53] SUBSUBSUBPROCESS(1) if  ) 
[54] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[55] SUBSUBSUBSUBPROCESS(1) equal fl_t_vy ast_a_target_current[u1_t_lp_trgt_num].fl_Vobs / fl_t_cos;
[56] SUBSUBSUBPROCESS(2) else else 
[57] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[58] SUBSUBSUBSUBPROCESS(1) equal fl_t_vy ast_a_target_current[u1_t_lp_trgt_num].fl_Vobs;
[59] SUBSUBSUBPROCESS(3) if  if ( 
[60] SUBSUBSUBPROCESS(3) if  (ast_a_target_current[u1_t_lp_trgt_num].fl_Ryfil >= (FL)-3.0 
[61] SUBSUBSUBPROCESS(3) if  ) 
[62] SUBSUBSUBPROCESS(3) if  ||  (fl_t_vy > (FL)-1.39F)) 
[63] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[64] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_sot_cut - (S4)1;
[65] MAINPROCESS(3) proc return; 
----------------- Total Codes : 65 lines
--------------------------
[Function Name] : fn_bsm_sel_check_tos_target 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_lp_trgt_num; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  u1_t_lp_trgt_num = (U1)0; 
[4] MAINPROCESS(1) for  u1_t_lp_trgt_num < s4_a_target_num_current; 
[5] MAINPROCESS(1) for  u1_t_lp_trgt_num++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  ast_a_target_current[u1_t_lp_trgt_num].s4_ID_num > (S4)0 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if  if ( 
[12] SUBSUBPROCESS(1) if  ast_a_target_current[u1_t_lp_trgt_num].fl_Ryfil < (CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET) 
[13] SUBSUBPROCESS(1) if  ) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) if  if ( 
[16] SUBSUBSUBPROCESS(1) if  ast_a_target_current[u1_t_lp_trgt_num].fl_Vyfil > (FL)3.0F 
[17] SUBSUBSUBPROCESS(1) if  ) 
[18] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos + (S4)2;
[20] SUBSUBSUBPROCESS(2) else if  else if ( 
[21] SUBSUBSUBPROCESS(2) else if  ast_a_target_current[u1_t_lp_trgt_num].fl_Vyfil > (FL)0.0F 
[22] SUBSUBSUBPROCESS(2) else if  ) 
[23] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos + (S4)1;
[25] SUBSUBSUBPROCESS(3) else else 
[26] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[27] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos - (S4)1;
[28] SUBSUBSUBPROCESS(4) if  if ( 
[29] SUBSUBSUBPROCESS(4) if  ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos > (S4)10 
[30] SUBSUBSUBPROCESS(4) if  ) 
[31] SUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBPROCESS(1) 
[32] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos (S4)10;
[33] SUBSUBSUBPROCESS(5) else if  else if ( 
[34] SUBSUBSUBPROCESS(5) else if  ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos < (S4)0 
[35] SUBSUBSUBPROCESS(5) else if  ) 
[36] SUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBPROCESS(1) 
[37] SUBSUBSUBSUBPROCESS(1) equal ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos (S4)0;
[38] SUBSUBSUBPROCESS(6) else else 
[39] SUBSUBSUBPROCESS(6) subproc SUBSUBSUBSUBPROCESS(1) 
[40] MAINPROCESS(2) proc return; 
----------------- Total Codes : 40 lines
--------------------------
[Function Name] : cluster_target 
-Return type : S4 
-Argument : 3 
     [0] : S4   target_num 
     [1] : NORMAL_BSM*   target 
     [2] : S4*   used_ID 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iret 0;
[2] MAINPROCESS(1) proc S4 i, j; 
[3] MAINPROCESS(1) equal S4 tmp_index_valid -1;
[4] MAINPROCESS(1) equal S4 tmp_index_invalid -1;
[5] MAINPROCESS(1) proc NORMAL_BSM tmp_target_buf[TARGET_BUFFSIZE]; 
[6] MAINPROCESS(1) for for( 
[7] MAINPROCESS(1) for i=0; 
[8] MAINPROCESS(1) for i<TARGET_BUFFSIZE; 
[9] MAINPROCESS(1) for i++) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) func<start> fn_init(&tmp_target_buf[i], 1 
[12] SUBPROCESS(1) func<end> ); 
[13] MAINPROCESS(2) for for( 
[14] MAINPROCESS(2) for i=0; 
[15] MAINPROCESS(2) for i<target_num; 
[16] MAINPROCESS(2) for i++) 
[17] MAINPROCESS(2) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) equal tmp_target_buf[i] target[i];
[19] MAINPROCESS(3) for for( 
[20] MAINPROCESS(3) for i=0; 
[21] MAINPROCESS(3) for i<target_num; 
[22] MAINPROCESS(3) for i++) 
[23] MAINPROCESS(3) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) for for( 
[25] SUBPROCESS(1) for j=0; 
[26] SUBPROCESS(1) for j<target_num; 
[27] SUBPROCESS(1) for j++) 
[28] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(1) if  if ( 
[30] SUBSUBPROCESS(1) if  (i != j 
[31] SUBSUBPROCESS(1) if  ) 
[32] SUBSUBPROCESS(1) if  &&  (tmp_target_buf[i].s4_flg_used != 0) 
[33] SUBSUBPROCESS(1) if  &&  (tmp_target_buf[j].s4_flg_used != 0) 
[34] SUBSUBPROCESS(1) if  &&  ((tmp_target_buf[i].s4_flg_track < (S4)5) 
[35] SUBSUBPROCESS(1) if  ||   (tmp_target_buf[j].s4_flg_track < (S4)5))) 
[36] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[37] SUBSUBSUBPROCESS(1) equal tmp_index_valid -1;
[38] SUBSUBSUBPROCESS(1) equal tmp_index_invalid -1;
[39] SUBSUBSUBPROCESS(1) if  if ( 
[40] SUBSUBSUBPROCESS(1) if  (fl_abs(tmp_target_buf[i].fl_Rxfil - tmp_target_buf[j].fl_Rxfil) < RX_TH_TT2 
[41] SUBSUBSUBPROCESS(1) if  ) 
[42] SUBSUBSUBPROCESS(1) if  &&  (fl_abs(tmp_target_buf[i].fl_Ryfil - tmp_target_buf[j].fl_Ryfil) < RY_TH_TT2)) 
[43] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBSUBPROCESS(1) if  if ( 
[45] SUBSUBSUBSUBPROCESS(1) if  tmp_target_buf[i].s4_flg_track < tmp_target_buf[j].s4_flg_track 
[46] SUBSUBSUBSUBPROCESS(1) if  ) 
[47] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[48] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_index_valid j;
[49] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_index_invalid i;
[50] SUBSUBSUBSUBPROCESS(2) else else 
[51] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[52] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_index_valid i;
[53] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_index_invalid j;
[54] SUBSUBSUBSUBPROCESS(3) equal used_ID[tmp_target_buf[tmp_index_invalid].s4_ID_num-1] 0;
[55] SUBSUBSUBPROCESS(2) else if  else if ( 
[56] SUBSUBSUBPROCESS(2) else if  (fl_abs(tmp_target_buf[i].fl_Rxfil - tmp_target_buf[j].fl_Rxfil) < RX_TH_TT 
[57] SUBSUBSUBPROCESS(2) else if  ) 
[58] SUBSUBSUBPROCESS(2) else if  &&  (fl_abs(tmp_target_buf[i].fl_Ryfil - tmp_target_buf[j].fl_Ryfil) < RY_TH_TT - (FL)1.3F) 
[59] SUBSUBSUBPROCESS(2) else if  ) 
[60] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[61] SUBSUBSUBSUBPROCESS(1) if  if ( 
[62] SUBSUBSUBSUBPROCESS(1) if  tmp_target_buf[i].s4_flg_track < tmp_target_buf[j].s4_flg_track 
[63] SUBSUBSUBSUBPROCESS(1) if  ) 
[64] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[65] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_index_valid j;
[66] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_index_invalid i;
[67] SUBSUBSUBSUBPROCESS(2) else else 
[68] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[69] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_index_valid i;
[70] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_index_invalid j;
[71] SUBSUBSUBSUBPROCESS(3) equal used_ID[tmp_target_buf[tmp_index_invalid].s4_ID_num-1] 0;
[72] SUBSUBSUBPROCESS(3) else else 
[73] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[74] SUBSUBSUBPROCESS(4) if  if ( 
[75] SUBSUBSUBPROCESS(4) if  (tmp_index_valid != -1 
[76] SUBSUBSUBPROCESS(4) if  ) 
[77] SUBSUBSUBPROCESS(4) if  &&  (tmp_index_invalid != -1)) 
[78] SUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBPROCESS(1) 
[79] SUBSUBSUBSUBPROCESS(1) if  if ( 
[80] SUBSUBSUBSUBPROCESS(1) if  tmp_target_buf[tmp_index_invalid].s4_flg_lost < tmp_target_buf[tmp_index_valid].s4_flg_lost 
[81] SUBSUBSUBSUBPROCESS(1) if  ) 
[82] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[83] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_target_buf[tmp_index_valid].s4_flg_lost tmp_target_buf[tmp_index_invalid].s4_flg_lost;
[84] SUBSUBSUBSUBPROCESS(2) if  if ( 
[85] SUBSUBSUBSUBPROCESS(2) if  (tmp_target_buf[i].s4_flg_heiso_up == 1 
[86] SUBSUBSUBSUBPROCESS(2) if  ) 
[87] SUBSUBSUBSUBPROCESS(2) if  ||  (tmp_target_buf[j].s4_flg_heiso_up == 1)) 
[88] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[89] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_target_buf[tmp_index_valid].s4_flg_heiso_up 1;
[90] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_target_buf[tmp_index_valid].s4_flg_heiso_dn 1;
[91] SUBSUBSUBSUBPROCESS(3) func<start> fn_init( &tmp_target_buf[tmp_index_invalid], 1 
[92] SUBSUBSUBSUBPROCESS(3) func<end> ); 
[93] MAINPROCESS(4) for for( 
[94] MAINPROCESS(4) for i=0; 
[95] MAINPROCESS(4) for i<TARGET_BUFFSIZE; 
[96] MAINPROCESS(4) for i++) 
[97] MAINPROCESS(4) subproc SUBPROCESS(1) 
[98] SUBPROCESS(1) func<start> fn_init(&target[i], 1 
[99] SUBPROCESS(1) func<end> ); 
[100] SUBPROCESS(1) if if( 
[101] SUBPROCESS(1) if tmp_target_buf[i].fl_Robs != CFL_UNKNOWN_VALUE 
[102] SUBPROCESS(1) if ) 
[103] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[104] SUBSUBPROCESS(1) equal target[iret] tmp_target_buf[i];
[105] SUBSUBPROCESS(1) proc iret++; 
[106] MAINPROCESS(5) proc return iret; 
----------------- Total Codes : 106 lines
--------------------------
[Function Name] : s4_start_prediction 
-Return type : S4 
-Argument : 5 
     [0] : NORMAL_BSM*   pst_a_normal_current 
     [1] : S4   s4_a_pair_num_current 
     [2] : S4   s4_a_size 
     [3] : const S4   as4_a_flg_passing[1] 
     [4] : const S4   as4_a_flg_leading[1] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_iRet 0;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) equal S4 s4_t_new_num 0;
[4] MAINPROCESS(1) equal S4 s4_t_tmp_Rx_index 0;
[5] MAINPROCESS(1) proc S4 s4_t_erased; 
[6] MAINPROCESS(1) equal S4 s4_t_tmp_erased_num 0;
[7] MAINPROCESS(1) proc S4 as4_t_in[NORMAL_BUFFSIZE]; 
[8] MAINPROCESS(1) proc S4 s4_t_loop; 
[9] MAINPROCESS(1) proc S4 s4_t_num; 
[10] MAINPROCESS(1) proc FL fl_t_Ryobs_abs; 
[11] MAINPROCESS(1) proc U1 u1_t_jdg_c5_flg; 
[12] MAINPROCESS(1) proc U1 u1_t_jdg_c6_flg; 
[13] MAINPROCESS(1) equal u1_t_jdg_c5_flg CU1_DF_OFF;
[14] MAINPROCESS(1) equal u1_t_jdg_c6_flg CU1_DF_OFF;
[15] MAINPROCESS(1) for  for ( 
[16] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[17] MAINPROCESS(1) for  s4_t_lp_i < s4_a_pair_num_current; 
[18] MAINPROCESS(1) for  s4_t_lp_i++) 
[19] MAINPROCESS(1) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) equal s4_t_erased 0;
[21] SUBPROCESS(1) if  if ( 
[22] SUBPROCESS(1) if  (pst_a_normal_current[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE) 
[23] SUBPROCESS(1) if  && (pst_a_normal_current[s4_t_lp_i].s4_tracked == 0) 
[24] SUBPROCESS(1) if  && (pst_a_normal_current[s4_t_lp_i].s4_flg_track == 0) 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(1) if  if ( 
[28] SUBSUBPROCESS(1) if  pst_a_normal_current[s4_t_lp_i].fl_Rxobs < (st_g_bsm_loop_data.afl_installed_angle[1] + RX_LIMIT_INSIDE) 
[29] SUBSUBPROCESS(1) if  ) 
[30] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[31] SUBSUBSUBPROCESS(1) equal s4_t_erased 1;
[32] SUBSUBPROCESS(2) if  if ( 
[33] SUBSUBPROCESS(2) if  (pst_a_normal_current[s4_t_lp_i].fl_Rxobs < ROAD_NOISE_X_MAX) 
[34] SUBSUBPROCESS(2) if  && (pst_a_normal_current[s4_t_lp_i].fl_Ryobs > ROAD_NOISE_Y_MIN) 
[35] SUBSUBPROCESS(2) if  && (pst_a_normal_current[s4_t_lp_i].fl_Ryobs < ROAD_NOISE_Y_MAX) 
[36] SUBSUBPROCESS(2) if  ) 
[37] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBPROCESS(1) equal s4_t_erased 1;
[39] SUBSUBPROCESS(3) func<start> s4_t_tmp_Rx_index = (S4)(-pst_a_normal_current[s4_t_lp_i].fl_Ryobs 
[40] SUBSUBPROCESS(3) func<end> ); 
[41] SUBSUBPROCESS(3) if  if ( 
[42] SUBSUBPROCESS(3) if  s4_t_tmp_Rx_index < 0 
[43] SUBSUBPROCESS(3) if  ) 
[44] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[45] SUBSUBSUBPROCESS(1) equal s4_t_tmp_Rx_index 0;
[46] SUBSUBPROCESS(4) if  if ( 
[47] SUBSUBPROCESS(4) if  s4_t_tmp_Rx_index > 69 
[48] SUBSUBPROCESS(4) if  ) 
[49] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBPROCESS(1) equal s4_t_tmp_Rx_index 69;
[51] SUBSUBPROCESS(5) if  if ( 
[52] SUBSUBPROCESS(5) if  (pst_a_normal_current[s4_t_lp_i].fl_Ryobs > RY_WALL_LIMIT) 
[53] SUBSUBPROCESS(5) if  && (st_g_bsm_loop_data.as4_slow_sot_find[0] == 0) 
[54] SUBSUBPROCESS(5) if  ) 
[55] SUBSUBPROCESS(5) subproc SUBSUBSUBPROCESS(1) 
[56] SUBSUBSUBPROCESS(1) if  if ( 
[57] SUBSUBSUBPROCESS(1) if  pst_a_normal_current[s4_t_lp_i].fl_Rxobs > (st_g_bsm_loop_data.afl_Rx_right[s4_t_tmp_Rx_index] - RXTH_FROM_WALL) 
[58] SUBSUBSUBPROCESS(1) if  ) 
[59] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[60] SUBSUBSUBSUBPROCESS(1) equal s4_t_erased 1;
[61] SUBSUBSUBPROCESS(2) else else 
[62] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBSUBPROCESS(1) if  if ( 
[64] SUBSUBSUBSUBPROCESS(1) if  (as4_a_flg_leading[0] == 0) 
[65] SUBSUBSUBSUBPROCESS(1) if  &&  (as4_a_flg_passing[0] == 0)) 
[66] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[67] SUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[68] SUBSUBSUBSUBSUBPROCESS(1) if  ( 
[69] SUBSUBSUBSUBSUBPROCESS(1) if  (pst_a_normal_current[s4_t_lp_i].s4_flg_heiso_up == 0) 
[70] SUBSUBSUBSUBSUBPROCESS(1) if  && (pst_a_normal_current[s4_t_lp_i].s4_flg_heiso_dn == 0) 
[71] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[72] SUBSUBSUBSUBSUBPROCESS(1) if  || 
[73] SUBSUBSUBSUBSUBPROCESS(1) if  (fl_abs(st_g_bsm_loop_data.afl_Rx_right[s4_t_tmp_Rx_index] - pst_a_normal_current[s4_t_lp_i].fl_Rxobs) < 2.0F) 
[74] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[75] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[76] SUBSUBSUBSUBSUBSUBPROCESS(1) equal s4_t_erased 1;
[77] SUBSUBPROCESS(6) func<start> u1_t_jdg_c5_flg = u1_start_prediction_c5(st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[4] 
[78] SUBSUBPROCESS(6) func<end> ); 
[79] SUBSUBPROCESS(6) func<start> u1_t_jdg_c6_flg = u1_start_prediction_c6(st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[5] 
[80] SUBSUBPROCESS(6) func<end> ); 
[81] SUBSUBPROCESS(6) func<start> fl_t_Ryobs_abs = fl_abs(pst_a_normal_current[s4_t_lp_i].fl_Ryobs 
[82] SUBSUBPROCESS(6) func<end> ); 
[83] SUBSUBPROCESS(6) if  if ( 
[84] SUBSUBPROCESS(6) if  (u1_t_jdg_c5_flg == CU1_TRUE 
[85] SUBSUBPROCESS(6) if  ) 
[86] SUBSUBPROCESS(6) if  &&  (u1_t_jdg_c6_flg == CU1_TRUE) 
[87] SUBSUBPROCESS(6) if  &&  (st_g_bsm_loop_data.u1_flg_heisou_car == (U1)0) 
[88] SUBSUBPROCESS(6) if  &&  (fl_t_Ryobs_abs < (FL)EKF_RY_SIDE)) 
[89] SUBSUBPROCESS(6) subproc SUBSUBSUBPROCESS(1) 
[90] SUBSUBSUBPROCESS(1) equal s4_t_erased (S4)1;
[91] SUBSUBPROCESS(7) if  if ( 
[92] SUBSUBPROCESS(7) if  s4_t_erased == 1 
[93] SUBSUBPROCESS(7) if  ) 
[94] SUBSUBPROCESS(7) subproc SUBSUBSUBPROCESS(1) 
[95] SUBSUBSUBPROCESS(1) proc s4_t_tmp_erased_num++; 
[96] SUBSUBSUBPROCESS(1) func<start> fn_init(&pst_a_normal_current[s4_t_lp_i], 1 
[97] SUBSUBSUBPROCESS(1) func<end> ); 
[98] SUBSUBPROCESS(8) else else 
[99] SUBSUBPROCESS(8) subproc SUBSUBSUBPROCESS(1) 
[100] SUBSUBSUBPROCESS(1) func<start> predict_object_trajectory_simple( 
[101] SUBSUBSUBPROCESS(1) func 1 
[102] SUBSUBSUBPROCESS(1) func<end> ); 
[103] SUBSUBSUBPROCESS(1) equal pst_a_normal_current[s4_t_lp_i].s4_tracked 1;
[104] SUBSUBSUBPROCESS(1) equal pst_a_normal_current[s4_t_lp_i].s4_flg_track 1;
[105] SUBSUBSUBPROCESS(1) equal pst_a_normal_current[s4_t_lp_i].s4_flg_lost 0;
[106] SUBSUBSUBPROCESS(1) equal pst_a_normal_current[s4_t_lp_i].s4_flg_new 1;
[107] SUBSUBSUBPROCESS(1) proc s4_t_new_num++; 
[108] MAINPROCESS(2) equal s4_t_num 0;
[109] MAINPROCESS(2) for  for ( 
[110] MAINPROCESS(2) for  s4_t_loop = 0; 
[111] MAINPROCESS(2) for  s4_t_loop < s4_a_size; 
[112] MAINPROCESS(2) for  s4_t_loop++) 
[113] MAINPROCESS(2) subproc SUBPROCESS(1) 
[114] SUBPROCESS(1) if  if ( 
[115] SUBPROCESS(1) if  pst_a_normal_current[s4_t_loop].fl_Robs != CFL_UNKNOWN_VALUE 
[116] SUBPROCESS(1) if  ) 
[117] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[118] SUBSUBPROCESS(1) equal as4_t_in[s4_t_num] s4_t_loop;
[119] SUBSUBPROCESS(1) proc s4_t_num++; 
[120] MAINPROCESS(3) if  if ( 
[121] MAINPROCESS(3) if  s4_t_num > 0 
[122] MAINPROCESS(3) if  ) 
[123] MAINPROCESS(3) subproc SUBPROCESS(1) 
[124] SUBPROCESS(1) for  for ( 
[125] SUBPROCESS(1) for  s4_t_loop = 0; 
[126] SUBPROCESS(1) for  s4_t_loop < s4_t_num; 
[127] SUBPROCESS(1) for  s4_t_loop++) 
[128] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[129] SUBSUBPROCESS(1) equal pst_a_normal_current[s4_t_loop] pst_a_normal_current[as4_t_in[s4_t_loop]];
[130] SUBPROCESS(2) for  for ( 
[131] SUBPROCESS(2) for  s4_t_loop = s4_t_num; 
[132] SUBPROCESS(2) for  s4_t_loop < s4_a_size; 
[133] SUBPROCESS(2) for  s4_t_loop++) 
[134] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[135] SUBSUBPROCESS(1) func<start> fn_init(&pst_a_normal_current[s4_t_loop], 1 
[136] SUBSUBPROCESS(1) func<end> ); 
[137] MAINPROCESS(4) equal s4_t_iRet s4_t_tmp_erased_num;
[138] MAINPROCESS(4) func<start> return (s4_t_iRet 
[139] MAINPROCESS(4) func<end> ); 
----------------- Total Codes : 139 lines
--------------------------
[Function Name] : u1_start_prediction_c5 
-Return type : static U1 
-Argument : 1 
     [0] : S4   s4_a_slow_sot_doa_diff_sum4 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_c5_flag; 
[2] MAINPROCESS(1) equal u1_t_jdg_c5_flag CU1_FALSE;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  s4_a_slow_sot_doa_diff_sum4 < (S4)CFL_WALL_DEV_TH12 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_c5_flag CU1_TRUE;
[8] MAINPROCESS(2) else else 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal u1_t_jdg_c5_flag CU1_FALSE;
[11] MAINPROCESS(3) proc return u1_t_jdg_c5_flag; 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : u1_start_prediction_c6 
-Return type : static U1 
-Argument : 1 
     [0] : S4   s4_a_slow_sot_doa_diff_sum5 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_c6_flag; 
[2] MAINPROCESS(1) equal u1_t_jdg_c6_flag CU1_FALSE;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  s4_a_slow_sot_doa_diff_sum5 < (S4)WALL_DEV_TH1 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_c6_flag CU1_TRUE;
[8] MAINPROCESS(2) else else 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal u1_t_jdg_c6_flag CU1_FALSE;
[11] MAINPROCESS(3) proc return u1_t_jdg_c6_flag; 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : s4_copy_prediction_to_filtered_data 
-Return type : S4 
-Argument : 2 
     [0] : NORMAL_BSM   *pst_a_normal 
     [1] : S4   s4_a_size 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) equal S4 s4_t_object_num 0;
[3] MAINPROCESS(1) proc NORMAL_BSM ast_t_buf_normal[NORMAL_BUFFSIZE]; 
[4] MAINPROCESS(1) func<start> fn_init(ast_t_buf_normal, NORMAL_BUFFSIZE 
[5] MAINPROCESS(1) func<end> ); 
[6] MAINPROCESS(1) for  for ( 
[7] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[8] MAINPROCESS(1) for  s4_t_lp_i < s4_a_size; 
[9] MAINPROCESS(1) for  s4_t_lp_i++) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) if  if ( 
[12] SUBPROCESS(1) if  (pst_a_normal[s4_t_lp_i].fl_Rxobs != CFL_UNKNOWN_VALUE) 
[13] SUBPROCESS(1) if  && (pst_a_normal[s4_t_lp_i].fl_Ryobs != CFL_UNKNOWN_VALUE) 
[14] SUBPROCESS(1) if  && (pst_a_normal[s4_t_lp_i].fl_Rxpred != CFL_UNKNOWN_VALUE) 
[15] SUBPROCESS(1) if  && (pst_a_normal[s4_t_lp_i].fl_Rypred != CFL_UNKNOWN_VALUE) 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBPROCESS(2) else else 
[19] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) func<start> fn_init(&pst_a_normal[s4_t_lp_i], 1 
[21] SUBSUBPROCESS(1) func<end> ); 
[22] MAINPROCESS(2) equal s4_t_object_num 0;
[23] MAINPROCESS(2) for  for ( 
[24] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[25] MAINPROCESS(2) for  s4_t_lp_i < s4_a_size; 
[26] MAINPROCESS(2) for  s4_t_lp_i++) 
[27] MAINPROCESS(2) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) if  if ( 
[29] SUBPROCESS(1) if  pst_a_normal[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[30] SUBPROCESS(1) if  ) 
[31] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_object_num] pst_a_normal[s4_t_lp_i];
[33] SUBSUBPROCESS(1) proc s4_t_object_num++; 
[34] MAINPROCESS(3) if  if ( 
[35] MAINPROCESS(3) if  s4_t_object_num > 0 
[36] MAINPROCESS(3) if  ) 
[37] MAINPROCESS(3) subproc SUBPROCESS(1) 
[38] SUBPROCESS(1) for  for ( 
[39] SUBPROCESS(1) for  s4_t_lp_i = 0; 
[40] SUBPROCESS(1) for  s4_t_lp_i < s4_a_size; 
[41] SUBPROCESS(1) for  s4_t_lp_i++) 
[42] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[43] SUBSUBPROCESS(1) equal pst_a_normal[s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
[44] MAINPROCESS(4) func<start> return (s4_t_object_num 
[45] MAINPROCESS(4) func<end> ); 
----------------- Total Codes : 45 lines
--------------------------
[Function Name] : fn_calc_prediction_of_normaldata 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM*   pst_a_normal 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_transform_xy_to_polar( 
[2] MAINPROCESS(1) func &pst_a_normal[0].fl_theta_up_pred 
[3] MAINPROCESS(1) func<end> ); 
[4] MAINPROCESS(1) equal pst_a_normal[0].fl_theta_dn_pred pst_a_normal[0].fl_theta_up_pred;
[5] MAINPROCESS(1) func<start> fn_transform_vxvy_to_vr( 
[6] MAINPROCESS(1) func &pst_a_normal[0].fl_Vobs_pred 
[7] MAINPROCESS(1) func<end> ); 
[8] MAINPROCESS(1) func<start> fn_transform_rv_to_freqbin( 
[9] MAINPROCESS(1) func 0 
[10] MAINPROCESS(1) func<end> ); 
[11] MAINPROCESS(1) func<start> fn_transform_rv_to_freqbin( 
[12] MAINPROCESS(1) func 1 
[13] MAINPROCESS(1) func<end> ); 
[14] MAINPROCESS(1) func<start> fn_transform_rv_to_freqbin_interpolate( 
[15] MAINPROCESS(1) func 0 
[16] MAINPROCESS(1) func<end> ); 
[17] MAINPROCESS(1) func<start> fn_transform_rv_to_freqbin_interpolate( 
[18] MAINPROCESS(1) func 1 
[19] MAINPROCESS(1) func<end> ); 
[20] MAINPROCESS(1) func<start> fn_transform_rad_to_doabin( 
[21] MAINPROCESS(1) func &pst_a_normal[0].s4_bin_up_music_pred 
[22] MAINPROCESS(1) func<end> ); 
[23] MAINPROCESS(1) equal pst_a_normal[0].s4_bin_dn_music_pred pst_a_normal[0].s4_bin_up_music_pred;
[24] MAINPROCESS(1) func<start> fn_transform_rad_to_doabin_interpolate( 
[25] MAINPROCESS(1) func &pst_a_normal[0].fl_doa_up_interpolate_pred 
[26] MAINPROCESS(1) func<end> ); 
[27] MAINPROCESS(1) equal pst_a_normal[0].fl_doa_dn_interpolate_pred pst_a_normal[0].fl_doa_up_interpolate_pred;
----------------- Total Codes : 27 lines
--------------------------
[Function Name] : fn_estimate_road_shape 
-Return type : VD 
-Argument : 1 
     [0] : FL   afl_a_Rx_right[70] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for i = 0; 
[4] MAINPROCESS(1) for i < 70; 
[5] MAINPROCESS(1) for i++ ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal afl_a_Rx_right[i] fl_get_road_width(s2_g_curvr_for_base, (FL)(-i)) + st_g_bsm_loop_data.afl_wall_width[0];
----------------- Total Codes : 7 lines
--------------------------
[Function Name] : fl_get_road_width 
-Return type : FL 
-Argument : 2 
     [0] : S4   s4_a_curve_r 
     [1] : FL   fl_a_Ry 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_fret; 
[2] MAINPROCESS(1) equal FL fl_t_tmp_Ry fl_a_Ry;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  fl_t_tmp_Ry > (FL)0.0F 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal fl_t_tmp_Ry (FL)0.0F;
[8] MAINPROCESS(2) if  if ( 
[9] MAINPROCESS(2) if  s4_a_curve_r == (S4)0 
[10] MAINPROCESS(2) if  ) 
[11] MAINPROCESS(2) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal fl_t_fret (FL)0.0F;
[13] MAINPROCESS(3) else else 
[14] MAINPROCESS(3) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal fl_t_fret ((FL)0.5F / (FL)s4_a_curve_r) * fl_t_tmp_Ry * fl_t_tmp_Ry;
[16] MAINPROCESS(4) proc return fl_t_fret; 
----------------- Total Codes : 16 lines
--------------------------
[Function Name] : connect_previous_object 
-Return type : S4 
-Argument : 6 
     [0] : NORMAL_BSM   normal_prev[NORMAL_BUFFSIZE] 
     [1] : NORMAL_BSM   normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   pair_num_current 
     [3] : S4*   pair_res_prev 
     [4] : S4*   pair_res_current 
     [5] : S4   size 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iRet 0;
[2] MAINPROCESS(1) proc S4 i, j, k; 
[3] MAINPROCESS(1) proc FL compare[NORMAL_BUFFSIZE][NORMAL_BUFFSIZE]; 
[4] MAINPROCESS(1) proc FL min; 
[5] MAINPROCESS(1) proc S4 found; 
[6] MAINPROCESS(1) proc S4 tmp_pair_prev; 
[7] MAINPROCESS(1) proc S4 tmp_pair_current; 
[8] MAINPROCESS(1) equal FL rx_th RX_TH_NT;
[9] MAINPROCESS(1) equal FL ry_th RY_TH_NT;
[10] MAINPROCESS(1) equal FL vx_th VX_TH_NT;
[11] MAINPROCESS(1) equal FL vy_th VY_TH_NT;
[12] MAINPROCESS(1) for for( 
[13] MAINPROCESS(1) for i = 0; 
[14] MAINPROCESS(1) for i < size; 
[15] MAINPROCESS(1) for i++ ) 
[16] MAINPROCESS(1) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) equal normal_prev[i].s4_flg_used 0;
[18] SUBPROCESS(1) equal normal_current[i].s4_flg_used 0;
[19] MAINPROCESS(2) for for( 
[20] MAINPROCESS(2) for i = 0; 
[21] MAINPROCESS(2) for i < NORMAL_BUFFSIZE; 
[22] MAINPROCESS(2) for i++ ) 
[23] MAINPROCESS(2) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) for for( 
[25] SUBPROCESS(1) for j = 0; 
[26] SUBPROCESS(1) for j < NORMAL_BUFFSIZE; 
[27] SUBPROCESS(1) for j++ ) 
[28] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(1) equal compare[i][j] 1000.0F;
[30] MAINPROCESS(3) for for( 
[31] MAINPROCESS(3) for i = 0; 
[32] MAINPROCESS(3) for i < pair_num_current; 
[33] MAINPROCESS(3) for i++ ) 
[34] MAINPROCESS(3) subproc SUBPROCESS(1) 
[35] SUBPROCESS(1) for for( 
[36] SUBPROCESS(1) for j = 0; 
[37] SUBPROCESS(1) for j < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[38] SUBPROCESS(1) for j++ ) 
[39] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[40] SUBSUBPROCESS(1) func<start> rx_th = RX_TH_NT + fl_abs(normal_prev[j].fl_Vxpred * CFL_SAMPLING_TIME 
[41] SUBSUBPROCESS(1) func<end> ); 
[42] SUBSUBPROCESS(1) func<start> ry_th = RY_TH_NT + fl_abs(normal_prev[j].fl_Vypred * CFL_SAMPLING_TIME 
[43] SUBSUBPROCESS(1) func<end> ); 
[44] SUBSUBPROCESS(1) if  if ( 
[45] SUBSUBPROCESS(1) if  (normal_current[i].s4_flg_stop == 0 
[46] SUBSUBPROCESS(1) if  ) 
[47] SUBSUBPROCESS(1) if  &&  (fl_abs(normal_current[i].fl_Rxobs - normal_prev[j].fl_Rxpred) < rx_th) 
[48] SUBSUBPROCESS(1) if  &&  (fl_abs(normal_current[i].fl_Ryobs - normal_prev[j].fl_Rypred) < ry_th) 
[49] SUBSUBPROCESS(1) if  &&  ((S4)(fl_abs( (FL)(normal_current[i].s4_bin_up - normal_prev[j].s4_bin_up_pred))) < FREQ_TH_NT) 
[50] SUBSUBPROCESS(1) if  &&  ((S4)(fl_abs( (FL)(normal_current[i].s4_bin_dn - normal_prev[j].s4_bin_dn_pred))) < FREQ_TH_NT) 
[51] SUBSUBPROCESS(1) if  &&  (fl_abs(normal_current[i].fl_Vxobs - normal_prev[j].fl_Vxpred) < vx_th) 
[52] SUBSUBPROCESS(1) if  &&  (fl_abs(normal_current[i].fl_Vyobs - normal_prev[j].fl_Vypred) < vy_th)) 
[53] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[54] SUBSUBSUBPROCESS(1) if  if ( 
[55] SUBSUBSUBPROCESS(1) if  (fl_abs(normal_current[i].fl_Ryobs) < EKF_RY_SIDE 
[56] SUBSUBSUBPROCESS(1) if  ) 
[57] SUBSUBSUBPROCESS(1) if  ||  (fl_abs(normal_prev[j].fl_Rypred) < EKF_RY_SIDE)) 
[58] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBSUBPROCESS(1) func<start> compare[i][j] = (FL)fl_abs( normal_current[i].fl_Rxobs - normal_prev[j].fl_Rxpred ) + (FL)fl_abs( normal_current[i].fl_Ryobs - normal_prev[j].fl_Rypred 
[60] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[61] SUBSUBSUBPROCESS(2) else else 
[62] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBSUBPROCESS(1) func<start> compare[i][j] = (FL)fl_abs( normal_current[i].fl_Rxobs - normal_prev[j].fl_Rxpred ) + (FL)fl_abs( normal_current[i].fl_Ryobs - normal_prev[j].fl_Rypred ) + (FL)fl_abs( normal_current[i].fl_Vxobs - normal_prev[j].fl_Vxpred ) + (FL)fl_abs( normal_current[i].fl_Vyobs - normal_prev[j].fl_Vypred 
[64] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[65] MAINPROCESS(4) equal iRet 0;
[66] MAINPROCESS(4) for  for ( 
[67] MAINPROCESS(4) for  k = 0; 
[68] MAINPROCESS(4) for  k < pair_num_current; 
[69] MAINPROCESS(4) for  k++) 
[70] MAINPROCESS(4) subproc SUBPROCESS(1) 
[71] SUBPROCESS(1) equal min 1000.0F;
[72] SUBPROCESS(1) equal found 0;
[73] SUBPROCESS(1) for  for ( 
[74] SUBPROCESS(1) for  i = 0; 
[75] SUBPROCESS(1) for  i < pair_num_current; 
[76] SUBPROCESS(1) for  i++) 
[77] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[78] SUBSUBPROCESS(1) for  for ( 
[79] SUBSUBPROCESS(1) for  j = 0; 
[80] SUBSUBPROCESS(1) for  j < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[81] SUBSUBPROCESS(1) for  j++) 
[82] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[83] SUBSUBSUBPROCESS(1) if  if ( 
[84] SUBSUBSUBPROCESS(1) if  (compare[i][j] < min 
[85] SUBSUBSUBPROCESS(1) if  ) 
[86] SUBSUBSUBPROCESS(1) if  &&  (normal_prev[j].s4_flg_used == 0) 
[87] SUBSUBSUBPROCESS(1) if  &&  (normal_current[i].s4_flg_used == 0) 
[88] SUBSUBSUBPROCESS(1) if  &&  (iRet < NORMAL_BUFFSIZE)) 
[89] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[90] SUBSUBSUBSUBPROCESS(1) equal min compare[i][j];
[91] SUBSUBSUBSUBPROCESS(1) equal found 1;
[92] SUBSUBSUBSUBPROCESS(1) equal tmp_pair_current i;
[93] SUBSUBSUBSUBPROCESS(1) equal tmp_pair_prev j;
[94] SUBPROCESS(2) if if( 
[95] SUBPROCESS(2) if found == 1 
[96] SUBPROCESS(2) if ) 
[97] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[98] SUBSUBPROCESS(1) equal *(pair_res_current + iRet) tmp_pair_current;
[99] SUBSUBPROCESS(1) equal *(pair_res_prev + iRet) tmp_pair_prev;
[100] SUBSUBPROCESS(1) proc iRet++; 
[101] SUBSUBPROCESS(1) equal normal_prev[tmp_pair_prev].s4_flg_used 1;
[102] SUBSUBPROCESS(1) equal normal_current[tmp_pair_current].s4_flg_used 1;
[103] MAINPROCESS(5) proc return iRet; 
----------------- Total Codes : 103 lines
--------------------------
[Function Name] : predict_object_trajectory_simple 
-Return type : VD 
-Argument : 2 
     [0] : NORMAL_BSM*   normal_current 
     [1] : S4   pair_num 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<pair_num; 
[5] MAINPROCESS(1) for i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal normal_current[i].fl_Vypred normal_current[i].fl_Vyobs;
[8] SUBPROCESS(1) equal normal_current[i].fl_Rypred normal_current[i].fl_Ryobs + normal_current[i].fl_Vyobs*CFL_SAMPLING_TIME;
[9] SUBPROCESS(1) equal normal_current[i].fl_Vxpred normal_current[i].fl_Vxobs;
[10] SUBPROCESS(1) equal normal_current[i].fl_Rxpred normal_current[i].fl_Rxobs + normal_current[i].fl_Vxobs*CFL_SAMPLING_TIME;
[11] SUBPROCESS(1) func<start> fn_transform_xy_to_polar( 
[12] SUBPROCESS(1) func &normal_current[i].fl_theta_up_pred 
[13] SUBPROCESS(1) func<end> ); 
[14] SUBPROCESS(1) equal normal_current[i].fl_theta_dn_pred normal_current[i].fl_theta_up_pred;
[15] SUBPROCESS(1) func<start> fn_transform_vxvy_to_vr( 
[16] SUBPROCESS(1) func &normal_current[i].fl_Vobs_pred 
[17] SUBPROCESS(1) func<end> ); 
[18] SUBPROCESS(1) func<start> fn_transform_rv_to_freqbin( 
[19] SUBPROCESS(1) func 0 
[20] SUBPROCESS(1) func<end> ); 
[21] SUBPROCESS(1) func<start> fn_transform_rv_to_freqbin( 
[22] SUBPROCESS(1) func 1 
[23] SUBPROCESS(1) func<end> ); 
[24] SUBPROCESS(1) func<start> fn_transform_rv_to_freqbin_interpolate( 
[25] SUBPROCESS(1) func 0 
[26] SUBPROCESS(1) func<end> ); 
[27] SUBPROCESS(1) func<start> fn_transform_rv_to_freqbin_interpolate( 
[28] SUBPROCESS(1) func 1 
[29] SUBPROCESS(1) func<end> ); 
[30] SUBPROCESS(1) func<start> fn_transform_rad_to_doabin( 
[31] SUBPROCESS(1) func &normal_current[i].s4_bin_up_music_pred 
[32] SUBPROCESS(1) func<end> ); 
[33] SUBPROCESS(1) equal normal_current[i].s4_bin_dn_music_pred normal_current[i].s4_bin_up_music_pred;
[34] SUBPROCESS(1) func<start> fn_transform_rad_to_doabin_interpolate( 
[35] SUBPROCESS(1) func &normal_current[i].fl_doa_up_interpolate_pred 
[36] SUBPROCESS(1) func<end> ); 
[37] SUBPROCESS(1) equal normal_current[i].fl_doa_dn_interpolate_pred normal_current[i].fl_doa_up_interpolate_pred;
[38] SUBPROCESS(1) equal normal_current[i].fl_Rxfil normal_current[i].fl_Rxobs;
[39] SUBPROCESS(1) equal normal_current[i].fl_Ryfil normal_current[i].fl_Ryobs;
[40] SUBPROCESS(1) equal normal_current[i].fl_Vxfil normal_current[i].fl_Vxobs;
[41] SUBPROCESS(1) equal normal_current[i].fl_Vyfil normal_current[i].fl_Vyobs;
[42] MAINPROCESS(2) proc return; 
----------------- Total Codes : 42 lines
--------------------------
[Function Name] : prediction_with_connected_data 
-Return type : S4 
-Argument : 5 
     [0] : NORMAL_BSM*   normal_prev 
     [1] : NORMAL_BSM*   normal_current 
     [2] : const S4*   data_id_prev 
     [3] : const S4*   data_id_current 
     [4] : S4   paired_num 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iRet 0;
[2] MAINPROCESS(1) proc S4 i; 
[3] MAINPROCESS(1) equal S4 predict_num 0;
[4] MAINPROCESS(1) proc S4 tmp_id_prev[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS(1) proc S4 tmp_id_current[NORMAL_BUFFSIZE]; 
[6] MAINPROCESS(1) for for( 
[7] MAINPROCESS(1) for i=0; 
[8] MAINPROCESS(1) for i<paired_num; 
[9] MAINPROCESS(1) for i++) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal tmp_id_prev[i] *data_id_prev;
[12] SUBPROCESS(1) equal tmp_id_current[i] *data_id_current;
[13] SUBPROCESS(1) proc data_id_prev++; 
[14] SUBPROCESS(1) proc data_id_current++; 
[15] SUBPROCESS(1) if  if ( 
[16] SUBPROCESS(1) if  (st_g_bsm_loop_data.u1_truck_flg != (U1)0 
[17] SUBPROCESS(1) if  ) 
[18] SUBPROCESS(1) if  &&  (normal_current[tmp_id_current[i]].fl_Ryobs > CFL_TRUCK_RY_MIN) 
[19] SUBPROCESS(1) if  &&  ((normal_current[tmp_id_current[i]].fl_Rxobs - normal_prev[tmp_id_prev[i]].fl_Rxpred) > (FL)0.0F) 
[20] SUBPROCESS(1) if  &&  (normal_current[tmp_id_current[i]].fl_Rxobs > CFL_TRUCK_RX_MIN) 
[21] SUBPROCESS(1) if  &&  (normal_current[tmp_id_current[i]].fl_Rxobs < CFL_TRUCK_RX_MAX)) 
[22] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[23] SUBSUBPROCESS(1) equal normal_current[tmp_id_current[i]].fl_Rxobs normal_current[tmp_id_current[i]].fl_Rxobs - CFL_TRUCK_WIDTH;
[24] SUBSUBPROCESS(1) if if( 
[25] SUBSUBPROCESS(1) if normal_current[tmp_id_current[i]].fl_Ryobs < (FL)-7.0 
[26] SUBSUBPROCESS(1) if ) 
[27] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBPROCESS(1) equal normal_current[tmp_id_current[i]].fl_Ryobs normal_current[tmp_id_current[i]].fl_Ryobs + (FL)2.0;
[29] SUBSUBPROCESS(2) equal normal_current[tmp_id_current[i]].fl_Vxobs (FL)0.0F;
[30] MAINPROCESS(2) for for( 
[31] MAINPROCESS(2) for i=0; 
[32] MAINPROCESS(2) for i<paired_num; 
[33] MAINPROCESS(2) for i++) 
[34] MAINPROCESS(2) subproc SUBPROCESS(1) 
[35] SUBPROCESS(1) func<start> fn_ab_track( 
[36] SUBPROCESS(1) func 0 
[37] SUBPROCESS(1) func<end> ); 
[38] SUBPROCESS(1) func<start> calc_prediction_of_normaldata( 
[39] SUBPROCESS(1) func &normal_current[tmp_id_current[i]] 
[40] SUBPROCESS(1) func<end> ); 
[41] SUBPROCESS(1) if  if ( 
[42] SUBPROCESS(1) if  normal_current[tmp_id_current[i]].s4_flg_track == CS4_S4MAX 
[43] SUBPROCESS(1) if  ) 
[44] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[45] SUBPROCESS(2) else else 
[46] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[47] SUBSUBPROCESS(1) equal normal_current[tmp_id_current[i]].s4_flg_track (S4)normal_prev[tmp_id_prev[i]].s4_flg_track + 1;
[48] SUBPROCESS(3) equal normal_current[tmp_id_current[i]].s4_flg_lost 0;
[49] SUBPROCESS(3) equal normal_current[tmp_id_current[i]].s4_flg_new 0;
[50] SUBPROCESS(3) equal normal_current[tmp_id_current[i]].s4_tracked 1;
[51] SUBPROCESS(3) equal normal_prev[tmp_id_prev[i]].s4_tracked 1;
[52] SUBPROCESS(3) equal normal_current[tmp_id_current[i]].s4_ctr_sot_cut normal_prev[tmp_id_prev[i]].s4_ctr_sot_cut;
[53] SUBPROCESS(3) equal normal_current[tmp_id_current[i]].s4_flg_reliable normal_prev[tmp_id_prev[i]].s4_flg_reliable;
[54] SUBPROCESS(3) equal normal_current[tmp_id_current[i]].s4_ctr_tos normal_prev[tmp_id_prev[i]].s4_ctr_tos;
[55] SUBPROCESS(3) proc predict_num++; 
[56] MAINPROCESS(3) equal iRet predict_num;
[57] MAINPROCESS(3) proc return iRet; 
----------------- Total Codes : 57 lines
--------------------------
[Function Name] : prediction_without_connected_data 
-Return type : S4 
-Argument : 3 
     [0] : NORMAL_BSM*   normal_prev 
     [1] : NORMAL_BSM*   normal_current 
     [2] : S4   pair_num_current 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iRet 0;
[2] MAINPROCESS(1) proc S4 i, j; 
[3] MAINPROCESS(1) equal S4 lost_num 0;
[4] MAINPROCESS(1) proc NORMAL_BSM tmptmp_normal_current[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS(1) proc NORMAL_BSM tmp_normal_buff[NORMAL_BUFFSIZE]; 
[6] MAINPROCESS(1) equal S4 tmp_connect_num EKF_CONNECT_NUM;
[7] MAINPROCESS(1) equal S4 tmp_lost_max EKF_LOST_MAX;
[8] MAINPROCESS(1) func<start> fn_init(tmptmp_normal_current,NORMAL_BUFFSIZE 
[9] MAINPROCESS(1) func<end> ); 
[10] MAINPROCESS(1) func<start> fn_init(tmp_normal_buff,NORMAL_BUFFSIZE 
[11] MAINPROCESS(1) func<end> ); 
[12] MAINPROCESS(1) for  for ( 
[13] MAINPROCESS(1) for  i = 0; 
[14] MAINPROCESS(1) for  i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[15] MAINPROCESS(1) for  i++) 
[16] MAINPROCESS(1) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) if  if ( 
[18] SUBPROCESS(1) if  (normal_prev[i].fl_Robs != CFL_UNKNOWN_VALUE 
[19] SUBPROCESS(1) if  ) 
[20] SUBPROCESS(1) if  &&  (normal_prev[i].s4_tracked != 0)) 
[21] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[22] SUBSUBPROCESS(1) for  for ( 
[23] SUBSUBPROCESS(1) for  j = 0; 
[24] SUBSUBPROCESS(1) for  j < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[25] SUBSUBPROCESS(1) for  j++) 
[26] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[27] SUBSUBSUBPROCESS(1) if  if ( 
[28] SUBSUBSUBPROCESS(1) if  (normal_prev[j].fl_Robs != CFL_UNKNOWN_VALUE 
[29] SUBSUBSUBPROCESS(1) if  ) 
[30] SUBSUBSUBPROCESS(1) if  &&  (normal_prev[j].s4_tracked == 0) 
[31] SUBSUBSUBPROCESS(1) if  &&  (fl_abs(normal_prev[i].fl_Rxpred - normal_prev[j].fl_Rxpred) < RX_TH_NT) 
[32] SUBSUBSUBPROCESS(1) if  &&  (fl_abs(normal_prev[i].fl_Rypred - normal_prev[j].fl_Rypred) < RY_TH_NT)) 
[33] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[34] SUBSUBSUBSUBPROCESS(1) func<start> fn_init(&normal_prev[j], 1 
[35] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[36] MAINPROCESS(2) for  for ( 
[37] MAINPROCESS(2) for  i = 0; 
[38] MAINPROCESS(2) for  i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[39] MAINPROCESS(2) for  i++) 
[40] MAINPROCESS(2) subproc SUBPROCESS(1) 
[41] SUBPROCESS(1) if  if ( 
[42] SUBPROCESS(1) if  fl_abs(normal_prev[i].fl_Rypred) < EKF_RY_SIDE 
[43] SUBPROCESS(1) if  ) 
[44] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[45] SUBSUBPROCESS(1) equal tmp_connect_num EKF_CONNECT_NUM_SIDE;
[46] SUBSUBPROCESS(1) equal tmp_lost_max EKF_LOST_MAX_SIDE;
[47] SUBPROCESS(2) else if  else if ( 
[48] SUBPROCESS(2) else if  normal_prev[i].fl_Rypred > CFL_ALARM_Y_BACKWARD 
[49] SUBPROCESS(2) else if  ) 
[50] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[51] SUBSUBPROCESS(1) equal tmp_connect_num EKF_CONNECT_NUM_SIDE;
[52] SUBSUBPROCESS(1) equal tmp_lost_max EKF_LOST_MAX_INAREA;
[53] SUBPROCESS(3) else else 
[54] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[55] SUBSUBPROCESS(1) equal tmp_connect_num EKF_CONNECT_NUM;
[56] SUBSUBPROCESS(1) equal tmp_lost_max EKF_LOST_MAX;
[57] SUBPROCESS(4) if  if ( 
[58] SUBPROCESS(4) if  fl_abs(normal_prev[i].fl_Robs - st_g_bsm_loop_data.afl_wall_width[0]) < 1.0F 
[59] SUBPROCESS(4) if  ) 
[60] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[61] SUBSUBPROCESS(1) equal tmp_lost_max EKF_LOST_MAX_WALL_DIST;
[62] SUBPROCESS(5) if  if ( 
[63] SUBPROCESS(5) if  st_g_bsm_loop_data.as4_fast_sot_flg[0] != (S4)0 
[64] SUBPROCESS(5) if  ) 
[65] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[66] SUBSUBPROCESS(1) equal tmp_lost_max (S4)0;
[67] SUBPROCESS(6) if  if ( 
[68] SUBPROCESS(6) if  (normal_prev[i].fl_Robs != CFL_UNKNOWN_VALUE 
[69] SUBPROCESS(6) if  ) 
[70] SUBPROCESS(6) if  &&  (normal_prev[i].s4_tracked == 0) 
[71] SUBPROCESS(6) if  &&  (normal_prev[i].s4_flg_track > tmp_connect_num) 
[72] SUBPROCESS(6) if  &&  (i < NORMAL_BUFFSIZE)) 
[73] SUBPROCESS(6) subproc SUBSUBPROCESS(1) 
[74] SUBSUBPROCESS(1) if  if ( 
[75] SUBSUBPROCESS(1) if  normal_prev[i].s4_flg_lost < tmp_lost_max 
[76] SUBSUBPROCESS(1) if  ) 
[77] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[78] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_bin_up normal_prev[i].s4_bin_up_pred;
[79] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_bin_dn normal_prev[i].s4_bin_dn_pred;
[80] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_bin_up_interpolate normal_prev[i].fl_bin_up_interpolate_pred;
[81] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_bin_dn_interpolate normal_prev[i].fl_bin_dn_interpolate_pred;
[82] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_bin_up_music normal_prev[i].s4_bin_up_music_pred;
[83] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_bin_dn_music normal_prev[i].s4_bin_dn_music_pred;
[84] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_doa_up_interpolate normal_prev[i].fl_doa_up_interpolate_pred;
[85] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_doa_dn_interpolate normal_prev[i].fl_doa_dn_interpolate_pred;
[86] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_power_up normal_prev[i].fl_power_up;
[87] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_power_dn normal_prev[i].fl_power_dn;
[88] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_power_up_music normal_prev[i].fl_power_up_music;
[89] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_power_dn_music normal_prev[i].fl_power_dn_music;
[90] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_theta_up normal_prev[i].fl_theta_up_pred;
[91] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_theta_dn normal_prev[i].fl_theta_dn_pred;
[92] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_Robs normal_prev[i].fl_Robs_pred;
[93] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_Rxobs normal_prev[i].fl_Rxpred;
[94] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_Ryobs normal_prev[i].fl_Rypred;
[95] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_Vobs normal_prev[i].fl_Vobs_pred;
[96] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_Vxobs normal_prev[i].fl_Vxpred;
[97] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].fl_Vyobs normal_prev[i].fl_Vypred;
[98] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_flg_stop normal_prev[i].s4_flg_stop;
[99] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_flg_track normal_prev[i].s4_flg_track;
[100] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_flg_lost normal_prev[i].s4_flg_lost;
[101] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_ID_num normal_prev[i].s4_ID_num;
[102] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_flg_single_peak_up normal_prev[i].s4_flg_single_peak_up;
[103] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].u4_ctr_fa normal_prev[i].u4_ctr_fa;
[104] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_flg_reliable normal_prev[i].s4_flg_reliable;
[105] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_ctr_tos normal_prev[i].s4_ctr_tos;
[106] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_flg_heiso_up normal_prev[i].s4_flg_heiso_up;
[107] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_flg_heiso_dn normal_prev[i].s4_flg_heiso_dn;
[108] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_flg_dc normal_prev[i].s4_flg_dc;
[109] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_ctr_sot_cut normal_prev[i].s4_ctr_sot_cut;
[110] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_flg_reliable normal_prev[i].s4_flg_reliable;
[111] SUBSUBSUBPROCESS(1) equal tmptmp_normal_current[lost_num].s4_ctr_tos normal_prev[i].s4_ctr_tos;
[112] SUBSUBSUBPROCESS(1) func<start> fn_ab_track( 
[113] SUBSUBSUBPROCESS(1) func 0 
[114] SUBSUBSUBPROCESS(1) func<end> ); 
[115] SUBSUBSUBPROCESS(1) func<start> calc_prediction_of_normaldata( 
[116] SUBSUBSUBPROCESS(1) func &tmptmp_normal_current[lost_num] 
[117] SUBSUBSUBPROCESS(1) func<end> ); 
[118] SUBSUBSUBPROCESS(1) if  if ( 
[119] SUBSUBSUBPROCESS(1) if  tmptmp_normal_current[lost_num].s4_flg_track == CS4_S4MAX 
[120] SUBSUBSUBPROCESS(1) if  ) 
[121] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[122] SUBSUBSUBPROCESS(2) else else 
[123] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[124] SUBSUBSUBSUBPROCESS(1) proc tmptmp_normal_current[lost_num].s4_flg_track++; 
[125] SUBSUBSUBPROCESS(3) proc tmptmp_normal_current[lost_num].s4_flg_lost++; 
[126] SUBSUBSUBPROCESS(3) equal tmptmp_normal_current[lost_num].s4_flg_new 0;
[127] SUBSUBSUBPROCESS(3) equal tmptmp_normal_current[lost_num].s4_tracked (S4)1;
[128] SUBSUBSUBPROCESS(3) equal normal_prev[i].s4_flg_used 1;
[129] SUBSUBSUBPROCESS(3) proc lost_num++; 
[130] SUBSUBPROCESS(2) else else 
[131] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[132] SUBSUBSUBPROCESS(1) func<start> fn_init(&normal_prev[i], 1 
[133] SUBSUBSUBPROCESS(1) func<end> ); 
[134] MAINPROCESS(3) for  for ( 
[135] MAINPROCESS(3) for  i = 0; 
[136] MAINPROCESS(3) for  i < lost_num; 
[137] MAINPROCESS(3) for  i++) 
[138] MAINPROCESS(3) subproc SUBPROCESS(1) 
[139] SUBPROCESS(1) if  if ( 
[140] SUBPROCESS(1) if  (pair_num_current + i) < NORMAL_BUFFSIZE 
[141] SUBPROCESS(1) if  ) 
[142] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[143] SUBSUBPROCESS(1) func<start> copy_normal_data( 
[144] SUBSUBPROCESS(1) func 1 
[145] SUBSUBPROCESS(1) func<end> ); 
[146] SUBPROCESS(2) else else 
[147] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[148] SUBSUBPROCESS(1) proc break; 
[149] MAINPROCESS(4) equal iRet i;
[150] MAINPROCESS(4) proc return iRet; 
----------------- Total Codes : 150 lines
--------------------------
[Function Name] : predict_target 
-Return type : VD 
-Argument : 2 
     [0] : const NORMAL_BSM   *target_prev 
     [1] : NORMAL_BSM   *target_current 
----- Codes -----
[1] MAINPROCESS(1) equal target_current[0].s4_bin_up target_prev[0].s4_bin_up_pred;
[2] MAINPROCESS(1) equal target_current[0].s4_bin_dn target_prev[0].s4_bin_dn_pred;
[3] MAINPROCESS(1) equal target_current[0].fl_bin_up_interpolate target_prev[0].fl_bin_up_interpolate_pred;
[4] MAINPROCESS(1) equal target_current[0].fl_bin_dn_interpolate target_prev[0].fl_bin_dn_interpolate_pred;
[5] MAINPROCESS(1) equal target_current[0].s4_bin_up_music target_prev[0].s4_bin_up_music_pred;
[6] MAINPROCESS(1) equal target_current[0].s4_bin_dn_music target_prev[0].s4_bin_dn_music_pred;
[7] MAINPROCESS(1) equal target_current[0].fl_doa_up_interpolate target_prev[0].fl_doa_up_interpolate_pred;
[8] MAINPROCESS(1) equal target_current[0].fl_doa_dn_interpolate target_prev[0].fl_doa_dn_interpolate_pred;
[9] MAINPROCESS(1) equal target_current[0].fl_power_up target_prev[0].fl_power_up;
[10] MAINPROCESS(1) equal target_current[0].fl_power_dn target_prev[0].fl_power_dn;
[11] MAINPROCESS(1) equal target_current[0].fl_power_up_music target_prev[0].fl_power_up_music;
[12] MAINPROCESS(1) equal target_current[0].fl_power_dn_music target_prev[0].fl_power_dn_music;
[13] MAINPROCESS(1) equal target_current[0].fl_theta_up target_prev[0].fl_theta_up_pred;
[14] MAINPROCESS(1) equal target_current[0].fl_theta_dn target_prev[0].fl_theta_dn_pred;
[15] MAINPROCESS(1) equal target_current[0].fl_Robs target_prev[0].fl_Robs_pred;
[16] MAINPROCESS(1) equal target_current[0].fl_Rxobs target_prev[0].fl_Rxpred;
[17] MAINPROCESS(1) equal target_current[0].fl_Ryobs target_prev[0].fl_Rypred;
[18] MAINPROCESS(1) equal target_current[0].fl_Vobs target_prev[0].fl_Vobs_pred;
[19] MAINPROCESS(1) equal target_current[0].fl_Vxobs target_prev[0].fl_Vxpred;
[20] MAINPROCESS(1) equal target_current[0].fl_Vyobs target_prev[0].fl_Vypred;
[21] MAINPROCESS(1) equal target_current[0].fl_Rxfil target_prev[0].fl_Rxpred;
[22] MAINPROCESS(1) equal target_current[0].fl_Ryfil target_prev[0].fl_Rypred;
[23] MAINPROCESS(1) equal target_current[0].fl_Vxfil target_prev[0].fl_Vxpred;
[24] MAINPROCESS(1) equal target_current[0].fl_Vyfil target_prev[0].fl_Vypred;
[25] MAINPROCESS(1) equal target_current[0].fl_Axfil target_prev[0].fl_Axfil;
[26] MAINPROCESS(1) equal target_current[0].fl_Ayfil target_prev[0].fl_Ayfil;
[27] MAINPROCESS(1) equal target_current[0].s4_flg_stop target_prev[0].s4_flg_stop;
[28] MAINPROCESS(1) equal target_current[0].s4_flg_track target_prev[0].s4_flg_track;
[29] MAINPROCESS(1) equal target_current[0].s4_flg_lost target_prev[0].s4_flg_lost;
[30] MAINPROCESS(1) equal target_current[0].s4_ID_num target_prev[0].s4_ID_num;
[31] MAINPROCESS(1) equal target_current[0].s4_flg_single_peak_up target_prev[0].s4_flg_single_peak_up;
[32] MAINPROCESS(1) equal target_current[0].u4_ctr_fa target_prev[0].u4_ctr_fa;
[33] MAINPROCESS(1) equal target_current[0].s4_flg_reliable target_prev[0].s4_flg_reliable;
[34] MAINPROCESS(1) equal target_current[0].s4_ctr_tos target_prev[0].s4_ctr_tos;
[35] MAINPROCESS(1) equal target_current[0].s4_flg_heiso_up target_prev[0].s4_flg_heiso_up;
[36] MAINPROCESS(1) equal target_current[0].s4_flg_heiso_dn target_prev[0].s4_flg_heiso_dn;
[37] MAINPROCESS(1) equal target_current[0].s4_flg_dc target_prev[0].s4_flg_dc;
[38] MAINPROCESS(1) equal target_current[0].s4_ctr_sot_cut target_prev[0].s4_ctr_sot_cut;
[39] MAINPROCESS(1) equal target_current[0].s4_flg_reliable target_prev[0].s4_flg_reliable;
[40] MAINPROCESS(1) equal target_current[0].s4_ctr_tos target_prev[0].s4_ctr_tos;
[41] MAINPROCESS(1) func<start> fn_ab_track( 
[42] MAINPROCESS(1) func 1 
[43] MAINPROCESS(1) func<end> ); 
[44] MAINPROCESS(1) func<start> calc_prediction_of_normaldata( 
[45] MAINPROCESS(1) func target_current 
[46] MAINPROCESS(1) func<end> ); 
[47] MAINPROCESS(1) if  if ( 
[48] MAINPROCESS(1) if  target_current[0].s4_flg_track == CS4_S4MAX 
[49] MAINPROCESS(1) if  ) 
[50] MAINPROCESS(1) subproc SUBPROCESS(1) 
[51] MAINPROCESS(2) else else 
[52] MAINPROCESS(2) subproc SUBPROCESS(1) 
[53] SUBPROCESS(1) proc target_current[0].s4_flg_track++; 
[54] MAINPROCESS(3) equal target_current[0].s4_flg_new 0;
[55] MAINPROCESS(3) equal target_current[0].s4_tracked 1;
[56] MAINPROCESS(3) equal target_current[0].s4_flg_used 1;
----------------- Total Codes : 56 lines
--------------------------
[Function Name] : copy_normal_data 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM   *normal_in 
     [1] : NORMAL_BSM   *normal_out 
     [2] : S4   size 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<size; 
[5] MAINPROCESS(1) for i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal *normal_out *normal_in;
[8] SUBPROCESS(1) proc normal_in++; 
[9] SUBPROCESS(1) proc normal_out++; 
[10] MAINPROCESS(2) proc return; 
----------------- Total Codes : 10 lines
--------------------------
[Function Name] : calc_prediction_of_normaldata 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM*   normal 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_transform_xy_to_polar( 
[2] MAINPROCESS(1) func &normal[0].fl_theta_up_pred 
[3] MAINPROCESS(1) func<end> ); 
[4] MAINPROCESS(1) equal normal[0].fl_theta_dn_pred normal[0].fl_theta_up_pred;
[5] MAINPROCESS(1) func<start> fn_transform_vxvy_to_vr( 
[6] MAINPROCESS(1) func &normal[0].fl_Vobs_pred 
[7] MAINPROCESS(1) func<end> ); 
[8] MAINPROCESS(1) func<start> fn_transform_rv_to_freqbin( 
[9] MAINPROCESS(1) func 0 
[10] MAINPROCESS(1) func<end> ); 
[11] MAINPROCESS(1) func<start> fn_transform_rv_to_freqbin( 
[12] MAINPROCESS(1) func 1 
[13] MAINPROCESS(1) func<end> ); 
[14] MAINPROCESS(1) func<start> fn_transform_rv_to_freqbin_interpolate( 
[15] MAINPROCESS(1) func 0 
[16] MAINPROCESS(1) func<end> ); 
[17] MAINPROCESS(1) func<start> fn_transform_rv_to_freqbin_interpolate( 
[18] MAINPROCESS(1) func 1 
[19] MAINPROCESS(1) func<end> ); 
[20] MAINPROCESS(1) func<start> fn_transform_rad_to_doabin( 
[21] MAINPROCESS(1) func &normal[0].s4_bin_up_music_pred 
[22] MAINPROCESS(1) func<end> ); 
[23] MAINPROCESS(1) equal normal[0].s4_bin_dn_music_pred normal[0].s4_bin_up_music_pred;
[24] MAINPROCESS(1) func<start> fn_transform_rad_to_doabin_interpolate( 
[25] MAINPROCESS(1) func &normal[0].fl_doa_up_interpolate_pred 
[26] MAINPROCESS(1) func<end> ); 
[27] MAINPROCESS(1) equal normal[0].fl_doa_dn_interpolate_pred normal[0].fl_doa_up_interpolate_pred;
----------------- Total Codes : 27 lines
--------------------------
[Function Name] : fn_transform_xy_to_polar 
-Return type : VD 
-Argument : 4 
     [0] : FL   x 
     [1] : FL   y 
     [2] : FL*   r 
     [3] : FL*   theta 
----- Codes -----
[1] MAINPROCESS(1) equal FL sensor_pos_x st_g_bsm_loop_data.afl_installed_angle[1];
[2] MAINPROCESS(1) if if( 
[3] MAINPROCESS(1) if y<0.0 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) func<start> *r = -(FL)fl_sqrt( (x - sensor_pos_x)*(x - sensor_pos_x) + y*y 
[7] SUBPROCESS(1) func<end> ); 
[8] SUBPROCESS(1) func<start> *theta = (FL)fl_atan( (x-sensor_pos_x) / y ,(FL)1.0F 
[9] SUBPROCESS(1) func<end> ); 
[10] MAINPROCESS(2) else if else if( 
[11] MAINPROCESS(2) else if y>0.0 
[12] MAINPROCESS(2) else if ) 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) func<start> *r = (FL)fl_sqrt( (x - sensor_pos_x)*(x - sensor_pos_x) + y*y 
[15] SUBPROCESS(1) func<end> ); 
[16] SUBPROCESS(1) if  if ( 
[17] SUBPROCESS(1) if  fl_abs(x - sensor_pos_x) > (FL)0.0F 
[18] SUBPROCESS(1) if  ) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) func<start> *theta = -(FL)(0.5F*PI + fl_atan( y / (x-sensor_pos_x) ,(FL)1.0F) 
[21] SUBSUBPROCESS(1) func<end> ); 
[22] SUBPROCESS(2) else else 
[23] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) equal *theta (FL)0.0F;
[25] MAINPROCESS(3) else else 
[26] MAINPROCESS(3) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) equal *r x - sensor_pos_x;
[28] SUBPROCESS(1) equal *theta 90.0F*PI/180.0F;
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : fn_transform_rad_to_doabin 
-Return type : VD 
-Argument : 2 
     [0] : FL   angle 
     [1] : S4*   doa_bin 
----- Codes -----
[1] MAINPROCESS(1) proc S4 tmp_doabin; 
[2] MAINPROCESS(1) func<start> tmp_doabin = (S4)( ((-180.0F/PI*angle - DOA_BIN_START_ANG - st_g_bsm_loop_data.afl_installed_angle[0]) / DOA_ANG_PER_BIN) + (FL)0.5F 
[3] MAINPROCESS(1) func<end> ); 
[4] MAINPROCESS(1) if  if ( 
[5] MAINPROCESS(1) if  tmp_doabin < 0 
[6] MAINPROCESS(1) if  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal tmp_doabin 0;
[9] MAINPROCESS(2) else if  else if ( 
[10] MAINPROCESS(2) else if  tmp_doabin > N_DOA 
[11] MAINPROCESS(2) else if  ) 
[12] MAINPROCESS(2) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal tmp_doabin N_DOA;
[14] MAINPROCESS(3) else else 
[15] MAINPROCESS(3) subproc SUBPROCESS(1) 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_transform_rad_to_doabin_interpolate 
-Return type : VD 
-Argument : 2 
     [0] : FL   angle 
     [1] : FL*   doa_bin 
----- Codes -----
[1] MAINPROCESS(1) proc FL tmp_doabin; 
[2] MAINPROCESS(1) equal tmp_doabin (-180.0F/PI*angle - DOA_BIN_START_ANG - st_g_bsm_loop_data.afl_installed_angle[0]) / DOA_ANG_PER_BIN;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  tmp_doabin < 0.0F 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal tmp_doabin 0.0F;
[8] MAINPROCESS(2) else if  else if ( 
[9] MAINPROCESS(2) else if  tmp_doabin > (FL)N_DOA 
[10] MAINPROCESS(2) else if  ) 
[11] MAINPROCESS(2) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal tmp_doabin (FL)N_DOA;
[13] MAINPROCESS(3) else else 
[14] MAINPROCESS(3) subproc SUBPROCESS(1) 
----------------- Total Codes : 14 lines
--------------------------
[Function Name] : fn_transform_rv_to_freqbin 
-Return type : VD 
-Argument : 4 
     [0] : FL   r 
     [1] : FL   v 
     [2] : S4*   freqbin 
     [3] : S4   updn 
----- Codes -----
[1] MAINPROCESS(1) equal S4 tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT;
[2] MAINPROCESS(1) if  if ( 
[3] MAINPROCESS(1) if  (r < FREQ_EXPAND_R_TH 
[4] MAINPROCESS(1) if  ) 
[5] MAINPROCESS(1) if  &&  (v > FREQ_EXPAND_V_TH)) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT_PRIOR_EX;
[8] MAINPROCESS(2) if if( 
[9] MAINPROCESS(2) if updn==CU2_LFM_MOD_UP 
[10] MAINPROCESS(2) if ) 
[11] MAINPROCESS(2) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if if( 
[13] SUBPROCESS(1) if r<0 
[14] SUBPROCESS(1) if ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) equal *freqbin (S4)( 0.50F*( -r/RCOF - v/VCOF ) + 0.50F ) + NB_FFT_PT/2;
[17] SUBPROCESS(2) else else 
[18] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[19] SUBSUBPROCESS(1) equal *freqbin (S4)( 0.50F*( r/RCOF - v/VCOF ) + 0.50F ) + NB_FFT_PT/2;
[20] MAINPROCESS(3) else if else if( 
[21] MAINPROCESS(3) else if updn==CU2_LFM_MOD_DN 
[22] MAINPROCESS(3) else if ) 
[23] MAINPROCESS(3) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) if if( 
[25] SUBPROCESS(1) if r<0 
[26] SUBPROCESS(1) if ) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) equal *freqbin (S4)( 0.50F*( -r/RCOF + v/VCOF ) + 0.50F ) + NB_FFT_PT/2;
[29] SUBPROCESS(2) else else 
[30] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) equal *freqbin (S4)( 0.50F*( r/RCOF + v/VCOF ) + 0.50F ) + NB_FFT_PT/2;
[32] MAINPROCESS(4) else else 
[33] MAINPROCESS(4) subproc SUBPROCESS(1) 
[34] MAINPROCESS(5) if if( 
[35] MAINPROCESS(5) if *freqbin<tmp_lower_limit_th 
[36] MAINPROCESS(5) if ) 
[37] MAINPROCESS(5) subproc SUBPROCESS(1) 
[38] SUBPROCESS(1) equal *freqbin tmp_lower_limit_th;
[39] MAINPROCESS(6) proc return; 
----------------- Total Codes : 39 lines
--------------------------
[Function Name] : fn_transform_rv_to_freqbin_interpolate 
-Return type : VD 
-Argument : 4 
     [0] : FL   r 
     [1] : FL   v 
     [2] : FL*   freqbin 
     [3] : S4   updn 
----- Codes -----
[1] MAINPROCESS(1) equal S4 tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT;
[2] MAINPROCESS(1) if  if ( 
[3] MAINPROCESS(1) if  (r < FREQ_EXPAND_R_TH 
[4] MAINPROCESS(1) if  ) 
[5] MAINPROCESS(1) if  &&  (v > FREQ_EXPAND_V_TH)) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT_PRIOR_EX;
[8] MAINPROCESS(2) if if( 
[9] MAINPROCESS(2) if updn==CU2_LFM_MOD_UP 
[10] MAINPROCESS(2) if ) 
[11] MAINPROCESS(2) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if if( 
[13] SUBPROCESS(1) if r<0.0F 
[14] SUBPROCESS(1) if ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) equal *freqbin ( 0.50F*( -r/RCOF - v/VCOF ) + 0.50F ) + (FL)NB_FFT_PT/2.0F;
[17] SUBPROCESS(2) else else 
[18] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[19] SUBSUBPROCESS(1) equal *freqbin ( 0.50F*( r/RCOF - v/VCOF ) + 0.50F ) + (FL)NB_FFT_PT/2.0F;
[20] MAINPROCESS(3) else if else if( 
[21] MAINPROCESS(3) else if updn==CU2_LFM_MOD_DN 
[22] MAINPROCESS(3) else if ) 
[23] MAINPROCESS(3) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) if if( 
[25] SUBPROCESS(1) if r<0.0F 
[26] SUBPROCESS(1) if ) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) equal *freqbin ( 0.50F*( -r/RCOF + v/VCOF ) + 0.50F ) + (FL)NB_FFT_PT/2.0F;
[29] SUBPROCESS(2) else else 
[30] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) equal *freqbin ( 0.50F*( r/RCOF + v/VCOF ) + 0.50F ) + (FL)NB_FFT_PT/2.0F;
[32] MAINPROCESS(4) else else 
[33] MAINPROCESS(4) subproc SUBPROCESS(1) 
[34] MAINPROCESS(5) if  if ( 
[35] MAINPROCESS(5) if  *freqbin < (FL)tmp_lower_limit_th 
[36] MAINPROCESS(5) if  ) 
[37] MAINPROCESS(5) subproc SUBPROCESS(1) 
[38] SUBPROCESS(1) equal *freqbin (FL)tmp_lower_limit_th;
[39] MAINPROCESS(6) proc return; 
----------------- Total Codes : 39 lines
--------------------------
[Function Name] : fn_transform_vxvy_to_vr 
-Return type : VD 
-Argument : 4 
     [0] : FL   vx 
     [1] : FL   vy 
     [2] : FL   theta 
     [3] : FL*   vr 
----- Codes -----
[1] MAINPROCESS(1) proc FL tmp_vr; 
[2] MAINPROCESS(1) if  if ( 
[3] MAINPROCESS(1) if  vy > 0.0 
[4] MAINPROCESS(1) if  ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) func<start> tmp_vr = (FL)fl_sqrt( vx*vx + vy*vy 
[7] SUBPROCESS(1) func<end> ); 
[8] SUBPROCESS(1) if  if ( 
[9] SUBPROCESS(1) if  tmp_vr > V_PREDICT_MAX 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] SUBSUBPROCESS(1) equal tmp_vr V_PREDICT_MAX;
[13] MAINPROCESS(2) else if  else if ( 
[14] MAINPROCESS(2) else if  vy < 0.0 
[15] MAINPROCESS(2) else if  ) 
[16] MAINPROCESS(2) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) func<start> tmp_vr = -(FL)fl_sqrt( vx*vx + vy*vy 
[18] SUBPROCESS(1) func<end> ); 
[19] SUBPROCESS(1) if  if ( 
[20] SUBPROCESS(1) if  tmp_vr < -(FL)V_PREDICT_MAX 
[21] SUBPROCESS(1) if  ) 
[22] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[23] SUBSUBPROCESS(1) equal tmp_vr -(FL)V_PREDICT_MAX;
[24] MAINPROCESS(3) else else 
[25] MAINPROCESS(3) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal tmp_vr 0.0;
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_ab_track 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM*   st_a_normal_prev 
     [1] : NORMAL_BSM*   st_a_normal_current 
     [2] : S4   s4_a_ab_filt_cof 
----- Codes -----
[1] MAINPROCESS(1) proc FL alpha1, alpha2, alpha3, alpha4; 
[2] MAINPROCESS(1) proc FL beta1, beta2, beta3, beta4; 
[3] MAINPROCESS(1) proc FL prev_Vy; 
[4] MAINPROCESS(1) proc FL prev_Ry; 
[5] MAINPROCESS(1) proc FL prev_Vx; 
[6] MAINPROCESS(1) proc FL prev_Rx; 
[7] MAINPROCESS(1) proc FL current_Vy; 
[8] MAINPROCESS(1) proc FL current_Ry; 
[9] MAINPROCESS(1) proc FL current_Vx; 
[10] MAINPROCESS(1) proc FL current_Rx; 
[11] MAINPROCESS(1) if  if ( 
[12] MAINPROCESS(1) if  s4_a_ab_filt_cof == 1 
[13] MAINPROCESS(1) if  ) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal prev_Vy st_a_normal_prev->fl_Vypred;
[16] SUBPROCESS(1) equal prev_Ry st_a_normal_prev->fl_Rypred;
[17] SUBPROCESS(1) equal prev_Vx st_a_normal_prev->fl_Vxpred;
[18] SUBPROCESS(1) equal prev_Rx st_a_normal_prev->fl_Rxpred;
[19] SUBPROCESS(1) equal current_Vy st_a_normal_current->fl_Vyfil;
[20] SUBPROCESS(1) equal current_Ry st_a_normal_current->fl_Ryfil;
[21] SUBPROCESS(1) equal current_Vx st_a_normal_current->fl_Vxfil;
[22] SUBPROCESS(1) equal current_Rx st_a_normal_current->fl_Rxfil;
[23] SUBPROCESS(1) equal alpha1 0.1F;
[24] SUBPROCESS(1) equal beta1 0.0014F;
[25] SUBPROCESS(1) equal alpha2 0.1F;
[26] SUBPROCESS(1) equal beta2 0.0529F;
[27] SUBPROCESS(1) equal alpha3 0.1F;
[28] SUBPROCESS(1) equal beta3 0.001F;
[29] SUBPROCESS(1) equal alpha4 0.2F;
[30] SUBPROCESS(1) equal beta4 0.01F;
[31] MAINPROCESS(2) else else 
[32] MAINPROCESS(2) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) equal prev_Vy st_a_normal_prev->fl_Vypred;
[34] SUBPROCESS(1) equal prev_Ry st_a_normal_prev->fl_Rypred;
[35] SUBPROCESS(1) equal prev_Vx st_a_normal_prev->fl_Vxpred;
[36] SUBPROCESS(1) equal prev_Rx st_a_normal_prev->fl_Rxpred;
[37] SUBPROCESS(1) equal current_Vy st_a_normal_current->fl_Vyobs;
[38] SUBPROCESS(1) equal current_Ry st_a_normal_current->fl_Ryobs;
[39] SUBPROCESS(1) equal current_Vx st_a_normal_current->fl_Vxobs;
[40] SUBPROCESS(1) equal current_Rx st_a_normal_current->fl_Rxobs;
[41] SUBPROCESS(1) equal alpha1 0.2F;
[42] SUBPROCESS(1) equal beta1 0.0014F;
[43] SUBPROCESS(1) equal alpha2 0.2F;
[44] SUBPROCESS(1) equal beta2 0.0529F;
[45] SUBPROCESS(1) equal alpha3 0.06F;
[46] SUBPROCESS(1) equal beta3 0.0F;
[47] SUBPROCESS(1) equal alpha4 0.06F;
[48] SUBPROCESS(1) equal beta4 0.0014F;
[49] MAINPROCESS(3) equal st_a_normal_current->fl_Ayfil st_a_normal_prev->fl_Ayfil		+  beta1*( current_Vy - prev_Vy )/CFL_SAMPLING_TIME;
[50] MAINPROCESS(3) func<start> st_a_normal_current->fl_Vyfil  = prev_Vy					+ alpha1*( current_Vy - prev_Vy 
[51] MAINPROCESS(3) func<end> ); 
[52] MAINPROCESS(3) equal st_a_normal_current->fl_Vypred st_a_normal_current->fl_Vyfil	+ st_a_normal_current->fl_Ayfil*CFL_SAMPLING_TIME;
[53] MAINPROCESS(3) equal st_a_normal_current->fl_Vyfil prev_Vy					+  beta2*( current_Ry - prev_Ry )/CFL_SAMPLING_TIME;
[54] MAINPROCESS(3) func<start> st_a_normal_current->fl_Ryfil  = prev_Ry					+ alpha2*( current_Ry - prev_Ry 
[55] MAINPROCESS(3) func<end> ); 
[56] MAINPROCESS(3) equal st_a_normal_current->fl_Rypred st_a_normal_current->fl_Ryfil	+ st_a_normal_current->fl_Vyfil*CFL_SAMPLING_TIME;
[57] MAINPROCESS(3) equal st_a_normal_current->fl_Axfil st_a_normal_prev->fl_Axfil		+  beta3*( current_Vx - prev_Vx )/CFL_SAMPLING_TIME;
[58] MAINPROCESS(3) func<start> st_a_normal_current->fl_Vxfil  = prev_Vx					+ alpha3*( current_Vx - prev_Vx 
[59] MAINPROCESS(3) func<end> ); 
[60] MAINPROCESS(3) equal st_a_normal_current->fl_Vxpred st_a_normal_current->fl_Vxfil    + st_a_normal_current->fl_Axfil*CFL_SAMPLING_TIME;
[61] MAINPROCESS(3) equal st_a_normal_current->fl_Vxfil prev_Vx					+  beta4*( current_Rx - prev_Rx )/CFL_SAMPLING_TIME;
[62] MAINPROCESS(3) func<start> st_a_normal_current->fl_Rxfil  = prev_Rx					+ alpha4*( current_Rx - prev_Rx 
[63] MAINPROCESS(3) func<end> ); 
[64] MAINPROCESS(3) equal st_a_normal_current->fl_Rxpred st_a_normal_current->fl_Rxfil	+ st_a_normal_current->fl_Vxfil*CFL_SAMPLING_TIME;
[65] MAINPROCESS(3) proc return; 
----------------- Total Codes : 65 lines
--------------------------
[Function Name] : fn_ab_track_wall 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM*   st_a_normal_prev 
     [1] : NORMAL_BSM*   st_a_normal_current 
     [2] : S4   s4_a_ab_filt_cof 
----- Codes -----
[1] MAINPROCESS(1) proc FL alpha1, alpha2; 
[2] MAINPROCESS(1) proc FL beta1, beta2; 
[3] MAINPROCESS(1) equal FL sensor_pos_x st_g_bsm_loop_data.afl_installed_angle[1];
[4] MAINPROCESS(1) if  if ( 
[5] MAINPROCESS(1) if  s4_a_ab_filt_cof == 1 
[6] MAINPROCESS(1) if  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal alpha1 0.85F;
[9] SUBPROCESS(1) equal beta1 0.0014F;
[10] SUBPROCESS(1) equal alpha2 0.80F;
[11] SUBPROCESS(1) equal beta2 0.0529F;
[12] MAINPROCESS(2) else else 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal alpha1 0.35F;
[15] SUBPROCESS(1) equal beta1 0.0014F;
[16] SUBPROCESS(1) equal alpha2 0.30F;
[17] SUBPROCESS(1) equal beta2 0.0529F;
[18] MAINPROCESS(3) equal st_a_normal_current->fl_Axfil st_a_normal_prev->fl_Axfil		+  beta1*( st_a_normal_current->fl_Vxobs - st_a_normal_prev->fl_Vxpred )/CFL_SAMPLING_TIME;
[19] MAINPROCESS(3) func<start> st_a_normal_current->fl_Vxfil  = st_a_normal_prev->fl_Vxpred		+ alpha1*( st_a_normal_current->fl_Vxobs - st_a_normal_prev->fl_Vxpred 
[20] MAINPROCESS(3) func<end> ); 
[21] MAINPROCESS(3) equal st_a_normal_current->fl_Vxpred st_a_normal_current->fl_Vxfil	+ st_a_normal_current->fl_Axfil*CFL_SAMPLING_TIME;
[22] MAINPROCESS(3) func<start> st_a_normal_current->fl_Rxfil  = st_a_normal_prev->fl_Rxpred		+ alpha2*( st_a_normal_current->fl_Rxobs - st_a_normal_prev->fl_Rxpred 
[23] MAINPROCESS(3) func<end> ); 
[24] MAINPROCESS(3) equal st_a_normal_current->fl_Rxpred st_a_normal_current->fl_Rxfil	+ st_a_normal_current->fl_Vxfil*CFL_SAMPLING_TIME;
[25] MAINPROCESS(3) equal st_a_normal_current->fl_Ayfil 0.0F;
[26] MAINPROCESS(3) equal st_a_normal_current->fl_Vyfil 0.0F;
[27] MAINPROCESS(3) equal st_a_normal_current->fl_Vypred 0.0F;
[28] MAINPROCESS(3) equal st_a_normal_current->fl_Ryfil 0.0F;
[29] MAINPROCESS(3) equal st_a_normal_current->fl_Rypred 0.0F;
[30] MAINPROCESS(3) func<start> st_a_normal_current->fl_Robs_pred  = -(FL)fl_sqrt( 
[31] MAINPROCESS(3) func ( st_a_normal_current->fl_Rxpred - sensor_pos_x )*( st_a_normal_current->fl_Rxpred - sensor_pos_x ) + st_a_normal_current->fl_Rypred*st_a_normal_current->fl_Rypred 
[32] MAINPROCESS(3) func<end> ); 
[33] MAINPROCESS(3) equal st_a_normal_current->fl_theta_up_pred PI / (FL)2.0F;
[34] MAINPROCESS(3) equal st_a_normal_current->fl_theta_dn_pred st_a_normal_current->fl_theta_up_pred;
[35] MAINPROCESS(3) func<start> st_a_normal_current->fl_Vobs_pred = (FL)( 
[36] MAINPROCESS(3) func st_a_normal_current->fl_Vxpred*fl_sin( 0.5F*(st_a_normal_current->fl_theta_up_pred + st_a_normal_current->fl_theta_up_pred) ) + st_a_normal_current->fl_Vypred*fl_cos( 0.5F*(st_a_normal_current->fl_theta_up_pred + st_a_normal_current->fl_theta_up_pred) ) 
[37] MAINPROCESS(3) func<end> ); 
[38] MAINPROCESS(3) proc return; 
----------------- Total Codes : 38 lines
--------------------------
[Function Name] : s4_check_passing_car 
-Return type : S4 
-Argument : 2 
     [0] : const NORMAL_BSM*   pst_a_target 
     [1] : S4   s4_a_prev_passing_flg 
----- Codes -----
[1] MAINPROCESS(1) equal S4 bRes 0;
[2] MAINPROCESS(1) equal S4 tmp_passing_flg 0;
[3] MAINPROCESS(1) proc S4 i; 
[4] MAINPROCESS(1) if  if ( 
[5] MAINPROCESS(1) if  (fl_abs((FL)s2_g_curvr_for_base) > CANOUT_CURVER_MIN 
[6] MAINPROCESS(1) if  ) 
[7] MAINPROCESS(1) if  &&  (fl_abs(fl_g_v_self_bsm_for_base) > CFL_CANOUT_VSELF_MIN)) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) for  for ( 
[10] SUBPROCESS(1) for  i = 0; 
[11] SUBPROCESS(1) for  i < st_g_bsm_loop_data.as4_buf_pair_num[1]; 
[12] SUBPROCESS(1) for  i++) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if  if ( 
[15] SUBSUBPROCESS(1) if  (pst_a_target->s4_ID_num > 0 
[16] SUBSUBPROCESS(1) if  ) 
[17] SUBSUBPROCESS(1) if  &&  (pst_a_target->fl_Rxfil > PASSING_XMIN) 
[18] SUBSUBPROCESS(1) if  &&  (pst_a_target->fl_Rxfil < PASSING_XMAX) 
[19] SUBSUBPROCESS(1) if  &&  (pst_a_target->fl_Ryfil > PASSING_YMIN) 
[20] SUBSUBPROCESS(1) if  &&  (pst_a_target->fl_Ryfil < PASSING_YMAX)) 
[21] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBPROCESS(1) if  if ( 
[23] SUBSUBSUBPROCESS(1) if  (pst_a_target->fl_Rxfil < (PASSING_XMIN + 1.0F) 
[24] SUBSUBSUBPROCESS(1) if  ) 
[25] SUBSUBSUBPROCESS(1) if  &&  (pst_a_target->fl_Ryfil < (PASSING_YMIN + 3.0F)) 
[26] SUBSUBSUBPROCESS(1) if  &&  (pst_a_target->fl_Vxfil < 0.0F) 
[27] SUBSUBSUBPROCESS(1) if  &&  (pst_a_target->fl_Vyfil < -0.8F) 
[28] SUBSUBSUBPROCESS(1) if  &&  (fl_abs((FL)s2_g_curvr_for_base) < 300.0F)) 
[29] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[30] SUBSUBSUBSUBPROCESS(1) equal tmp_passing_flg 0;
[31] SUBSUBSUBPROCESS(2) else else 
[32] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[33] SUBSUBSUBSUBPROCESS(1) equal tmp_passing_flg 1;
[34] SUBSUBSUBSUBPROCESS(1) proc break; 
[35] SUBSUBPROCESS(2) proc pst_a_target++; 
[36] MAINPROCESS(2) if  if ( 
[37] MAINPROCESS(2) if  tmp_passing_flg == 0 
[38] MAINPROCESS(2) if  ) 
[39] MAINPROCESS(2) subproc SUBPROCESS(1) 
[40] SUBPROCESS(1) equal bRes 0;
[41] MAINPROCESS(3) else else 
[42] MAINPROCESS(3) subproc SUBPROCESS(1) 
[43] SUBPROCESS(1) equal bRes s4_a_prev_passing_flg + tmp_passing_flg;
[44] MAINPROCESS(4) proc return bRes; 
----------------- Total Codes : 44 lines
--------------------------
[Function Name] : fn_send_to_can 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM   ast_a_target[TARGET_BUFFSIZE] 
     [1] : S4   as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT] 
     [2] : FL   afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  i = (S4)0; 
[4] MAINPROCESS(1) for  i < TARGET_BUFFSIZE; 
[5] MAINPROCESS(1) for  i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if  if ( 
[8] SUBPROCESS(1) if  ast_a_target[i].s4_ID_num > 0 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][0] ast_a_target[i].s4_bin_up;
[12] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][1] ast_a_target[i].s4_bin_up_music;
[13] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][2] ast_a_target[i].s4_bin_dn;
[14] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][3] ast_a_target[i].s4_bin_dn_music;
[15] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][4] ast_a_target[i].s4_bin_up_pred;
[16] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][5] ast_a_target[i].s4_bin_dn_pred;
[17] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][6] ast_a_target[i].s4_bin_up_music_pred;
[18] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][7] ast_a_target[i].s4_bin_dn_music_pred;
[19] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][8] ast_a_target[i].s4_flg_stop;
[20] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][9] ast_a_target[i].s4_flg_track;
[21] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][10] ast_a_target[i].s4_flg_lost;
[22] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][11] ast_a_target[i].s4_ID_num;
[23] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][12] ast_a_target[i].s4_flg_new;
[24] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][13] ast_a_target[i].s4_flg_used;
[25] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][14] ast_a_target[i].s4_flg_dc;
[26] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][15] ast_a_target[i].s4_ctr_sot_cut;
[27] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][16] ast_a_target[i].s4_flg_reliable;
[28] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][17] ast_a_target[i].s4_ctr_tos;
[29] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][18] 0;
[30] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][19] 0;
[31] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][20] 0;
[32] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][21] 0;
[33] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][22] 0;
[34] SUBSUBPROCESS(1) if if( 
[35] SUBSUBPROCESS(1) if u1_g_sns_pos==SENSOR_RIGHT 
[36] SUBSUBPROCESS(1) if ) 
[37] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][0] ast_a_target[i].fl_power_up_music;
[39] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][1] ast_a_target[i].fl_power_dn_music;
[40] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][2] ast_a_target[i].fl_theta_up;
[41] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][3] ast_a_target[i].fl_theta_dn;
[42] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][4] ast_a_target[i].fl_Robs;
[43] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][5] ast_a_target[i].fl_Rxobs;
[44] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][6] ast_a_target[i].fl_Ryobs;
[45] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][7] ast_a_target[i].fl_Ryfil;
[46] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][8] ast_a_target[i].fl_Rxfil;
[47] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][9] ast_a_target[i].fl_Rxpred;
[48] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][10] ast_a_target[i].fl_Rypred;
[49] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][11] ast_a_target[i].fl_Vobs;
[50] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][12] 0;
[51] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][13] ast_a_target[i].fl_Vyfil;
[52] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][14] ast_a_target[i].fl_Vxfil;
[53] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][15] ast_a_target[i].fl_Vxpred;
[54] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][16] ast_a_target[i].fl_Vypred;
[55] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][17] ast_a_target[i].fl_Ayfil;
[56] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][18] ast_a_target[i].fl_Axfil;
[57] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][19] ast_a_target[i].fl_prob;
[58] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][20] ast_a_target[i].fl_track_prob;
[59] SUBSUBPROCESS(2) else else 
[60] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[61] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][0] ast_a_target[i].fl_power_up_music;
[62] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][1] ast_a_target[i].fl_power_dn_music;
[63] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][2] - ast_a_target[i].fl_theta_up;
[64] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][3] - ast_a_target[i].fl_theta_dn;
[65] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][4] ast_a_target[i].fl_Robs;
[66] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][5] - ast_a_target[i].fl_Rxobs;
[67] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][6] ast_a_target[i].fl_Ryobs;
[68] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][7] ast_a_target[i].fl_Ryfil;
[69] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][8] - ast_a_target[i].fl_Rxfil;
[70] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][9] - ast_a_target[i].fl_Rxpred;
[71] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][10] ast_a_target[i].fl_Rypred;
[72] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][11] ast_a_target[i].fl_Vobs;
[73] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][12] 0;
[74] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][13] ast_a_target[i].fl_Vyfil;
[75] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][14] - ast_a_target[i].fl_Vxfil;
[76] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][15] - ast_a_target[i].fl_Vxpred;
[77] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][16] ast_a_target[i].fl_Vypred;
[78] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][17] 0;
[79] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][18] 0;
[80] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][19] ast_a_target[i].fl_prob;
[81] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][20] ast_a_target[i].fl_track_prob;
[82] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][21] 0;
[83] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][22] 0;
[84] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][23] 0;
[85] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][24] 0;
[86] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][25] 0;
[87] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][26] 0;
[88] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][27] 0;
[89] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][28] 0;
[90] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][29] 0;
[91] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][30] 0;
[92] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][31] ast_a_target[i].fl_doa_up_interpolate;
[93] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][32] ast_a_target[i].fl_doa_dn_interpolate;
[94] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][33] ast_a_target[i].fl_doa_up_interpolate_pred;
[95] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][34] ast_a_target[i].fl_doa_dn_interpolate_pred;
[96] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][35] ast_a_target[i].fl_bin_up_interpolate;
[97] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][36] ast_a_target[i].fl_bin_dn_interpolate;
[98] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][37] ast_a_target[i].fl_bin_up_interpolate_pred;
[99] SUBSUBPROCESS(3) equal afl_a_Tx_float[i][38] ast_a_target[i].fl_bin_dn_interpolate_pred;
----------------- Total Codes : 99 lines
