Total lines: 3546 
Total functions : 78 
--------------------------
[Function Name] : s4_bsm_connect 
-Return type : S4 
-Argument : 11 
     [0] : S4   pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   pair_num_sot 
     [7] : NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   Tx_int[TARGET_BUFFSIZE][NORM_INT] 
     [9] : FL   Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
     [10] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 iRet 0;
[3] MAINPROCESS ??? NORMAL_BSM	normal1[NORMAL_BUFFSIZE], 
[4] MAINPROCESS ??? normal2[NORMAL_BUFFSIZE], 
[5] MAINPROCESS ??? target1[TARGET_BUFFSIZE], 
[6] MAINPROCESS proc target2[TARGET_BUFFSIZE]; 
[7] MAINPROCESS proc S4		pair_num_current[2]; 
[8] MAINPROCESS equal S4 trk_num 0;
[9] MAINPROCESS ??? S4		pair_connect_prev[NORMAL_BUFFSIZE], 
[10] MAINPROCESS proc pair_connect_current[NORMAL_BUFFSIZE]; 
[11] MAINPROCESS equal S4		pair_num_total 0;
[12] MAINPROCESS equal S4		pair_num_connected 0;
[13] MAINPROCESS equal S4		pair_num_lost 0;
[14] MAINPROCESS equal S4 s4_t_pair_num_selected 0;
[15] MAINPROCESS func<start> fn_init(normal2, NORMAL_BUFFSIZE 
[16] MAINPROCESS func<end> ); 
[17] MAINPROCESS func<start> fn_init(target2, TARGET_BUFFSIZE 
[18] MAINPROCESS func<end> ); 
[19] MAINPROCESS func<start> fn_move(normal1, st_g_bsm_loop_data.ast_normal, NORMAL_BUFFSIZE 
[20] MAINPROCESS func<end> ); 
[21] MAINPROCESS func<start> fn_move(target1, st_g_bsm_loop_data.ast_target, TARGET_BUFFSIZE 
[22] MAINPROCESS func<end> ); 
[23] MAINPROCESS for<start> for( 
[24] MAINPROCESS for i=0; 
[25] MAINPROCESS for i<NORMAL_BUFFSIZE; 
[26] MAINPROCESS for i++ 
[27] MAINPROCESS for ) 
[28] MAINPROCESS subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) equal pair_connect_prev[i] -1;
[30] SUBPROCESS(1) equal pair_connect_current[i] -1;
[31] MAINPROCESS func<start> st_g_bsm_loop_data.u1_truck_flg = u1_check_long_truck(u1_a_alarming_flag 
[32] MAINPROCESS func<end> ); 
[33] MAINPROCESS func<start> fn_estimate_road_shape( 
[34] MAINPROCESS func st_g_bsm_loop_data.afl_Rx_right 
[35] MAINPROCESS func<end> ); 
[36] MAINPROCESS func<start> memcpy (afl_g_Rx_right, st_g_bsm_loop_data.afl_Rx_right, sizeof(FL)*70 
[37] MAINPROCESS func<end> ); 
[38] MAINPROCESS for<start> for( 
[39] MAINPROCESS for i=0; 
[40] MAINPROCESS for i<70; 
[41] MAINPROCESS for i++ 
[42] MAINPROCESS for ) 
[43] MAINPROCESS subproc SUBPROCESS(2) 
[44] MAINPROCESS func<start> fn_bsm_con_check_passing_pre( 
[45] MAINPROCESS func (const NORMAL_BSM (*))target1 
[46] MAINPROCESS func<end> ); 
[47] MAINPROCESS func<start> fn_bsm_con_integ_object( 
[48] MAINPROCESS func pair_num_prior, 
[49] MAINPROCESS func ast_a_normal_prior, 
[50] MAINPROCESS func pair_num_ordinary, 
[51] MAINPROCESS func ast_a_normal_ordinary, 
[52] MAINPROCESS func pair_num_2f, 
[53] MAINPROCESS func ast_a_normal_2f, 
[54] MAINPROCESS func pair_num_sot, 
[55] MAINPROCESS func ast_a_normal_sot, 
[56] MAINPROCESS func &pair_num_total, 
[57] MAINPROCESS func normal2 
[58] MAINPROCESS func<end> ); 
[59] MAINPROCESS equal trk_num st_g_bsm_loop_data.as4_buf_pair_num[0];
[60] MAINPROCESS if<start> if( 
[61] MAINPROCESS if trk_num==0 
[62] MAINPROCESS if ) 
[63] MAINPROCESS subproc SUBPROCESS(3) 
[64] SUBPROCESS(3) func<start> predict_object_trajectory_simple( 
[65] SUBPROCESS(3) func normal2, 
[66] SUBPROCESS(3) func pair_num_total 
[67] SUBPROCESS(3) func<end> ); 
[68] MAINPROCESS else<start> else 
[69] MAINPROCESS subproc SUBPROCESS(4) 
[70] SUBPROCESS(4) func<start> pair_num_connected = connect_previous_object( 
[71] SUBPROCESS(4) func normal1, 
[72] SUBPROCESS(4) func normal2, 
[73] SUBPROCESS(4) func pair_num_total, 
[74] SUBPROCESS(4) func pair_connect_prev, 
[75] SUBPROCESS(4) func pair_connect_current, 
[76] SUBPROCESS(4) func NORMAL_BUFFSIZE 
[77] SUBPROCESS(4) func<end> ); 
[78] SUBPROCESS(4) func<start> fn_bsm_con_tracking( 
[79] SUBPROCESS(4) func pair_num_connected, 
[80] SUBPROCESS(4) func (const S4 (*))pair_connect_prev, 
[81] SUBPROCESS(4) func (const S4 (*))pair_connect_current, 
[82] SUBPROCESS(4) func st_g_bsm_loop_data.as4_buf_pair_num[0], 
[83] SUBPROCESS(4) func normal1, 
[84] SUBPROCESS(4) func pair_num_total, 
[85] SUBPROCESS(4) func normal2 
[86] SUBPROCESS(4) func<end> ); 
[87] MAINPROCESS if<start> if( 
[88] MAINPROCESS if trk_num > 0 
[89] MAINPROCESS if ) 
[90] MAINPROCESS subproc SUBPROCESS(5) 
[91] SUBPROCESS(5) func<start> pair_num_lost = prediction_without_connected_data( 
[92] SUBPROCESS(5) func normal1, 
[93] SUBPROCESS(5) func normal2, 
[94] SUBPROCESS(5) func pair_num_total 
[95] SUBPROCESS(5) func<end> ); 
[96] MAINPROCESS equal pair_num_total pair_num_total + pair_num_lost;
[97] MAINPROCESS func<start> fn_bsm_con_add_new_object( 
[98] MAINPROCESS func &pair_num_total, 
[99] MAINPROCESS func normal2 
[100] MAINPROCESS func<end> ); 
[101] MAINPROCESS func<start> fn_bsm_con_jdg_object_probability(normal2 
[102] MAINPROCESS func<end> ); 
[103] MAINPROCESS equal s4_g_pair_num pair_num_total;
[104] MAINPROCESS func<start> memcpy (ast_g_normal, normal2, sizeof(NORMAL_BSM)*NORMAL_BUFFSIZE 
[105] MAINPROCESS func<end> ); 
[106] MAINPROCESS func<start> s4_t_pair_num_selected = select_target( 
[107] MAINPROCESS func st_g_bsm_loop_data.as4_buf_pair_num[1], 
[108] MAINPROCESS func (const NORMAL_BSM (*))target1, 
[109] MAINPROCESS func &pair_num_current[1], 
[110] MAINPROCESS func target2, 
[111] MAINPROCESS func (const S4 (*))&pair_num_total, 
[112] MAINPROCESS func (const NORMAL_BSM (*))normal2, 
[113] MAINPROCESS func u1_a_alarming_flag 
[114] MAINPROCESS func<end> ); 
[115] MAINPROCESS equal st_g_bsm_loop_data.as4_buf_pair_num[0] pair_num_total;
[116] MAINPROCESS equal st_g_bsm_loop_data.as4_buf_pair_num[1] pair_num_current[1];
[117] MAINPROCESS func<start> fn_move( 
[118] MAINPROCESS func normal1, 
[119] MAINPROCESS func normal2, 
[120] MAINPROCESS func NORMAL_BUFFSIZE 
[121] MAINPROCESS func<end> ); 
[122] MAINPROCESS func<start> fn_move( 
[123] MAINPROCESS func target1, 
[124] MAINPROCESS func target2, 
[125] MAINPROCESS func TARGET_BUFFSIZE 
[126] MAINPROCESS func<end> ); 
[127] MAINPROCESS func<start> fn_move(st_g_bsm_loop_data.ast_normal, normal1, NORMAL_BUFFSIZE 
[128] MAINPROCESS func<end> ); 
[129] MAINPROCESS func<start> fn_move(st_g_bsm_loop_data.ast_target, target1, TARGET_BUFFSIZE 
[130] MAINPROCESS func<end> ); 
[131] MAINPROCESS subproc SUBPROCESS(6) 
[132] SUBPROCESS(6) if<start> if( 
[133] SUBPROCESS(6) if st_g_bsm_loop_data.as4_buf_pair_num[1]==0 
[134] SUBPROCESS(6) if ) 
[135] SUBPROCESS(6) subproc SUBSUBPROCESS(1) 
[136] SUBPROCESS(6) else<start> else 
[137] SUBPROCESS(6) subproc SUBSUBPROCESS(2) 
[138] SUBPROCESS(6) if <start> if ( 
[139] SUBPROCESS(6) for<start> (fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[140] SUBPROCESS(6) for ) 
[141] SUBPROCESS(6) for &&  ( 
[142] SUBPROCESS(6) for st_g_bsm_loop_data.s4_flg_alarm == (S4 
[143] SUBPROCESS(6) for ) 
[144] SUBPROCESS(6) subproc SUBSUBPROCESS(3) 
[145] MAINPROCESS ??? fn_send_to_can( 
[146] MAINPROCESS ??? (const NORMAL_BSM (*))target1, 
[147] MAINPROCESS ??? Tx_int, 
[148] MAINPROCESS ??? Tx_float 
[149] MAINPROCESS ??? ) 
[150] MAINPROCESS equal iRet st_g_bsm_loop_data.as4_buf_pair_num[1];
[151] MAINPROCESS subproc SUBPROCESS(7) 
[152] SUBPROCESS(7) proc S4 as4_t_used_ID[TARGET_BUFFSIZE]; 
[153] SUBPROCESS(7) proc S4 s4_t_lp_target_num; 
[154] SUBPROCESS(7) proc S4 s4_t_lp_used_id; 
[155] SUBPROCESS(7) for<start> for( 
[156] SUBPROCESS(7) for s4_t_lp_target_num=0; 
[157] SUBPROCESS(7) for s4_t_lp_target_num<TARGET_BUFFSIZE; 
[158] SUBPROCESS(7) for s4_t_lp_target_num++ 
[159] SUBPROCESS(7) for ) 
[160] SUBPROCESS(7) subproc SUBSUBPROCESS(1) 
[161] SUBPROCESS(7) for<start> for( 
[162] SUBPROCESS(7) for s4_t_lp_target_num=0; 
[163] SUBPROCESS(7) for s4_t_lp_target_num<TARGET_BUFFSIZE; 
[164] SUBPROCESS(7) for s4_t_lp_target_num++ 
[165] SUBPROCESS(7) for ) 
[166] SUBPROCESS(7) subproc SUBSUBPROCESS(2) 
[167] SUBPROCESS(7) ??? for( 
[168] SUBPROCESS(7) ??? s4_t_lp_target_num=0; 
[169] SUBPROCESS(7) ??? s4_t_lp_target_num<TARGET_BUFFSIZE; 
[170] SUBPROCESS(7) ??? s4_t_lp_target_num++ 
[171] SUBPROCESS(7) ??? ) 
[172] SUBPROCESS(7) subproc SUBSUBPROCESS(3) 
[173] MAINPROCESS proc return iRet; 
[174] SUBSUBPROCESS(1) equal as4_t_used_ID[s4_t_lp_target_num] 0;
[175] SUBSUBPROCESS(2) if <start> if ( 
[176] SUBSUBPROCESS(2) if  (Tx_int[s4_t_lp_target_num][11] != 0 
[177] SUBSUBPROCESS(2) if  ) 
[178] SUBSUBPROCESS(2) if  &&  ( 
[179] SUBSUBPROCESS(2) if  Tx_float[s4_t_lp_target_num][7] != CFL_UNKNOWN_VALUE 
[180] SUBSUBPROCESS(2) if  ) 
[181] SUBSUBPROCESS(2) if  &&  ( 
[182] SUBSUBPROCESS(2) if  Tx_float[s4_t_lp_target_num][8] != CFL_UNKNOWN_VALUE 
[183] SUBSUBPROCESS(2) if  ) 
[184] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[185] SUBSUBPROCESS(3) if <start> if ( 
[186] SUBSUBPROCESS(3) if  (Tx_int[s4_t_lp_target_num][11] == 0 
[187] SUBSUBPROCESS(3) if  ) 
[188] SUBSUBPROCESS(3) if  &&  ( 
[189] SUBSUBPROCESS(3) if  Tx_float[s4_t_lp_target_num][7] != CFL_UNKNOWN_VALUE 
[190] SUBSUBPROCESS(3) if  ) 
[191] SUBSUBPROCESS(3) if  &&  ( 
[192] SUBSUBPROCESS(3) if  Tx_float[s4_t_lp_target_num][8] != CFL_UNKNOWN_VALUE 
[193] SUBSUBPROCESS(3) if  ) 
[194] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[195] SUBSUBSUBPROCESS(1) for<start> for( 
[196] SUBSUBSUBPROCESS(1) for s4_t_lp_used_id=0; 
[197] SUBSUBSUBPROCESS(1) for s4_t_lp_used_id<TARGET_BUFFSIZE; 
[198] SUBSUBSUBPROCESS(1) for s4_t_lp_used_id++ 
[199] SUBSUBSUBPROCESS(1) for ) 
[200] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[201] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[202] SUBSUBSUBSUBPROCESS(1) ??? as4_t_used_ID[s4_t_lp_used_id]==0 
[203] SUBSUBSUBSUBPROCESS(1) ??? ) 
[204] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[205] SUBSUBSUBSUBSUBPROCESS(1) equal Tx_int[s4_t_lp_target_num][11] s4_t_lp_used_id+1;
[206] SUBSUBSUBSUBSUBPROCESS(1) equal as4_t_used_ID[s4_t_lp_used_id] 1;
[207] SUBSUBSUBSUBSUBPROCESS(1) proc break; 
----------------- Total Codes : 207 lines
--------------------------
[Function Name] : u1_check_long_truck 
-Return type : U1 
-Argument : 1 
     [0] : (U1   u1_a_alarming_flg 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS equal u1_t_jdg_truck_flg st_g_bsm_loop_data.u1_truck_flg;
[3] MAINPROCESS if <start> if ( 
[4] MAINPROCESS if  st_g_bsm_loop_data.as4_low_speed_flg[0] == (U1 
[5] MAINPROCESS if  ) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if <start> if ( 
[8] SUBPROCESS(1) if  st_g_bsm_loop_data.u1_truck_flg != (U1 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBPROCESS(1) else if <start> else if ( 
[12] SUBPROCESS(1) else if  (st_g_bsm_loop_data.as4_slow_sot_find[0] != (S4 
[13] SUBPROCESS(1) ??? ) 
[14] SUBPROCESS(1) ??? &&  ( 
[15] SUBPROCESS(1) ??? st_g_bsm_loop_data.as4_slow_sot_find[1] < WALL_REJECT_TH3 
[16] SUBPROCESS(1) ??? ) 
[17] SUBPROCESS(1) ??? &&  ( 
[18] SUBPROCESS(1) ??? u1_a_alarming_flg == (U1 
[19] SUBPROCESS(1) ??? ) 
[20] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[21] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[22] MAINPROCESS subproc SUBPROCESS(2) 
[23] MAINPROCESS proc return u1_t_jdg_truck_flg; 
----------------- Total Codes : 23 lines
--------------------------
[Function Name] : u1_jdg_truck_on_to_off 
-Return type : U1 
-Argument : 1 
     [0] : (U1   u1_a_alarming_flg 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS proc U2 u2_t_lp_fft_data; 
[3] MAINPROCESS proc U1 u1_t_count_up; 
[4] MAINPROCESS proc U4 u4_t_count_up2; 
[5] MAINPROCESS for <start> for ( 
[6] MAINPROCESS for  u2_t_lp_fft_data = CU2_TRUCK_BIN_START_OFF; 
[7] MAINPROCESS for  u2_t_lp_fft_data < CU2_TRUCK_BIN_END_OFF; 
[8] MAINPROCESS for  u2_t_lp_fft_data++ 
[9] MAINPROCESS for  ) 
[10] MAINPROCESS subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) if <start> if ( 
[12] SUBPROCESS(1) if  afl_g_cvw_lfm_ftt_power[0][u2_t_lp_fft_data] < CFL_TRUCK_POW_TH_OFF 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] MAINPROCESS proc u2_t_lp_fft_data < CU2_TRUCK_BIN_START_OFF; 
[16] MAINPROCESS func u2_t_lp_fft_data++ 
[17] MAINPROCESS func<end> ); 
[18] MAINPROCESS subproc SUBPROCESS(2) 
[19] SUBPROCESS(2) if <start> if ( 
[20] SUBPROCESS(2) if  afl_g_cvw_lfm_ftt_power[1][u2_t_lp_fft_data] < (FL 
[21] SUBPROCESS(2) if  ) 
[22] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[23] MAINPROCESS if <start> if ( 
[24] MAINPROCESS if  (u1_t_count_up > CU2_TRUCK_CNT_TH_OFF 
[25] MAINPROCESS if  ) 
[26] MAINPROCESS if  ||  ( 
[27] MAINPROCESS if  u4_t_count_up2 > (U4 
[28] MAINPROCESS if  ) 
[29] MAINPROCESS subproc SUBPROCESS(3) 
[30] MAINPROCESS &&  <start> &&  ( 
[31] MAINPROCESS &&   u1_a_alarming_flg == (S4 
[32] MAINPROCESS &&   ) 
[33] MAINPROCESS subproc SUBPROCESS(4) 
[34] SUBPROCESS(4) if<start> if( 
[35] SUBPROCESS(4) ??? u1_jdg_truck_off_to_on( 
[36] SUBPROCESS(4) ??? ) 
[37] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[38] MAINPROCESS subproc SUBPROCESS(5) 
[39] MAINPROCESS proc return u1_t_jdg_truck_flg; 
----------------- Total Codes : 39 lines
--------------------------
[Function Name] : u1_jdg_truck_off_to_on 
-Return type : U1 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_truck_flg; 
[2] MAINPROCESS proc U2 u2_t_lp_fft_data; 
[3] MAINPROCESS proc U1 u1_t_count_up; 
[4] MAINPROCESS proc U1 u1_t_count_dn; 
[5] MAINPROCESS for <start> for ( 
[6] MAINPROCESS for  u2_t_lp_fft_data = TRUCK_BIN_START; 
[7] MAINPROCESS for  u2_t_lp_fft_data < TRUCK_BIN_END; 
[8] MAINPROCESS for  u2_t_lp_fft_data++ 
[9] MAINPROCESS for  ) 
[10] MAINPROCESS subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) if <start> if ( 
[12] SUBPROCESS(1) if  afl_g_cvw_lfm_ftt_power[0][u2_t_lp_fft_data] > TRUCK_POW_TH 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] SUBPROCESS(1) if <start> if ( 
[16] SUBPROCESS(1) ??? afl_g_cvw_lfm_ftt_power[1][u2_t_lp_fft_data] > TRUCK_POW_TH 
[17] SUBPROCESS(1) ??? ) 
[18] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[19] MAINPROCESS proc return u1_t_jdg_truck_flg; 
[20] SUBSUBPROCESS(1) proc u1_t_count_up++; 
[21] SUBSUBPROCESS(2) proc u1_t_count_dn++; 
----------------- Total Codes : 21 lines
--------------------------
[Function Name] : fn_bsm_con_check_passing_pre 
-Return type : static VD 
-Argument : 1 
     [0] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for<start> for( 
[3] MAINPROCESS for i=0; 
[4] MAINPROCESS for i<st_g_bsm_loop_data.as4_buf_pair_num[1]; 
[5] MAINPROCESS for i++ 
[6] MAINPROCESS for ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  ((ast_a_target_prev[i].s4_flg_heiso_up == 1 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) if  &&   ( 
[12] SUBPROCESS(1) if  ast_a_target_prev[i].s4_flg_heiso_dn == 1 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) if  ||  ( 
[15] SUBPROCESS(1) if  (ast_a_target_prev[i].fl_Rxfil < (ALARM_X_OUT          + ALARM_X_OFFSET_OUT 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) if  &&   ( 
[18] SUBPROCESS(1) if  ast_a_target_prev[i].fl_Rxfil > (ALARM_X_IN           + ALARM_X_OFFSET_IN 
[19] SUBPROCESS(1) if  ) 
[20] SUBPROCESS(1) if  &&   ( 
[21] SUBPROCESS(1) if  ast_a_target_prev[i].fl_Ryfil < (ALARM_Y_FORWARD 
[22] SUBPROCESS(1) if  ) 
[23] SUBPROCESS(1) if  &&   ( 
[24] SUBPROCESS(1) if  ast_a_target_prev[i].fl_Ryfil > (CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) if  ) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[28] MAINPROCESS if <start> if ( 
[29] MAINPROCESS ??? (fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[30] MAINPROCESS ??? ) 
[31] MAINPROCESS ??? &&  ( 
[32] MAINPROCESS ??? st_g_bsm_loop_data.s4_flg_alarm == (S4 
[33] MAINPROCESS ??? ) 
[34] MAINPROCESS subproc SUBPROCESS(2) 
[35] SUBPROCESS(2) equal st_g_bsm_loop_data.as4_flg_passing[0] 0;
[36] MAINPROCESS equal st_g_bsm_loop_data.as4_flg_passing[0] 0;
----------------- Total Codes : 36 lines
--------------------------
[Function Name] : fn_bsm_con_integ_object 
-Return type : static VD 
-Argument : 10 
     [0] : S4   s4_a_pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   s4_a_pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   s4_a_pair_num_sot 
     [7] : NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   *ps4_a_pair_num_total 
     [9] : NORMAL_BSM   ast_a_normal2[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS func<start> fn_bsm_con_check_prior_ordinary(&s4_a_pair_num_prior, ast_a_normal_prior, &s4_a_pair_num_ordinary, ast_a_normal_ordinary 
[2] MAINPROCESS func<end> ); 
[3] MAINPROCESS func<start> fn_bsm_con_copy_ordinay_to_sot( 
[4] MAINPROCESS func s4_a_pair_num_ordinary, 
[5] MAINPROCESS func (const NORMAL_BSM (*))ast_a_normal_ordinary, 
[6] MAINPROCESS func s4_a_pair_num_sot, 
[7] MAINPROCESS func ast_a_normal_sot 
[8] MAINPROCESS func<end> ); 
[9] MAINPROCESS func<start> fn_bsm_con_add_object_to_normal2( 
[10] MAINPROCESS func s4_a_pair_num_prior, 
[11] MAINPROCESS func (const NORMAL_BSM (*))ast_a_normal_prior, 
[12] MAINPROCESS func s4_a_pair_num_ordinary, 
[13] MAINPROCESS func (const NORMAL_BSM (*))ast_a_normal_ordinary, 
[14] MAINPROCESS func s4_a_pair_num_2f, 
[15] MAINPROCESS func ast_a_normal_2f, 
[16] MAINPROCESS func s4_a_pair_num_sot, 
[17] MAINPROCESS func (const NORMAL_BSM (*))ast_a_normal_sot, 
[18] MAINPROCESS func ps4_a_pair_num_total, 
[19] MAINPROCESS func ast_a_normal2 
[20] MAINPROCESS func<end> ); 
----------------- Total Codes : 20 lines
--------------------------
[Function Name] : fn_bsm_con_check_prior_ordinary 
-Return type : static VD 
-Argument : 4 
     [0] : (S4   *ps4_a_pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   *ps4_a_pair_num_ordinary 
     [3] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 s4_t_lp_num_ordi; 
[2] MAINPROCESS proc S4 s4_t_lp_num_prior; 
[3] MAINPROCESS proc s4_t_lp_num_ordi < *ps4_a_pair_num_ordinary; 
[4] MAINPROCESS func s4_t_lp_num_ordi++ 
[5] MAINPROCESS func<end> ); 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if <start> if ( 
[8] SUBPROCESS(1) if  ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_Robs != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] MAINPROCESS func<start> *ps4_a_pair_num_ordinary = s4_trim_ordinary(ast_a_normal_ordinary 
[12] MAINPROCESS func<end> ); 
[13] MAINPROCESS func<start> *ps4_a_pair_num_prior = s4_trim_prior(ast_a_normal_prior 
[14] MAINPROCESS func<end> ); 
[15] MAINPROCESS proc return; 
[16] SUBSUBPROCESS(1) proc s4_t_lp_num_prior < *ps4_a_pair_num_prior; 
[17] SUBSUBPROCESS(1) func s4_t_lp_num_prior++ 
[18] SUBSUBPROCESS(1) func<end> ); 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) if <start> if ( 
[21] SUBSUBSUBPROCESS(1) if  ast_a_normal_prior[s4_t_lp_num_prior].fl_Robs != CFL_UNKNOWN_VALUE 
[22] SUBSUBSUBPROCESS(1) if  ) 
[23] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[25] SUBSUBSUBSUBPROCESS(1) if  ((ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_up       == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_up 
[26] SUBSUBSUBSUBPROCESS(1) if  ) 
[27] SUBSUBSUBSUBPROCESS(1) if  &&   ( 
[28] SUBSUBSUBSUBPROCESS(1) if  ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_up_music == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_up_music 
[29] SUBSUBSUBSUBPROCESS(1) if  ) 
[30] SUBSUBSUBSUBPROCESS(1) if  ||  ( 
[31] SUBSUBSUBSUBPROCESS(1) if  (ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_dn       == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_dn 
[32] SUBSUBSUBSUBPROCESS(1) if  ) 
[33] SUBSUBSUBSUBPROCESS(1) if  &&   ( 
[34] SUBSUBSUBSUBPROCESS(1) if  ast_a_normal_ordinary[s4_t_lp_num_ordi].s4_bin_dn_music == ast_a_normal_prior[s4_t_lp_num_prior].s4_bin_dn_music 
[35] SUBSUBSUBSUBPROCESS(1) if  ) 
[36] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[37] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[38] SUBSUBSUBSUBSUBPROCESS(1) ??? fl_abs(ast_a_normal_prior[s4_t_lp_num_prior].fl_power_up_music - ast_a_normal_prior[s4_t_lp_num_prior].fl_power_dn_music) > 
[39] SUBSUBSUBSUBSUBPROCESS(1) ??? fl_abs( 
[40] SUBSUBSUBSUBSUBPROCESS(1) ??? ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_power_up_music - ast_a_normal_ordinary[s4_t_lp_num_ordi].fl_power_dn_music 
[41] SUBSUBSUBSUBSUBPROCESS(1) ??? ) 
[42] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[43] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(2) 
[44] SUBSUBSUBSUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_prior[s4_t_lp_num_prior], (S4)1 
[45] SUBSUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[46] SUBSUBSUBSUBSUBSUBPROCESS(2) func<start> fn_init(&ast_a_normal_ordinary[s4_t_lp_num_ordi], (S4)1 
[47] SUBSUBSUBSUBSUBSUBPROCESS(2) func<end> ); 
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fn_bsm_con_copy_ordinay_to_sot 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_ordinary 
     [1] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_sot 
     [3] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS proc S4 tmp_sot_others_index; 
[2] MAINPROCESS func<start> tmp_sot_others_index = s4_bsm_con_check_near_ordinary( 
[3] MAINPROCESS func s4_a_pair_num_ordinary, 
[4] MAINPROCESS func ast_a_normal_ordinary, 
[5] MAINPROCESS func s4_a_pair_num_sot, 
[6] MAINPROCESS func (const NORMAL_BSM (*))ast_a_normal_sot 
[7] MAINPROCESS func<end> ); 
[8] MAINPROCESS if<start> if( 
[9] MAINPROCESS ??? tmp_sot_others_index!=-1 
[10] MAINPROCESS ??? ) 
[11] MAINPROCESS subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) func<start> fn_bsm_con_add_sot_object_to_normal2( 
[13] SUBPROCESS(1) func &ast_a_normal_ordinary[tmp_sot_others_index], 
[14] SUBPROCESS(1) func s4_a_pair_num_sot, 
[15] SUBPROCESS(1) func ast_a_normal_sot 
[16] SUBPROCESS(1) func<end> ); 
[17] MAINPROCESS proc return; 
[18] MAINPROCESS func<start> fn_bsm_con_add_sot_object_to_normal2( 
[19] MAINPROCESS func &ast_a_normal_ordinary[tmp_sot_others_index], 
[20] MAINPROCESS func s4_a_pair_num_sot, 
[21] MAINPROCESS func ast_a_normal_sot 
[22] MAINPROCESS func<end> ); 
----------------- Total Codes : 22 lines
--------------------------
[Function Name] : s4_bsm_con_check_near_ordinary 
-Return type : static S4 
-Argument : 4 
     [0] : S4   s4_a_pair_num_ordinary 
     [1] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_sot 
     [3] : const NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS func<start> FL tmp_sot_others_diff_min = fl_abs(CFL_UNKNOWN_VALUE*2 
[3] MAINPROCESS func<end> ); 
[4] MAINPROCESS func<start> FL tmp_sot_truck_x_min = fl_abs(CFL_UNKNOWN_VALUE 
[5] MAINPROCESS func<end> ); 
[6] MAINPROCESS equal S4 tmp_sot_others_index -1;
[7] MAINPROCESS for<start> for( 
[8] MAINPROCESS for i=0; 
[9] MAINPROCESS for i<s4_a_pair_num_ordinary; 
[10] MAINPROCESS for i++ 
[11] MAINPROCESS for ) 
[12] MAINPROCESS subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if<start> if( 
[14] SUBPROCESS(1) if s4_a_pair_num_sot != 0 
[15] SUBPROCESS(1) if ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBPROCESS(1) &&  <start> &&  ( 
[18] SUBPROCESS(1) &&   st_g_bsm_loop_data.as4_flg_passing[0] > 0 
[19] SUBPROCESS(1) &&   ) 
[20] SUBPROCESS(1) &&   &&  ( 
[21] SUBPROCESS(1) &&   st_g_bsm_loop_data.as4_slow_sot_find[0] != 0 
[22] SUBPROCESS(1) &&   ) 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[25] SUBPROCESS(1) if <start> if ( 
[26] SUBPROCESS(1) if  (fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[27] SUBPROCESS(1) if  ) 
[28] SUBPROCESS(1) if  &&  ( 
[29] SUBPROCESS(1) if  st_g_bsm_loop_data.s4_flg_alarm == (S4 
[30] SUBPROCESS(1) if  ) 
[31] SUBPROCESS(1) subproc SUBSUBPROCESS(4) 
[32] MAINPROCESS ??? return tmp_sot_others_index; 
[33] SUBSUBPROCESS(1) ??? if ( 
[34] SUBSUBPROCESS(1) ??? ((fl_abs(ast_a_normal_sot[0].fl_Rxfil - ast_a_normal_ordinary[i].fl_Rxobs 
[35] SUBSUBPROCESS(1) ??? ) 
[36] SUBSUBPROCESS(1) ??? &&  ( 
[37] SUBSUBPROCESS(1) ??? (fl_abs(ast_a_normal_sot[0].fl_Ryfil - ast_a_normal_ordinary[i].fl_Ryobs 
[38] SUBSUBPROCESS(1) ??? ) 
[39] SUBSUBPROCESS(1) ??? &&  ( 
[40] SUBSUBPROCESS(1) ??? ast_a_normal_sot[0].fl_Rxfil > ast_a_normal_ordinary[i].fl_Rxobs 
[41] SUBSUBPROCESS(1) ??? ) 
[42] SUBSUBPROCESS(1) ??? &&  ( 
[43] SUBSUBPROCESS(1) ??? tmp_sot_others_diff_min > (fl_abs(ast_a_normal_sot[0].fl_Rxfil - ast_a_normal_ordinary[i].fl_Rxobs 
[44] SUBSUBPROCESS(1) ??? ) 
[45] SUBSUBPROCESS(1) ??? +  fl_abs( 
[46] SUBSUBPROCESS(1) ??? ast_a_normal_sot[0].fl_Ryfil - ast_a_normal_ordinary[i].fl_Ryobs 
[47] SUBSUBPROCESS(1) ??? ) 
[48] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[49] SUBSUBPROCESS(2) ??? if ( 
[50] SUBSUBPROCESS(2) ??? (fl_abs(ast_a_normal_ordinary[i].fl_Ryobs 
[51] SUBSUBPROCESS(2) ??? ) 
[52] SUBSUBPROCESS(2) ??? &&  ( 
[53] SUBSUBPROCESS(2) ??? ast_a_normal_ordinary[i].fl_Rxobs < st_g_bsm_loop_data.afl_wall_width[0] 
[54] SUBSUBPROCESS(2) ??? ) 
[55] SUBSUBPROCESS(2) ??? &&  ( 
[56] SUBSUBPROCESS(2) ??? tmp_sot_truck_x_min > fl_abs(ast_a_normal_ordinary[i].fl_Rxobs 
[57] SUBSUBPROCESS(2) ??? ) 
[58] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[59] SUBSUBPROCESS(4) equal st_g_bsm_loop_data.as4_flg_leading[0] 0;
----------------- Total Codes : 59 lines
--------------------------
[Function Name] : fn_bsm_con_add_sot_object_to_normal2 
-Return type : static VD 
-Argument : 3 
     [0] : const NORMAL_BSM   *pst_a_normal_ordinary 
     [1] : S4   s4_a_pair_num_sot 
     [2] : NORMAL_BSM   ast_a_normal_sot[1] 
----- Codes -----
[1] MAINPROCESS proc S4 tmptmp_passing_flg[1]; 
[2] MAINPROCESS proc S4 tmptmp_leading_flg[1]; 
[3] MAINPROCESS equal S4 tmptmp_erased_num 0;
[4] MAINPROCESS func<start> copy_normal_data( pst_a_normal_ordinary, &ast_a_normal_sot[0], 1 
[5] MAINPROCESS func<end> ); 
[6] MAINPROCESS equal ast_a_normal_sot[0].s4_flg_heiso_up 1;
[7] MAINPROCESS equal ast_a_normal_sot[0].s4_flg_heiso_dn 1;
[8] MAINPROCESS equal ast_a_normal_sot[0].s4_flg_dc OBJECT_TYPE_SOT;
[9] MAINPROCESS func<start> tmptmp_erased_num = s4_start_prediction( 
[10] MAINPROCESS func ast_a_normal_sot, 
[11] MAINPROCESS func 1, 
[12] MAINPROCESS func 1, 
[13] MAINPROCESS func (const S4 (*))tmptmp_passing_flg, 
[14] MAINPROCESS func (const S4 (*))tmptmp_leading_flg 
[15] MAINPROCESS func<end> ); 
[16] MAINPROCESS if<start> if( 
[17] MAINPROCESS if tmptmp_erased_num==1 
[18] MAINPROCESS if ) 
[19] MAINPROCESS subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) func<start> fn_init(&ast_a_normal_sot[0], 1 
[21] SUBPROCESS(1) func<end> ); 
[22] MAINPROCESS else<start> else 
[23] MAINPROCESS subproc SUBPROCESS(2) 
[24] SUBPROCESS(2) equal ast_a_normal_sot[0].s4_flg_new 1;
[25] SUBPROCESS(2) func<start> ast_a_normal_sot[0].s4_flg_track = (S4)(PRIOR_TRK_NUM+1 
[26] SUBPROCESS(2) func<end> ); 
[27] MAINPROCESS func<start> s4_copy_prediction_to_filtered_data( 
[28] MAINPROCESS func ast_a_normal_sot, 
[29] MAINPROCESS func 1 
[30] MAINPROCESS func<end> ); 
[31] MAINPROCESS proc return; 
[32] MAINPROCESS equal ast_a_normal_sot[0].s4_flg_new 1;
[33] MAINPROCESS func<start> ast_a_normal_sot[0].s4_flg_track = (S4)(PRIOR_TRK_NUM+1 
[34] MAINPROCESS func<end> ); 
----------------- Total Codes : 34 lines
--------------------------
[Function Name] : fn_bsm_con_add_object_to_normal2 
-Return type : static VD 
-Argument : 10 
     [0] : S4   s4_a_pair_num_prior 
     [1] : const NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   s4_a_pair_num_ordinary 
     [3] : const NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
     [4] : S4   s4_a_pair_num_2f 
     [5] : const NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [6] : S4   s4_a_pair_num_sot 
     [7] : const NORMAL_BSM   ast_a_normal_sot[1] 
     [8] : S4   *ps4_a_pair_num_total 
     [9] : NORMAL_BSM   ast_a_normal2[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 index 0;
[3] MAINPROCESS if <start> if ( 
[4] MAINPROCESS if  (st_g_bsm_loop_data.as4_flg_leading[0] != 0 
[5] MAINPROCESS if  ) 
[6] MAINPROCESS if  &&  ( 
[7] MAINPROCESS if  ast_a_normal_sot[0].s4_bin_up != 0 
[8] MAINPROCESS if  ) 
[9] MAINPROCESS if  &&  ( 
[10] MAINPROCESS if  ast_a_normal_sot[0].s4_bin_dn != 0 
[11] MAINPROCESS if  ) 
[12] MAINPROCESS subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal ast_a_normal2[index] ast_a_normal_sot[0];
[14] SUBPROCESS(1) proc index++; 
[15] MAINPROCESS for<start> for( 
[16] MAINPROCESS for i=0; 
[17] MAINPROCESS for i<s4_a_pair_num_prior; 
[18] MAINPROCESS for i++ 
[19] MAINPROCESS for ) 
[20] MAINPROCESS subproc SUBPROCESS(2) 
[21] SUBPROCESS(2) if<start> if( 
[22] SUBPROCESS(2) if index>(S4 
[23] SUBPROCESS(2) if ) 
[24] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[25] SUBPROCESS(2) equal ast_a_normal2[index] ast_a_normal_prior[i];
[26] SUBPROCESS(2) proc index++; 
[27] MAINPROCESS for<start> for( 
[28] MAINPROCESS for i=0; 
[29] MAINPROCESS for i<s4_a_pair_num_ordinary; 
[30] MAINPROCESS for i++ 
[31] MAINPROCESS for ) 
[32] MAINPROCESS subproc SUBPROCESS(3) 
[33] SUBPROCESS(3) if<start> if( 
[34] SUBPROCESS(3) if index>(S4 
[35] SUBPROCESS(3) if ) 
[36] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[37] SUBPROCESS(3) equal ast_a_normal2[index] ast_a_normal_ordinary[i];
[38] SUBPROCESS(3) proc index++; 
[39] MAINPROCESS for<start> for( 
[40] MAINPROCESS for i=0; 
[41] MAINPROCESS for i<s4_a_pair_num_2f; 
[42] MAINPROCESS for i++ 
[43] MAINPROCESS for ) 
[44] MAINPROCESS subproc SUBPROCESS(4) 
[45] SUBPROCESS(4) if<start> if( 
[46] SUBPROCESS(4) ??? index>(S4 
[47] SUBPROCESS(4) ??? ) 
[48] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[49] SUBPROCESS(4) equal ast_a_normal2[index] ast_a_normal_2f[i];
[50] SUBPROCESS(4) proc index++; 
[51] MAINPROCESS equal *ps4_a_pair_num_total index;
[52] MAINPROCESS proc return; 
[53] SUBSUBPROCESS(1) proc break; 
----------------- Total Codes : 53 lines
--------------------------
[Function Name] : fn_bsm_con_tracking 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_pair_num_connected 
     [1] : const S4   *ps4_pair_connect_prev 
     [2] : const S4   *ps4_pair_connect_current 
     [3] : S4   s4_a_pair_num_normal1 
     [4] : NORMAL_BSM   *pst_a_normal1 
     [5] : S4   s4_a_pair_num_total 
     [6] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for<start> for( 
[3] MAINPROCESS for i = 0; 
[4] MAINPROCESS for i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[5] MAINPROCESS for i++ 
[6] MAINPROCESS for ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal pst_a_normal1[i].s4_flg_used 0;
[9] SUBPROCESS(1) equal pst_a_normal1[i].s4_tracked 0;
[10] MAINPROCESS for<start> for( 
[11] MAINPROCESS for i = 0; 
[12] MAINPROCESS for i < s4_a_pair_num_total; 
[13] MAINPROCESS for i++ 
[14] MAINPROCESS for ) 
[15] MAINPROCESS subproc SUBPROCESS(2) 
[16] SUBPROCESS(2) equal pst_a_normal2[i].s4_flg_used 0;
[17] SUBPROCESS(2) equal pst_a_normal2[i].s4_tracked 0;
[18] MAINPROCESS if <start> if ( 
[19] MAINPROCESS ??? (s4_a_pair_num_connected > 0 
[20] MAINPROCESS ??? ) 
[21] MAINPROCESS ??? &&  ( 
[22] MAINPROCESS ??? st_g_bsm_loop_data.as4_buf_pair_num[0] > 0 
[23] MAINPROCESS ??? ) 
[24] MAINPROCESS subproc SUBPROCESS(3) 
[25] SUBPROCESS(3) func<start> prediction_with_connected_data( 
[26] SUBPROCESS(3) func pst_a_normal1, 
[27] SUBPROCESS(3) func pst_a_normal2, 
[28] SUBPROCESS(3) func ps4_pair_connect_prev, 
[29] SUBPROCESS(3) func ps4_pair_connect_current, 
[30] SUBPROCESS(3) func s4_a_pair_num_connected 
[31] SUBPROCESS(3) func<end> ); 
[32] MAINPROCESS proc return; 
[33] MAINPROCESS func<start> prediction_with_connected_data( 
[34] MAINPROCESS func pst_a_normal1, 
[35] MAINPROCESS func pst_a_normal2, 
[36] MAINPROCESS func ps4_pair_connect_prev, 
[37] MAINPROCESS func ps4_pair_connect_current, 
[38] MAINPROCESS func s4_a_pair_num_connected 
[39] MAINPROCESS func<end> ); 
----------------- Total Codes : 39 lines
--------------------------
[Function Name] : fn_bsm_con_add_new_object 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num_total 
     [1] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 s4_t_pair_num_erased; 
[3] MAINPROCESS func<start> s4_t_pair_num_erased = s4_start_prediction( 
[4] MAINPROCESS func pst_a_normal2, 
[5] MAINPROCESS func *ps4_a_pair_num_total, 
[6] MAINPROCESS func NORMAL_BUFFSIZE, 
[7] MAINPROCESS func (const S4 (*))st_g_bsm_loop_data.as4_flg_passing, 
[8] MAINPROCESS func (const S4 (*))st_g_bsm_loop_data.as4_flg_leading 
[9] MAINPROCESS func<end> ); 
[10] MAINPROCESS equal *ps4_a_pair_num_total *ps4_a_pair_num_total - s4_t_pair_num_erased;
[11] MAINPROCESS for<start> for( 
[12] MAINPROCESS for i=0; 
[13] MAINPROCESS for i<NORMAL_BUFFSIZE; 
[14] MAINPROCESS for i++ 
[15] MAINPROCESS for ) 
[16] MAINPROCESS subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) if <start> if ( 
[18] SUBPROCESS(1) ??? (pst_a_normal2[i].s4_bin_up_pred > NB_FFT_PT 
[19] SUBPROCESS(1) ??? ) 
[20] SUBPROCESS(1) ??? ||  ( 
[21] SUBPROCESS(1) ??? pst_a_normal2[i].s4_bin_dn_pred > NB_FFT_PT 
[22] SUBPROCESS(1) ??? ) 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[24] MAINPROCESS func<start> fn_bsm_con_pack_object( 
[25] MAINPROCESS func ps4_a_pair_num_total, 
[26] MAINPROCESS func pst_a_normal2 
[27] MAINPROCESS func<end> ); 
[28] MAINPROCESS proc return; 
[29] SUBSUBPROCESS(1) func<start> fn_init(&pst_a_normal2[i], 1 
[30] SUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 30 lines
--------------------------
[Function Name] : fn_bsm_con_pack_object 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num_total 
     [1] : NORMAL_BSM   *pst_a_normal2 
----- Codes -----
[1] MAINPROCESS proc S4 s2_t_in[NORMAL_BUFFSIZE]; 
[2] MAINPROCESS proc S4 s2_t_loop; 
[3] MAINPROCESS proc S4 s2_t_num; 
[4] MAINPROCESS equal s2_t_num 0;
[5] MAINPROCESS for <start> for ( 
[6] MAINPROCESS for  s2_t_loop = 0; 
[7] MAINPROCESS for  s2_t_loop < NORMAL_BUFFSIZE; 
[8] MAINPROCESS for  s2_t_loop++ 
[9] MAINPROCESS for  ) 
[10] MAINPROCESS subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) if <start> if ( 
[12] SUBPROCESS(1) if  pst_a_normal2[s2_t_loop].fl_Robs != CFL_UNKNOWN_VALUE 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] MAINPROCESS if <start> if ( 
[16] MAINPROCESS if  s2_t_num > 0 
[17] MAINPROCESS if  ) 
[18] MAINPROCESS subproc SUBPROCESS(2) 
[19] SUBPROCESS(2) for <start> for ( 
[20] SUBPROCESS(2) for  s2_t_loop = 0; 
[21] SUBPROCESS(2) for  s2_t_loop < s2_t_num; 
[22] SUBPROCESS(2) for  s2_t_loop++ 
[23] SUBPROCESS(2) for  ) 
[24] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[25] SUBPROCESS(2) for <start> for ( 
[26] SUBPROCESS(2) ??? s2_t_loop = s2_t_num; 
[27] SUBPROCESS(2) ??? s2_t_loop < NORMAL_BUFFSIZE; 
[28] SUBPROCESS(2) ??? s2_t_loop++ 
[29] SUBPROCESS(2) ??? ) 
[30] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[31] MAINPROCESS func<start> *ps4_a_pair_num_total = s4_copy_prediction_to_filtered_data( 
[32] MAINPROCESS func pst_a_normal2, 
[33] MAINPROCESS func NORMAL_BUFFSIZE 
[34] MAINPROCESS func<end> ); 
[35] MAINPROCESS proc return; 
[36] SUBSUBPROCESS(1) equal pst_a_normal2[s2_t_loop] pst_a_normal2[s2_t_in[s2_t_loop]];
[37] SUBSUBPROCESS(2) func<start> fn_init(&pst_a_normal2[s2_t_loop], 1 
[38] SUBSUBPROCESS(2) func<end> ); 
----------------- Total Codes : 38 lines
--------------------------
[Function Name] : fn_bsm_con_jdg_object_probability 
-Return type : VD 
-Argument : 1 
     [0] : (NORMAL_BSM*   past_a_normal2 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_lp_num_normal; 
[2] MAINPROCESS proc U1 u1_t_lp_num_normal2; 
[3] MAINPROCESS proc FL fl_t_power_bin; 
[4] MAINPROCESS proc FL fl_t_power_doa; 
[5] MAINPROCESS proc U1 u1_t_num_around; 
[6] MAINPROCESS proc U1 u1_t_jdg_m2_flg; 
[7] MAINPROCESS proc U1 u1_t_jdg_m8_flg; 
[8] MAINPROCESS proc u1_t_lp_num_normal < NORMAL_BUFFSIZE; 
[9] MAINPROCESS func u1_t_lp_num_normal ++ 
[10] MAINPROCESS func<end> ); 
[11] MAINPROCESS subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if <start> if ( 
[13] SUBPROCESS(1) if  past_a_normal2[u1_t_lp_num_normal].fl_Robs != CFL_UNKNOWN_VALUE 
[14] SUBPROCESS(1) if  ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] MAINPROCESS proc return; 
[17] SUBSUBPROCESS(1) func<start> u1_t_jdg_m2_flg = u1_bsm_con_jdg_obj_probability_m2(past_a_normal2[u1_t_lp_num_normal].fl_Ryfil 
[18] SUBSUBPROCESS(1) func<end> ); 
[19] SUBSUBPROCESS(1) if <start> if ( 
[20] SUBSUBPROCESS(1) if  (u1_t_jdg_m2_flg == CU1_TRUE 
[21] SUBSUBPROCESS(1) if  ) 
[22] SUBSUBPROCESS(1) if  &&  ( 
[23] SUBSUBPROCESS(1) if  (past_a_normal2[u1_t_lp_num_normal].fl_Ryfil + past_a_normal2[u1_t_lp_num_normal].fl_Vyfil 
[24] SUBSUBPROCESS(1) if  ) 
[25] SUBSUBPROCESS(1) if  &&	( 
[26] SUBSUBPROCESS(1) if  past_a_normal2[u1_t_lp_num_normal].s4_flg_dc != OBJECT_TYPE_SOT 
[27] SUBSUBPROCESS(1) if  ) 
[28] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[30] SUBSUBSUBPROCESS(1) func<start> fl_t_power_bin = (FL)0.5F * (past_a_normal2[u1_t_lp_num_normal].fl_power_up + past_a_normal2[u1_t_lp_num_normal].fl_power_dn 
[31] SUBSUBSUBPROCESS(1) func<end> ); 
[32] SUBSUBSUBPROCESS(1) func<start> fl_t_power_doa = (FL)0.5F * (past_a_normal2[u1_t_lp_num_normal].fl_power_up_music + past_a_normal2[u1_t_lp_num_normal].fl_power_dn_music 
[33] SUBSUBSUBPROCESS(1) func<end> ); 
[34] SUBSUBSUBPROCESS(1) func<start> u1_t_jdg_m8_flg = u1_bsm_con_jdg_obj_probability_m8(fl_t_power_doa 
[35] SUBSUBSUBPROCESS(1) func<end> ); 
[36] SUBSUBSUBPROCESS(1) if <start> if ( 
[37] SUBSUBSUBPROCESS(1) if  (fl_t_power_doa > (fl_t_power_bin - (FL 
[38] SUBSUBSUBPROCESS(1) if  ) 
[39] SUBSUBSUBPROCESS(1) if  ||	( 
[40] SUBSUBSUBPROCESS(1) if  u1_t_jdg_m8_flg == CU1_TRUE 
[41] SUBSUBSUBPROCESS(1) if  ) 
[42] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[43] SUBSUBSUBPROCESS(1) if <start> if ( 
[44] SUBSUBSUBPROCESS(1) if  past_a_normal2[u1_t_lp_num_normal].s4_flg_lost >= (S4 
[45] SUBSUBSUBPROCESS(1) if  ) 
[46] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[47] SUBSUBSUBPROCESS(1) if <start> if ( 
[48] SUBSUBSUBPROCESS(1) ??? past_a_normal2[u1_t_lp_num_normal].s4_flg_reliable == (S4 
[49] SUBSUBSUBPROCESS(1) ??? ) 
[50] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(3) 
----------------- Total Codes : 50 lines
--------------------------
[Function Name] : u1_bsm_con_jdg_obj_probability_m2 
-Return type : U1 
-Argument : 1 
     [0] : (FL   fl_a_Ryfil 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_m2_flag; 
[2] MAINPROCESS equal u1_t_jdg_m2_flag CU1_FALSE;
[3] MAINPROCESS if <start> if ( 
[4] MAINPROCESS ??? fl_abs(fl_a_Ryfil 
[5] MAINPROCESS ??? ) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_m2_flag CU1_TRUE;
[8] MAINPROCESS subproc SUBPROCESS(2) 
[9] SUBPROCESS(2) equal u1_t_jdg_m2_flag CU1_FALSE;
[10] MAINPROCESS proc return u1_t_jdg_m2_flag; 
[11] MAINPROCESS equal u1_t_jdg_m2_flag CU1_FALSE;
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : u1_bsm_con_jdg_obj_probability_m8 
-Return type : U1 
-Argument : 1 
     [0] : (FL   fl_a_power_doa 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_m8_flag; 
[2] MAINPROCESS equal u1_t_jdg_m8_flag CU1_FALSE;
[3] MAINPROCESS if <start> if ( 
[4] MAINPROCESS ??? fl_a_power_doa > (FL 
[5] MAINPROCESS ??? ) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_m8_flag CU1_TRUE;
[8] MAINPROCESS subproc SUBPROCESS(2) 
[9] SUBPROCESS(2) equal u1_t_jdg_m8_flag CU1_FALSE;
[10] MAINPROCESS proc return u1_t_jdg_m8_flag; 
[11] MAINPROCESS equal u1_t_jdg_m8_flag CU1_FALSE;
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : select_target 
-Return type : S4 
-Argument : 7 
     [0] : S4   target_num_prev 
     [1] : const NORMAL_BSM*   target_prev 
     [2] : S4*   target_num 
     [3] : NORMAL_BSM*   target_current 
     [4] : const S4*   normal_num 
     [5] : const NORMAL_BSM*   normal_current 
     [6] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc NORMAL_BSM copy_target_prev[TARGET_BUFFSIZE]; 
[3] MAINPROCESS proc NORMAL_BSM copy_normal_current[NORMAL_BUFFSIZE]; 
[4] MAINPROCESS proc NORMAL_BSM tmp_normal_buff[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS proc S4 tmp_normal_num[1]; 
[6] MAINPROCESS proc S4 tmp_target_num[1]; 
[7] MAINPROCESS proc S4 object_num; 
[8] MAINPROCESS proc S4 used_ID[TARGET_BUFFSIZE]; 
[9] MAINPROCESS equal S4 tmptmp_target_num 0;
[10] MAINPROCESS equal S4 wall_bin 270;
[11] MAINPROCESS func<start> copy_normal_data(target_prev, copy_target_prev, TARGET_BUFFSIZE 
[12] MAINPROCESS func<end> ); 
[13] MAINPROCESS func<start> copy_normal_data(normal_current, copy_normal_current, NORMAL_BUFFSIZE 
[14] MAINPROCESS func<end> ); 
[15] MAINPROCESS func<start> fn_init(tmp_normal_buff, NORMAL_BUFFSIZE 
[16] MAINPROCESS func<end> ); 
[17] MAINPROCESS for<start> for( 
[18] MAINPROCESS ??? i=0; 
[19] MAINPROCESS ??? i<TARGET_BUFFSIZE; 
[20] MAINPROCESS ??? i++ 
[21] MAINPROCESS ??? ) 
[22] MAINPROCESS subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) equal copy_target_prev[i].s4_flg_used 0;
[24] SUBPROCESS(1) equal used_ID[i] 0;
[25] MAINPROCESS equal tmp_normal_num[0] *normal_num;
[26] MAINPROCESS equal tmp_target_num[0] 0;
[27] MAINPROCESS func<start> fn_bsm_sel_exclude_object( 
[28] MAINPROCESS func tmp_normal_num[0], 
[29] MAINPROCESS func copy_normal_current, 
[30] MAINPROCESS func target_num_prev, 
[31] MAINPROCESS func (const NORMAL_BSM (*))copy_target_prev 
[32] MAINPROCESS func<end> ); 
[33] MAINPROCESS func<start> object_num = s4_bsm_sel_empty_buf_trimming( 
[34] MAINPROCESS func copy_normal_current 
[35] MAINPROCESS func<end> ); 
[36] MAINPROCESS func<start> fn_sort_normal(copy_normal_current 
[37] MAINPROCESS func<end> ); 
[38] MAINPROCESS func<start> fn_sort_target(copy_target_prev 
[39] MAINPROCESS func<end> ); 
[40] MAINPROCESS equal tmp_target_num[0] 0;
[41] MAINPROCESS func<start> fn_bsm_sel_connect_target( 
[42] MAINPROCESS func object_num, 
[43] MAINPROCESS func copy_normal_current, 
[44] MAINPROCESS func target_num_prev, 
[45] MAINPROCESS func copy_target_prev, 
[46] MAINPROCESS func used_ID, 
[47] MAINPROCESS func &tmp_target_num[0], 
[48] MAINPROCESS func target_current 
[49] MAINPROCESS func<end> ); 
[50] MAINPROCESS equal tmptmp_target_num 0;
[51] MAINPROCESS func<start> tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[52] MAINPROCESS func target_current, 
[53] MAINPROCESS func TARGET_BUFFSIZE 
[54] MAINPROCESS func<end> ); 
[55] MAINPROCESS equal tmp_target_num[0] tmptmp_target_num;
[56] MAINPROCESS func<start> fn_bsm_sel_extrapolate_target( 
[57] MAINPROCESS func target_num_prev, 
[58] MAINPROCESS func copy_target_prev, 
[59] MAINPROCESS func &tmp_target_num[0], 
[60] MAINPROCESS func target_current, 
[61] MAINPROCESS func used_ID 
[62] MAINPROCESS func<end> ); 
[63] MAINPROCESS func<start> tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[64] MAINPROCESS func target_current, 
[65] MAINPROCESS func TARGET_BUFFSIZE 
[66] MAINPROCESS func<end> ); 
[67] MAINPROCESS equal tmp_target_num[0] tmptmp_target_num;
[68] MAINPROCESS func<start> fn_bsm_sel_add_target( 
[69] MAINPROCESS func object_num, 
[70] MAINPROCESS func copy_normal_current, 
[71] MAINPROCESS func &tmp_target_num[0], 
[72] MAINPROCESS func target_current, 
[73] MAINPROCESS func used_ID 
[74] MAINPROCESS func<end> ); 
[75] MAINPROCESS func<start> tmptmp_target_num = s4_copy_prediction_to_filtered_data( 
[76] MAINPROCESS func target_current, 
[77] MAINPROCESS func TARGET_BUFFSIZE 
[78] MAINPROCESS func<end> ); 
[79] MAINPROCESS equal tmp_target_num[0] tmptmp_target_num;
[80] MAINPROCESS func<start> tmp_target_num[0] = cluster_target( 
[81] MAINPROCESS func tmp_target_num[0], 
[82] MAINPROCESS func target_current, 
[83] MAINPROCESS func used_ID 
[84] MAINPROCESS func<end> ); 
[85] MAINPROCESS func<start> fn_bsm_sel_exclude_target( 
[86] MAINPROCESS func tmp_target_num[0], 
[87] MAINPROCESS func target_current 
[88] MAINPROCESS func<end> ); 
[89] MAINPROCESS func<start> fn_bsm_sel_empty_buf_trgt_trimming( 
[90] MAINPROCESS func &tmp_target_num[0], 
[91] MAINPROCESS func target_current 
[92] MAINPROCESS func<end> ); 
[93] MAINPROCESS func<start> fn_bsm_sel_target_marking(tmp_target_num[0], target_current, u1_a_alarming_flag 
[94] MAINPROCESS func<end> ); 
[95] MAINPROCESS equal *target_num tmp_target_num[0];
[96] MAINPROCESS equal object_num tmp_target_num[0];
[97] MAINPROCESS proc return object_num; 
[98] MAINPROCESS equal copy_target_prev[i].s4_flg_used 0;
[99] MAINPROCESS equal used_ID[i] 0;
----------------- Total Codes : 99 lines
--------------------------
[Function Name] : fn_bsm_sel_exclude_object 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS func<start> fn_bsm_sel_reset_stop_flg( 
[2] MAINPROCESS func s4_a_pair_num_current, 
[3] MAINPROCESS func ast_a_normal_current, 
[4] MAINPROCESS func s4_a_target_num_prev, 
[5] MAINPROCESS func ast_a_target_prev 
[6] MAINPROCESS func<end> ); 
[7] MAINPROCESS func<start> fn_bsm_sel_exobj_same_peaks( 
[8] MAINPROCESS func s4_a_pair_num_current, 
[9] MAINPROCESS func ast_a_normal_current 
[10] MAINPROCESS func<end> ); 
[11] MAINPROCESS func<start> fn_bsm_sel_exobj_stationary( 
[12] MAINPROCESS func s4_a_pair_num_current, 
[13] MAINPROCESS func ast_a_normal_current 
[14] MAINPROCESS func<end> ); 
[15] MAINPROCESS func<start> fn_bsm_sel_exobj_around_mycar( 
[16] MAINPROCESS func s4_a_pair_num_current, 
[17] MAINPROCESS func ast_a_normal_current 
[18] MAINPROCESS func<end> ); 
[19] MAINPROCESS func<start> fn_bsm_sel_exobj_outside_load( 
[20] MAINPROCESS func s4_a_pair_num_current, 
[21] MAINPROCESS func ast_a_normal_current 
[22] MAINPROCESS func<end> ); 
[23] MAINPROCESS func<start> fn_bsm_sel_exobj_outside_to_fr( 
[24] MAINPROCESS func s4_a_pair_num_current, 
[25] MAINPROCESS func ast_a_normal_current 
[26] MAINPROCESS func<end> ); 
[27] MAINPROCESS func<start> fn_bsm_sel_exobj_like_wall( 
[28] MAINPROCESS func s4_a_pair_num_current, 
[29] MAINPROCESS func ast_a_normal_current 
[30] MAINPROCESS func<end> ); 
[31] MAINPROCESS func<start> fn_bsm_sel_exobj_stag_just_beside( 
[32] MAINPROCESS func s4_a_pair_num_current, 
[33] MAINPROCESS func ast_a_normal_current, 
[34] MAINPROCESS func s4_a_target_num_prev, 
[35] MAINPROCESS func ast_a_target_prev 
[36] MAINPROCESS func<end> ); 
[37] MAINPROCESS func<start> fn_bsm_sel_exobj_outside( 
[38] MAINPROCESS func s4_a_pair_num_current, 
[39] MAINPROCESS func ast_a_normal_current, 
[40] MAINPROCESS func s4_a_target_num_prev, 
[41] MAINPROCESS func ast_a_target_prev 
[42] MAINPROCESS func<end> ); 
[43] MAINPROCESS func<start> fn_bsm_sel_exobj_non_sot_obj( 
[44] MAINPROCESS func s4_a_pair_num_current, 
[45] MAINPROCESS func ast_a_normal_current 
[46] MAINPROCESS func<end> ); 
[47] MAINPROCESS func<start> fn_bsm_sel_exobj_bumper_reflection( 
[48] MAINPROCESS func s4_a_pair_num_current, 
[49] MAINPROCESS func ast_a_normal_current 
[50] MAINPROCESS func<end> ); 
[51] MAINPROCESS proc return; 
----------------- Total Codes : 51 lines
--------------------------
[Function Name] : fn_bsm_sel_reset_stop_flg 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 j; 
[3] MAINPROCESS for<start> for( 
[4] MAINPROCESS for i=0; 
[5] MAINPROCESS for i<s4_a_target_num_prev; 
[6] MAINPROCESS for i++ 
[7] MAINPROCESS for ) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) for<start> for( 
[10] SUBPROCESS(1) for j=0; 
[11] SUBPROCESS(1) for j<s4_a_pair_num_current; 
[12] SUBPROCESS(1) for j++ 
[13] SUBPROCESS(1) for ) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] MAINPROCESS proc return; 
[16] SUBSUBPROCESS(1) if <start> if ( 
[17] SUBSUBPROCESS(1) ??? (fl_abs(ast_a_target_prev[i].fl_Rxfil-ast_a_normal_current[j].fl_Rxfil 
[18] SUBSUBPROCESS(1) ??? ) 
[19] SUBSUBPROCESS(1) ??? &&  ( 
[20] SUBSUBPROCESS(1) ??? fl_abs(ast_a_target_prev[i].fl_Ryfil-ast_a_normal_current[j].fl_Ryfil 
[21] SUBSUBPROCESS(1) ??? ) 
[22] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBPROCESS(1) equal ast_a_normal_current[j].s4_flg_stop 0;
----------------- Total Codes : 23 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_same_peaks 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 j; 
[3] MAINPROCESS for<start> for( 
[4] MAINPROCESS for i=0; 
[5] MAINPROCESS for i<s4_a_pair_num_current; 
[6] MAINPROCESS for i++ 
[7] MAINPROCESS for ) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) for<start> for( 
[10] SUBPROCESS(1) for j=0; 
[11] SUBPROCESS(1) for j<s4_a_pair_num_current; 
[12] SUBPROCESS(1) for j++ 
[13] SUBPROCESS(1) for ) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] MAINPROCESS proc return; 
[16] SUBSUBPROCESS(1) if <start> if ( 
[17] SUBSUBPROCESS(1) if  (i!= j 
[18] SUBSUBPROCESS(1) if  ) 
[19] SUBSUBPROCESS(1) if  &&  ( 
[20] SUBSUBPROCESS(1) if  ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[21] SUBSUBPROCESS(1) if  ) 
[22] SUBSUBPROCESS(1) if  &&  ( 
[23] SUBSUBPROCESS(1) if  ast_a_normal_current[j].fl_Robs != CFL_UNKNOWN_VALUE 
[24] SUBSUBPROCESS(1) if  ) 
[25] SUBSUBPROCESS(1) if  &&  ( 
[26] SUBSUBPROCESS(1) if  ast_a_normal_current[i].s4_bin_up == ast_a_normal_current[j].s4_bin_up 
[27] SUBSUBPROCESS(1) if  ) 
[28] SUBSUBPROCESS(1) if  &&  ( 
[29] SUBSUBPROCESS(1) if  ast_a_normal_current[i].s4_bin_dn == ast_a_normal_current[j].s4_bin_dn 
[30] SUBSUBPROCESS(1) if  ) 
[31] SUBSUBPROCESS(1) if  &&  ( 
[32] SUBSUBPROCESS(1) if  ast_a_normal_current[i].s4_bin_up_music == ast_a_normal_current[j].s4_bin_up_music 
[33] SUBSUBPROCESS(1) if  ) 
[34] SUBSUBPROCESS(1) if  &&  ( 
[35] SUBSUBPROCESS(1) if  ast_a_normal_current[i].s4_bin_dn_music == ast_a_normal_current[j].s4_bin_dn_music 
[36] SUBSUBPROCESS(1) if  ) 
[37] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBPROCESS(1) if <start> if ( 
[39] SUBSUBSUBPROCESS(1) if  (ast_a_normal_current[i].s4_flg_dc != OBJECT_TYPE_PRIOR 
[40] SUBSUBSUBPROCESS(1) if  ) 
[41] SUBSUBSUBPROCESS(1) if  &&  ( 
[42] SUBSUBSUBPROCESS(1) if  ast_a_normal_current[j].s4_flg_dc == OBJECT_TYPE_PRIOR 
[43] SUBSUBSUBPROCESS(1) if  ) 
[44] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[45] SUBSUBSUBPROCESS(1) if <start> if ( 
[46] SUBSUBSUBPROCESS(1) if  (ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_PRIOR 
[47] SUBSUBSUBPROCESS(1) if  ) 
[48] SUBSUBSUBPROCESS(1) if  &&  ( 
[49] SUBSUBSUBPROCESS(1) if  ast_a_normal_current[j].s4_flg_dc != OBJECT_TYPE_PRIOR 
[50] SUBSUBSUBPROCESS(1) if  ) 
[51] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[52] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[53] SUBSUBSUBSUBPROCESS(1) if  ast_a_normal_current[j].s4_flg_track > ast_a_normal_current[i].s4_flg_track 
[54] SUBSUBSUBSUBPROCESS(1) if  ) 
[55] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[56] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[j], 1 
[57] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[58] SUBSUBSUBSUBPROCESS(2) if <start> if ( 
[59] SUBSUBSUBSUBPROCESS(2) ??? ast_a_normal_current[i].s4_flg_track > ast_a_normal_current[j].s4_flg_track 
[60] SUBSUBSUBSUBPROCESS(2) ??? ) 
[61] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[62] SUBSUBSUBSUBPROCESS(2) func<start> fn_init( &ast_a_normal_current[i], 1 
[63] SUBSUBSUBSUBPROCESS(2) func<end> ); 
[64] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_normal_current[j].s4_flg_track ast_a_normal_current[i].s4_flg_track;
----------------- Total Codes : 64 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_stationary 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for<start> for( 
[3] MAINPROCESS for i=0; 
[4] MAINPROCESS for i<s4_a_pair_num_current; 
[5] MAINPROCESS for i++ 
[6] MAINPROCESS for ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if<start> if( 
[9] SUBPROCESS(1) if ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] MAINPROCESS proc return; 
[13] SUBSUBPROCESS(1) if<start> if( 
[14] SUBSUBPROCESS(1) ??? ast_a_normal_current[i].s4_flg_stop ==1 
[15] SUBSUBPROCESS(1) ??? ) 
[16] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[17] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[18] SUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 18 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_around_mycar 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for<start> for( 
[3] MAINPROCESS for i=0; 
[4] MAINPROCESS for i<s4_a_pair_num_current; 
[5] MAINPROCESS for i++ 
[6] MAINPROCESS for ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) if  &&  ( 
[12] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) if  &&  ( 
[15] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_heiso_up == 0 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) if  &&  ( 
[18] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_heiso_dn == 0 
[19] SUBPROCESS(1) if  ) 
[20] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[21] MAINPROCESS proc return; 
[22] SUBSUBPROCESS(1) if <start> if ( 
[23] SUBSUBPROCESS(1) ??? (ast_a_normal_current[i].fl_Rxfil < RX_AROUND_TH_TT 
[24] SUBSUBPROCESS(1) ??? ) 
[25] SUBSUBPROCESS(1) ??? &&  ( 
[26] SUBSUBPROCESS(1) ??? ast_a_normal_current[i].fl_Ryfil > RY_AROUND_TH_TT 
[27] SUBSUBPROCESS(1) ??? ) 
[28] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[29] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[30] SUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 30 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside_load 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 tmp_Rx_i; 
[3] MAINPROCESS proc FL tmp_tmp_Rx; 
[4] MAINPROCESS for<start> for( 
[5] MAINPROCESS for i = 0; 
[6] MAINPROCESS for i < s4_a_pair_num_current; 
[7] MAINPROCESS for i++ 
[8] MAINPROCESS for ) 
[9] MAINPROCESS subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if <start> if ( 
[11] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[12] SUBPROCESS(1) if  ) 
[13] SUBPROCESS(1) &&  <start> &&  ( 
[14] SUBPROCESS(1) &&   ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM 
[15] SUBPROCESS(1) &&   ) 
[16] SUBPROCESS(1) &&   &&  ( 
[17] SUBPROCESS(1) &&   ast_a_normal_current[i].s4_flg_heiso_up == 0 
[18] SUBPROCESS(1) &&   ) 
[19] SUBPROCESS(1) &&   &&  ( 
[20] SUBPROCESS(1) &&   ast_a_normal_current[i].s4_flg_heiso_dn == 0 
[21] SUBPROCESS(1) &&   ) 
[22] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[23] SUBPROCESS(1) ??? &&  ( 
[24] SUBPROCESS(1) ??? ast_a_normal_current[i].s4_flg_track > PRIOR_TRK_NUM 
[25] SUBPROCESS(1) ??? ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[28] MAINPROCESS proc return; 
[29] SUBSUBPROCESS(1) if <start> if ( 
[30] SUBSUBPROCESS(1) if  ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT 
[31] SUBSUBPROCESS(1) if  ) 
[32] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[33] SUBSUBPROCESS(2) if <start> if ( 
[34] SUBSUBPROCESS(2) ??? ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT 
[35] SUBSUBPROCESS(2) ??? ) 
[36] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
----------------- Total Codes : 36 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside_to_fr 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for<start> for( 
[3] MAINPROCESS for i = 0; 
[4] MAINPROCESS for i < s4_a_pair_num_current; 
[5] MAINPROCESS for i++ 
[6] MAINPROCESS for ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] MAINPROCESS proc return; 
[13] SUBSUBPROCESS(1) if <start> if ( 
[14] SUBSUBPROCESS(1) if  (ast_a_normal_current[i].fl_Vyfil >= 0.0F 
[15] SUBSUBPROCESS(1) ??? ) 
[16] SUBSUBPROCESS(1) ??? &&  ( 
[17] SUBSUBPROCESS(1) ??? ast_a_normal_current[i].fl_Ryfil > CANOUT_Y_MAX_TOS 
[18] SUBSUBPROCESS(1) ??? ) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[21] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(3) 
[22] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[23] SUBSUBSUBPROCESS(1) func<end> ); 
[24] SUBSUBSUBPROCESS(2) func<start> fn_init( &ast_a_normal_current[i], 1 
[25] SUBSUBSUBPROCESS(2) func<end> ); 
----------------- Total Codes : 25 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_like_wall 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for<start> for( 
[3] MAINPROCESS for i = 0; 
[4] MAINPROCESS for i < s4_a_pair_num_current; 
[5] MAINPROCESS for i++ 
[6] MAINPROCESS for ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) if  &&  ( 
[12] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_track <= PRIOR_TRK_NUM 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) if  &&  ( 
[15] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_heiso_up == 0 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) if  &&  ( 
[18] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_heiso_dn == 0 
[19] SUBPROCESS(1) if  ) 
[20] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[21] MAINPROCESS proc return; 
[22] SUBSUBPROCESS(1) if <start> if ( 
[23] SUBSUBPROCESS(1) if  ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT 
[24] SUBSUBPROCESS(1) if  ) 
[25] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[26] SUBSUBSUBPROCESS(1) if <start> if ( 
[27] SUBSUBSUBPROCESS(1) ??? (ast_a_normal_current[i].fl_Rxfil >= (st_g_bsm_loop_data.afl_wall_width[0] - 0.3F 
[28] SUBSUBSUBPROCESS(1) ??? ) 
[29] SUBSUBSUBPROCESS(1) ??? &&  ( 
[30] SUBSUBSUBPROCESS(1) ??? ast_a_normal_current[i].fl_Ryfil < 0 
[31] SUBSUBSUBPROCESS(1) ??? ) 
[32] SUBSUBSUBPROCESS(1) ??? &&  ( 
[33] SUBSUBSUBPROCESS(1) ??? ast_a_normal_current[i].fl_Vyfil <= 0 
[34] SUBSUBSUBPROCESS(1) ??? ) 
[35] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[36] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[37] SUBSUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 37 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_stag_just_beside 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 j; 
[3] MAINPROCESS for<start> for( 
[4] MAINPROCESS for i = 0; 
[5] MAINPROCESS for i < s4_a_pair_num_current; 
[6] MAINPROCESS for i++ 
[7] MAINPROCESS for ) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if <start> if ( 
[10] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) if  &&  ( 
[13] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_heiso_up == 0 
[14] SUBPROCESS(1) if  ) 
[15] SUBPROCESS(1) if  &&  ( 
[16] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_heiso_dn == 0 
[17] SUBPROCESS(1) if  ) 
[18] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[19] MAINPROCESS proc return; 
[20] SUBSUBPROCESS(1) if <start> if ( 
[21] SUBSUBPROCESS(1) if  (fl_abs(ast_a_normal_current[i].fl_Ryobs 
[22] SUBSUBPROCESS(1) if  ) 
[23] SUBSUBPROCESS(1) if  &&  ( 
[24] SUBSUBPROCESS(1) if  fl_abs(ast_a_normal_current[i].fl_Rypred 
[25] SUBSUBPROCESS(1) if  ) 
[26] SUBSUBPROCESS(1) if  &&  ( 
[27] SUBSUBPROCESS(1) if  ast_a_normal_current[i].fl_Rxfil > (st_g_bsm_loop_data.afl_wall_width[0] - 1.0F 
[28] SUBSUBPROCESS(1) if  ) 
[29] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[30] SUBSUBSUBPROCESS(1) if <start> if ( 
[31] SUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[32] SUBSUBSUBPROCESS(1) if  ) 
[33] SUBSUBSUBPROCESS(1) if  &&  ( 
[34] SUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN 
[35] SUBSUBSUBPROCESS(1) if  ) 
[36] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[37] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[38] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[39] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[40] SUBSUBSUBSUBPROCESS(2) for<start> for( 
[41] SUBSUBSUBSUBPROCESS(2) for j = 0; 
[42] SUBSUBSUBSUBPROCESS(2) for j < TARGET_BUFFSIZE; 
[43] SUBSUBSUBSUBPROCESS(2) for j++ 
[44] SUBSUBSUBSUBPROCESS(2) for ) 
[45] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[46] SUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[47] SUBSUBSUBSUBSUBPROCESS(1) if  ast_a_target_prev[j].fl_Robs != CFL_UNKNOWN_VALUE 
[48] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[49] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBSUBSUBSUBPROCESS(1) if <start> if ( 
[51] SUBSUBSUBSUBSUBSUBPROCESS(1) ??? (fl_abs(ast_a_target_prev[j].fl_Rxpred - ast_a_normal_current[i].fl_Rxfil 
[52] SUBSUBSUBSUBSUBSUBPROCESS(1) ??? ) 
[53] SUBSUBSUBSUBSUBSUBPROCESS(1) ??? ||  ( 
[54] SUBSUBSUBSUBSUBSUBPROCESS(1) ??? fl_abs(ast_a_target_prev[j].fl_Rypred - ast_a_normal_current[i].fl_Ryfil 
[55] SUBSUBSUBSUBSUBSUBPROCESS(1) ??? ) 
[56] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[57] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[58] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[59] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) proc break; 
----------------- Total Codes : 59 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_outside 
-Return type : static VD 
-Argument : 4 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 tmp_side_passing_flg; 
[3] MAINPROCESS equal tmp_side_passing_flg 0;
[4] MAINPROCESS if <start> if ( 
[5] MAINPROCESS if  st_g_bsm_loop_data.as4_flg_passing[0] > PASSING_COUNT_MIN 
[6] MAINPROCESS if  ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) for <start> for ( 
[9] SUBPROCESS(1) for  i = 0; 
[10] SUBPROCESS(1) for  i < s4_a_target_num_prev; 
[11] SUBPROCESS(1) for  i++ 
[12] SUBPROCESS(1) for  ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] MAINPROCESS for <start> for ( 
[15] MAINPROCESS for  i = 0; 
[16] MAINPROCESS for  i < s4_a_pair_num_current; 
[17] MAINPROCESS for  i++ 
[18] MAINPROCESS for  ) 
[19] MAINPROCESS subproc SUBPROCESS(2) 
[20] SUBPROCESS(2) if <start> if ( 
[21] SUBPROCESS(2) if  ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[22] SUBPROCESS(2) if  ) 
[23] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[24] MAINPROCESS proc return; 
[25] SUBSUBPROCESS(1) if <start> if ( 
[26] SUBSUBPROCESS(1) ??? (st_g_bsm_loop_data.as4_slow_sot_find[0] == 0 
[27] SUBSUBPROCESS(1) ??? ) 
[28] SUBSUBPROCESS(1) ??? &&  ( 
[29] SUBSUBPROCESS(1) ??? tmp_side_passing_flg == 0 
[30] SUBSUBPROCESS(1) ??? ) 
[31] SUBSUBPROCESS(1) ??? &&  ( 
[32] SUBSUBPROCESS(1) ??? st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[33] SUBSUBPROCESS(1) ??? ) 
[34] SUBSUBPROCESS(1) ??? &&  ( 
[35] SUBSUBPROCESS(1) ??? fl_abs(ast_a_normal_current[i].fl_Ryfil 
[36] SUBSUBPROCESS(1) ??? ) 
[37] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[39] SUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 39 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_non_sot_obj 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 tmp_Rx_i; 
[3] MAINPROCESS proc FL tmp_tmp_Rx; 
[4] MAINPROCESS for<start> for( 
[5] MAINPROCESS for i = 0; 
[6] MAINPROCESS for i < s4_a_pair_num_current; 
[7] MAINPROCESS for i++ 
[8] MAINPROCESS for ) 
[9] MAINPROCESS subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if <start> if ( 
[11] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[12] SUBPROCESS(1) if  ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] MAINPROCESS proc return; 
[15] SUBSUBPROCESS(1) func<start> tmp_Rx_i = (S4)(-ast_a_normal_current[i].fl_Ryfil 
[16] SUBSUBPROCESS(1) func<end> ); 
[17] SUBSUBPROCESS(1) if<start> if( 
[18] SUBSUBPROCESS(1) if tmp_Rx_i < 0 
[19] SUBSUBPROCESS(1) if ) 
[20] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[21] SUBSUBPROCESS(1) if<start> if( 
[22] SUBSUBPROCESS(1) if tmp_Rx_i > 69 
[23] SUBSUBPROCESS(1) if ) 
[24] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[25] SUBSUBPROCESS(1) equal tmp_tmp_Rx st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_i];
[26] SUBSUBPROCESS(1) if <start> if ( 
[27] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_slow_sot_find[1] >= WALL_REJECT_TH3 
[28] SUBSUBPROCESS(1) if  ) 
[29] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(3) 
[30] SUBSUBSUBPROCESS(1) equal tmp_Rx_i 0;
[31] SUBSUBSUBPROCESS(2) equal tmp_Rx_i 69;
[32] SUBSUBSUBPROCESS(3) if <start> if ( 
[33] SUBSUBSUBPROCESS(3) if  (ast_a_normal_current[i].fl_Rxobs >= (tmp_tmp_Rx - 1.5F 
[34] SUBSUBSUBPROCESS(3) if  ) 
[35] SUBSUBSUBPROCESS(3) &&  <start> &&  ( 
[36] SUBSUBSUBPROCESS(3) ??? fl_abs(ast_a_normal_current[i].fl_Ryfil 
[37] SUBSUBSUBPROCESS(3) ??? ) 
[38] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[39] SUBSUBSUBPROCESS(3) ??? &&  ( 
[40] SUBSUBSUBPROCESS(3) ??? ast_a_normal_current[i].fl_Ryfil > RY_WALL_LIMIT_TT 
[41] SUBSUBSUBPROCESS(3) ??? ) 
[42] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(2) 
[43] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(3) 
[44] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( &ast_a_normal_current[i], 1 
[45] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[46] SUBSUBSUBSUBPROCESS(2) func<start> fn_init( &ast_a_normal_current[i], 1 
[47] SUBSUBSUBSUBPROCESS(2) func<end> ); 
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fn_bsm_sel_exobj_bumper_reflection 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 s4_t_lp_normal; 
[2] MAINPROCESS proc FL fl_t_thd_exobj_range; 
[3] MAINPROCESS proc FL fl_t_thd_exobj_power; 
[4] MAINPROCESS proc FL fl_t_obj_power; 
[5] MAINPROCESS proc FL fl_t_abs_robs; 
[6] MAINPROCESS proc FL fl_t_abs_vobs; 
[7] MAINPROCESS ??? const FL CFL_D_MAP_EXOBJ_POWER[CU2_MAP_EXOBJ_POWER_INDEX][2] = 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[10] SUBPROCESS(1) ??? , 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[12] SUBPROCESS(1) ??? , 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[14] SUBPROCESS(1) ??? , 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(4) 
[16] SUBPROCESS(1) ??? , 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(5) 
[18] SUBPROCESS(1) ??? , 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(6) 
[20] SUBPROCESS(1) ??? , 
[21] SUBPROCESS(1) subproc SUBSUBPROCESS(7) 
[22] SUBPROCESS(1) ??? , 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(8) 
[24] MAINPROCESS proc s4_t_lp_normal < s4_a_pair_num_current; 
[25] MAINPROCESS func s4_t_lp_normal++ 
[26] MAINPROCESS func<end> ); 
[27] MAINPROCESS subproc SUBPROCESS(2) 
[28] SUBPROCESS(2) ??? if ( 
[29] SUBPROCESS(2) ??? ast_a_normal_current[s4_t_lp_normal].fl_Robs != CFL_UNKNOWN_VALUE 
[30] SUBPROCESS(2) ??? ) 
[31] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[32] MAINPROCESS proc return; 
[33] SUBSUBPROCESS(1) func<start> fl_t_abs_robs = fl_abs(ast_a_normal_current[s4_t_lp_normal].fl_Robs 
[34] SUBSUBPROCESS(1) func<end> ); 
[35] SUBSUBPROCESS(1) func<start> fl_t_abs_vobs = fl_abs(ast_a_normal_current[s4_t_lp_normal].fl_Vobs 
[36] SUBSUBPROCESS(1) func<end> ); 
[37] SUBSUBPROCESS(1) func<start> fl_t_thd_exobj_power = fl_smap_new(CFL_D_MAP_EXOBJ_POWER, CU2_MAP_EXOBJ_POWER_INDEX, fl_t_abs_robs 
[38] SUBSUBPROCESS(1) func<end> ); 
[39] SUBSUBPROCESS(1) if <start> if ( 
[40] SUBSUBPROCESS(1) if  (ast_a_normal_current[s4_t_lp_normal].s4_flg_dc != (S4 
[41] SUBSUBPROCESS(1) if  ) 
[42] SUBSUBPROCESS(1) if  &&	( 
[43] SUBSUBPROCESS(1) if  fl_t_abs_robs < fl_t_thd_exobj_range 
[44] SUBSUBPROCESS(1) if  ) 
[45] SUBSUBPROCESS(1) if  &&	( 
[46] SUBSUBPROCESS(1) if  ast_a_normal_current[s4_t_lp_normal].fl_Ryobs < (FL 
[47] SUBSUBPROCESS(1) if  ) 
[48] SUBSUBPROCESS(1) if  &&	( 
[49] SUBSUBPROCESS(1) if  fl_t_abs_vobs < ((FL 
[50] SUBSUBPROCESS(1) if  ) 
[51] SUBSUBPROCESS(1) if  &&	( 
[52] SUBSUBPROCESS(1) if  fl_t_obj_power < fl_t_thd_exobj_power 
[53] SUBSUBPROCESS(1) if  ) 
[54] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[55] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_current[s4_t_lp_normal], (S4)1 
[56] SUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 56 lines
--------------------------
[Function Name] : s4_bsm_sel_empty_buf_trimming 
-Return type : static S4 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 s2_t_in[NORMAL_BUFFSIZE]; 
[2] MAINPROCESS proc S4 s2_t_loop; 
[3] MAINPROCESS proc S4 s2_t_num; 
[4] MAINPROCESS proc S4 s4_t_object_num; 
[5] MAINPROCESS equal s4_t_object_num 0;
[6] MAINPROCESS equal s2_t_num 0;
[7] MAINPROCESS for <start> for ( 
[8] MAINPROCESS for  s2_t_loop = 0; 
[9] MAINPROCESS for  s2_t_loop < NORMAL_BUFFSIZE; 
[10] MAINPROCESS for  s2_t_loop++ 
[11] MAINPROCESS for  ) 
[12] MAINPROCESS subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if <start> if ( 
[14] SUBPROCESS(1) if  ast_a_normal_current[s2_t_loop].fl_Robs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] MAINPROCESS equal s4_t_object_num s2_t_num;
[18] MAINPROCESS if <start> if ( 
[19] MAINPROCESS if  s2_t_num > 0 
[20] MAINPROCESS if  ) 
[21] MAINPROCESS subproc SUBPROCESS(2) 
[22] SUBPROCESS(2) for <start> for ( 
[23] SUBPROCESS(2) for  s2_t_loop = 0; 
[24] SUBPROCESS(2) for  s2_t_loop < s2_t_num; 
[25] SUBPROCESS(2) for  s2_t_loop++ 
[26] SUBPROCESS(2) for  ) 
[27] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[28] SUBPROCESS(2) for <start> for ( 
[29] SUBPROCESS(2) ??? s2_t_loop = s2_t_num; 
[30] SUBPROCESS(2) ??? s2_t_loop < NORMAL_BUFFSIZE; 
[31] SUBPROCESS(2) ??? s2_t_loop++ 
[32] SUBPROCESS(2) ??? ) 
[33] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[34] MAINPROCESS proc return s4_t_object_num; 
[35] SUBSUBPROCESS(1) equal ast_a_normal_current[s2_t_loop] ast_a_normal_current[s2_t_in[s2_t_loop]];
[36] SUBSUBPROCESS(2) func<start> fn_init(&ast_a_normal_current[s2_t_loop], 1 
[37] SUBSUBPROCESS(2) func<end> ); 
----------------- Total Codes : 37 lines
--------------------------
[Function Name] : fn_bsm_sel_connect_target 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_num_prev 
     [3] : NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [4] : S4   as4_t_used_ID[TARGET_BUFFSIZE] 
     [5] : S4   *ps4_a_target_num_current 
     [6] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 k; 
[3] MAINPROCESS proc S4 s4_t_sample_num; 
[4] MAINPROCESS proc S4 as4_t_sample_indexs[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS proc S4 as4_t_sample_indexs_prev[NORMAL_BUFFSIZE]; 
[6] MAINPROCESS proc S4 s4_t_select_index; 
[7] MAINPROCESS for<start> for( 
[8] MAINPROCESS for i = 0; 
[9] MAINPROCESS for i < s4_a_target_num_prev; 
[10] MAINPROCESS for i++ 
[11] MAINPROCESS for ) 
[12] MAINPROCESS subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal s4_t_sample_num 0;
[14] SUBPROCESS(1) for<start> for( 
[15] SUBPROCESS(1) for k = 0; 
[16] SUBPROCESS(1) for k < NORMAL_BUFFSIZE; 
[17] SUBPROCESS(1) for k++ 
[18] SUBPROCESS(1) for ) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] SUBPROCESS(1) if <start> if ( 
[21] SUBPROCESS(1) if  (ast_a_target_prev[i].fl_Vypred > 5.0F 
[22] SUBPROCESS(1) if  ) 
[23] SUBPROCESS(1) if  &&  ( 
[24] SUBPROCESS(1) if  ast_a_target_prev[i].fl_Rypred > -1.5F 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[27] SUBPROCESS(1) func<start> fn_bsm_sel_search_sample( 
[28] SUBPROCESS(1) func s4_a_pair_num_current, 
[29] SUBPROCESS(1) func (const NORMAL_BSM (*))ast_a_normal_current, 
[30] SUBPROCESS(1) func i, 
[31] SUBPROCESS(1) func (const NORMAL_BSM (*))ast_a_target_prev, 
[32] SUBPROCESS(1) func &s4_t_sample_num, 
[33] SUBPROCESS(1) func as4_t_sample_indexs, 
[34] SUBPROCESS(1) func as4_t_sample_indexs_prev 
[35] SUBPROCESS(1) func<end> ); 
[36] SUBPROCESS(1) func<start> s4_t_select_index = s4_bsm_sel_select_sample( 
[37] SUBPROCESS(1) func s4_a_pair_num_current, 
[38] SUBPROCESS(1) func (const NORMAL_BSM (*))ast_a_normal_current, 
[39] SUBPROCESS(1) func s4_a_target_num_prev, 
[40] SUBPROCESS(1) func (const NORMAL_BSM (*))ast_a_target_prev, 
[41] SUBPROCESS(1) func s4_t_sample_num, 
[42] SUBPROCESS(1) func (const S4 (*))as4_t_sample_indexs, 
[43] SUBPROCESS(1) func (const S4 (*))as4_t_sample_indexs_prev 
[44] SUBPROCESS(1) func<end> ); 
[45] SUBPROCESS(1) if<start> if( 
[46] SUBPROCESS(1) ??? s4_t_select_index != -1 
[47] SUBPROCESS(1) ??? ) 
[48] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[49] MAINPROCESS proc return; 
[50] SUBSUBPROCESS(1) equal as4_t_sample_indexs[k] -1;
[51] SUBSUBPROCESS(1) equal as4_t_sample_indexs_prev[k] -1;
[52] SUBSUBPROCESS(2) equal ast_a_target_prev[i].s4_flg_single_peak_up 1;
[53] SUBSUBPROCESS(3) func<start> fn_bsm_tracking_target( 
[54] SUBSUBPROCESS(3) func &ast_a_normal_current[s4_t_select_index], 
[55] SUBSUBPROCESS(3) func &ast_a_target_prev[i], 
[56] SUBSUBPROCESS(3) func as4_t_used_ID, 
[57] SUBSUBPROCESS(3) func &ast_a_target_current[*ps4_a_target_num_current] 
[58] SUBSUBPROCESS(3) func<end> ); 
----------------- Total Codes : 58 lines
--------------------------
[Function Name] : fn_bsm_sel_search_sample 
-Return type : static VD 
-Argument : 7 
     [0] : S4   s4_a_pair_num_current 
     [1] : const NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_prev_index 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [4] : S4   *ps4_a_sample_num 
     [5] : S4   as4_a_sample_indexs[NORMAL_BUFFSIZE] 
     [6] : S4   as4_a_sample_indexs_prev[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 s4_t_wall_bin 270;
[3] MAINPROCESS proc S4 s4_t_connect; 
[4] MAINPROCESS proc FL fl_t_rx_th; 
[5] MAINPROCESS proc FL fl_t_ry_th; 
[6] MAINPROCESS proc FL fl_t_vx_th; 
[7] MAINPROCESS proc FL fl_t_vy_th; 
[8] MAINPROCESS for<start> for( 
[9] MAINPROCESS for i = 0; 
[10] MAINPROCESS for i < s4_a_pair_num_current; 
[11] MAINPROCESS for i++ 
[12] MAINPROCESS for ) 
[13] MAINPROCESS subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) if <start> if ( 
[15] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) if  &&  ( 
[18] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_used == 0 
[19] SUBPROCESS(1) if  ) 
[20] SUBPROCESS(1) if  &&  ( 
[21] SUBPROCESS(1) if  (ast_a_normal_current[i].s4_flg_lost <= 1 
[22] SUBPROCESS(1) if  ) 
[23] SUBPROCESS(1) if  ||   ( 
[24] SUBPROCESS(1) if  fl_abs( (FL 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) if  ||   ( 
[27] SUBPROCESS(1) if  fl_abs( (FL 
[28] SUBPROCESS(1) if  ) 
[29] SUBPROCESS(1) if  &&  ( 
[30] SUBPROCESS(1) if  ast_a_target_prev[s4_a_target_prev_index].fl_Robs != CFL_UNKNOWN_VALUE 
[31] SUBPROCESS(1) if  ) 
[32] SUBPROCESS(1) if  &&  ( 
[33] SUBPROCESS(1) if  ast_a_target_prev[s4_a_target_prev_index].s4_flg_used == 0 
[34] SUBPROCESS(1) if  ) 
[35] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[36] MAINPROCESS proc return; 
[37] SUBSUBPROCESS(1) equal s4_t_connect 0;
[38] SUBSUBPROCESS(1) func<start> fn_bsm_sel_set_search_area( 
[39] SUBSUBPROCESS(1) func &ast_a_normal_current[i], 
[40] SUBSUBPROCESS(1) func &ast_a_target_prev[s4_a_target_prev_index], 
[41] SUBSUBPROCESS(1) func &fl_t_rx_th, 
[42] SUBSUBPROCESS(1) func &fl_t_ry_th, 
[43] SUBSUBPROCESS(1) func &fl_t_vx_th, 
[44] SUBSUBPROCESS(1) func &fl_t_vy_th 
[45] SUBSUBPROCESS(1) func<end> ); 
[46] SUBSUBPROCESS(1) func<start> s4_t_connect = s4_bsm_sel_check_condition( 
[47] SUBSUBPROCESS(1) func &ast_a_normal_current[i], 
[48] SUBSUBPROCESS(1) func &ast_a_target_prev[s4_a_target_prev_index], 
[49] SUBSUBPROCESS(1) func fl_t_rx_th, 
[50] SUBSUBPROCESS(1) func fl_t_ry_th, 
[51] SUBSUBPROCESS(1) func fl_t_vx_th, 
[52] SUBSUBPROCESS(1) func fl_t_vy_th 
[53] SUBSUBPROCESS(1) func<end> ); 
[54] SUBSUBPROCESS(1) if<start> if( 
[55] SUBSUBPROCESS(1) ??? s4_t_connect==1 
[56] SUBSUBPROCESS(1) ??? ) 
[57] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[58] SUBSUBSUBPROCESS(1) equal as4_a_sample_indexs[*ps4_a_sample_num] i;
[59] SUBSUBSUBPROCESS(1) equal as4_a_sample_indexs_prev[*ps4_a_sample_num] s4_a_target_prev_index;
----------------- Total Codes : 59 lines
--------------------------
[Function Name] : fn_bsm_sel_set_search_area 
-Return type : static VD 
-Argument : 6 
     [0] : const NORMAL_BSM   ast_a_normal_current[1] 
     [1] : const NORMAL_BSM   ast_a_target_prev[1] 
     [2] : FL   *pfl_a_rx_th 
     [3] : FL   *pfl_a_ry_th 
     [4] : FL   *pfl_a_vx_th 
     [5] : FL   *pfl_a_vy_th 
----- Codes -----
[1] MAINPROCESS equal *pfl_a_rx_th RX_TH_TT;
[2] MAINPROCESS equal *pfl_a_ry_th RY_TH_TT;
[3] MAINPROCESS if<start> if( 
[4] MAINPROCESS if ast_a_normal_current[0].fl_Ryfil < RY_WALL_LIMIT_TT 
[5] MAINPROCESS if ) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal *pfl_a_rx_th RX_TH_TT + 1.0F;
[8] SUBPROCESS(1) equal *pfl_a_ry_th RY_TH_TT + 1.0F;
[9] MAINPROCESS equal *pfl_a_vx_th VX_TH_TT;
[10] MAINPROCESS equal *pfl_a_vy_th VY_TH_TT;
[11] MAINPROCESS if <start> if ( 
[12] MAINPROCESS if  fl_abs(ast_a_target_prev[0].fl_Rypred 
[13] MAINPROCESS if  ) 
[14] MAINPROCESS subproc SUBPROCESS(2) 
[15] SUBPROCESS(2) equal *pfl_a_vx_th TH_TT_MAX;
[16] SUBPROCESS(2) equal *pfl_a_vy_th TH_TT_MAX;
[17] MAINPROCESS if <start> if ( 
[18] MAINPROCESS if  (ast_a_target_prev[0].s4_flg_dc == OBJECT_TYPE_SOT 
[19] MAINPROCESS if  ) 
[20] MAINPROCESS if  &&  ( 
[21] MAINPROCESS if  fl_abs(ast_a_target_prev[0].fl_Rypred 
[22] MAINPROCESS if  ) 
[23] MAINPROCESS subproc SUBPROCESS(3) 
[24] SUBPROCESS(3) equal *pfl_a_rx_th RX_TH_TT_SOT;
[25] SUBPROCESS(3) equal *pfl_a_ry_th RY_TH_TT_SOT;
[26] SUBPROCESS(3) equal *pfl_a_vy_th TH_TT_MAX;
[27] MAINPROCESS if <start> if ( 
[28] MAINPROCESS ??? s4_abs((S4 
[29] MAINPROCESS ??? ) 
[30] MAINPROCESS subproc SUBPROCESS(4) 
[31] SUBPROCESS(4) equal *pfl_a_rx_th CFL_RX_TH_TT_CURVE;
[32] SUBPROCESS(4) equal *pfl_a_ry_th CFL_RY_TH_TT_CURVE;
[33] MAINPROCESS ??? return; 
[34] MAINPROCESS equal *pfl_a_rx_th CFL_RX_TH_TT_CURVE;
[35] MAINPROCESS equal *pfl_a_ry_th CFL_RY_TH_TT_CURVE;
----------------- Total Codes : 35 lines
--------------------------
[Function Name] : s4_bsm_sel_check_condition 
-Return type : static S4 
-Argument : 6 
     [0] : const NORMAL_BSM   ast_a_normal_current[1] 
     [1] : const NORMAL_BSM   ast_a_target_prev[1] 
     [2] : FL   fl_a_rx_th 
     [3] : FL   fl_a_ry_th 
     [4] : FL   fl_a_vx_th 
     [5] : FL   fl_a_vy_th 
----- Codes -----
[1] MAINPROCESS proc S4 s4_t_connect; 
[2] MAINPROCESS equal s4_t_connect 0;
[3] MAINPROCESS if <start> if ( 
[4] MAINPROCESS if  (fl_abs(ast_a_target_prev[0].fl_Rxpred - ast_a_normal_current[0].fl_Rxfil 
[5] MAINPROCESS if  ) 
[6] MAINPROCESS if  &&  ( 
[7] MAINPROCESS if  fl_abs(ast_a_target_prev[0].fl_Rypred - ast_a_normal_current[0].fl_Ryfil 
[8] MAINPROCESS if  ) 
[9] MAINPROCESS subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if <start> if ( 
[11] SUBPROCESS(1) if  (ast_a_target_prev[0].s4_flg_dc != OBJECT_TYPE_2F 
[12] SUBPROCESS(1) if  ) 
[13] SUBPROCESS(1) if  &&  ( 
[14] SUBPROCESS(1) if  ast_a_normal_current[0].s4_flg_dc != OBJECT_TYPE_2F 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBPROCESS(1) else<start> else 
[18] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[19] MAINPROCESS proc return s4_t_connect; 
[20] SUBSUBPROCESS(1) if <start> if ( 
[21] SUBSUBPROCESS(1) ??? (fl_abs(ast_a_target_prev[0].fl_Vxpred - ast_a_normal_current[0].fl_Vxfil 
[22] SUBSUBPROCESS(1) ??? ) 
[23] SUBSUBPROCESS(1) ??? &&  ( 
[24] SUBSUBPROCESS(1) ??? fl_abs(ast_a_target_prev[0].fl_Vypred - ast_a_normal_current[0].fl_Vyfil 
[25] SUBSUBPROCESS(1) ??? ) 
[26] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(2) equal s4_t_connect 1;
----------------- Total Codes : 27 lines
--------------------------
[Function Name] : s4_bsm_sel_select_sample 
-Return type : static S4 
-Argument : 7 
     [0] : S4   s4_a_pair_num_current 
     [1] : const NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   s4_a_target_prev_index 
     [3] : const NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [4] : S4   s4_a_sample_num 
     [5] : const S4   as4_a_sample_indexs[NORMAL_BUFFSIZE] 
     [6] : const S4   as4_a_sample_indexs_prev[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 k; 
[2] MAINPROCESS proc S4 s4_t_select_index; 
[3] MAINPROCESS proc FL fl_t_min; 
[4] MAINPROCESS if<start> FL fl_t_diff; 
[5] MAINPROCESS if FL fl_t_diff_x = TH_TT_MAX; 
[6] MAINPROCESS if FL fl_t_diff_y = TH_TT_MAX; 
[7] MAINPROCESS if s4_t_select_index -1;
[8] MAINPROCESS if if( 
[9] MAINPROCESS if s4_a_sample_num!=0 
[10] MAINPROCESS if ) 
[11] MAINPROCESS subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal fl_t_min RX_TH_TT + RY_TH_TT+3.1F;
[13] SUBPROCESS(1) for<start> for( 
[14] SUBPROCESS(1) for k=0; 
[15] SUBPROCESS(1) for k<s4_a_sample_num; 
[16] SUBPROCESS(1) for k++ 
[17] SUBPROCESS(1) for ) 
[18] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[19] MAINPROCESS proc return s4_t_select_index; 
[20] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[21] SUBSUBPROCESS(1) ??? fl_t_diff = fl_t_diff_x + fl_t_diff_y; 
[22] SUBSUBPROCESS(1) ??? if( 
[23] SUBSUBPROCESS(1) ??? fl_t_diff < fl_t_min 
[24] SUBSUBPROCESS(1) ??? ) 
[25] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[26] SUBSUBSUBPROCESS(1) func<start> fl_t_diff_x = (FL) (fl_abs(ast_a_normal_current[as4_a_sample_indexs[k]].fl_Rxfil - ast_a_target_prev[as4_a_sample_indexs_prev[k]].fl_Rxpred) 
[27] SUBSUBSUBPROCESS(1) func<end> ); 
[28] SUBSUBSUBPROCESS(1) func<start> fl_t_diff_y = (FL) (fl_abs(ast_a_normal_current[as4_a_sample_indexs[k]].fl_Ryfil - ast_a_target_prev[as4_a_sample_indexs_prev[k]].fl_Rypred) 
[29] SUBSUBSUBPROCESS(1) func<end> ); 
[30] SUBSUBSUBPROCESS(2) ??? fl_t_min = fl_t_diff; 
[31] SUBSUBSUBPROCESS(2) equal s4_t_select_index as4_a_sample_indexs[k];
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : fn_bsm_tracking_target 
-Return type : static VD 
-Argument : 4 
     [0] : NORMAL_BSM   ast_a_normal_current[1] 
     [1] : NORMAL_BSM   ast_a_target_prev[1] 
     [2] : S4   as4_a_used_ID[TARGET_BUFFSIZE] 
     [3] : NORMAL_BSM   ast_a_target_current[1] 
----- Codes -----
[1] MAINPROCESS equal ast_a_normal_current[0].s4_flg_used 1;
[2] MAINPROCESS equal ast_a_target_current[0] ast_a_normal_current[0];
[3] MAINPROCESS if <start> if ( 
[4] MAINPROCESS if  (ast_a_target_current[0].s4_flg_dc == OBJECT_TYPE_2F 
[5] MAINPROCESS if  ) 
[6] MAINPROCESS if  &&  ( 
[7] MAINPROCESS if  ast_a_target_prev[0].s4_flg_dc != OBJECT_TYPE_2F 
[8] MAINPROCESS if  ) 
[9] MAINPROCESS subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vobs ast_a_target_prev[0].fl_Vobs_pred;
[11] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vxobs ast_a_target_prev[0].fl_Vxpred;
[12] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vyobs ast_a_target_prev[0].fl_Vypred;
[13] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vxfil ast_a_target_prev[0].fl_Vxpred;
[14] SUBPROCESS(1) equal ast_a_target_current[0].fl_Vyfil ast_a_target_prev[0].fl_Vypred;
[15] MAINPROCESS if <start> if ( 
[16] MAINPROCESS if  (ast_a_target_current[0].s4_flg_dc != OBJECT_TYPE_2F 
[17] MAINPROCESS if  ) 
[18] MAINPROCESS if  &&  ( 
[19] MAINPROCESS if  ast_a_target_prev[0].s4_flg_dc == OBJECT_TYPE_2F 
[20] MAINPROCESS if  ) 
[21] MAINPROCESS subproc SUBPROCESS(2) 
[22] SUBPROCESS(2) equal ast_a_target_prev[0].fl_Vxpred ast_a_target_current[0].fl_Vxfil;
[23] SUBPROCESS(2) equal ast_a_target_prev[0].fl_Vypred ast_a_target_current[0].fl_Vyfil;
[24] MAINPROCESS if <start> if ( 
[25] MAINPROCESS if  (st_g_bsm_loop_data.u1_truck_flg != (U1 
[26] MAINPROCESS if  ) 
[27] MAINPROCESS if  &&  ( 
[28] MAINPROCESS if  ast_a_target_current[0].fl_Ryfil > CFL_TRUCK_RY_MIN 
[29] MAINPROCESS if  ) 
[30] MAINPROCESS if  &&  ( 
[31] MAINPROCESS if  (ast_a_target_current[0].fl_Rxfil - ast_a_target_prev[0].fl_Rxpred 
[32] MAINPROCESS if  ) 
[33] MAINPROCESS if  &&  ( 
[34] MAINPROCESS if  ast_a_target_current[0].fl_Rxfil > CFL_TRUCK_RX_MIN 
[35] MAINPROCESS if  ) 
[36] MAINPROCESS if  &&  ( 
[37] MAINPROCESS if  ast_a_target_current[0].fl_Rxfil < CFL_TRUCK_RX_MAX 
[38] MAINPROCESS if  ) 
[39] MAINPROCESS subproc SUBPROCESS(3) 
[40] SUBPROCESS(3) equal ast_a_target_current[0].fl_Rxfil - CFL_TRUCK_WIDTH;
[41] MAINPROCESS equal ast_a_target_prev[0].s4_flg_used 1;
[42] MAINPROCESS func<start> fn_ab_track( 
[43] MAINPROCESS func &ast_a_target_prev[0], 
[44] MAINPROCESS func &ast_a_target_current[0], 
[45] MAINPROCESS func 1 
[46] MAINPROCESS func<end> ); 
[47] MAINPROCESS func<start> calc_prediction_of_normaldata( 
[48] MAINPROCESS func &ast_a_target_current[0] 
[49] MAINPROCESS func<end> ); 
[50] MAINPROCESS if <start> if ( 
[51] MAINPROCESS if  ast_a_target_current[0].s4_flg_track == CS4_S4MAX 
[52] MAINPROCESS if  ) 
[53] MAINPROCESS subproc SUBPROCESS(4) 
[54] MAINPROCESS subproc SUBPROCESS(5) 
[55] MAINPROCESS equal ast_a_target_current[0].s4_flg_new 0;
[56] MAINPROCESS if <start> if ( 
[57] MAINPROCESS if  ((S2 
[58] MAINPROCESS if  ) 
[59] MAINPROCESS if  &&  ( 
[60] MAINPROCESS if  ast_a_normal_current[0].s4_flg_dc == OBJECT_TYPE_2F 
[61] MAINPROCESS if  ) 
[62] MAINPROCESS subproc SUBPROCESS(6) 
[63] SUBPROCESS(6) equal ast_a_target_current[0].s4_flg_new ast_a_normal_current[0].s4_flg_new;
[64] MAINPROCESS equal ast_a_target_current[0].s4_flg_lost 0;
[65] MAINPROCESS if <start> if ( 
[66] MAINPROCESS if  ((S2 
[67] MAINPROCESS if  ) 
[68] MAINPROCESS if  &&  ( 
[69] MAINPROCESS if  ast_a_normal_current[0].s4_flg_dc == OBJECT_TYPE_2F 
[70] MAINPROCESS if  ) 
[71] MAINPROCESS subproc SUBPROCESS(7) 
[72] SUBPROCESS(7) equal ast_a_target_current[0].s4_flg_lost ast_a_normal_current[0].s4_flg_lost;
[73] MAINPROCESS equal ast_a_target_current[0].s4_flg_used 1;
[74] MAINPROCESS equal ast_a_target_current[0].s4_flg_single_peak_up ast_a_target_prev[0].s4_flg_single_peak_up;
[75] MAINPROCESS equal ast_a_target_current[0].u4_ctr_fa ast_a_target_prev[0].u4_ctr_fa;
[76] MAINPROCESS equal ast_a_target_current[0].s4_ctr_sot_cut ast_a_target_prev[0].s4_ctr_sot_cut;
[77] MAINPROCESS if <start> if ( 
[78] MAINPROCESS if  (ast_a_normal_current[0].s4_flg_reliable == (S4 
[79] MAINPROCESS if  ) 
[80] MAINPROCESS if  ||  ( 
[81] MAINPROCESS if  ast_a_target_prev[0].s4_flg_reliable == (S4 
[82] MAINPROCESS if  ) 
[83] MAINPROCESS subproc SUBPROCESS(8) 
[84] MAINPROCESS if <start> if ( 
[85] MAINPROCESS ??? (ast_a_normal_current[0].s4_flg_lost >= (S4 
[86] MAINPROCESS ??? ) 
[87] MAINPROCESS ??? &&  ( 
[88] MAINPROCESS ??? ast_a_normal_current[0].s4_flg_track < (S4 
[89] MAINPROCESS ??? ) 
[90] MAINPROCESS subproc SUBPROCESS(9) 
[91] MAINPROCESS equal ast_a_target_current[0].s4_ctr_tos ast_a_target_prev[0].s4_ctr_tos;
[92] MAINPROCESS equal ast_a_target_current[0].s4_ID_num ast_a_target_prev[0].s4_ID_num;
[93] MAINPROCESS equal as4_a_used_ID[ast_a_target_prev[0].s4_ID_num-1] 1;
[94] MAINPROCESS ??? return; 
----------------- Total Codes : 94 lines
--------------------------
[Function Name] : fn_bsm_sel_extrapolate_target 
-Return type : static VD 
-Argument : 5 
     [0] : S4   s4_a_target_num_prev 
     [1] : NORMAL_BSM   ast_a_target_prev[TARGET_BUFFSIZE] 
     [2] : S4   *ps4_a_target_num_current 
     [3] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
     [4] : S4   as4_t_used_ID[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 tmp_connect_num TARGET_CONNECT_NUM;
[3] MAINPROCESS equal S4 tmp_lost_max TARGET_LOST_MAX;
[4] MAINPROCESS proc S4 s4_t_wall_bin; 
[5] MAINPROCESS equal FL fl_t_tmp_alarm_x_min ALARM_X_IN       + ALARM_X_OFFSET_IN;
[6] MAINPROCESS equal FL fl_t_tmp_alarm_x_max ALARM_X_OUT      + ALARM_X_OFFSET_OUT;
[7] MAINPROCESS equal FL fl_t_tmp_alarm_y_min CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET;
[8] MAINPROCESS equal FL fl_t_tmp_alarm_y_max ALARM_Y_FORWARD;
[9] MAINPROCESS for<start> for( 
[10] MAINPROCESS for i=0; 
[11] MAINPROCESS for i<s4_a_target_num_prev; 
[12] MAINPROCESS for i++ 
[13] MAINPROCESS for ) 
[14] MAINPROCESS subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal tmp_connect_num TARGET_CONNECT_NUM;
[16] SUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX;
[17] SUBPROCESS(1) if <start> if ( 
[18] SUBPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] != 0 
[19] SUBPROCESS(1) if  ) 
[20] SUBPROCESS(1) if  ||  ( 
[21] SUBPROCESS(1) if  st_g_bsm_loop_data.as4_flg_passing[0] > PASSING_COUNT_MIN 
[22] SUBPROCESS(1) if  ) 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[24] SUBPROCESS(1) if <start> if ( 
[25] SUBPROCESS(1) if  (ast_a_target_prev[i].fl_Robs != CFL_UNKNOWN_VALUE 
[26] SUBPROCESS(1) if  ) 
[27] SUBPROCESS(1) if  &&  ( 
[28] SUBPROCESS(1) if  ast_a_target_prev[i].s4_flg_used == 0 
[29] SUBPROCESS(1) if  ) 
[30] SUBPROCESS(1) if  &&  ( 
[31] SUBPROCESS(1) if  ast_a_target_prev[i].s4_flg_track > tmp_connect_num 
[32] SUBPROCESS(1) if  ) 
[33] SUBPROCESS(1) if  &&  ( 
[34] SUBPROCESS(1) if  ast_a_target_prev[i].s4_flg_lost < tmp_lost_max 
[35] SUBPROCESS(1) if  ) 
[36] SUBPROCESS(1) if  &&  ( 
[37] SUBPROCESS(1) if  *ps4_a_target_num_current < TARGET_BUFFSIZE 
[38] SUBPROCESS(1) if  ) 
[39] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[40] MAINPROCESS proc return; 
[41] SUBSUBPROCESS(1) if <start> if ( 
[42] SUBSUBPROCESS(1) if  (ast_a_target_prev[i].fl_Rxpred > fl_t_tmp_alarm_x_min 
[43] SUBSUBPROCESS(1) if  ) 
[44] SUBSUBPROCESS(1) if  &&  ( 
[45] SUBSUBPROCESS(1) if  ast_a_target_prev[i].fl_Rxpred < fl_t_tmp_alarm_x_max 
[46] SUBSUBPROCESS(1) if  ) 
[47] SUBSUBPROCESS(1) if  &&  ( 
[48] SUBSUBPROCESS(1) if  ast_a_target_prev[i].fl_Rypred > fl_t_tmp_alarm_y_min 
[49] SUBSUBPROCESS(1) if  ) 
[50] SUBSUBPROCESS(1) if  &&  ( 
[51] SUBSUBPROCESS(1) if  ast_a_target_prev[i].fl_Rypred < fl_t_tmp_alarm_y_max 
[52] SUBSUBPROCESS(1) if  ) 
[53] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[54] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[55] SUBSUBPROCESS(2) func<start> predict_target( 
[56] SUBSUBPROCESS(2) func (const NORMAL_BSM (*))&ast_a_target_prev[i], 
[57] SUBSUBPROCESS(2) func &ast_a_target_current[*ps4_a_target_num_current] 
[58] SUBSUBPROCESS(2) func<end> ); 
[59] SUBSUBPROCESS(2) if <start> if ( 
[60] SUBSUBPROCESS(2) ??? ((fl_abs((FL 
[61] SUBSUBPROCESS(2) ??? ) 
[62] SUBSUBPROCESS(2) ??? ||   ( 
[63] SUBSUBPROCESS(2) ??? fl_abs((FL 
[64] SUBSUBPROCESS(2) ??? ) 
[65] SUBSUBPROCESS(2) ??? &&  ( 
[66] SUBSUBPROCESS(2) ??? fl_abs((FL 
[67] SUBSUBPROCESS(2) ??? ) 
[68] SUBSUBPROCESS(2) ??? - ( 
[69] SUBSUBPROCESS(2) ??? 180.0F - st_g_bsm_loop_data.afl_installed_angle[0] 
[70] SUBSUBPROCESS(2) ??? ) 
[71] SUBSUBPROCESS(2) ??? &&  ( 
[72] SUBSUBPROCESS(2) ??? fl_abs((FL 
[73] SUBSUBPROCESS(2) ??? ) 
[74] SUBSUBPROCESS(2) ??? - ( 
[75] SUBSUBPROCESS(2) ??? 180.0F - st_g_bsm_loop_data.afl_installed_angle[0] 
[76] SUBSUBPROCESS(2) ??? ) 
[77] SUBSUBPROCESS(2) ??? &&  ( 
[78] SUBSUBPROCESS(2) ??? ast_a_target_current[*ps4_a_target_num_current].fl_power_up > WALL_OBJECT_POW_TH 
[79] SUBSUBPROCESS(2) ??? ) 
[80] SUBSUBPROCESS(2) ??? &&  ( 
[81] SUBSUBPROCESS(2) ??? ast_a_target_current[*ps4_a_target_num_current].fl_power_dn > WALL_OBJECT_POW_TH 
[82] SUBSUBPROCESS(2) ??? ) 
[83] SUBSUBPROCESS(2) ??? &&  ( 
[84] SUBSUBPROCESS(2) ??? !((ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_up 
[85] SUBSUBPROCESS(2) ??? ) 
[86] SUBSUBPROCESS(2) ??? &&     ( 
[87] SUBSUBPROCESS(2) ??? ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn 
[88] SUBSUBPROCESS(2) ??? ) 
[89] SUBSUBPROCESS(2) ??? &&     ( 
[90] SUBSUBPROCESS(2) ??? ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_music_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_up_music 
[91] SUBSUBPROCESS(2) ??? ) 
[92] SUBSUBPROCESS(2) ??? &&     ( 
[93] SUBSUBPROCESS(2) ??? ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_music_pred == ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn_music 
[94] SUBSUBPROCESS(2) ??? ) 
[95] SUBSUBPROCESS(2) ??? &&  ( 
[96] SUBSUBPROCESS(2) ??? (afl_g_cvw_lfm_ftt_power[0][ast_a_target_current[*ps4_a_target_num_current].s4_bin_up] 
[97] SUBSUBPROCESS(2) ??? - ast_a_target_current[*ps4_a_target_num_current].fl_power_up_music) > 0.0F) 
[98] SUBSUBPROCESS(2) ??? &&  ( 
[99] SUBSUBPROCESS(2) ??? (afl_g_cvw_lfm_ftt_power[1][ast_a_target_current[*ps4_a_target_num_current].s4_bin_dn] 
[100] SUBSUBPROCESS(2) ??? - ast_a_target_current[*ps4_a_target_num_current].fl_power_dn_music) > 0.0F)) 
[101] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[102] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(2) 
[103] SUBSUBPROCESS(2) equal as4_t_used_ID[ast_a_target_prev[i].s4_ID_num-1] 1;
[104] SUBSUBPROCESS(2) equal ast_a_target_prev[i].s4_flg_used 1;
[105] SUBSUBSUBPROCESS(2) proc ast_a_target_current[*ps4_a_target_num_current].s4_flg_lost++; 
----------------- Total Codes : 105 lines
--------------------------
[Function Name] : fn_bsm_sel_add_target 
-Return type : static VD 
-Argument : 5 
     [0] : S4   s4_a_pair_num_current 
     [1] : NORMAL_BSM   ast_a_normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   *ps4_a_target_num_current 
     [3] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
     [4] : S4   as4_t_used_ID[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc S4 j; 
[3] MAINPROCESS equal S4 tmp_connect_th CANOUT_TRK_MIN;
[4] MAINPROCESS proc FL tmp_r_max; 
[5] MAINPROCESS proc S4 index; 
[6] MAINPROCESS for<start> for( 
[7] MAINPROCESS for i = 0; 
[8] MAINPROCESS for i < s4_a_pair_num_current; 
[9] MAINPROCESS for i++ 
[10] MAINPROCESS for ) 
[11] MAINPROCESS subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal tmp_connect_th CANOUT_TRK_MIN;
[13] SUBPROCESS(1) if <start> if ( 
[14] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) if  &&  ( 
[17] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Vyfil < 0.0F 
[18] SUBPROCESS(1) if  ) 
[19] SUBPROCESS(1) if  &&  ( 
[20] SUBPROCESS(1) if  fl_g_v_self_bsm_for_base < CANOUT_VSELF_SLOW 
[21] SUBPROCESS(1) if  ) 
[22] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[23] SUBPROCESS(1) if <start> if ( 
[24] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) if  &&  ( 
[27] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_2F 
[28] SUBPROCESS(1) if  ) 
[29] SUBPROCESS(1) if  &&  ( 
[30] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Ryfil > (CFL_ALARM_Y_BACKWARD + 3.0F 
[31] SUBPROCESS(1) if  ) 
[32] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[33] SUBPROCESS(1) if <start> if ( 
[34] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[35] SUBPROCESS(1) if  ) 
[36] SUBPROCESS(1) if  &&  ( 
[37] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_SOT 
[38] SUBPROCESS(1) if  ) 
[39] SUBPROCESS(1) if  &&  ( 
[40] SUBPROCESS(1) if  ast_a_normal_current[i].fl_Rxfil < st_g_bsm_loop_data.afl_wall_width[0] 
[41] SUBPROCESS(1) if  ) 
[42] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[43] SUBPROCESS(1) if <start> if ( 
[44] SUBPROCESS(1) if  (ast_a_normal_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[45] SUBPROCESS(1) if  ) 
[46] SUBPROCESS(1) if  &&  ( 
[47] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_used == 0 
[48] SUBPROCESS(1) if  ) 
[49] SUBPROCESS(1) if  &&  ( 
[50] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_stop == 0 
[51] SUBPROCESS(1) if  ) 
[52] SUBPROCESS(1) if  &&  ( 
[53] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_track > tmp_connect_th 
[54] SUBPROCESS(1) if  ) 
[55] SUBPROCESS(1) if  &&  ( 
[56] SUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_lost == 0 
[57] SUBPROCESS(1) if  ) 
[58] SUBPROCESS(1) if  &&  ( 
[59] SUBPROCESS(1) if  (S4 
[60] SUBPROCESS(1) if  ) 
[61] SUBPROCESS(1) if  &&  ( 
[62] SUBPROCESS(1) if  fl_abs(fl_g_v_self_bsm_for_base 
[63] SUBPROCESS(1) if  ) 
[64] SUBPROCESS(1) subproc SUBSUBPROCESS(4) 
[65] MAINPROCESS ??? return; 
[66] SUBSUBPROCESS(1) equal tmp_connect_th CANOUT_TRK_MIN_SLOW;
[67] SUBSUBPROCESS(2) equal tmp_connect_th CANOUT_TRK_MIN_2FCW;
[68] SUBSUBPROCESS(3) equal tmp_connect_th CANOUT_TRK_MIN_SOT;
[69] SUBSUBPROCESS(4) if <start> if ( 
[70] SUBSUBPROCESS(4) if  (*ps4_a_target_num_current 
[71] SUBSUBPROCESS(4) if  ) 
[72] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[73] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(2) 
[74] SUBSUBSUBPROCESS(1) equal ast_a_normal_current[i].s4_flg_used 1;
[75] SUBSUBSUBPROCESS(1) predict_object_trajectory_simple<start> predict_object_trajectory_simple( 
[76] SUBSUBSUBPROCESS(1) predict_object_trajectory_simple &ast_a_target_current[( 
[77] SUBSUBSUBPROCESS(1) predict_object_trajectory_simple *ps4_a_target_num_current)], 
[78] SUBSUBSUBPROCESS(1) predict_object_trajectory_simple 1 
[79] SUBSUBSUBPROCESS(1) predict_object_trajectory_simple ) 
[80] SUBSUBSUBPROCESS(1) if <start> if ( 
[81] SUBSUBSUBPROCESS(1) if  (ast_a_normal_current[i].s4_flg_heiso_up != 0 
[82] SUBSUBSUBPROCESS(1) if  ) 
[83] SUBSUBSUBPROCESS(1) if  &&  ( 
[84] SUBSUBSUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_heiso_dn != 0 
[85] SUBSUBSUBPROCESS(1) if  ) 
[86] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[87] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[88] SUBSUBSUBPROCESS(1) if <start> if ( 
[89] SUBSUBSUBPROCESS(1) if  ((S2 
[90] SUBSUBSUBPROCESS(1) if  ) 
[91] SUBSUBSUBPROCESS(1) if  &&  ( 
[92] SUBSUBSUBPROCESS(1) if  ast_a_normal_current[i].s4_flg_dc == OBJECT_TYPE_2F 
[93] SUBSUBSUBPROCESS(1) if  ) 
[94] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(3) 
[95] SUBSUBSUBPROCESS(1) ??? if ( 
[96] SUBSUBSUBPROCESS(1) ??? (ast_a_normal_current[i].s4_flg_heiso_up != 0 
[97] SUBSUBSUBPROCESS(1) ??? ) 
[98] SUBSUBSUBPROCESS(1) ??? &&  ( 
[99] SUBSUBSUBPROCESS(1) ??? ast_a_normal_current[i].s4_flg_heiso_dn != 0 
[100] SUBSUBSUBPROCESS(1) ??? ) 
[101] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(4) 
[102] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(5) 
[103] SUBSUBSUBPROCESS(1) for <start> for ( 
[104] SUBSUBSUBPROCESS(1) for  j = 0; 
[105] SUBSUBSUBPROCESS(1) for  j < TARGET_BUFFSIZE; 
[106] SUBSUBSUBPROCESS(1) for  j++ 
[107] SUBSUBSUBPROCESS(1) for  ) 
[108] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(6) 
[109] SUBSUBSUBPROCESS(2) equal tmp_r_max 0.0F;
[110] SUBSUBSUBPROCESS(2) equal index -1;
[111] SUBSUBSUBPROCESS(2) func<start> for (j = 0; 
[112] SUBSUBSUBPROCESS(2) func j < (*ps4_a_target_num_current 
[113] SUBSUBSUBPROCESS(2) func ) 
[114] SUBSUBSUBPROCESS(2) func j++ 
[115] SUBSUBSUBPROCESS(2) func<end> ); 
[116] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[117] SUBSUBSUBPROCESS(2) if <start> if ( 
[118] SUBSUBSUBPROCESS(2) if  index != -1 
[119] SUBSUBSUBPROCESS(2) if  ) 
[120] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(2) 
[121] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[122] SUBSUBSUBSUBPROCESS(1) if  (fl_abs(ast_a_normal_current[i].fl_Robs 
[123] SUBSUBSUBSUBPROCESS(1) if  ) 
[124] SUBSUBSUBSUBPROCESS(1) if  &&  ( 
[125] SUBSUBSUBSUBPROCESS(1) if  tmp_r_max <  fl_abs(ast_a_target_current[j].fl_Robs 
[126] SUBSUBSUBSUBPROCESS(1) if  ) 
[127] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[128] SUBSUBSUBSUBPROCESS(2) equal as4_t_used_ID[ast_a_target_current[index].s4_ID_num-1] 0;
[129] SUBSUBSUBSUBPROCESS(2) func<start> fn_init(&ast_a_target_current[index], 1 
[130] SUBSUBSUBSUBPROCESS(2) func<end> ); 
[131] SUBSUBSUBSUBPROCESS(2) func<start> s4_trim_target(ast_a_target_current 
[132] SUBSUBSUBSUBPROCESS(2) func<end> ); 
[133] SUBSUBSUBSUBPROCESS(2) proc i--; 
[134] SUBSUBSUBSUBPROCESS(2) if <start> if ( 
[135] SUBSUBSUBSUBPROCESS(2) ??? i < -1 
[136] SUBSUBSUBSUBPROCESS(2) ??? ) 
[137] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[138] SUBSUBSUBSUBSUBPROCESS(1) equal i -1;
----------------- Total Codes : 138 lines
--------------------------
[Function Name] : fn_bsm_sel_exclude_target 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS func<start> fn_bsm_sel_extrgt_lot_exp( 
[2] MAINPROCESS func s4_a_target_num_current, 
[3] MAINPROCESS func ast_a_target_current 
[4] MAINPROCESS func<end> ); 
[5] MAINPROCESS func<start> fn_bsm_sel_extrgt_stationary( 
[6] MAINPROCESS func s4_a_target_num_current, 
[7] MAINPROCESS func ast_a_target_current 
[8] MAINPROCESS func<end> ); 
[9] MAINPROCESS func<start> fn_bsm_sel_extrgt_no_rel_spd( 
[10] MAINPROCESS func s4_a_target_num_current, 
[11] MAINPROCESS func ast_a_target_current 
[12] MAINPROCESS func<end> ); 
[13] MAINPROCESS func<start> fn_bsm_sel_extrgt_stag_just_beside( 
[14] MAINPROCESS func s4_a_target_num_current, 
[15] MAINPROCESS func ast_a_target_current 
[16] MAINPROCESS func<end> ); 
[17] MAINPROCESS func<start> fn_bsm_sel_extrgt_just_beside( 
[18] MAINPROCESS func s4_a_target_num_current, 
[19] MAINPROCESS func ast_a_target_current 
[20] MAINPROCESS func<end> ); 
[21] MAINPROCESS func<start> fn_bsm_sel_extrgt_around_beside( 
[22] MAINPROCESS func s4_a_target_num_current, 
[23] MAINPROCESS func ast_a_target_current 
[24] MAINPROCESS func<end> ); 
[25] MAINPROCESS func<start> fn_bsm_sel_extrgt_opst_sns_area( 
[26] MAINPROCESS func s4_a_target_num_current, 
[27] MAINPROCESS func ast_a_target_current 
[28] MAINPROCESS func<end> ); 
[29] MAINPROCESS func<start> fn_bsm_sel_extrgt_around_mycar( 
[30] MAINPROCESS func s4_a_target_num_current, 
[31] MAINPROCESS func ast_a_target_current 
[32] MAINPROCESS func<end> ); 
[33] MAINPROCESS func<start> fn_bsm_sel_extrgt_outside_load( 
[34] MAINPROCESS func s4_a_target_num_current, 
[35] MAINPROCESS func ast_a_target_current 
[36] MAINPROCESS func<end> ); 
[37] MAINPROCESS proc return; 
----------------- Total Codes : 37 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_lot_exp 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 tmp_lost_max TARGET_LOST_MAX;
[3] MAINPROCESS for <start> for ( 
[4] MAINPROCESS for  i = 0; 
[5] MAINPROCESS for  i < s4_a_target_num_current; 
[6] MAINPROCESS for  i++ 
[7] MAINPROCESS for  ) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if <start> if ( 
[10] SUBPROCESS(1) if  ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] MAINPROCESS proc return; 
[14] SUBSUBPROCESS(1) if <start> if ( 
[15] SUBSUBPROCESS(1) if  fl_abs(ast_a_target_current[i].fl_Rypred 
[16] SUBSUBPROCESS(1) if  ) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[19] SUBSUBPROCESS(1) if <start> if ( 
[20] SUBSUBPROCESS(1) ??? ast_a_target_current[i].s4_flg_lost > tmp_lost_max 
[21] SUBSUBPROCESS(1) ??? ) 
[22] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(3) 
[23] SUBSUBSUBPROCESS(1) equal tmp_lost_max TARGET_LOST_MAX_SIDE;
[24] SUBSUBSUBPROCESS(2) equal tmp_lost_max TARGET_LOST_MAX;
[25] SUBSUBSUBPROCESS(3) func<start> fn_init(&ast_a_target_current[i], 1 
[26] SUBSUBSUBPROCESS(3) func<end> ); 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_stationary 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal FL tmp_alarm_x_min ALARM_X_IN       + ALARM_X_OFFSET_IN;
[3] MAINPROCESS for <start> for ( 
[4] MAINPROCESS for  i = 0; 
[5] MAINPROCESS for  i < s4_a_target_num_current; 
[6] MAINPROCESS for  i++ 
[7] MAINPROCESS for  ) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if <start> if ( 
[10] SUBPROCESS(1) if  ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] MAINPROCESS proc return; 
[14] SUBSUBPROCESS(1) if <start> if ( 
[15] SUBSUBPROCESS(1) ??? ((ast_a_target_current[i].fl_Vyfil < ((-fl_g_v_self_bsm_for_base / 3.6F 
[16] SUBSUBPROCESS(1) ??? ) 
[17] SUBSUBPROCESS(1) ??? ||   ( 
[18] SUBSUBPROCESS(1) ??? ast_a_target_current[i].s4_flg_stop == 1 
[19] SUBSUBPROCESS(1) ??? ) 
[20] SUBSUBPROCESS(1) ??? &&  ( 
[21] SUBSUBPROCESS(1) ??? (ast_a_target_current[i].fl_Rxfil > tmp_alarm_x_min 
[22] SUBSUBPROCESS(1) ??? ) 
[23] SUBSUBPROCESS(1) ??? ||   ( 
[24] SUBSUBPROCESS(1) ??? ast_a_target_current[i].fl_Rxfil < st_g_bsm_loop_data.afl_wall_width[0] 
[25] SUBSUBPROCESS(1) ??? ) 
[26] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[27] SUBSUBSUBPROCESS(1) ??? fn_init(&ast_a_target_current[i], 1 
[28] SUBSUBSUBPROCESS(1) ??? ) 
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_no_rel_spd 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for <start> for ( 
[3] MAINPROCESS for  i = 0; 
[4] MAINPROCESS for  i < s4_a_target_num_current; 
[5] MAINPROCESS for  i++ 
[6] MAINPROCESS for  ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) if  &&  ( 
[12] SUBPROCESS(1) if  ast_a_target_current[i].s4_flg_track <= PRIOR_TRK_NUM 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] MAINPROCESS proc return; 
[16] SUBSUBPROCESS(1) if <start> if ( 
[17] SUBSUBPROCESS(1) ??? (st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[18] SUBSUBPROCESS(1) ??? ) 
[19] SUBSUBPROCESS(1) ??? &&  ( 
[20] SUBSUBPROCESS(1) ??? st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN 
[21] SUBSUBPROCESS(1) ??? ) 
[22] SUBSUBPROCESS(1) ??? &&  ( 
[23] SUBSUBPROCESS(1) ??? ast_a_target_current[i].fl_Vyfil == 0.0F 
[24] SUBSUBPROCESS(1) ??? ) 
[25] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[26] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[27] SUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 27 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_stag_just_beside 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for <start> for ( 
[3] MAINPROCESS for  i = 0; 
[4] MAINPROCESS for  i < s4_a_target_num_current; 
[5] MAINPROCESS for  i++ 
[6] MAINPROCESS for  ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) if  &&  ( 
[12] SUBPROCESS(1) if  ast_a_target_current[i].s4_flg_track <= PRIOR_TRK_NUM 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] MAINPROCESS proc return; 
[16] SUBSUBPROCESS(1) if <start> if ( 
[17] SUBSUBPROCESS(1) ??? (st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[18] SUBSUBPROCESS(1) ??? ) 
[19] SUBSUBPROCESS(1) ??? &&  ( 
[20] SUBSUBPROCESS(1) ??? st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN 
[21] SUBSUBPROCESS(1) ??? ) 
[22] SUBSUBPROCESS(1) ??? &&  ( 
[23] SUBSUBPROCESS(1) ??? fl_abs(ast_a_target_current[i].fl_Ryfil 
[24] SUBSUBPROCESS(1) ??? ) 
[25] SUBSUBPROCESS(1) ??? &&  ( 
[26] SUBSUBPROCESS(1) ??? fl_abs(ast_a_target_current[i].fl_Rypred 
[27] SUBSUBPROCESS(1) ??? ) 
[28] SUBSUBPROCESS(1) ??? &&  ( 
[29] SUBSUBPROCESS(1) ??? fl_abs(ast_a_target_current[i].fl_Vyfil 
[30] SUBSUBPROCESS(1) ??? ) 
[31] SUBSUBPROCESS(1) ??? &&  ( 
[32] SUBSUBPROCESS(1) ??? fl_abs(ast_a_target_current[i].fl_Vypred 
[33] SUBSUBPROCESS(1) ??? ) 
[34] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[35] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[36] SUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 36 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_just_beside 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for <start> for ( 
[3] MAINPROCESS for  i = 0; 
[4] MAINPROCESS for  i < s4_a_target_num_current; 
[5] MAINPROCESS for  i++ 
[6] MAINPROCESS for  ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) if  &&  ( 
[12] SUBPROCESS(1) if  ast_a_target_current[i].s4_flg_track <= PRIOR_TRK_NUM 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] MAINPROCESS proc return; 
[16] SUBSUBPROCESS(1) if <start> if ( 
[17] SUBSUBPROCESS(1) ??? (st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[18] SUBSUBPROCESS(1) ??? ) 
[19] SUBSUBPROCESS(1) ??? &&  ( 
[20] SUBSUBPROCESS(1) ??? st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN 
[21] SUBSUBPROCESS(1) ??? ) 
[22] SUBSUBPROCESS(1) ??? &&  ( 
[23] SUBSUBPROCESS(1) ??? ast_a_target_current[i].fl_Ryfil > RY_WALL_LIMIT 
[24] SUBSUBPROCESS(1) ??? ) 
[25] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[26] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[27] SUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 27 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_around_beside 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal FL min_x TH_TT_MAX;
[3] MAINPROCESS equal S4 min_index -1;
[4] MAINPROCESS equal S4 side_num 0;
[5] MAINPROCESS proc FL fl_t_rxfil_abs; 
[6] MAINPROCESS ??? FL fl_t_rxfil_diff_min_abs; 
[7] MAINPROCESS ??? for ( 
[8] MAINPROCESS ??? i = 0; 
[9] MAINPROCESS ??? i < s4_a_target_num_current; 
[10] MAINPROCESS ??? i++ 
[11] MAINPROCESS ??? ) 
[12] MAINPROCESS subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) ??? if ( 
[14] SUBPROCESS(1) ??? (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) ??? ) 
[16] SUBPROCESS(1) ??? &&  ( 
[17] SUBPROCESS(1) ??? fl_abs(ast_a_target_current[i].fl_Ryfil 
[18] SUBPROCESS(1) ??? ) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] MAINPROCESS ??? if ( 
[21] MAINPROCESS ??? side_num > 1 
[22] MAINPROCESS ??? ) 
[23] MAINPROCESS subproc SUBPROCESS(2) 
[24] SUBPROCESS(2) ??? for ( 
[25] SUBPROCESS(2) ??? i = 0; 
[26] SUBPROCESS(2) ??? i < s4_a_target_num_current; 
[27] SUBPROCESS(2) ??? i++ 
[28] SUBPROCESS(2) ??? ) 
[29] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[30] MAINPROCESS proc return; 
[31] SUBSUBPROCESS(1) func<start> fl_t_rxfil_abs = fl_abs(ast_a_target_current[i].fl_Ryfil 
[32] SUBSUBPROCESS(1) func<end> ); 
[33] SUBSUBPROCESS(1) func<start> fl_t_rxfil_diff_min_abs = fl_abs(ast_a_target_current[i].fl_Rxfil - ast_a_target_current[min_index].fl_Rxfil 
[34] SUBSUBPROCESS(1) func<end> ); 
[35] SUBSUBPROCESS(1) ??? if ( 
[36] SUBSUBPROCESS(1) ??? (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[37] SUBSUBPROCESS(1) ??? ) 
[38] SUBSUBPROCESS(1) ??? &&  ( 
[39] SUBSUBPROCESS(1) ??? fl_t_rxfil_abs < EKF_RY_SIDE 
[40] SUBSUBPROCESS(1) ??? ) 
[41] SUBSUBPROCESS(1) ??? &&  ( 
[42] SUBSUBPROCESS(1) ??? i != min_index 
[43] SUBSUBPROCESS(1) ??? ) 
[44] SUBSUBPROCESS(1) ??? &&  ( 
[45] SUBSUBPROCESS(1) ??? fl_t_rxfil_diff_min_abs > (FL 
[46] SUBSUBPROCESS(1) ??? ) 
[47] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[48] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[49] SUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 49 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_opst_sns_area 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for <start> for ( 
[3] MAINPROCESS for  i = 0; 
[4] MAINPROCESS for  i < s4_a_target_num_current; 
[5] MAINPROCESS for  i++ 
[6] MAINPROCESS for  ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] MAINPROCESS proc return; 
[13] SUBSUBPROCESS(1) if <start> if ( 
[14] SUBSUBPROCESS(1) ??? ast_a_target_current[i].fl_Rxfil <= (-st_g_bsm_loop_data.afl_installed_angle[1] - 1.5F 
[15] SUBSUBPROCESS(1) ??? ) 
[16] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[17] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[18] SUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 18 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_around_mycar 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for <start> for ( 
[3] MAINPROCESS for  i = 0; 
[4] MAINPROCESS for  i < s4_a_target_num_current; 
[5] MAINPROCESS for  i++ 
[6] MAINPROCESS for  ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] MAINPROCESS proc return; 
[13] SUBSUBPROCESS(1) if <start> if ( 
[14] SUBSUBPROCESS(1) ??? (ast_a_target_current[i].fl_Rxfil < RX_AROUND_TH_TT 
[15] SUBSUBPROCESS(1) ??? ) 
[16] SUBSUBPROCESS(1) ??? &&  ( 
[17] SUBSUBPROCESS(1) ??? ast_a_target_current[i].fl_Ryfil > RY_AROUND_TH_TT 
[18] SUBSUBPROCESS(1) ??? ) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_target_current[i], 1 
[21] SUBSUBSUBPROCESS(1) func<end> ); 
----------------- Total Codes : 21 lines
--------------------------
[Function Name] : fn_bsm_sel_extrgt_outside_load 
-Return type : static VD 
-Argument : 2 
     [0] : S4   s4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS equal S4 tmp_Rx_index 0;
[3] MAINPROCESS for <start> for ( 
[4] MAINPROCESS for  i = 0; 
[5] MAINPROCESS for  i < s4_a_target_num_current; 
[6] MAINPROCESS for  i++ 
[7] MAINPROCESS for  ) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if <start> if ( 
[10] SUBPROCESS(1) if  tmp_Rx_index < 0 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBPROCESS(1) if <start> if ( 
[14] SUBPROCESS(1) if  tmp_Rx_index > 69 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[17] SUBPROCESS(1) if <start> if ( 
[18] SUBPROCESS(1) if  (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[19] SUBPROCESS(1) if  ) 
[20] SUBPROCESS(1) if  &&  ( 
[21] SUBPROCESS(1) if  ast_a_target_current[i].fl_Rxfil >= fl_abs(st_g_bsm_loop_data.afl_Rx_right[tmp_Rx_index] - (FL 
[22] SUBPROCESS(1) if  ) 
[23] SUBPROCESS(1) if  &&  ( 
[24] SUBPROCESS(1) if  st_g_bsm_loop_data.as4_flg_leading[0] == 0 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) if  &&  ( 
[27] SUBPROCESS(1) if  st_g_bsm_loop_data.as4_flg_passing[0] < PASSING_COUNT_MIN 
[28] SUBPROCESS(1) if  ) 
[29] SUBPROCESS(1) subproc SUBSUBPROCESS(3) 
[30] SUBPROCESS(1) if <start> if ( 
[31] SUBPROCESS(1) ??? (ast_a_target_current[i].fl_Robs != CFL_UNKNOWN_VALUE 
[32] SUBPROCESS(1) ??? ) 
[33] SUBPROCESS(1) ??? &&  ( 
[34] SUBPROCESS(1) ??? st_g_bsm_loop_data.as4_flg_leading[0] == (S4 
[35] SUBPROCESS(1) ??? ) 
[36] SUBPROCESS(1) ??? &&  ( 
[37] SUBPROCESS(1) ??? st_g_bsm_loop_data.as4_slow_sot_find[0] == (S4 
[38] SUBPROCESS(1) ??? ) 
[39] SUBPROCESS(1) ??? &&  ( 
[40] SUBPROCESS(1) ??? st_g_bsm_loop_data.u1_wall_flg_for_fa_judgement == (U1 
[41] SUBPROCESS(1) ??? ) 
[42] SUBPROCESS(1) ??? &&  ( 
[43] SUBPROCESS(1) ??? st_g_bsm_loop_data.afl_wall_width[0] - ast_a_target_current[i].fl_Rxfil < (FL 
[44] SUBPROCESS(1) ??? ) 
[45] SUBPROCESS(1) subproc SUBSUBPROCESS(4) 
[46] MAINPROCESS ??? return; 
[47] SUBSUBPROCESS(1) equal tmp_Rx_index 0;
[48] SUBSUBPROCESS(2) equal tmp_Rx_index 69;
[49] SUBSUBPROCESS(3) ??? fn_init(&ast_a_target_current[i], 1 
[50] SUBSUBPROCESS(3) ??? ) 
[51] SUBSUBPROCESS(4) func<start> fn_init(&ast_a_target_current[i], (S4)1 
[52] SUBSUBPROCESS(4) func<end> ); 
----------------- Total Codes : 52 lines
--------------------------
[Function Name] : fn_bsm_sel_empty_buf_trgt_trimming 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_target_num_current 
     [1] : NORMAL_BSM   ast_a_target_current[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS proc S4 s2_t_in[TARGET_BUFFSIZE]; 
[2] MAINPROCESS proc S4 s2_t_loop; 
[3] MAINPROCESS proc S4 s2_t_num; 
[4] MAINPROCESS equal s2_t_num 0;
[5] MAINPROCESS for <start> for ( 
[6] MAINPROCESS for  s2_t_loop = 0; 
[7] MAINPROCESS for  s2_t_loop < TARGET_BUFFSIZE; 
[8] MAINPROCESS for  s2_t_loop++ 
[9] MAINPROCESS for  ) 
[10] MAINPROCESS subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) if <start> if ( 
[12] SUBPROCESS(1) if  ast_a_target_current[s2_t_loop].fl_Robs != CFL_UNKNOWN_VALUE 
[13] SUBPROCESS(1) if  ) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] MAINPROCESS equal *ps4_a_target_num_current s2_t_num;
[16] MAINPROCESS if <start> if ( 
[17] MAINPROCESS if  s2_t_num > 0 
[18] MAINPROCESS if  ) 
[19] MAINPROCESS subproc SUBPROCESS(2) 
[20] SUBPROCESS(2) for <start> for ( 
[21] SUBPROCESS(2) for  s2_t_loop = 0; 
[22] SUBPROCESS(2) for  s2_t_loop < s2_t_num; 
[23] SUBPROCESS(2) for  s2_t_loop++ 
[24] SUBPROCESS(2) for  ) 
[25] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[26] SUBPROCESS(2) for <start> for ( 
[27] SUBPROCESS(2) ??? s2_t_loop = s2_t_num; 
[28] SUBPROCESS(2) ??? s2_t_loop < TARGET_BUFFSIZE; 
[29] SUBPROCESS(2) ??? s2_t_loop++ 
[30] SUBPROCESS(2) ??? ) 
[31] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[32] MAINPROCESS proc return; 
[33] SUBSUBPROCESS(1) equal ast_a_target_current[s2_t_loop] ast_a_target_current[s2_t_in[s2_t_loop]];
[34] SUBSUBPROCESS(2) func<start> fn_init(&ast_a_target_current[s2_t_loop], 1 
[35] SUBSUBPROCESS(2) func<end> ); 
----------------- Total Codes : 35 lines
--------------------------
[Function Name] : fn_bsm_sel_target_marking 
-Return type : static VD 
-Argument : 1 
     [0] : (S4   s4_a_target_num_current 
----- Codes -----
[1] MAINPROCESS func<start> fn_bsm_sel_check_sot_target(s4_a_target_num_current, ast_a_target_current, u1_a_alarming_flag 
[2] MAINPROCESS func<end> ); 
[3] MAINPROCESS func<start> fn_bsm_sel_check_tos_target(s4_a_target_num_current, ast_a_target_current 
[4] MAINPROCESS func<end> ); 
[5] MAINPROCESS proc return; 
----------------- Total Codes : 5 lines
--------------------------
[Function Name] : fn_bsm_sel_check_sot_target 
-Return type : static VD 
-Argument : 1 
     [0] : (S4   s4_a_target_num_current 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_lp_trgt_num; 
[2] MAINPROCESS proc FL fl_t_cos; 
[3] MAINPROCESS proc FL fl_t_vy; 
[4] MAINPROCESS if <start> if ( 
[5] MAINPROCESS if  (st_g_bsm_loop_data.as4_fast_sot_flg[0] > (S4 
[6] MAINPROCESS if  ) 
[7] MAINPROCESS if  &&  ( 
[8] MAINPROCESS if  u1_a_alarming_flag == (U1 
[9] MAINPROCESS if  ) 
[10] MAINPROCESS subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) proc u1_t_lp_trgt_num < s4_a_target_num_current; 
[12] SUBPROCESS(1) func u1_t_lp_trgt_num++ 
[13] SUBPROCESS(1) func<end> ); 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] MAINPROCESS subproc SUBPROCESS(2) 
[16] SUBPROCESS(2) proc u1_t_lp_trgt_num < s4_a_target_num_current; 
[17] SUBPROCESS(2) func u1_t_lp_trgt_num++ 
[18] SUBPROCESS(2) func<end> ); 
[19] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[20] MAINPROCESS proc return; 
[21] SUBSUBPROCESS(1) if <start> if ( 
[22] SUBSUBPROCESS(1) if  (ast_a_target_current[u1_t_lp_trgt_num].s4_ID_num > (S4 
[23] SUBSUBPROCESS(1) if  ) 
[24] SUBSUBPROCESS(1) if  &&  ( 
[25] SUBSUBPROCESS(1) if  ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_sot_cut > (S4 
[26] SUBSUBPROCESS(1) if  ) 
[27] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBPROCESS(1) func<start> fl_t_cos = fl_cos((FL)0.5F * (ast_a_target_current[u1_t_lp_trgt_num].fl_theta_up + ast_a_target_current[u1_t_lp_trgt_num].fl_theta_dn) 
[29] SUBSUBSUBPROCESS(1) func<end> ); 
[30] SUBSUBSUBPROCESS(1) if <start> if ( 
[31] SUBSUBSUBPROCESS(1) if  fl_abs(fl_t_cos 
[32] SUBSUBSUBPROCESS(1) if  ) 
[33] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[34] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[35] SUBSUBSUBPROCESS(1) if <start> if ( 
[36] SUBSUBSUBPROCESS(1) ??? (ast_a_target_current[u1_t_lp_trgt_num].fl_Ryfil >= (FL 
[37] SUBSUBSUBPROCESS(1) ??? ) 
[38] SUBSUBSUBPROCESS(1) ??? ||  ( 
[39] SUBSUBSUBPROCESS(1) ??? fl_t_vy > (FL 
[40] SUBSUBSUBPROCESS(1) ??? ) 
[41] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(3) 
[42] SUBSUBSUBSUBPROCESS(1) equal fl_t_vy ast_a_target_current[u1_t_lp_trgt_num].fl_Vobs / fl_t_cos;
[43] SUBSUBSUBSUBPROCESS(2) equal fl_t_vy ast_a_target_current[u1_t_lp_trgt_num].fl_Vobs;
----------------- Total Codes : 43 lines
--------------------------
[Function Name] : fn_bsm_sel_check_tos_target 
-Return type : static VD 
-Argument : 1 
     [0] : (S4   s4_a_target_num_current 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_lp_trgt_num; 
[2] MAINPROCESS proc u1_t_lp_trgt_num < s4_a_target_num_current; 
[3] MAINPROCESS func u1_t_lp_trgt_num++ 
[4] MAINPROCESS func<end> ); 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) if <start> if ( 
[7] SUBPROCESS(1) if  ast_a_target_current[u1_t_lp_trgt_num].s4_ID_num > (S4 
[8] SUBPROCESS(1) if  ) 
[9] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[10] MAINPROCESS proc return; 
[11] SUBSUBPROCESS(1) if <start> if ( 
[12] SUBSUBPROCESS(1) if  ast_a_target_current[u1_t_lp_trgt_num].fl_Ryfil < (CFL_ALARM_Y_BACKWARD - ALARM_Y_OFFSET 
[13] SUBSUBPROCESS(1) if  ) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) if <start> if ( 
[16] SUBSUBSUBPROCESS(1) if  ast_a_target_current[u1_t_lp_trgt_num].fl_Vyfil > (FL 
[17] SUBSUBSUBPROCESS(1) if  ) 
[18] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(2) 
[20] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(3) 
[21] SUBSUBSUBPROCESS(1) if <start> if ( 
[22] SUBSUBSUBPROCESS(1) if  ast_a_target_current[u1_t_lp_trgt_num].s4_ctr_tos > (S4 
[23] SUBSUBSUBPROCESS(1) ??? ) 
[24] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(4) 
[25] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(5) 
[26] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(6) 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : cluster_target 
-Return type : S4 
-Argument : 3 
     [0] : S4   target_num 
     [1] : NORMAL_BSM*   target 
     [2] : S4*   used_ID 
----- Codes -----
[1] MAINPROCESS equal S4 iret 0;
[2] MAINPROCESS proc S4 i, j; 
[3] MAINPROCESS equal S4 tmp_index_valid -1;
[4] MAINPROCESS equal S4 tmp_index_invalid -1;
[5] MAINPROCESS proc NORMAL_BSM tmp_target_buf[TARGET_BUFFSIZE]; 
[6] MAINPROCESS for<start> for( 
[7] MAINPROCESS for i=0; 
[8] MAINPROCESS for i<TARGET_BUFFSIZE; 
[9] MAINPROCESS for i++ 
[10] MAINPROCESS for ) 
[11] MAINPROCESS subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) func<start> fn_init(&tmp_target_buf[i], 1 
[13] SUBPROCESS(1) func<end> ); 
[14] MAINPROCESS for<start> for( 
[15] MAINPROCESS for i=0; 
[16] MAINPROCESS for i<target_num; 
[17] MAINPROCESS for i++ 
[18] MAINPROCESS for ) 
[19] MAINPROCESS subproc SUBPROCESS(2) 
[20] SUBPROCESS(2) equal tmp_target_buf[i] target[i];
[21] MAINPROCESS for<start> for( 
[22] MAINPROCESS for i=0; 
[23] MAINPROCESS for i<target_num; 
[24] MAINPROCESS for i++ 
[25] MAINPROCESS for ) 
[26] MAINPROCESS subproc SUBPROCESS(3) 
[27] SUBPROCESS(3) for<start> for( 
[28] SUBPROCESS(3) for j=0; 
[29] SUBPROCESS(3) for j<target_num; 
[30] SUBPROCESS(3) for j++ 
[31] SUBPROCESS(3) for ) 
[32] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[33] MAINPROCESS for<start> for( 
[34] MAINPROCESS for i=0; 
[35] MAINPROCESS for i<TARGET_BUFFSIZE; 
[36] MAINPROCESS for i++ 
[37] MAINPROCESS for ) 
[38] MAINPROCESS subproc SUBPROCESS(4) 
[39] SUBPROCESS(4) func<start> fn_init(&target[i], 1 
[40] SUBPROCESS(4) func<end> ); 
[41] SUBPROCESS(4) if<start> if( 
[42] SUBPROCESS(4) ??? tmp_target_buf[i].fl_Robs != CFL_UNKNOWN_VALUE 
[43] SUBPROCESS(4) ??? ) 
[44] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[45] MAINPROCESS proc return iret; 
[46] SUBSUBPROCESS(1) equal target[iret] tmp_target_buf[i];
[47] SUBSUBPROCESS(1) proc iret++; 
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : s4_start_prediction 
-Return type : S4 
-Argument : 5 
     [0] : NORMAL_BSM*   pst_a_normal_current 
     [1] : S4   s4_a_pair_num_current 
     [2] : S4   s4_a_size 
     [3] : const S4   as4_a_flg_passing[1] 
     [4] : const S4   as4_a_flg_leading[1] 
----- Codes -----
[1] MAINPROCESS equal S4 s4_t_iRet 0;
[2] MAINPROCESS proc S4 s4_t_lp_i; 
[3] MAINPROCESS equal S4 s4_t_new_num 0;
[4] MAINPROCESS equal S4 s4_t_tmp_Rx_index 0;
[5] MAINPROCESS proc S4 s4_t_erased; 
[6] MAINPROCESS equal S4 s4_t_tmp_erased_num 0;
[7] MAINPROCESS proc S4 as4_t_in[NORMAL_BUFFSIZE]; 
[8] MAINPROCESS proc S4 s4_t_loop; 
[9] MAINPROCESS proc S4 s4_t_num; 
[10] MAINPROCESS proc FL fl_t_Ryobs_abs; 
[11] MAINPROCESS proc U1 u1_t_jdg_c5_flg; 
[12] MAINPROCESS proc U1 u1_t_jdg_c6_flg; 
[13] MAINPROCESS equal u1_t_jdg_c5_flg CU1_DF_OFF;
[14] MAINPROCESS equal u1_t_jdg_c6_flg CU1_DF_OFF;
[15] MAINPROCESS for <start> for ( 
[16] MAINPROCESS for  s4_t_lp_i = 0; 
[17] MAINPROCESS for  s4_t_lp_i < s4_a_pair_num_current; 
[18] MAINPROCESS for  s4_t_lp_i++ 
[19] MAINPROCESS for  ) 
[20] MAINPROCESS subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal s4_t_erased 0;
[22] SUBPROCESS(1) if <start> if ( 
[23] SUBPROCESS(1) if  ( 
[24] SUBPROCESS(1) if  pst_a_normal_current[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) if  && ( 
[27] SUBPROCESS(1) if  pst_a_normal_current[s4_t_lp_i].s4_tracked == 0 
[28] SUBPROCESS(1) if  ) 
[29] SUBPROCESS(1) if  && ( 
[30] SUBPROCESS(1) if  pst_a_normal_current[s4_t_lp_i].s4_flg_track == 0 
[31] SUBPROCESS(1) if  ) 
[32] SUBPROCESS(1) if  ) 
[33] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[34] MAINPROCESS equal s4_t_num 0;
[35] MAINPROCESS for <start> for ( 
[36] MAINPROCESS for  s4_t_loop = 0; 
[37] MAINPROCESS for  s4_t_loop < s4_a_size; 
[38] MAINPROCESS for  s4_t_loop++ 
[39] MAINPROCESS for  ) 
[40] MAINPROCESS subproc SUBPROCESS(2) 
[41] SUBPROCESS(2) if <start> if ( 
[42] SUBPROCESS(2) if  pst_a_normal_current[s4_t_loop].fl_Robs != CFL_UNKNOWN_VALUE 
[43] SUBPROCESS(2) if  ) 
[44] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[45] MAINPROCESS if <start> if ( 
[46] MAINPROCESS if  s4_t_num > 0 
[47] MAINPROCESS if  ) 
[48] MAINPROCESS subproc SUBPROCESS(3) 
[49] SUBPROCESS(3) for <start> for ( 
[50] SUBPROCESS(3) for  s4_t_loop = 0; 
[51] SUBPROCESS(3) for  s4_t_loop < s4_t_num; 
[52] SUBPROCESS(3) for  s4_t_loop++ 
[53] SUBPROCESS(3) for  ) 
[54] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[55] SUBPROCESS(3) for <start> for ( 
[56] SUBPROCESS(3) ??? s4_t_loop = s4_t_num; 
[57] SUBPROCESS(3) ??? s4_t_loop < s4_a_size; 
[58] SUBPROCESS(3) ??? s4_t_loop++ 
[59] SUBPROCESS(3) ??? ) 
[60] SUBPROCESS(3) subproc SUBSUBPROCESS(2) 
[61] MAINPROCESS equal s4_t_iRet s4_t_tmp_erased_num;
[62] MAINPROCESS func<start> return (s4_t_iRet 
[63] MAINPROCESS func<end> ); 
[64] SUBSUBPROCESS(1) equal pst_a_normal_current[s4_t_loop] pst_a_normal_current[as4_t_in[s4_t_loop]];
[65] SUBSUBPROCESS(2) func<start> fn_init(&pst_a_normal_current[s4_t_loop], 1 
[66] SUBSUBPROCESS(2) func<end> ); 
----------------- Total Codes : 66 lines
--------------------------
[Function Name] : u1_start_prediction_c5 
-Return type : static U1 
-Argument : 1 
     [0] : (S4   s4_a_slow_sot_doa_diff_sum4 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_c5_flag; 
[2] MAINPROCESS equal u1_t_jdg_c5_flag CU1_FALSE;
[3] MAINPROCESS if <start> if ( 
[4] MAINPROCESS ??? s4_a_slow_sot_doa_diff_sum4 < (S4 
[5] MAINPROCESS ??? ) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_c5_flag CU1_TRUE;
[8] MAINPROCESS subproc SUBPROCESS(2) 
[9] SUBPROCESS(2) equal u1_t_jdg_c5_flag CU1_FALSE;
[10] MAINPROCESS proc return u1_t_jdg_c5_flag; 
[11] MAINPROCESS equal u1_t_jdg_c5_flag CU1_FALSE;
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : u1_start_prediction_c6 
-Return type : static U1 
-Argument : 1 
     [0] : (S4   s4_a_slow_sot_doa_diff_sum5 
----- Codes -----
[1] MAINPROCESS proc U1 u1_t_jdg_c6_flag; 
[2] MAINPROCESS equal u1_t_jdg_c6_flag CU1_FALSE;
[3] MAINPROCESS if <start> if ( 
[4] MAINPROCESS ??? s4_a_slow_sot_doa_diff_sum5 < (S4 
[5] MAINPROCESS ??? ) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_c6_flag CU1_TRUE;
[8] MAINPROCESS subproc SUBPROCESS(2) 
[9] SUBPROCESS(2) equal u1_t_jdg_c6_flag CU1_FALSE;
[10] MAINPROCESS proc return u1_t_jdg_c6_flag; 
[11] MAINPROCESS equal u1_t_jdg_c6_flag CU1_FALSE;
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : s4_copy_prediction_to_filtered_data 
-Return type : S4 
-Argument : 2 
     [0] : NORMAL_BSM   *pst_a_normal 
     [1] : S4   s4_a_size 
----- Codes -----
[1] MAINPROCESS proc S4 s4_t_lp_i; 
[2] MAINPROCESS equal S4 s4_t_object_num 0;
[3] MAINPROCESS proc NORMAL_BSM ast_t_buf_normal[NORMAL_BUFFSIZE]; 
[4] MAINPROCESS func<start> fn_init(ast_t_buf_normal, NORMAL_BUFFSIZE 
[5] MAINPROCESS func<end> ); 
[6] MAINPROCESS for <start> for ( 
[7] MAINPROCESS for  s4_t_lp_i = 0; 
[8] MAINPROCESS for  s4_t_lp_i < s4_a_size; 
[9] MAINPROCESS for  s4_t_lp_i++ 
[10] MAINPROCESS for  ) 
[11] MAINPROCESS subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if <start> if ( 
[13] SUBPROCESS(1) if  ( 
[14] SUBPROCESS(1) if  pst_a_normal[s4_t_lp_i].fl_Rxobs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) if  && ( 
[17] SUBPROCESS(1) if  pst_a_normal[s4_t_lp_i].fl_Ryobs != CFL_UNKNOWN_VALUE 
[18] SUBPROCESS(1) if  ) 
[19] SUBPROCESS(1) if  && ( 
[20] SUBPROCESS(1) if  pst_a_normal[s4_t_lp_i].fl_Rxpred != CFL_UNKNOWN_VALUE 
[21] SUBPROCESS(1) if  ) 
[22] SUBPROCESS(1) if  && ( 
[23] SUBPROCESS(1) if  pst_a_normal[s4_t_lp_i].fl_Rypred != CFL_UNKNOWN_VALUE 
[24] SUBPROCESS(1) if  ) 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(2) 
[28] MAINPROCESS equal s4_t_object_num 0;
[29] MAINPROCESS for <start> for ( 
[30] MAINPROCESS for  s4_t_lp_i = 0; 
[31] MAINPROCESS for  s4_t_lp_i < s4_a_size; 
[32] MAINPROCESS for  s4_t_lp_i++ 
[33] MAINPROCESS for  ) 
[34] MAINPROCESS subproc SUBPROCESS(2) 
[35] SUBPROCESS(2) if <start> if ( 
[36] SUBPROCESS(2) if  pst_a_normal[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[37] SUBPROCESS(2) if  ) 
[38] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[39] MAINPROCESS if <start> if ( 
[40] MAINPROCESS if  s4_t_object_num > 0 
[41] MAINPROCESS if  ) 
[42] MAINPROCESS subproc SUBPROCESS(3) 
[43] SUBPROCESS(3) for <start> for ( 
[44] SUBPROCESS(3) ??? s4_t_lp_i = 0; 
[45] SUBPROCESS(3) ??? s4_t_lp_i < s4_a_size; 
[46] SUBPROCESS(3) ??? s4_t_lp_i++ 
[47] SUBPROCESS(3) ??? ) 
[48] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[49] MAINPROCESS func<start> return (s4_t_object_num 
[50] MAINPROCESS func<end> ); 
[51] SUBSUBPROCESS(1) equal pst_a_normal[s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
----------------- Total Codes : 51 lines
--------------------------
[Function Name] : fn_calc_prediction_of_normaldata 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM*   pst_a_normal 
----- Codes -----
[1] MAINPROCESS ??? fn_transform_xy_to_polar( 
[2] MAINPROCESS ??? pst_a_normal[0].fl_Rxpred, 
[3] MAINPROCESS ??? pst_a_normal[0].fl_Rypred, 
[4] MAINPROCESS ??? &pst_a_normal[0].fl_Robs_pred, 
[5] MAINPROCESS ??? &pst_a_normal[0].fl_theta_up_pred 
[6] MAINPROCESS ??? ) 
[7] MAINPROCESS equal pst_a_normal[0].fl_theta_dn_pred pst_a_normal[0].fl_theta_up_pred;
[8] MAINPROCESS ??? fn_transform_vxvy_to_vr( 
[9] MAINPROCESS ??? pst_a_normal[0].fl_Vxpred, 
[10] MAINPROCESS ??? pst_a_normal[0].fl_Vypred, 
[11] MAINPROCESS ??? pst_a_normal[0].fl_theta_dn_pred, 
[12] MAINPROCESS ??? &pst_a_normal[0].fl_Vobs_pred 
[13] MAINPROCESS ??? ) 
[14] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[15] MAINPROCESS ??? pst_a_normal[0].fl_Robs_pred, 
[16] MAINPROCESS ??? pst_a_normal[0].fl_Vobs_pred, 
[17] MAINPROCESS ??? &pst_a_normal[0].s4_bin_up_pred, 
[18] MAINPROCESS ??? 0 
[19] MAINPROCESS ??? ) 
[20] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[21] MAINPROCESS ??? pst_a_normal[0].fl_Robs_pred, 
[22] MAINPROCESS ??? pst_a_normal[0].fl_Vobs_pred, 
[23] MAINPROCESS ??? &pst_a_normal[0].s4_bin_dn_pred, 
[24] MAINPROCESS ??? 1 
[25] MAINPROCESS ??? ) 
[26] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[27] MAINPROCESS ??? pst_a_normal[0].fl_Robs_pred, 
[28] MAINPROCESS ??? pst_a_normal[0].fl_Vobs_pred, 
[29] MAINPROCESS ??? &pst_a_normal[0].fl_bin_up_interpolate_pred, 
[30] MAINPROCESS ??? 0 
[31] MAINPROCESS ??? ) 
[32] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[33] MAINPROCESS ??? pst_a_normal[0].fl_Robs_pred, 
[34] MAINPROCESS ??? pst_a_normal[0].fl_Vobs_pred, 
[35] MAINPROCESS ??? &pst_a_normal[0].fl_bin_dn_interpolate_pred, 
[36] MAINPROCESS ??? 1 
[37] MAINPROCESS ??? ) 
[38] MAINPROCESS ??? fn_transform_rad_to_doabin( 
[39] MAINPROCESS ??? pst_a_normal[0].fl_theta_dn_pred, 
[40] MAINPROCESS ??? &pst_a_normal[0].s4_bin_up_music_pred 
[41] MAINPROCESS ??? ) 
[42] MAINPROCESS equal pst_a_normal[0].s4_bin_dn_music_pred pst_a_normal[0].s4_bin_up_music_pred;
[43] MAINPROCESS ??? fn_transform_rad_to_doabin_interpolate( 
[44] MAINPROCESS ??? pst_a_normal[0].fl_theta_up_pred, 
[45] MAINPROCESS ??? &pst_a_normal[0].fl_doa_up_interpolate_pred 
[46] MAINPROCESS ??? ) 
[47] MAINPROCESS equal pst_a_normal[0].fl_doa_dn_interpolate_pred pst_a_normal[0].fl_doa_up_interpolate_pred;
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fn_estimate_road_shape 
-Return type : VD 
-Argument : 1 
     [0] : FL   afl_a_Rx_right[70] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for<start> for( 
[3] MAINPROCESS ??? i = 0; 
[4] MAINPROCESS ??? i < 70; 
[5] MAINPROCESS ??? i++ 
[6] MAINPROCESS ??? ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
----------------- Total Codes : 7 lines
--------------------------
[Function Name] : fl_get_road_width 
-Return type : FL 
-Argument : 1 
     [0] : (S4   s4_a_curve_r 
----- Codes -----
[1] MAINPROCESS proc FL fl_t_fret; 
[2] MAINPROCESS equal FL fl_t_tmp_Ry fl_a_Ry;
[3] MAINPROCESS if <start> if ( 
[4] MAINPROCESS if  fl_t_tmp_Ry > (FL 
[5] MAINPROCESS if  ) 
[6] MAINPROCESS subproc SUBPROCESS(1) 
[7] MAINPROCESS if <start> if ( 
[8] MAINPROCESS ??? s4_a_curve_r == (S4 
[9] MAINPROCESS ??? ) 
[10] MAINPROCESS subproc SUBPROCESS(2) 
[11] MAINPROCESS subproc SUBPROCESS(3) 
[12] MAINPROCESS proc return fl_t_fret; 
----------------- Total Codes : 12 lines
--------------------------
[Function Name] : connect_previous_object 
-Return type : S4 
-Argument : 6 
     [0] : NORMAL_BSM   normal_prev[NORMAL_BUFFSIZE] 
     [1] : NORMAL_BSM   normal_current[NORMAL_BUFFSIZE] 
     [2] : S4   pair_num_current 
     [3] : S4*   pair_res_prev 
     [4] : S4*   pair_res_current 
     [5] : S4   size 
----- Codes -----
[1] MAINPROCESS equal S4 iRet 0;
[2] MAINPROCESS proc S4 i, j, k; 
[3] MAINPROCESS proc FL compare[NORMAL_BUFFSIZE][NORMAL_BUFFSIZE]; 
[4] MAINPROCESS proc FL min; 
[5] MAINPROCESS proc S4 found; 
[6] MAINPROCESS proc S4 tmp_pair_prev; 
[7] MAINPROCESS proc S4 tmp_pair_current; 
[8] MAINPROCESS equal FL rx_th RX_TH_NT;
[9] MAINPROCESS equal FL ry_th RY_TH_NT;
[10] MAINPROCESS equal FL vx_th VX_TH_NT;
[11] MAINPROCESS equal FL vy_th VY_TH_NT;
[12] MAINPROCESS for<start> for( 
[13] MAINPROCESS for i = 0; 
[14] MAINPROCESS for i < size; 
[15] MAINPROCESS for i++ 
[16] MAINPROCESS for ) 
[17] MAINPROCESS subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) equal normal_prev[i].s4_flg_used 0;
[19] SUBPROCESS(1) equal normal_current[i].s4_flg_used 0;
[20] MAINPROCESS for<start> for( 
[21] MAINPROCESS for i = 0; 
[22] MAINPROCESS for i < NORMAL_BUFFSIZE; 
[23] MAINPROCESS for i++ 
[24] MAINPROCESS for ) 
[25] MAINPROCESS subproc SUBPROCESS(2) 
[26] SUBPROCESS(2) for<start> for( 
[27] SUBPROCESS(2) for j = 0; 
[28] SUBPROCESS(2) for j < NORMAL_BUFFSIZE; 
[29] SUBPROCESS(2) for j++ 
[30] SUBPROCESS(2) for ) 
[31] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[32] MAINPROCESS for<start> for( 
[33] MAINPROCESS for i = 0; 
[34] MAINPROCESS for i < pair_num_current; 
[35] MAINPROCESS for i++ 
[36] MAINPROCESS for ) 
[37] MAINPROCESS subproc SUBPROCESS(3) 
[38] SUBPROCESS(3) for<start> for( 
[39] SUBPROCESS(3) for j = 0; 
[40] SUBPROCESS(3) for j < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[41] SUBPROCESS(3) for j++ 
[42] SUBPROCESS(3) for ) 
[43] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[44] MAINPROCESS equal iRet 0;
[45] MAINPROCESS for <start> for ( 
[46] MAINPROCESS for  k = 0; 
[47] MAINPROCESS for  k < pair_num_current; 
[48] MAINPROCESS for  k++ 
[49] MAINPROCESS for  ) 
[50] MAINPROCESS subproc SUBPROCESS(4) 
[51] SUBPROCESS(4) equal min 1000.0F;
[52] SUBPROCESS(4) equal found 0;
[53] SUBPROCESS(4) for <start> for ( 
[54] SUBPROCESS(4) for  i = 0; 
[55] SUBPROCESS(4) for  i < pair_num_current; 
[56] SUBPROCESS(4) for  i++ 
[57] SUBPROCESS(4) for  ) 
[58] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[59] SUBPROCESS(4) if<start> if( 
[60] SUBPROCESS(4) if found == 1 
[61] SUBPROCESS(4) if ) 
[62] SUBPROCESS(4) subproc SUBSUBPROCESS(2) 
[63] MAINPROCESS proc return iRet; 
[64] SUBSUBPROCESS(1) for <start> for ( 
[65] SUBSUBPROCESS(1) ??? j = 0; 
[66] SUBSUBPROCESS(1) ??? j < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[67] SUBSUBPROCESS(1) ??? j++ 
[68] SUBSUBPROCESS(1) ??? ) 
[69] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[70] SUBSUBPROCESS(2) proc iRet++; 
[71] SUBSUBPROCESS(2) equal normal_prev[tmp_pair_prev].s4_flg_used 1;
[72] SUBSUBPROCESS(2) equal normal_current[tmp_pair_current].s4_flg_used 1;
----------------- Total Codes : 72 lines
--------------------------
[Function Name] : predict_object_trajectory_simple 
-Return type : VD 
-Argument : 2 
     [0] : NORMAL_BSM*   normal_current 
     [1] : S4   pair_num 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for<start> for( 
[3] MAINPROCESS ??? i=0; 
[4] MAINPROCESS ??? i<pair_num; 
[5] MAINPROCESS ??? i++ 
[6] MAINPROCESS ??? ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal normal_current[i].fl_Vypred normal_current[i].fl_Vyobs;
[9] SUBPROCESS(1) equal normal_current[i].fl_Rypred normal_current[i].fl_Ryobs + normal_current[i].fl_Vyobs*CFL_SAMPLING_TIME;
[10] SUBPROCESS(1) equal normal_current[i].fl_Vxpred normal_current[i].fl_Vxobs;
[11] SUBPROCESS(1) equal normal_current[i].fl_Rxpred normal_current[i].fl_Rxobs + normal_current[i].fl_Vxobs*CFL_SAMPLING_TIME;
[12] SUBPROCESS(1) ??? fn_transform_xy_to_polar( 
[13] SUBPROCESS(1) ??? normal_current[i].fl_Rxpred, 
[14] SUBPROCESS(1) ??? normal_current[i].fl_Rypred, 
[15] SUBPROCESS(1) ??? &normal_current[i].fl_Robs_pred, 
[16] SUBPROCESS(1) ??? &normal_current[i].fl_theta_up_pred 
[17] SUBPROCESS(1) ??? ) 
[18] SUBPROCESS(1) equal normal_current[i].fl_theta_dn_pred normal_current[i].fl_theta_up_pred;
[19] SUBPROCESS(1) ??? fn_transform_vxvy_to_vr( 
[20] SUBPROCESS(1) ??? normal_current[i].fl_Vxpred, 
[21] SUBPROCESS(1) ??? normal_current[i].fl_Vypred, 
[22] SUBPROCESS(1) ??? normal_current[i].fl_theta_dn_pred, 
[23] SUBPROCESS(1) ??? &normal_current[i].fl_Vobs_pred 
[24] SUBPROCESS(1) ??? ) 
[25] SUBPROCESS(1) ??? fn_transform_rv_to_freqbin( 
[26] SUBPROCESS(1) ??? normal_current[i].fl_Robs_pred, 
[27] SUBPROCESS(1) ??? normal_current[i].fl_Vobs_pred, 
[28] SUBPROCESS(1) ??? &normal_current[i].s4_bin_up_pred, 
[29] SUBPROCESS(1) ??? 0 
[30] SUBPROCESS(1) ??? ) 
[31] SUBPROCESS(1) ??? fn_transform_rv_to_freqbin( 
[32] SUBPROCESS(1) ??? normal_current[i].fl_Robs_pred, 
[33] SUBPROCESS(1) ??? normal_current[i].fl_Vobs_pred, 
[34] SUBPROCESS(1) ??? &normal_current[i].s4_bin_dn_pred, 
[35] SUBPROCESS(1) ??? 1 
[36] SUBPROCESS(1) ??? ) 
[37] SUBPROCESS(1) ??? fn_transform_rv_to_freqbin_interpolate( 
[38] SUBPROCESS(1) ??? normal_current[i].fl_Robs_pred, 
[39] SUBPROCESS(1) ??? normal_current[i].fl_Vobs_pred, 
[40] SUBPROCESS(1) ??? &normal_current[i].fl_bin_up_interpolate_pred, 
[41] SUBPROCESS(1) ??? 0 
[42] SUBPROCESS(1) ??? ) 
[43] SUBPROCESS(1) ??? fn_transform_rv_to_freqbin_interpolate( 
[44] SUBPROCESS(1) ??? normal_current[i].fl_Robs_pred, 
[45] SUBPROCESS(1) ??? normal_current[i].fl_Vobs_pred, 
[46] SUBPROCESS(1) ??? &normal_current[i].fl_bin_dn_interpolate_pred, 
[47] SUBPROCESS(1) ??? 1 
[48] SUBPROCESS(1) ??? ) 
[49] SUBPROCESS(1) ??? fn_transform_rad_to_doabin( 
[50] SUBPROCESS(1) ??? normal_current[i].fl_theta_up_pred, 
[51] SUBPROCESS(1) ??? &normal_current[i].s4_bin_up_music_pred 
[52] SUBPROCESS(1) ??? ) 
[53] SUBPROCESS(1) equal normal_current[i].s4_bin_dn_music_pred normal_current[i].s4_bin_up_music_pred;
[54] SUBPROCESS(1) ??? fn_transform_rad_to_doabin_interpolate( 
[55] SUBPROCESS(1) ??? normal_current[i].fl_theta_up_pred, 
[56] SUBPROCESS(1) ??? &normal_current[i].fl_doa_up_interpolate_pred 
[57] SUBPROCESS(1) ??? ) 
[58] SUBPROCESS(1) equal normal_current[i].fl_doa_dn_interpolate_pred normal_current[i].fl_doa_up_interpolate_pred;
[59] SUBPROCESS(1) equal normal_current[i].fl_Rxfil normal_current[i].fl_Rxobs;
[60] SUBPROCESS(1) equal normal_current[i].fl_Ryfil normal_current[i].fl_Ryobs;
[61] SUBPROCESS(1) equal normal_current[i].fl_Vxfil normal_current[i].fl_Vxobs;
[62] SUBPROCESS(1) equal normal_current[i].fl_Vyfil normal_current[i].fl_Vyobs;
[63] MAINPROCESS proc return; 
[64] MAINPROCESS equal normal_current[i].fl_Vypred normal_current[i].fl_Vyobs;
[65] MAINPROCESS equal normal_current[i].fl_Rypred normal_current[i].fl_Ryobs + normal_current[i].fl_Vyobs*CFL_SAMPLING_TIME;
[66] MAINPROCESS equal normal_current[i].fl_Vxpred normal_current[i].fl_Vxobs;
[67] MAINPROCESS equal normal_current[i].fl_Rxpred normal_current[i].fl_Rxobs + normal_current[i].fl_Vxobs*CFL_SAMPLING_TIME;
[68] MAINPROCESS ??? fn_transform_xy_to_polar( 
[69] MAINPROCESS ??? normal_current[i].fl_Rxpred, 
[70] MAINPROCESS ??? normal_current[i].fl_Rypred, 
[71] MAINPROCESS ??? &normal_current[i].fl_Robs_pred, 
[72] MAINPROCESS ??? &normal_current[i].fl_theta_up_pred 
[73] MAINPROCESS ??? ) 
[74] MAINPROCESS equal normal_current[i].fl_theta_dn_pred normal_current[i].fl_theta_up_pred;
[75] MAINPROCESS ??? fn_transform_vxvy_to_vr( 
[76] MAINPROCESS ??? normal_current[i].fl_Vxpred, 
[77] MAINPROCESS ??? normal_current[i].fl_Vypred, 
[78] MAINPROCESS ??? normal_current[i].fl_theta_dn_pred, 
[79] MAINPROCESS ??? &normal_current[i].fl_Vobs_pred 
[80] MAINPROCESS ??? ) 
[81] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[82] MAINPROCESS ??? normal_current[i].fl_Robs_pred, 
[83] MAINPROCESS ??? normal_current[i].fl_Vobs_pred, 
[84] MAINPROCESS ??? &normal_current[i].s4_bin_up_pred, 
[85] MAINPROCESS ??? 0 
[86] MAINPROCESS ??? ) 
[87] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[88] MAINPROCESS ??? normal_current[i].fl_Robs_pred, 
[89] MAINPROCESS ??? normal_current[i].fl_Vobs_pred, 
[90] MAINPROCESS ??? &normal_current[i].s4_bin_dn_pred, 
[91] MAINPROCESS ??? 1 
[92] MAINPROCESS ??? ) 
[93] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[94] MAINPROCESS ??? normal_current[i].fl_Robs_pred, 
[95] MAINPROCESS ??? normal_current[i].fl_Vobs_pred, 
[96] MAINPROCESS ??? &normal_current[i].fl_bin_up_interpolate_pred, 
[97] MAINPROCESS ??? 0 
[98] MAINPROCESS ??? ) 
[99] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[100] MAINPROCESS ??? normal_current[i].fl_Robs_pred, 
[101] MAINPROCESS ??? normal_current[i].fl_Vobs_pred, 
[102] MAINPROCESS ??? &normal_current[i].fl_bin_dn_interpolate_pred, 
[103] MAINPROCESS ??? 1 
[104] MAINPROCESS ??? ) 
[105] MAINPROCESS ??? fn_transform_rad_to_doabin( 
[106] MAINPROCESS ??? normal_current[i].fl_theta_up_pred, 
[107] MAINPROCESS ??? &normal_current[i].s4_bin_up_music_pred 
[108] MAINPROCESS ??? ) 
[109] MAINPROCESS equal normal_current[i].s4_bin_dn_music_pred normal_current[i].s4_bin_up_music_pred;
[110] MAINPROCESS ??? fn_transform_rad_to_doabin_interpolate( 
[111] MAINPROCESS ??? normal_current[i].fl_theta_up_pred, 
[112] MAINPROCESS ??? &normal_current[i].fl_doa_up_interpolate_pred 
[113] MAINPROCESS ??? ) 
[114] MAINPROCESS equal normal_current[i].fl_doa_dn_interpolate_pred normal_current[i].fl_doa_up_interpolate_pred;
[115] MAINPROCESS equal normal_current[i].fl_Rxfil normal_current[i].fl_Rxobs;
[116] MAINPROCESS equal normal_current[i].fl_Ryfil normal_current[i].fl_Ryobs;
[117] MAINPROCESS equal normal_current[i].fl_Vxfil normal_current[i].fl_Vxobs;
[118] MAINPROCESS equal normal_current[i].fl_Vyfil normal_current[i].fl_Vyobs;
----------------- Total Codes : 118 lines
--------------------------
[Function Name] : prediction_with_connected_data 
-Return type : S4 
-Argument : 5 
     [0] : NORMAL_BSM*   normal_prev 
     [1] : NORMAL_BSM*   normal_current 
     [2] : const S4*   data_id_prev 
     [3] : const S4*   data_id_current 
     [4] : S4   paired_num 
----- Codes -----
[1] MAINPROCESS equal S4 iRet 0;
[2] MAINPROCESS proc S4 i; 
[3] MAINPROCESS equal S4 predict_num 0;
[4] MAINPROCESS proc S4 tmp_id_prev[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS proc S4 tmp_id_current[NORMAL_BUFFSIZE]; 
[6] MAINPROCESS for<start> for( 
[7] MAINPROCESS for i=0; 
[8] MAINPROCESS for i<paired_num; 
[9] MAINPROCESS for i++ 
[10] MAINPROCESS for ) 
[11] MAINPROCESS subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal tmp_id_prev[i] *data_id_prev;
[13] SUBPROCESS(1) equal tmp_id_current[i] *data_id_current;
[14] SUBPROCESS(1) proc data_id_prev++; 
[15] SUBPROCESS(1) proc data_id_current++; 
[16] SUBPROCESS(1) if <start> if ( 
[17] SUBPROCESS(1) if  (st_g_bsm_loop_data.u1_truck_flg != (U1 
[18] SUBPROCESS(1) if  ) 
[19] SUBPROCESS(1) if  &&  ( 
[20] SUBPROCESS(1) if  normal_current[tmp_id_current[i]].fl_Ryobs > CFL_TRUCK_RY_MIN 
[21] SUBPROCESS(1) if  ) 
[22] SUBPROCESS(1) if  &&  ( 
[23] SUBPROCESS(1) if  (normal_current[tmp_id_current[i]].fl_Rxobs - normal_prev[tmp_id_prev[i]].fl_Rxpred 
[24] SUBPROCESS(1) if  ) 
[25] SUBPROCESS(1) if  &&  ( 
[26] SUBPROCESS(1) if  normal_current[tmp_id_current[i]].fl_Rxobs > CFL_TRUCK_RX_MIN 
[27] SUBPROCESS(1) if  ) 
[28] SUBPROCESS(1) if  &&  ( 
[29] SUBPROCESS(1) if  normal_current[tmp_id_current[i]].fl_Rxobs < CFL_TRUCK_RX_MAX 
[30] SUBPROCESS(1) if  ) 
[31] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[32] MAINPROCESS for<start> for( 
[33] MAINPROCESS for i=0; 
[34] MAINPROCESS for i<paired_num; 
[35] MAINPROCESS for i++ 
[36] MAINPROCESS for ) 
[37] MAINPROCESS subproc SUBPROCESS(2) 
[38] SUBPROCESS(2) func<start> fn_ab_track( 
[39] SUBPROCESS(2) func &normal_prev[tmp_id_prev[i]], 
[40] SUBPROCESS(2) func &normal_current[tmp_id_current[i]], 
[41] SUBPROCESS(2) func 0 
[42] SUBPROCESS(2) func<end> ); 
[43] SUBPROCESS(2) func<start> calc_prediction_of_normaldata( 
[44] SUBPROCESS(2) func &normal_current[tmp_id_current[i]] 
[45] SUBPROCESS(2) func<end> ); 
[46] SUBPROCESS(2) if <start> if ( 
[47] SUBPROCESS(2) ??? normal_current[tmp_id_current[i]].s4_flg_track == CS4_S4MAX 
[48] SUBPROCESS(2) ??? ) 
[49] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[50] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[51] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_flg_lost 0;
[52] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_flg_new 0;
[53] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_tracked 1;
[54] SUBPROCESS(2) equal normal_prev[tmp_id_prev[i]].s4_tracked 1;
[55] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_ctr_sot_cut normal_prev[tmp_id_prev[i]].s4_ctr_sot_cut;
[56] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_flg_reliable normal_prev[tmp_id_prev[i]].s4_flg_reliable;
[57] SUBPROCESS(2) equal normal_current[tmp_id_current[i]].s4_ctr_tos normal_prev[tmp_id_prev[i]].s4_ctr_tos;
[58] SUBPROCESS(2) proc predict_num++; 
[59] MAINPROCESS equal iRet predict_num;
[60] MAINPROCESS proc return iRet; 
----------------- Total Codes : 60 lines
--------------------------
[Function Name] : prediction_without_connected_data 
-Return type : S4 
-Argument : 3 
     [0] : NORMAL_BSM*   normal_prev 
     [1] : NORMAL_BSM*   normal_current 
     [2] : S4   pair_num_current 
----- Codes -----
[1] MAINPROCESS equal S4 iRet 0;
[2] MAINPROCESS proc S4 i, j; 
[3] MAINPROCESS equal S4 lost_num 0;
[4] MAINPROCESS proc NORMAL_BSM tmptmp_normal_current[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS proc NORMAL_BSM tmp_normal_buff[NORMAL_BUFFSIZE]; 
[6] MAINPROCESS equal S4 tmp_connect_num EKF_CONNECT_NUM;
[7] MAINPROCESS equal S4 tmp_lost_max EKF_LOST_MAX;
[8] MAINPROCESS func<start> fn_init(tmptmp_normal_current,NORMAL_BUFFSIZE 
[9] MAINPROCESS func<end> ); 
[10] MAINPROCESS func<start> fn_init(tmp_normal_buff,NORMAL_BUFFSIZE 
[11] MAINPROCESS func<end> ); 
[12] MAINPROCESS for <start> for ( 
[13] MAINPROCESS for  i = 0; 
[14] MAINPROCESS for  i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[15] MAINPROCESS for  i++ 
[16] MAINPROCESS for  ) 
[17] MAINPROCESS subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) if <start> if ( 
[19] SUBPROCESS(1) if  (normal_prev[i].fl_Robs != CFL_UNKNOWN_VALUE 
[20] SUBPROCESS(1) if  ) 
[21] SUBPROCESS(1) if  &&  ( 
[22] SUBPROCESS(1) if  normal_prev[i].s4_tracked != 0 
[23] SUBPROCESS(1) if  ) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[25] MAINPROCESS for <start> for ( 
[26] MAINPROCESS for  i = 0; 
[27] MAINPROCESS for  i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[28] MAINPROCESS for  i++ 
[29] MAINPROCESS for  ) 
[30] MAINPROCESS subproc SUBPROCESS(2) 
[31] SUBPROCESS(2) if <start> if ( 
[32] SUBPROCESS(2) if  fl_abs(normal_prev[i].fl_Rypred 
[33] SUBPROCESS(2) if  ) 
[34] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[35] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[36] SUBPROCESS(2) subproc SUBSUBPROCESS(3) 
[37] SUBPROCESS(2) if <start> if ( 
[38] SUBPROCESS(2) if  fl_abs(normal_prev[i].fl_Robs - st_g_bsm_loop_data.afl_wall_width[0] 
[39] SUBPROCESS(2) if  ) 
[40] SUBPROCESS(2) subproc SUBSUBPROCESS(4) 
[41] SUBPROCESS(2) if <start> if ( 
[42] SUBPROCESS(2) if  st_g_bsm_loop_data.as4_fast_sot_flg[0] != (S4 
[43] SUBPROCESS(2) if  ) 
[44] SUBPROCESS(2) subproc SUBSUBPROCESS(5) 
[45] SUBPROCESS(2) if <start> if ( 
[46] SUBPROCESS(2) if  (normal_prev[i].fl_Robs != CFL_UNKNOWN_VALUE 
[47] SUBPROCESS(2) if  ) 
[48] SUBPROCESS(2) if  &&  ( 
[49] SUBPROCESS(2) if  normal_prev[i].s4_tracked == 0 
[50] SUBPROCESS(2) if  ) 
[51] SUBPROCESS(2) if  &&  ( 
[52] SUBPROCESS(2) if  normal_prev[i].s4_flg_track > tmp_connect_num 
[53] SUBPROCESS(2) if  ) 
[54] SUBPROCESS(2) if  &&  ( 
[55] SUBPROCESS(2) if  i < NORMAL_BUFFSIZE 
[56] SUBPROCESS(2) if  ) 
[57] SUBPROCESS(2) subproc SUBSUBPROCESS(6) 
[58] MAINPROCESS for <start> for ( 
[59] MAINPROCESS for  i = 0; 
[60] MAINPROCESS for  i < lost_num; 
[61] MAINPROCESS for  i++ 
[62] MAINPROCESS for  ) 
[63] MAINPROCESS subproc SUBPROCESS(3) 
[64] SUBPROCESS(3) if <start> if ( 
[65] SUBPROCESS(3) ??? (pair_num_current + i 
[66] SUBPROCESS(3) ??? ) 
[67] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[68] SUBPROCESS(3) subproc SUBSUBPROCESS(2) 
[69] MAINPROCESS equal iRet i;
[70] MAINPROCESS proc return iRet; 
[71] SUBSUBPROCESS(1) func<start> copy_normal_data( 
[72] SUBSUBPROCESS(1) func (const NORMAL_BSM (*))&tmptmp_normal_current[i], 
[73] SUBSUBPROCESS(1) func &normal_current[pair_num_current+i], 
[74] SUBSUBPROCESS(1) func 1 
[75] SUBSUBPROCESS(1) func<end> ); 
[76] SUBSUBPROCESS(2) proc break; 
----------------- Total Codes : 76 lines
--------------------------
[Function Name] : predict_target 
-Return type : VD 
-Argument : 2 
     [0] : const NORMAL_BSM   *target_prev 
     [1] : NORMAL_BSM   *target_current 
----- Codes -----
[1] MAINPROCESS equal target_current[0].s4_bin_up target_prev[0].s4_bin_up_pred;
[2] MAINPROCESS equal target_current[0].s4_bin_dn target_prev[0].s4_bin_dn_pred;
[3] MAINPROCESS equal target_current[0].fl_bin_up_interpolate target_prev[0].fl_bin_up_interpolate_pred;
[4] MAINPROCESS equal target_current[0].fl_bin_dn_interpolate target_prev[0].fl_bin_dn_interpolate_pred;
[5] MAINPROCESS equal target_current[0].s4_bin_up_music target_prev[0].s4_bin_up_music_pred;
[6] MAINPROCESS equal target_current[0].s4_bin_dn_music target_prev[0].s4_bin_dn_music_pred;
[7] MAINPROCESS equal target_current[0].fl_doa_up_interpolate target_prev[0].fl_doa_up_interpolate_pred;
[8] MAINPROCESS equal target_current[0].fl_doa_dn_interpolate target_prev[0].fl_doa_dn_interpolate_pred;
[9] MAINPROCESS equal target_current[0].fl_power_up target_prev[0].fl_power_up;
[10] MAINPROCESS equal target_current[0].fl_power_dn target_prev[0].fl_power_dn;
[11] MAINPROCESS equal target_current[0].fl_power_up_music target_prev[0].fl_power_up_music;
[12] MAINPROCESS equal target_current[0].fl_power_dn_music target_prev[0].fl_power_dn_music;
[13] MAINPROCESS equal target_current[0].fl_theta_up target_prev[0].fl_theta_up_pred;
[14] MAINPROCESS equal target_current[0].fl_theta_dn target_prev[0].fl_theta_dn_pred;
[15] MAINPROCESS equal target_current[0].fl_Robs target_prev[0].fl_Robs_pred;
[16] MAINPROCESS equal target_current[0].fl_Rxobs target_prev[0].fl_Rxpred;
[17] MAINPROCESS equal target_current[0].fl_Ryobs target_prev[0].fl_Rypred;
[18] MAINPROCESS equal target_current[0].fl_Vobs target_prev[0].fl_Vobs_pred;
[19] MAINPROCESS equal target_current[0].fl_Vxobs target_prev[0].fl_Vxpred;
[20] MAINPROCESS equal target_current[0].fl_Vyobs target_prev[0].fl_Vypred;
[21] MAINPROCESS equal target_current[0].fl_Rxfil target_prev[0].fl_Rxpred;
[22] MAINPROCESS equal target_current[0].fl_Ryfil target_prev[0].fl_Rypred;
[23] MAINPROCESS equal target_current[0].fl_Vxfil target_prev[0].fl_Vxpred;
[24] MAINPROCESS equal target_current[0].fl_Vyfil target_prev[0].fl_Vypred;
[25] MAINPROCESS equal target_current[0].fl_Axfil target_prev[0].fl_Axfil;
[26] MAINPROCESS equal target_current[0].fl_Ayfil target_prev[0].fl_Ayfil;
[27] MAINPROCESS equal target_current[0].s4_flg_stop target_prev[0].s4_flg_stop;
[28] MAINPROCESS equal target_current[0].s4_flg_track target_prev[0].s4_flg_track;
[29] MAINPROCESS equal target_current[0].s4_flg_lost target_prev[0].s4_flg_lost;
[30] MAINPROCESS equal target_current[0].s4_ID_num target_prev[0].s4_ID_num;
[31] MAINPROCESS equal target_current[0].s4_flg_single_peak_up target_prev[0].s4_flg_single_peak_up;
[32] MAINPROCESS equal target_current[0].u4_ctr_fa target_prev[0].u4_ctr_fa;
[33] MAINPROCESS equal target_current[0].s4_flg_reliable target_prev[0].s4_flg_reliable;
[34] MAINPROCESS equal target_current[0].s4_ctr_tos target_prev[0].s4_ctr_tos;
[35] MAINPROCESS equal target_current[0].s4_flg_heiso_up target_prev[0].s4_flg_heiso_up;
[36] MAINPROCESS equal target_current[0].s4_flg_heiso_dn target_prev[0].s4_flg_heiso_dn;
[37] MAINPROCESS equal target_current[0].s4_flg_dc target_prev[0].s4_flg_dc;
[38] MAINPROCESS equal target_current[0].s4_ctr_sot_cut target_prev[0].s4_ctr_sot_cut;
[39] MAINPROCESS equal target_current[0].s4_flg_reliable target_prev[0].s4_flg_reliable;
[40] MAINPROCESS equal target_current[0].s4_ctr_tos target_prev[0].s4_ctr_tos;
[41] MAINPROCESS func<start> fn_ab_track( 
[42] MAINPROCESS func &target_prev[0], 
[43] MAINPROCESS func &target_current[0], 
[44] MAINPROCESS func 1 
[45] MAINPROCESS func<end> ); 
[46] MAINPROCESS func<start> calc_prediction_of_normaldata( 
[47] MAINPROCESS func target_current 
[48] MAINPROCESS func<end> ); 
[49] MAINPROCESS if <start> if ( 
[50] MAINPROCESS ??? target_current[0].s4_flg_track == CS4_S4MAX 
[51] MAINPROCESS ??? ) 
[52] MAINPROCESS subproc SUBPROCESS(1) 
[53] MAINPROCESS subproc SUBPROCESS(2) 
[54] SUBPROCESS(2) proc target_current[0].s4_flg_track++; 
[55] MAINPROCESS equal target_current[0].s4_flg_new 0;
[56] MAINPROCESS equal target_current[0].s4_tracked 1;
[57] MAINPROCESS equal target_current[0].s4_flg_used 1;
[58] MAINPROCESS proc target_current[0].s4_flg_track++; 
----------------- Total Codes : 58 lines
--------------------------
[Function Name] : copy_normal_data 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM   *normal_in 
     [1] : NORMAL_BSM   *normal_out 
     [2] : S4   size 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS for<start> for( 
[3] MAINPROCESS ??? i=0; 
[4] MAINPROCESS ??? i<size; 
[5] MAINPROCESS ??? i++ 
[6] MAINPROCESS ??? ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal *normal_out *normal_in;
[9] SUBPROCESS(1) proc normal_in++; 
[10] SUBPROCESS(1) proc normal_out++; 
[11] MAINPROCESS proc return; 
[12] MAINPROCESS equal *normal_out *normal_in;
[13] MAINPROCESS proc normal_in++; 
[14] MAINPROCESS proc normal_out++; 
----------------- Total Codes : 14 lines
--------------------------
[Function Name] : calc_prediction_of_normaldata 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM*   normal 
----- Codes -----
[1] MAINPROCESS ??? fn_transform_xy_to_polar( 
[2] MAINPROCESS ??? normal[0].fl_Rxpred, 
[3] MAINPROCESS ??? normal[0].fl_Rypred, 
[4] MAINPROCESS ??? &normal[0].fl_Robs_pred, 
[5] MAINPROCESS ??? &normal[0].fl_theta_up_pred 
[6] MAINPROCESS ??? ) 
[7] MAINPROCESS equal normal[0].fl_theta_dn_pred normal[0].fl_theta_up_pred;
[8] MAINPROCESS ??? fn_transform_vxvy_to_vr( 
[9] MAINPROCESS ??? normal[0].fl_Vxpred, 
[10] MAINPROCESS ??? normal[0].fl_Vypred, 
[11] MAINPROCESS ??? normal[0].fl_theta_dn_pred, 
[12] MAINPROCESS ??? &normal[0].fl_Vobs_pred 
[13] MAINPROCESS ??? ) 
[14] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[15] MAINPROCESS ??? normal[0].fl_Robs_pred, 
[16] MAINPROCESS ??? normal[0].fl_Vobs_pred, 
[17] MAINPROCESS ??? &normal[0].s4_bin_up_pred, 
[18] MAINPROCESS ??? 0 
[19] MAINPROCESS ??? ) 
[20] MAINPROCESS ??? fn_transform_rv_to_freqbin( 
[21] MAINPROCESS ??? normal[0].fl_Robs_pred, 
[22] MAINPROCESS ??? normal[0].fl_Vobs_pred, 
[23] MAINPROCESS ??? &normal[0].s4_bin_dn_pred, 
[24] MAINPROCESS ??? 1 
[25] MAINPROCESS ??? ) 
[26] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[27] MAINPROCESS ??? normal[0].fl_Robs_pred, 
[28] MAINPROCESS ??? normal[0].fl_Vobs_pred, 
[29] MAINPROCESS ??? &normal[0].fl_bin_up_interpolate_pred, 
[30] MAINPROCESS ??? 0 
[31] MAINPROCESS ??? ) 
[32] MAINPROCESS ??? fn_transform_rv_to_freqbin_interpolate( 
[33] MAINPROCESS ??? normal[0].fl_Robs_pred, 
[34] MAINPROCESS ??? normal[0].fl_Vobs_pred, 
[35] MAINPROCESS ??? &normal[0].fl_bin_dn_interpolate_pred, 
[36] MAINPROCESS ??? 1 
[37] MAINPROCESS ??? ) 
[38] MAINPROCESS ??? fn_transform_rad_to_doabin( 
[39] MAINPROCESS ??? normal[0].fl_theta_up_pred, 
[40] MAINPROCESS ??? &normal[0].s4_bin_up_music_pred 
[41] MAINPROCESS ??? ) 
[42] MAINPROCESS equal normal[0].s4_bin_dn_music_pred normal[0].s4_bin_up_music_pred;
[43] MAINPROCESS ??? fn_transform_rad_to_doabin_interpolate( 
[44] MAINPROCESS ??? normal[0].fl_theta_up_pred, 
[45] MAINPROCESS ??? &normal[0].fl_doa_up_interpolate_pred 
[46] MAINPROCESS ??? ) 
[47] MAINPROCESS equal normal[0].fl_doa_dn_interpolate_pred normal[0].fl_doa_up_interpolate_pred;
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fn_transform_xy_to_polar 
-Return type : VD 
-Argument : 4 
     [0] : FL   x 
     [1] : FL   y 
     [2] : FL*   r 
     [3] : FL*   theta 
----- Codes -----
[1] MAINPROCESS equal FL sensor_pos_x st_g_bsm_loop_data.afl_installed_angle[1];
[2] MAINPROCESS if<start> if( 
[3] MAINPROCESS if y<0.0 
[4] MAINPROCESS if ) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) func<start> *r = -(FL)fl_sqrt( (x - sensor_pos_x)*(x - sensor_pos_x) + y*y 
[7] SUBPROCESS(1) func<end> ); 
[8] SUBPROCESS(1) func<start> *theta = (FL)fl_atan( (x-sensor_pos_x) / y ,(FL)1.0F 
[9] SUBPROCESS(1) func<end> ); 
[10] MAINPROCESS else if<start> else if( 
[11] MAINPROCESS else if y>0.0 
[12] MAINPROCESS else if ) 
[13] MAINPROCESS subproc SUBPROCESS(2) 
[14] SUBPROCESS(2) func<start> *r = (FL)fl_sqrt( (x - sensor_pos_x)*(x - sensor_pos_x) + y*y 
[15] SUBPROCESS(2) func<end> ); 
[16] SUBPROCESS(2) if <start> if ( 
[17] SUBPROCESS(2) if  fl_abs(x - sensor_pos_x 
[18] SUBPROCESS(2) if  ) 
[19] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[20] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[21] MAINPROCESS else<start> else 
[22] MAINPROCESS subproc SUBPROCESS(3) 
[23] SUBPROCESS(3) equal *r x - sensor_pos_x;
[24] SUBPROCESS(3) equal *theta 90.0F*PI/180.0F;
[25] MAINPROCESS equal *r x - sensor_pos_x;
[26] MAINPROCESS equal *theta 90.0F*PI/180.0F;
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_transform_rad_to_doabin 
-Return type : VD 
-Argument : 2 
     [0] : FL   angle 
     [1] : S4*   doa_bin 
----- Codes -----
[1] MAINPROCESS proc S4 tmp_doabin; 
[2] MAINPROCESS func<start> tmp_doabin = (S4)( ((-180.0F/PI*angle - DOA_BIN_START_ANG - st_g_bsm_loop_data.afl_installed_angle[0]) / DOA_ANG_PER_BIN) + (FL)0.5F 
[3] MAINPROCESS func<end> ); 
[4] MAINPROCESS if <start> if ( 
[5] MAINPROCESS if  tmp_doabin < 0 
[6] MAINPROCESS if  ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal tmp_doabin 0;
[9] MAINPROCESS else if <start> else if ( 
[10] MAINPROCESS ??? tmp_doabin > N_DOA 
[11] MAINPROCESS ??? ) 
[12] MAINPROCESS subproc SUBPROCESS(2) 
[13] SUBPROCESS(2) equal tmp_doabin N_DOA;
[14] MAINPROCESS subproc SUBPROCESS(3) 
[15] MAINPROCESS equal *doa_bin tmp_doabin;
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_transform_rad_to_doabin_interpolate 
-Return type : VD 
-Argument : 2 
     [0] : FL   angle 
     [1] : FL*   doa_bin 
----- Codes -----
[1] MAINPROCESS proc FL tmp_doabin; 
[2] MAINPROCESS if <start> if ( 
[3] MAINPROCESS if  tmp_doabin < 0.0F 
[4] MAINPROCESS if  ) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal tmp_doabin 0.0F;
[7] MAINPROCESS else if <start> else if ( 
[8] MAINPROCESS ??? tmp_doabin > (FL 
[9] MAINPROCESS ??? ) 
[10] MAINPROCESS subproc SUBPROCESS(2) 
[11] MAINPROCESS subproc SUBPROCESS(3) 
[12] MAINPROCESS equal *doa_bin tmp_doabin;
----------------- Total Codes : 12 lines
--------------------------
[Function Name] : fn_transform_rv_to_freqbin 
-Return type : VD 
-Argument : 4 
     [0] : FL   r 
     [1] : FL   v 
     [2] : S4*   freqbin 
     [3] : S4   updn 
----- Codes -----
[1] MAINPROCESS equal S4 tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT;
[2] MAINPROCESS if <start> if ( 
[3] MAINPROCESS if  (r < FREQ_EXPAND_R_TH 
[4] MAINPROCESS if  ) 
[5] MAINPROCESS if  &&  ( 
[6] MAINPROCESS if  v > FREQ_EXPAND_V_TH 
[7] MAINPROCESS if  ) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) equal tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT_PRIOR_EX;
[10] MAINPROCESS if<start> if( 
[11] MAINPROCESS if updn==CU2_LFM_MOD_UP 
[12] MAINPROCESS if ) 
[13] MAINPROCESS subproc SUBPROCESS(2) 
[14] SUBPROCESS(2) if<start> if( 
[15] SUBPROCESS(2) if r<0 
[16] SUBPROCESS(2) if ) 
[17] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[18] SUBPROCESS(2) else<start> else 
[19] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[20] MAINPROCESS else if<start> else if( 
[21] MAINPROCESS else if updn==CU2_LFM_MOD_DN 
[22] MAINPROCESS else if ) 
[23] MAINPROCESS subproc SUBPROCESS(3) 
[24] SUBPROCESS(3) if<start> if( 
[25] SUBPROCESS(3) if r<0 
[26] SUBPROCESS(3) if ) 
[27] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[28] SUBPROCESS(3) else<start> else 
[29] SUBPROCESS(3) subproc SUBSUBPROCESS(2) 
[30] MAINPROCESS else<start> else 
[31] MAINPROCESS subproc SUBPROCESS(4) 
[32] MAINPROCESS if<start> if( 
[33] MAINPROCESS ??? *freqbin<tmp_lower_limit_th 
[34] MAINPROCESS ??? ) 
[35] MAINPROCESS subproc SUBPROCESS(5) 
[36] SUBPROCESS(5) equal *freqbin tmp_lower_limit_th;
[37] MAINPROCESS proc return; 
[38] MAINPROCESS equal *freqbin tmp_lower_limit_th;
----------------- Total Codes : 38 lines
--------------------------
[Function Name] : fn_transform_rv_to_freqbin_interpolate 
-Return type : VD 
-Argument : 4 
     [0] : FL   r 
     [1] : FL   v 
     [2] : FL*   freqbin 
     [3] : S4   updn 
----- Codes -----
[1] MAINPROCESS equal S4 tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT;
[2] MAINPROCESS if <start> if ( 
[3] MAINPROCESS if  (r < FREQ_EXPAND_R_TH 
[4] MAINPROCESS if  ) 
[5] MAINPROCESS if  &&  ( 
[6] MAINPROCESS if  v > FREQ_EXPAND_V_TH 
[7] MAINPROCESS if  ) 
[8] MAINPROCESS subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) equal tmp_lower_limit_th FREQ_BIN_LOWER_LIMIT_PRIOR_EX;
[10] MAINPROCESS if<start> if( 
[11] MAINPROCESS if updn==CU2_LFM_MOD_UP 
[12] MAINPROCESS if ) 
[13] MAINPROCESS subproc SUBPROCESS(2) 
[14] SUBPROCESS(2) if<start> if( 
[15] SUBPROCESS(2) if r<0.0F 
[16] SUBPROCESS(2) if ) 
[17] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[18] SUBPROCESS(2) else<start> else 
[19] SUBPROCESS(2) subproc SUBSUBPROCESS(2) 
[20] MAINPROCESS else if<start> else if( 
[21] MAINPROCESS else if updn==CU2_LFM_MOD_DN 
[22] MAINPROCESS else if ) 
[23] MAINPROCESS subproc SUBPROCESS(3) 
[24] SUBPROCESS(3) if<start> if( 
[25] SUBPROCESS(3) if r<0.0F 
[26] SUBPROCESS(3) if ) 
[27] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[28] SUBPROCESS(3) else<start> else 
[29] SUBPROCESS(3) subproc SUBSUBPROCESS(2) 
[30] MAINPROCESS else<start> else 
[31] MAINPROCESS subproc SUBPROCESS(4) 
[32] MAINPROCESS if <start> if ( 
[33] MAINPROCESS ??? *freqbin < (FL 
[34] MAINPROCESS ??? ) 
[35] MAINPROCESS subproc SUBPROCESS(5) 
[36] MAINPROCESS proc return; 
----------------- Total Codes : 36 lines
--------------------------
[Function Name] : fn_transform_vxvy_to_vr 
-Return type : VD 
-Argument : 4 
     [0] : FL   vx 
     [1] : FL   vy 
     [2] : FL   theta 
     [3] : FL*   vr 
----- Codes -----
[1] MAINPROCESS proc FL tmp_vr; 
[2] MAINPROCESS if <start> if ( 
[3] MAINPROCESS if  vy > 0.0 
[4] MAINPROCESS if  ) 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) func<start> tmp_vr = (FL)fl_sqrt( vx*vx + vy*vy 
[7] SUBPROCESS(1) func<end> ); 
[8] SUBPROCESS(1) if <start> if ( 
[9] SUBPROCESS(1) if  tmp_vr > V_PREDICT_MAX 
[10] SUBPROCESS(1) if  ) 
[11] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[12] MAINPROCESS else if <start> else if ( 
[13] MAINPROCESS else if  vy < 0.0 
[14] MAINPROCESS else if  ) 
[15] MAINPROCESS subproc SUBPROCESS(2) 
[16] SUBPROCESS(2) func<start> tmp_vr = -(FL)fl_sqrt( vx*vx + vy*vy 
[17] SUBPROCESS(2) func<end> ); 
[18] SUBPROCESS(2) if <start> if ( 
[19] SUBPROCESS(2) if  tmp_vr < -(FL 
[20] SUBPROCESS(2) if  ) 
[21] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[22] MAINPROCESS else<start> else 
[23] MAINPROCESS subproc SUBPROCESS(3) 
[24] SUBPROCESS(3) equal tmp_vr 0.0;
[25] MAINPROCESS equal *vr tmp_vr;
[26] MAINPROCESS equal tmp_vr 0.0;
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_ab_track 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM*   st_a_normal_prev 
     [1] : NORMAL_BSM*   st_a_normal_current 
     [2] : S4   s4_a_ab_filt_cof 
----- Codes -----
[1] MAINPROCESS proc FL alpha1, alpha2, alpha3, alpha4; 
[2] MAINPROCESS proc FL beta1, beta2, beta3, beta4; 
[3] MAINPROCESS proc FL prev_Vy; 
[4] MAINPROCESS proc FL prev_Ry; 
[5] MAINPROCESS proc FL prev_Vx; 
[6] MAINPROCESS proc FL prev_Rx; 
[7] MAINPROCESS proc FL current_Vy; 
[8] MAINPROCESS proc FL current_Ry; 
[9] MAINPROCESS proc FL current_Vx; 
[10] MAINPROCESS proc FL current_Rx; 
[11] MAINPROCESS if <start> if ( 
[12] MAINPROCESS if  s4_a_ab_filt_cof == 1 
[13] MAINPROCESS if  ) 
[14] MAINPROCESS subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal prev_Vy st_a_normal_prev->fl_Vypred;
[16] SUBPROCESS(1) equal prev_Ry st_a_normal_prev->fl_Rypred;
[17] SUBPROCESS(1) equal prev_Vx st_a_normal_prev->fl_Vxpred;
[18] SUBPROCESS(1) equal prev_Rx st_a_normal_prev->fl_Rxpred;
[19] SUBPROCESS(1) equal current_Vy st_a_normal_current->fl_Vyfil;
[20] SUBPROCESS(1) equal current_Ry st_a_normal_current->fl_Ryfil;
[21] SUBPROCESS(1) equal current_Vx st_a_normal_current->fl_Vxfil;
[22] SUBPROCESS(1) equal current_Rx st_a_normal_current->fl_Rxfil;
[23] SUBPROCESS(1) equal alpha1 0.1F;
[24] SUBPROCESS(1) equal beta1 0.0014F;
[25] SUBPROCESS(1) equal alpha2 0.1F;
[26] SUBPROCESS(1) equal beta2 0.0529F;
[27] SUBPROCESS(1) equal alpha3 0.1F;
[28] SUBPROCESS(1) equal beta3 0.001F;
[29] SUBPROCESS(1) equal alpha4 0.2F;
[30] SUBPROCESS(1) equal beta4 0.01F;
[31] MAINPROCESS else<start> else 
[32] MAINPROCESS subproc SUBPROCESS(2) 
[33] SUBPROCESS(2) equal prev_Vy st_a_normal_prev->fl_Vypred;
[34] SUBPROCESS(2) equal prev_Ry st_a_normal_prev->fl_Rypred;
[35] SUBPROCESS(2) equal prev_Vx st_a_normal_prev->fl_Vxpred;
[36] SUBPROCESS(2) equal prev_Rx st_a_normal_prev->fl_Rxpred;
[37] SUBPROCESS(2) equal current_Vy st_a_normal_current->fl_Vyobs;
[38] SUBPROCESS(2) equal current_Ry st_a_normal_current->fl_Ryobs;
[39] SUBPROCESS(2) equal current_Vx st_a_normal_current->fl_Vxobs;
[40] SUBPROCESS(2) equal current_Rx st_a_normal_current->fl_Rxobs;
[41] SUBPROCESS(2) equal alpha1 0.2F;
[42] SUBPROCESS(2) equal beta1 0.0014F;
[43] SUBPROCESS(2) equal alpha2 0.2F;
[44] SUBPROCESS(2) equal beta2 0.0529F;
[45] SUBPROCESS(2) equal alpha3 0.06F;
[46] SUBPROCESS(2) equal beta3 0.0F;
[47] SUBPROCESS(2) equal alpha4 0.06F;
[48] SUBPROCESS(2) equal beta4 0.0014F;
[49] MAINPROCESS func<start> st_a_normal_current->fl_Vyfil  = prev_Vy					+ alpha1*( current_Vy - prev_Vy 
[50] MAINPROCESS func<end> ); 
[51] MAINPROCESS equal st_a_normal_current->fl_Vypred st_a_normal_current->fl_Vyfil	+ st_a_normal_current->fl_Ayfil*CFL_SAMPLING_TIME;
[52] MAINPROCESS func<start> st_a_normal_current->fl_Ryfil  = prev_Ry					+ alpha2*( current_Ry - prev_Ry 
[53] MAINPROCESS func<end> ); 
[54] MAINPROCESS equal st_a_normal_current->fl_Rypred st_a_normal_current->fl_Ryfil	+ st_a_normal_current->fl_Vyfil*CFL_SAMPLING_TIME;
[55] MAINPROCESS func<start> st_a_normal_current->fl_Vxfil  = prev_Vx					+ alpha3*( current_Vx - prev_Vx 
[56] MAINPROCESS func<end> ); 
[57] MAINPROCESS equal st_a_normal_current->fl_Vxpred st_a_normal_current->fl_Vxfil    + st_a_normal_current->fl_Axfil*CFL_SAMPLING_TIME;
[58] MAINPROCESS func<start> st_a_normal_current->fl_Rxfil  = prev_Rx					+ alpha4*( current_Rx - prev_Rx 
[59] MAINPROCESS func<end> ); 
[60] MAINPROCESS equal st_a_normal_current->fl_Rxpred st_a_normal_current->fl_Rxfil	+ st_a_normal_current->fl_Vxfil*CFL_SAMPLING_TIME;
[61] MAINPROCESS proc return; 
[62] MAINPROCESS equal prev_Vy st_a_normal_prev->fl_Vypred;
[63] MAINPROCESS equal prev_Ry st_a_normal_prev->fl_Rypred;
[64] MAINPROCESS equal prev_Vx st_a_normal_prev->fl_Vxpred;
[65] MAINPROCESS equal prev_Rx st_a_normal_prev->fl_Rxpred;
[66] MAINPROCESS equal current_Vy st_a_normal_current->fl_Vyobs;
[67] MAINPROCESS equal current_Ry st_a_normal_current->fl_Ryobs;
[68] MAINPROCESS equal current_Vx st_a_normal_current->fl_Vxobs;
[69] MAINPROCESS equal current_Rx st_a_normal_current->fl_Rxobs;
[70] MAINPROCESS equal alpha1 0.2F;
[71] MAINPROCESS equal beta1 0.0014F;
[72] MAINPROCESS equal alpha2 0.2F;
[73] MAINPROCESS equal beta2 0.0529F;
[74] MAINPROCESS equal alpha3 0.06F;
[75] MAINPROCESS equal beta3 0.0F;
[76] MAINPROCESS equal alpha4 0.06F;
[77] MAINPROCESS equal beta4 0.0014F;
----------------- Total Codes : 77 lines
--------------------------
[Function Name] : fn_ab_track_wall 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM*   st_a_normal_prev 
     [1] : NORMAL_BSM*   st_a_normal_current 
     [2] : S4   s4_a_ab_filt_cof 
----- Codes -----
[1] MAINPROCESS proc FL alpha1, alpha2; 
[2] MAINPROCESS proc FL beta1, beta2; 
[3] MAINPROCESS equal FL sensor_pos_x st_g_bsm_loop_data.afl_installed_angle[1];
[4] MAINPROCESS if <start> if ( 
[5] MAINPROCESS if  s4_a_ab_filt_cof == 1 
[6] MAINPROCESS if  ) 
[7] MAINPROCESS subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal alpha1 0.85F;
[9] SUBPROCESS(1) equal beta1 0.0014F;
[10] SUBPROCESS(1) equal alpha2 0.80F;
[11] SUBPROCESS(1) equal beta2 0.0529F;
[12] MAINPROCESS else<start> else 
[13] MAINPROCESS subproc SUBPROCESS(2) 
[14] SUBPROCESS(2) equal alpha1 0.35F;
[15] SUBPROCESS(2) equal beta1 0.0014F;
[16] SUBPROCESS(2) equal alpha2 0.30F;
[17] SUBPROCESS(2) equal beta2 0.0529F;
[18] MAINPROCESS func<start> st_a_normal_current->fl_Vxfil  = st_a_normal_prev->fl_Vxpred		+ alpha1*( st_a_normal_current->fl_Vxobs - st_a_normal_prev->fl_Vxpred 
[19] MAINPROCESS func<end> ); 
[20] MAINPROCESS equal st_a_normal_current->fl_Vxpred st_a_normal_current->fl_Vxfil	+ st_a_normal_current->fl_Axfil*CFL_SAMPLING_TIME;
[21] MAINPROCESS func<start> st_a_normal_current->fl_Rxfil  = st_a_normal_prev->fl_Rxpred		+ alpha2*( st_a_normal_current->fl_Rxobs - st_a_normal_prev->fl_Rxpred 
[22] MAINPROCESS func<end> ); 
[23] MAINPROCESS equal st_a_normal_current->fl_Rxpred st_a_normal_current->fl_Rxfil	+ st_a_normal_current->fl_Vxfil*CFL_SAMPLING_TIME;
[24] MAINPROCESS equal st_a_normal_current->fl_Ayfil 0.0F;
[25] MAINPROCESS equal st_a_normal_current->fl_Vyfil 0.0F;
[26] MAINPROCESS equal st_a_normal_current->fl_Vypred 0.0F;
[27] MAINPROCESS equal st_a_normal_current->fl_Ryfil 0.0F;
[28] MAINPROCESS equal st_a_normal_current->fl_Rypred 0.0F;
[29] MAINPROCESS func<start> st_a_normal_current->fl_Robs_pred  = -(FL)fl_sqrt( 
[30] MAINPROCESS func ( st_a_normal_current->fl_Rxpred - sensor_pos_x )*( st_a_normal_current->fl_Rxpred - sensor_pos_x ) 
[31] MAINPROCESS func + st_a_normal_current->fl_Rypred*st_a_normal_current->fl_Rypred 
[32] MAINPROCESS func<end> ); 
[33] MAINPROCESS equal st_a_normal_current->fl_theta_dn_pred st_a_normal_current->fl_theta_up_pred;
[34] MAINPROCESS func<start> st_a_normal_current->fl_Vobs_pred = (FL)( 
[35] MAINPROCESS func st_a_normal_current->fl_Vxpred*fl_sin( 0.5F*(st_a_normal_current->fl_theta_up_pred + st_a_normal_current->fl_theta_up_pred) ) 
[36] MAINPROCESS func + st_a_normal_current->fl_Vypred*fl_cos( 0.5F*(st_a_normal_current->fl_theta_up_pred + st_a_normal_current->fl_theta_up_pred) ) 
[37] MAINPROCESS func<end> ); 
[38] MAINPROCESS proc return; 
[39] MAINPROCESS equal alpha1 0.35F;
[40] MAINPROCESS equal beta1 0.0014F;
[41] MAINPROCESS equal alpha2 0.30F;
[42] MAINPROCESS equal beta2 0.0529F;
----------------- Total Codes : 42 lines
--------------------------
[Function Name] : s4_check_passing_car 
-Return type : S4 
-Argument : 2 
     [0] : const NORMAL_BSM*   pst_a_target 
     [1] : S4   s4_a_prev_passing_flg 
----- Codes -----
[1] MAINPROCESS equal S4 bRes 0;
[2] MAINPROCESS equal S4 tmp_passing_flg 0;
[3] MAINPROCESS proc S4 i; 
[4] MAINPROCESS if <start> if ( 
[5] MAINPROCESS if  (fl_abs((FL 
[6] MAINPROCESS if  ) 
[7] MAINPROCESS if  &&  ( 
[8] MAINPROCESS if  fl_abs(fl_g_v_self_bsm_for_base 
[9] MAINPROCESS if  ) 
[10] MAINPROCESS subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) for <start> for ( 
[12] SUBPROCESS(1) for  i = 0; 
[13] SUBPROCESS(1) for  i < st_g_bsm_loop_data.as4_buf_pair_num[1]; 
[14] SUBPROCESS(1) for  i++ 
[15] SUBPROCESS(1) for  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] MAINPROCESS if <start> if ( 
[18] MAINPROCESS ??? tmp_passing_flg == 0 
[19] MAINPROCESS ??? ) 
[20] MAINPROCESS subproc SUBPROCESS(2) 
[21] SUBPROCESS(2) equal bRes 0;
[22] MAINPROCESS subproc SUBPROCESS(3) 
[23] SUBPROCESS(3) equal bRes s4_a_prev_passing_flg + tmp_passing_flg;
[24] MAINPROCESS proc return bRes; 
[25] MAINPROCESS equal bRes s4_a_prev_passing_flg + tmp_passing_flg;
----------------- Total Codes : 25 lines
--------------------------
[Function Name] : fn_send_to_can 
-Return type : VD 
-Argument : 3 
     [0] : const NORMAL_BSM   ast_a_target[TARGET_BUFFSIZE] 
     [1] : S4   as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT] 
     [2] : FL   afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
----- Codes -----
[1] MAINPROCESS proc S4 i; 
[2] MAINPROCESS proc i < TARGET_BUFFSIZE; 
[3] MAINPROCESS func i++ 
[4] MAINPROCESS func<end> ); 
[5] MAINPROCESS subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) if <start> if ( 
[7] SUBPROCESS(1) if  ast_a_target[i].s4_ID_num > 0 
[8] SUBPROCESS(1) if  ) 
[9] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[10] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][0] ast_a_target[i].s4_bin_up;
[11] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][1] ast_a_target[i].s4_bin_up_music;
[12] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][2] ast_a_target[i].s4_bin_dn;
[13] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][3] ast_a_target[i].s4_bin_dn_music;
[14] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][4] ast_a_target[i].s4_bin_up_pred;
[15] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][5] ast_a_target[i].s4_bin_dn_pred;
[16] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][6] ast_a_target[i].s4_bin_up_music_pred;
[17] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][7] ast_a_target[i].s4_bin_dn_music_pred;
[18] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][8] ast_a_target[i].s4_flg_stop;
[19] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][9] ast_a_target[i].s4_flg_track;
[20] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][10] ast_a_target[i].s4_flg_lost;
[21] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][11] ast_a_target[i].s4_ID_num;
[22] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][12] ast_a_target[i].s4_flg_new;
[23] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][13] ast_a_target[i].s4_flg_used;
[24] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][14] ast_a_target[i].s4_flg_dc;
[25] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][15] ast_a_target[i].s4_ctr_sot_cut;
[26] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][16] ast_a_target[i].s4_flg_reliable;
[27] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][17] ast_a_target[i].s4_ctr_tos;
[28] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][18] 0;
[29] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][19] 0;
[30] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][20] 0;
[31] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][21] 0;
[32] SUBSUBPROCESS(1) equal as4_a_Tx_int[i][22] 0;
[33] SUBSUBPROCESS(1) if<start> if( 
[34] SUBSUBPROCESS(1) if u1_g_sns_pos==SENSOR_RIGHT 
[35] SUBSUBPROCESS(1) if ) 
[36] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[37] SUBSUBPROCESS(1) else<start> else 
[38] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(2) 
[39] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][21] 0;
[40] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][22] 0;
[41] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][23] 0;
[42] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][24] 0;
[43] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][25] 0;
[44] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][26] 0;
[45] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][27] 0;
[46] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][28] 0;
[47] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][29] 0;
[48] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][30] 0;
[49] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][31] ast_a_target[i].fl_doa_up_interpolate;
[50] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][32] ast_a_target[i].fl_doa_dn_interpolate;
[51] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][33] ast_a_target[i].fl_doa_up_interpolate_pred;
[52] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][34] ast_a_target[i].fl_doa_dn_interpolate_pred;
[53] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][35] ast_a_target[i].fl_bin_up_interpolate;
[54] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][36] ast_a_target[i].fl_bin_dn_interpolate;
[55] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][37] ast_a_target[i].fl_bin_up_interpolate_pred;
[56] SUBSUBPROCESS(1) equal afl_a_Tx_float[i][38] ast_a_target[i].fl_bin_dn_interpolate_pred;
[57] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][0] ast_a_target[i].fl_power_up_music;
[58] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][1] ast_a_target[i].fl_power_dn_music;
[59] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][2] ast_a_target[i].fl_theta_up;
[60] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][3] ast_a_target[i].fl_theta_dn;
[61] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][4] ast_a_target[i].fl_Robs;
[62] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][5] ast_a_target[i].fl_Rxobs;
[63] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][6] ast_a_target[i].fl_Ryobs;
[64] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][7] ast_a_target[i].fl_Ryfil;
[65] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][8] ast_a_target[i].fl_Rxfil;
[66] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][9] ast_a_target[i].fl_Rxpred;
[67] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][10] ast_a_target[i].fl_Rypred;
[68] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][11] ast_a_target[i].fl_Vobs;
[69] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][12] 0;
[70] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][13] ast_a_target[i].fl_Vyfil;
[71] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][14] ast_a_target[i].fl_Vxfil;
[72] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][15] ast_a_target[i].fl_Vxpred;
[73] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][16] ast_a_target[i].fl_Vypred;
[74] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][17] ast_a_target[i].fl_Ayfil;
[75] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][18] ast_a_target[i].fl_Axfil;
[76] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][19] ast_a_target[i].fl_prob;
[77] SUBSUBSUBPROCESS(1) equal afl_a_Tx_float[i][20] ast_a_target[i].fl_track_prob;
[78] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][0] ast_a_target[i].fl_power_up_music;
[79] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][1] ast_a_target[i].fl_power_dn_music;
[80] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][2] - ast_a_target[i].fl_theta_up;
[81] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][3] - ast_a_target[i].fl_theta_dn;
[82] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][4] ast_a_target[i].fl_Robs;
[83] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][5] - ast_a_target[i].fl_Rxobs;
[84] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][6] ast_a_target[i].fl_Ryobs;
[85] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][7] ast_a_target[i].fl_Ryfil;
[86] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][8] - ast_a_target[i].fl_Rxfil;
[87] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][9] - ast_a_target[i].fl_Rxpred;
[88] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][10] ast_a_target[i].fl_Rypred;
[89] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][11] ast_a_target[i].fl_Vobs;
[90] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][12] 0;
[91] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][13] ast_a_target[i].fl_Vyfil;
[92] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][14] - ast_a_target[i].fl_Vxfil;
[93] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][15] - ast_a_target[i].fl_Vxpred;
[94] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][16] ast_a_target[i].fl_Vypred;
[95] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][17] 0;
[96] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][18] 0;
[97] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][19] ast_a_target[i].fl_prob;
[98] SUBSUBSUBPROCESS(2) equal afl_a_Tx_float[i][20] ast_a_target[i].fl_track_prob;
----------------- Total Codes : 98 lines
