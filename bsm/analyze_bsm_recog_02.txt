Total lines: 1280 
Total functions : 13 
--------------------------
[Function Name] : fn_bsm_seek_ordinary_object 
-Return type : VD 
-Argument : 2 
     [0] : S4*   ps4_a_pair_num_ordinary 
     [1] : NORMAL_BSM   ast_a_normalordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_peak_num_ordinary_up; 
[2] MAINPROCESS(1) proc S4 as4_t_peak_bin_up[PEAK_BUFFSIZE]; 
[3] MAINPROCESS(1) proc FL afl_t_peak_bin_intpl_up[PEAK_BUFFSIZE]; 
[4] MAINPROCESS(1) proc FL afl_t_peak_power_up[PEAK_BUFFSIZE]; 
[5] MAINPROCESS(1) proc FL afl_t_thres_up[NB_FFT_PT]; 
[6] MAINPROCESS(1) proc S4 s4_t_peak_num_ordinary_dn; 
[7] MAINPROCESS(1) proc S4 as4_t_peak_bin_dn[PEAK_BUFFSIZE]; 
[8] MAINPROCESS(1) proc FL afl_t_peak_bin_intpl_dn[PEAK_BUFFSIZE]; 
[9] MAINPROCESS(1) proc FL afl_t_peak_power_dn[PEAK_BUFFSIZE]; 
[10] MAINPROCESS(1) proc FL afl_t_thres_dn[NB_FFT_PT]; 
[11] MAINPROCESS(1) proc S4 as4_t_peak_bin_up_ordinary[ORDINARY_BUFFSIZE]; 
[12] MAINPROCESS(1) proc FL afl_t_peak_bin_intpl_up_ordinary[ORDINARY_BUFFSIZE]; 
[13] MAINPROCESS(1) proc FL afl_t_peak_power_up_ordinary[ORDINARY_BUFFSIZE]; 
[14] MAINPROCESS(1) proc S4 as4_t_peak_bin_dn_ordinary[ORDINARY_BUFFSIZE]; 
[15] MAINPROCESS(1) proc FL afl_t_peak_bin_intpl_dn_ordinary[ORDINARY_BUFFSIZE]; 
[16] MAINPROCESS(1) proc FL afl_t_peak_power_dn_ordinary[ORDINARY_BUFFSIZE]; 
[17] MAINPROCESS(1) proc S4 s4_t_peak_num_up_music; 
[18] MAINPROCESS(1) proc FL afl_t_peak_bins_intpl_up[ORDINARY_BUFFSIZE * 2]; 
[19] MAINPROCESS(1) proc FL afl_t_peak_powers_up[ORDINARY_BUFFSIZE * 2]; 
[20] MAINPROCESS(1) proc FL afl_t_peak_doa_bins_intpl_up[ORDINARY_BUFFSIZE * 2]; 
[21] MAINPROCESS(1) proc FL afl_t_peak_doa_powers_up[ORDINARY_BUFFSIZE * 2]; 
[22] MAINPROCESS(1) proc S4 s4_t_peak_num_dn_music; 
[23] MAINPROCESS(1) proc FL afl_t_peak_bins_intpl_dn[ORDINARY_BUFFSIZE * 2]; 
[24] MAINPROCESS(1) proc FL afl_t_peak_powers_dn[ORDINARY_BUFFSIZE * 2]; 
[25] MAINPROCESS(1) proc FL afl_t_peak_doa_bins_intpl_dn[ORDINARY_BUFFSIZE * 2]; 
[26] MAINPROCESS(1) proc FL afl_t_peak_doa_powers_dn[ORDINARY_BUFFSIZE * 2]; 
[27] MAINPROCESS(1) proc S4 s4_t_lp_peakbuff; 
[28] MAINPROCESS(1) func<start> fn_bsm_ordinary_init_data( 
[29] MAINPROCESS(1) func &s4_t_peak_num_ordinary_up, 
[30] MAINPROCESS(1) func as4_t_peak_bin_up, 
[31] MAINPROCESS(1) func afl_t_peak_bin_intpl_up, 
[32] MAINPROCESS(1) func afl_t_peak_power_up, 
[33] MAINPROCESS(1) func afl_t_thres_up, 
[34] MAINPROCESS(1) func as4_t_peak_bin_up_ordinary, 
[35] MAINPROCESS(1) func afl_t_peak_bin_intpl_up_ordinary, 
[36] MAINPROCESS(1) func afl_t_peak_power_up_ordinary, 
[37] MAINPROCESS(1) func &s4_t_peak_num_up_music, 
[38] MAINPROCESS(1) func afl_t_peak_bins_intpl_up, 
[39] MAINPROCESS(1) func afl_t_peak_powers_up, 
[40] MAINPROCESS(1) func afl_t_peak_doa_bins_intpl_up, 
[41] MAINPROCESS(1) func afl_t_peak_doa_powers_up 
[42] MAINPROCESS(1) func<end> ); 
[43] MAINPROCESS(1) func<start> fn_bsm_ordinary_init_data( 
[44] MAINPROCESS(1) func &s4_t_peak_num_ordinary_dn, 
[45] MAINPROCESS(1) func as4_t_peak_bin_dn, 
[46] MAINPROCESS(1) func afl_t_peak_bin_intpl_dn, 
[47] MAINPROCESS(1) func afl_t_peak_power_dn, 
[48] MAINPROCESS(1) func afl_t_thres_dn, 
[49] MAINPROCESS(1) func as4_t_peak_bin_dn_ordinary, 
[50] MAINPROCESS(1) func afl_t_peak_bin_intpl_dn_ordinary, 
[51] MAINPROCESS(1) func afl_t_peak_power_dn_ordinary, 
[52] MAINPROCESS(1) func &s4_t_peak_num_dn_music, 
[53] MAINPROCESS(1) func afl_t_peak_bins_intpl_dn, 
[54] MAINPROCESS(1) func afl_t_peak_powers_dn, 
[55] MAINPROCESS(1) func afl_t_peak_doa_bins_intpl_dn, 
[56] MAINPROCESS(1) func afl_t_peak_doa_powers_dn 
[57] MAINPROCESS(1) func<end> ); 
[58] MAINPROCESS(1) func<start> fn_set_freq_threshold( 
[59] MAINPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[0], 
[60] MAINPROCESS(1) func afl_t_thres_up 
[61] MAINPROCESS(1) func<end> ); 
[62] MAINPROCESS(1) func<start> fn_set_freq_threshold( 
[63] MAINPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[1], 
[64] MAINPROCESS(1) func afl_t_thres_dn 
[65] MAINPROCESS(1) func<end> ); 
[66] MAINPROCESS(1) func<start> memcpy( 
[67] MAINPROCESS(1) func afl_g_thres_up, afl_t_thres_up, sizeof(FL)*NB_FFT_PT 
[68] MAINPROCESS(1) func<end> ); 
[69] MAINPROCESS(1) func<start> memcpy( 
[70] MAINPROCESS(1) func afl_g_thres_dn, afl_t_thres_dn, sizeof(FL)*NB_FFT_PT 
[71] MAINPROCESS(1) func<end> ); 
[72] MAINPROCESS(1) func<start> st_g_tx_noise_chk_fm_bsm.u2_thres1_up = u2_cast_from_fl( 
[73] MAINPROCESS(1) func afl_t_thres_up[300] * (FL)100 
[74] MAINPROCESS(1) func<end> ); 
[75] MAINPROCESS(1) func<start> st_g_tx_noise_chk_fm_bsm.u2_thres1_dn = u2_cast_from_fl( 
[76] MAINPROCESS(1) func afl_t_thres_dn[300] * (FL)100 
[77] MAINPROCESS(1) func<end> ); 
[78] MAINPROCESS(1) func<start> st_g_tx_noise_chk_fm_bsm.u2_thres2_up = u2_cast_from_fl( 
[79] MAINPROCESS(1) func afl_t_thres_up[500] * (FL)100 
[80] MAINPROCESS(1) func<end> ); 
[81] MAINPROCESS(1) func<start> st_g_tx_noise_chk_fm_bsm.u2_thres2_dn = u2_cast_from_fl( 
[82] MAINPROCESS(1) func afl_t_thres_dn[500] * (FL)100 
[83] MAINPROCESS(1) func<end> ); 
[84] MAINPROCESS(1) func<start> s4_t_peak_num_ordinary_up = s4_search_freq_peak( 
[85] MAINPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[0], 
[86] MAINPROCESS(1) func as4_t_peak_bin_up, 
[87] MAINPROCESS(1) func afl_t_peak_bin_intpl_up, 
[88] MAINPROCESS(1) func afl_t_peak_power_up, 
[89] MAINPROCESS(1) func (const FL *)afl_t_thres_up, 
[90] MAINPROCESS(1) func FREQ_BIN_LOWER_LIMIT, 
[91] MAINPROCESS(1) func FREQ_BIN_UPPER_LIMIT_DN 
[92] MAINPROCESS(1) func<end> ); 
[93] MAINPROCESS(1) if  if ( 
[94] MAINPROCESS(1) if  st_g_bsm_loop_data.as4_slow_sot_find[0] != (S4)0 
[95] MAINPROCESS(1) if  ) 
[96] MAINPROCESS(1) subproc SUBPROCESS(1) 
[97] SUBPROCESS(1) func<start> s4_t_peak_num_ordinary_dn = s4_search_freq_peak( 
[98] SUBPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[1], 
[99] SUBPROCESS(1) func as4_t_peak_bin_dn, 
[100] SUBPROCESS(1) func afl_t_peak_bin_intpl_dn, 
[101] SUBPROCESS(1) func afl_t_peak_power_dn, 
[102] SUBPROCESS(1) func (const FL *)afl_t_thres_dn, 
[103] SUBPROCESS(1) func NB_FFT_PT/2+9, 
[104] SUBPROCESS(1) func FREQ_BIN_UPPER_LIMIT_DN 
[105] SUBPROCESS(1) func<end> ); 
[106] SUBPROCESS(1) for  for ( 
[107] SUBPROCESS(1) for  s4_t_lp_peakbuff = (S4)0; 
[108] SUBPROCESS(1) for  s4_t_lp_peakbuff < (S4)8; 
[109] SUBPROCESS(1) for  s4_t_lp_peakbuff++ 
[110] SUBPROCESS(1) for  ) 
[111] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[112] SUBSUBPROCESS(1) if  if ( 
[113] SUBSUBPROCESS(1) if  s4_t_peak_num_ordinary_dn < PEAK_BUFFSIZE 
[114] SUBSUBPROCESS(1) if  ) 
[115] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[116] SUBSUBSUBPROCESS(1) equal as4_t_peak_bin_dn[s4_t_peak_num_ordinary_dn] 256+s4_t_lp_peakbuff;
[117] SUBSUBSUBPROCESS(1) equal<start> afl_t_peak_bin_intpl_dn[s4_t_peak_num_ordinary_dn] = ( 
[118] SUBSUBSUBPROCESS(1) equal FL)(256+s4_t_lp_peakbuff 
[119] SUBSUBSUBPROCESS(1) equal<end> ); 
[120] SUBSUBSUBPROCESS(1) equal afl_t_peak_power_dn[s4_t_peak_num_ordinary_dn] afl_g_cvw_lfm_ftt_power[1][256+s4_t_lp_peakbuff];
[121] SUBSUBSUBPROCESS(1) proc s4_t_peak_num_ordinary_dn++; 
[122] MAINPROCESS(2) else else 
[123] MAINPROCESS(2) subproc SUBPROCESS(1) 
[124] SUBPROCESS(1) func<start> s4_t_peak_num_ordinary_dn = s4_search_freq_peak( 
[125] SUBPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[1], 
[126] SUBPROCESS(1) func as4_t_peak_bin_dn, 
[127] SUBPROCESS(1) func afl_t_peak_bin_intpl_dn, 
[128] SUBPROCESS(1) func afl_t_peak_power_dn, 
[129] SUBPROCESS(1) func (const FL *)afl_t_thres_dn, 
[130] SUBPROCESS(1) func FREQ_BIN_LOWER_LIMIT, 
[131] SUBPROCESS(1) func FREQ_BIN_UPPER_LIMIT_DN 
[132] SUBPROCESS(1) func<end> ); 
[133] MAINPROCESS(3) equal st_g_tx_noise_chk_fm_bsm.u1_peak_num_up (U1)s4_t_peak_num_ordinary_up;
[134] MAINPROCESS(3) equal st_g_tx_noise_chk_fm_bsm.u1_peak_num_dn (U1)s4_t_peak_num_ordinary_dn;
[135] MAINPROCESS(3) func<start> fn_sort_peak_by_power( 
[136] MAINPROCESS(3) func as4_t_peak_bin_up, 
[137] MAINPROCESS(3) func afl_t_peak_bin_intpl_up, 
[138] MAINPROCESS(3) func afl_t_peak_power_up, 
[139] MAINPROCESS(3) func as4_t_peak_bin_up_ordinary, 
[140] MAINPROCESS(3) func afl_t_peak_bin_intpl_up_ordinary, 
[141] MAINPROCESS(3) func afl_t_peak_power_up_ordinary 
[142] MAINPROCESS(3) func<end> ); 
[143] MAINPROCESS(3) func<start> fn_sort_peak_by_power( 
[144] MAINPROCESS(3) func as4_t_peak_bin_dn, 
[145] MAINPROCESS(3) func afl_t_peak_bin_intpl_dn, 
[146] MAINPROCESS(3) func afl_t_peak_power_dn, 
[147] MAINPROCESS(3) func as4_t_peak_bin_dn_ordinary, 
[148] MAINPROCESS(3) func afl_t_peak_bin_intpl_dn_ordinary, 
[149] MAINPROCESS(3) func afl_t_peak_power_dn_ordinary 
[150] MAINPROCESS(3) func<end> ); 
[151] MAINPROCESS(3) if  if ( 
[152] MAINPROCESS(3) if  s4_t_peak_num_ordinary_up > ORDINARY_BUFFSIZE 
[153] MAINPROCESS(3) if  ) 
[154] MAINPROCESS(3) subproc SUBPROCESS(1) 
[155] SUBPROCESS(1) equal s4_t_peak_num_ordinary_up ORDINARY_BUFFSIZE;
[156] MAINPROCESS(4) if  if ( 
[157] MAINPROCESS(4) if  s4_t_peak_num_ordinary_dn > ORDINARY_BUFFSIZE 
[158] MAINPROCESS(4) if  ) 
[159] MAINPROCESS(4) subproc SUBPROCESS(1) 
[160] SUBPROCESS(1) equal s4_t_peak_num_ordinary_dn ORDINARY_BUFFSIZE;
[161] MAINPROCESS(5) func<start> fn_bsm_ordinary_estimate_doa( 
[162] MAINPROCESS(5) func 0, 
[163] MAINPROCESS(5) func afl_g_cvw_lfm_ryy_matrix[0], 
[164] MAINPROCESS(5) func s4_t_peak_num_ordinary_up, 
[165] MAINPROCESS(5) func (const S4 *)as4_t_peak_bin_up_ordinary, 
[166] MAINPROCESS(5) func (const FL *)afl_t_peak_bin_intpl_up_ordinary, 
[167] MAINPROCESS(5) func (const FL *)afl_t_peak_power_up_ordinary, 
[168] MAINPROCESS(5) func &s4_t_peak_num_up_music, 
[169] MAINPROCESS(5) func afl_t_peak_bins_intpl_up, 
[170] MAINPROCESS(5) func afl_t_peak_powers_up, 
[171] MAINPROCESS(5) func afl_t_peak_doa_bins_intpl_up, 
[172] MAINPROCESS(5) func afl_t_peak_doa_powers_up 
[173] MAINPROCESS(5) func<end> ); 
[174] MAINPROCESS(5) func<start> fn_bsm_ordinary_estimate_doa( 
[175] MAINPROCESS(5) func 1, 
[176] MAINPROCESS(5) func afl_g_cvw_lfm_ryy_matrix[1], 
[177] MAINPROCESS(5) func s4_t_peak_num_ordinary_dn, 
[178] MAINPROCESS(5) func (const S4 *)as4_t_peak_bin_dn_ordinary, 
[179] MAINPROCESS(5) func (const FL *)afl_t_peak_bin_intpl_dn_ordinary, 
[180] MAINPROCESS(5) func (const FL *)afl_t_peak_power_dn_ordinary, 
[181] MAINPROCESS(5) func &s4_t_peak_num_dn_music, 
[182] MAINPROCESS(5) func afl_t_peak_bins_intpl_dn, 
[183] MAINPROCESS(5) func afl_t_peak_powers_dn, 
[184] MAINPROCESS(5) func afl_t_peak_doa_bins_intpl_dn, 
[185] MAINPROCESS(5) func afl_t_peak_doa_powers_dn 
[186] MAINPROCESS(5) func<end> ); 
[187] MAINPROCESS(5) func<start> fn_bsm_ordinary_make_pair( 
[188] MAINPROCESS(5) func s4_t_peak_num_up_music, 
[189] MAINPROCESS(5) func (const FL *)afl_t_peak_bins_intpl_up, 
[190] MAINPROCESS(5) func afl_t_peak_powers_up, 
[191] MAINPROCESS(5) func (const FL *)afl_t_peak_doa_bins_intpl_up, 
[192] MAINPROCESS(5) func (const FL *)afl_t_peak_doa_powers_up, 
[193] MAINPROCESS(5) func s4_t_peak_num_dn_music, 
[194] MAINPROCESS(5) func (const FL *)afl_t_peak_bins_intpl_dn, 
[195] MAINPROCESS(5) func afl_t_peak_powers_dn, 
[196] MAINPROCESS(5) func (const FL *)afl_t_peak_doa_bins_intpl_dn, 
[197] MAINPROCESS(5) func (const FL *)afl_t_peak_doa_powers_dn, 
[198] MAINPROCESS(5) func ps4_a_pair_num_ordinary, 
[199] MAINPROCESS(5) func ast_a_normalordinary 
[200] MAINPROCESS(5) func<end> ); 
[201] MAINPROCESS(5) func<start> fn_bsm_ordinary_compare_with_2FCW( 
[202] MAINPROCESS(5) func ps4_a_pair_num_ordinary, 
[203] MAINPROCESS(5) func ast_a_normalordinary 
[204] MAINPROCESS(5) func<end> ); 
[205] MAINPROCESS(5) func<start> fn_bsm_ordinary_set_object( 
[206] MAINPROCESS(5) func (const S4 *)ps4_a_pair_num_ordinary, 
[207] MAINPROCESS(5) func ast_a_normalordinary 
[208] MAINPROCESS(5) func<end> ); 
----------------- Total Codes : 208 lines
--------------------------
[Function Name] : fn_bsm_ordinary_init_data 
-Return type : VD 
-Argument : 13 
     [0] : S4   *ps4_a_peak_num_ordinary 
     [1] : S4   as4_a_peak_bin[PEAK_BUFFSIZE] 
     [2] : FL   afl_a_peak_bin_intpl[PEAK_BUFFSIZE] 
     [3] : FL   afl_a_peak_power[PEAK_BUFFSIZE] 
     [4] : FL   afl_a_thres[NB_FFT_PT] 
     [5] : S4   as4_a_peak_bin_ordinary[ORDINARY_BUFFSIZE] 
     [6] : FL   afl_a_peak_bin_intpl_ordinary[ORDINARY_BUFFSIZE] 
     [7] : FL   afl_a_peak_power_ordinary[ORDINARY_BUFFSIZE] 
     [8] : S4   *ps4_a_peak_num_music 
     [9] : FL afl_a_peak_bins_intpl[ORDINARY_BUFFSIZE *   2] 
     [10] : FL afl_a_peak_powers[ORDINARY_BUFFSIZE *   2] 
     [11] : FL afl_a_peak_doa_bins_intpl[ORDINARY_BUFFSIZE *   2] 
     [12] : FL afl_a_peak_doa_powers[ORDINARY_BUFFSIZE *   2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) equal *ps4_a_peak_num_ordinary 0;
[3] MAINPROCESS(1) for  for ( 
[4] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[5] MAINPROCESS(1) for  s4_t_lp_i < PEAK_BUFFSIZE; 
[6] MAINPROCESS(1) for  s4_t_lp_i++ 
[7] MAINPROCESS(1) for  ) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) equal as4_a_peak_bin[s4_t_lp_i] 0;
[10] SUBPROCESS(1) equal afl_a_peak_bin_intpl[s4_t_lp_i] 0.0F;
[11] SUBPROCESS(1) equal afl_a_peak_power[s4_t_lp_i] 0.0F;
[12] MAINPROCESS(2) for  for ( 
[13] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[14] MAINPROCESS(2) for  s4_t_lp_i < NB_FFT_PT; 
[15] MAINPROCESS(2) for  s4_t_lp_i++ 
[16] MAINPROCESS(2) for  ) 
[17] MAINPROCESS(2) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) equal afl_a_thres[s4_t_lp_i] 0.0F;
[19] MAINPROCESS(3) for  for ( 
[20] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[21] MAINPROCESS(3) for  s4_t_lp_i < ORDINARY_BUFFSIZE; 
[22] MAINPROCESS(3) for  s4_t_lp_i++ 
[23] MAINPROCESS(3) for  ) 
[24] MAINPROCESS(3) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) equal as4_a_peak_bin_ordinary[s4_t_lp_i] (S4)0;
[26] SUBPROCESS(1) equal afl_a_peak_bin_intpl_ordinary[s4_t_lp_i] (FL)0.0F;
[27] SUBPROCESS(1) equal afl_a_peak_power_ordinary[s4_t_lp_i] (FL)0.0F;
[28] MAINPROCESS(4) for  for ( 
[29] MAINPROCESS(4) for  s4_t_lp_i = 0; 
[30] MAINPROCESS(4) for  s4_t_lp_i < ( 
[31] MAINPROCESS(4) for  ORDINARY_BUFFSIZE * 2 
[32] MAINPROCESS(4) for  ); 
[33] MAINPROCESS(4) for  s4_t_lp_i++ 
[34] MAINPROCESS(4) for  ) 
[35] MAINPROCESS(4) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) equal afl_a_peak_bins_intpl[s4_t_lp_i] 0;
[37] SUBPROCESS(1) equal afl_a_peak_powers[s4_t_lp_i] 0.0F;
[38] SUBPROCESS(1) equal afl_a_peak_doa_bins_intpl[s4_t_lp_i] 0;
[39] SUBPROCESS(1) equal afl_a_peak_doa_powers[s4_t_lp_i] 0.0F;
[40] MAINPROCESS(5) return return; 
----------------- Total Codes : 40 lines
--------------------------
[Function Name] : fn_bsm_ordinary_estimate_doa 
-Return type : VD 
-Argument : 11 
     [0] : S4   s4_a_flg_updn 
     [1] : FL   afl_a_Ryy[NB_FFT_PT][CORRE_SIZE_4CH] 
     [2] : S4   s4_a_peak_num 
     [3] : const S4   as4_a_peak_bin[ORDINARY_BUFFSIZE] 
     [4] : const FL   afl_a_peak_bin_intpl[ORDINARY_BUFFSIZE] 
     [5] : const FL   afl_a_peak_power[ORDINARY_BUFFSIZE] 
     [6] : S4   *ps4_a_doa_peak_num 
     [7] : FL afl_a_peak_bins_intpl[ORDINARY_BUFFSIZE *   2] 
     [8] : FL afl_a_peak_powers[ORDINARY_BUFFSIZE *   2] 
     [9] : FL afl_a_peak_doa_bins_intpl[ORDINARY_BUFFSIZE *   2] 
     [10] : FL afl_a_peak_doa_powers[ORDINARY_BUFFSIZE *   2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc S4 s4_t_doa_calc_num; 
[4] MAINPROCESS(1) proc S4 as4_t_doa_num[ORDINARY_BUFFSIZE]; 
[5] MAINPROCESS(1) proc FL afl_t_selected_doa_bins_intpl[ORDINARY_BUFFSIZE][2]; 
[6] MAINPROCESS(1) proc FL afl_t_selected_doa_powers[ORDINARY_BUFFSIZE][2]; 
[7] MAINPROCESS(1) proc FL afl_t_selected_bins_intpl[ORDINARY_BUFFSIZE][2]; 
[8] MAINPROCESS(1) proc U2 u2_t_store_array_index; 
[9] MAINPROCESS(1) proc U1 au1_t_doa_num_copy[ORDINARY_BUFFSIZE]; 
[10] MAINPROCESS(1) proc FL afl_t_selected_doa_bins_intpl_copy[ORDINARY_BUFFSIZE][2]; 
[11] MAINPROCESS(1) proc FL afl_t_selected_doa_powers_copy[ORDINARY_BUFFSIZE][2]; 
[12] MAINPROCESS(1) proc FL afl_t_selected_bins_intpl_copy[ORDINARY_BUFFSIZE]; 
[13] MAINPROCESS(1) proc U1 u1_t_exist_flag; 
[14] MAINPROCESS(1) for  for ( 
[15] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[16] MAINPROCESS(1) for  s4_t_lp_i < ORDINARY_BUFFSIZE; 
[17] MAINPROCESS(1) for  s4_t_lp_i++ 
[18] MAINPROCESS(1) for  ) 
[19] MAINPROCESS(1) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) equal as4_t_doa_num[s4_t_lp_i] 0;
[21] SUBPROCESS(1) equal au1_t_doa_num_copy[s4_t_lp_i] (U1)0;
[22] SUBPROCESS(1) equal afl_t_selected_bins_intpl_copy[s4_t_lp_i] (FL)0.0F;
[23] SUBPROCESS(1) for  for ( 
[24] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[25] SUBPROCESS(1) for  s4_t_lp_k < 2; 
[26] SUBPROCESS(1) for  s4_t_lp_k++ 
[27] SUBPROCESS(1) for  ) 
[28] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(1) equal afl_t_selected_doa_bins_intpl[s4_t_lp_i][s4_t_lp_k] 0.0F;
[30] SUBSUBPROCESS(1) equal afl_t_selected_doa_powers[s4_t_lp_i][s4_t_lp_k] 0.0F;
[31] SUBSUBPROCESS(1) equal afl_t_selected_bins_intpl[s4_t_lp_i][s4_t_lp_k] 0.0F;
[32] SUBSUBPROCESS(1) equal afl_t_selected_doa_bins_intpl_copy[s4_t_lp_i][s4_t_lp_k] (FL)0.0F;
[33] SUBSUBPROCESS(1) equal afl_t_selected_doa_powers_copy[s4_t_lp_i][s4_t_lp_k] (FL)0.0F;
[34] MAINPROCESS(2) equal s4_t_doa_calc_num (S4)0;
[35] MAINPROCESS(2) equal u2_t_store_array_index (U2)0;
[36] MAINPROCESS(2) equal u1_t_exist_flag CU1_FALSE;
[37] MAINPROCESS(2) for  for ( 
[38] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[39] MAINPROCESS(2) for  s4_t_lp_i < s4_a_peak_num; 
[40] MAINPROCESS(2) for  s4_t_lp_i++  
[41] MAINPROCESS(2) for  ) 
[42] MAINPROCESS(2) subproc SUBPROCESS(1) 
[43] SUBPROCESS(1) func<start> u1_t_exist_flag = u1_cmn_shareMUSIC_get_finished_music_data_main( 
[44] SUBPROCESS(1) func  (U1)s4_a_flg_updn, 
[45] SUBPROCESS(1) func (U2)as4_a_peak_bin[s4_t_lp_i], 
[46] SUBPROCESS(1) func &u2_t_store_array_index, 
[47] SUBPROCESS(1) func &au1_t_doa_num_copy[s4_t_lp_i], 
[48] SUBPROCESS(1) func &afl_t_selected_bins_intpl_copy[s4_t_lp_i], 
[49] SUBPROCESS(1) func afl_t_selected_doa_bins_intpl_copy[s4_t_lp_i], 
[50] SUBPROCESS(1) func afl_t_selected_doa_powers_copy[s4_t_lp_i] 
[51] SUBPROCESS(1) func<end> ); 
[52] SUBPROCESS(1) if  if ( 
[53] SUBPROCESS(1) if  u1_t_exist_flag == CU1_FALSE 
[54] SUBPROCESS(1) if  ) 
[55] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[56] SUBSUBPROCESS(1) if  if ( 
[57] SUBSUBPROCESS(1) if  s4_t_doa_calc_num < (ORDINARY_BUFFSIZE - 1) 
[58] SUBSUBPROCESS(1) if  ) 
[59] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[60] SUBSUBSUBPROCESS(1) proc s4_t_doa_calc_num++; 
[61] SUBSUBSUBPROCESS(1) func<start> fn_bsm_ordinary_cal_doa( 
[62] SUBSUBSUBPROCESS(1) func s4_a_flg_updn, 
[63] SUBSUBSUBPROCESS(1) func (const FL (*)[10])afl_a_Ryy, 
[64] SUBSUBSUBPROCESS(1) func as4_a_peak_bin[s4_t_lp_i], 
[65] SUBSUBSUBPROCESS(1) func afl_a_peak_bin_intpl[s4_t_lp_i], 
[66] SUBSUBSUBPROCESS(1) func &as4_t_doa_num[s4_t_lp_i], 
[67] SUBSUBSUBPROCESS(1) func afl_t_selected_doa_bins_intpl[s4_t_lp_i], 
[68] SUBSUBSUBPROCESS(1) func afl_t_selected_doa_powers[s4_t_lp_i], 
[69] SUBSUBSUBPROCESS(1) func afl_t_selected_bins_intpl[s4_t_lp_i] 
[70] SUBSUBSUBPROCESS(1) func<end> ); 
[71] SUBSUBSUBPROCESS(1) func<start> fn_cmn_shareMUSIC_set_finished_music_data_main( 
[72] SUBSUBSUBPROCESS(1) func  (U1)s4_a_flg_updn, 
[73] SUBSUBSUBPROCESS(1) func (U1)as4_t_doa_num[s4_t_lp_i], 
[74] SUBSUBSUBPROCESS(1) func (U2)as4_a_peak_bin[s4_t_lp_i], 
[75] SUBSUBSUBPROCESS(1) func afl_t_selected_bins_intpl[s4_t_lp_i][0], 
[76] SUBSUBSUBPROCESS(1) func afl_t_selected_doa_bins_intpl[s4_t_lp_i], 
[77] SUBSUBSUBPROCESS(1) func afl_t_selected_doa_powers[s4_t_lp_i] 
[78] SUBSUBSUBPROCESS(1) func<end> ); 
[79] SUBPROCESS(2) else else 
[80] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[81] SUBSUBPROCESS(1) proc s4_t_doa_calc_num++; 
[82] SUBSUBPROCESS(1) equal as4_t_doa_num[s4_t_lp_i] (S4)au1_t_doa_num_copy[s4_t_lp_i];
[83] SUBSUBPROCESS(1) if  if ( 
[84] SUBSUBPROCESS(1) if  as4_t_doa_num[s4_t_lp_i] == (S4)1 
[85] SUBSUBPROCESS(1) if  ) 
[86] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[87] SUBSUBSUBPROCESS(1) equal afl_t_selected_bins_intpl[s4_t_lp_i][0] afl_t_selected_bins_intpl_copy[s4_t_lp_i];
[88] SUBSUBSUBPROCESS(1) equal afl_t_selected_doa_bins_intpl[s4_t_lp_i][0] afl_t_selected_doa_bins_intpl_copy[s4_t_lp_i][0];
[89] SUBSUBSUBPROCESS(1) equal afl_t_selected_doa_powers[s4_t_lp_i][0] afl_t_selected_doa_powers_copy[s4_t_lp_i][0];
[90] SUBSUBPROCESS(2) else if  else if ( 
[91] SUBSUBPROCESS(2) else if  as4_t_doa_num[s4_t_lp_i] == (S4)2 
[92] SUBSUBPROCESS(2) else if  ) 
[93] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[94] SUBSUBSUBPROCESS(1) equal afl_t_selected_bins_intpl[s4_t_lp_i][0] afl_t_selected_bins_intpl_copy[s4_t_lp_i];
[95] SUBSUBSUBPROCESS(1) equal afl_t_selected_bins_intpl[s4_t_lp_i][1] afl_t_selected_bins_intpl_copy[s4_t_lp_i];
[96] SUBSUBSUBPROCESS(1) equal afl_t_selected_doa_bins_intpl[s4_t_lp_i][0] afl_t_selected_doa_bins_intpl_copy[s4_t_lp_i][0];
[97] SUBSUBSUBPROCESS(1) equal afl_t_selected_doa_bins_intpl[s4_t_lp_i][1] afl_t_selected_doa_bins_intpl_copy[s4_t_lp_i][1];
[98] SUBSUBSUBPROCESS(1) equal afl_t_selected_doa_powers[s4_t_lp_i][0] afl_t_selected_doa_powers_copy[s4_t_lp_i][0];
[99] SUBSUBSUBPROCESS(1) equal afl_t_selected_doa_powers[s4_t_lp_i][1] afl_t_selected_doa_powers_copy[s4_t_lp_i][1];
[100] SUBSUBPROCESS(3) else else 
[101] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[102] MAINPROCESS(3) func<start> fn_bsm_ordinary_store_doa( 
[103] MAINPROCESS(3) func (const FL *)afl_a_peak_power, 
[104] MAINPROCESS(3) func (const S4 *)as4_t_doa_num, 
[105] MAINPROCESS(3) func afl_t_selected_doa_bins_intpl, 
[106] MAINPROCESS(3) func afl_t_selected_doa_powers, 
[107] MAINPROCESS(3) func afl_t_selected_bins_intpl, 
[108] MAINPROCESS(3) func ps4_a_doa_peak_num, 
[109] MAINPROCESS(3) func afl_a_peak_bins_intpl, 
[110] MAINPROCESS(3) func afl_a_peak_powers, 
[111] MAINPROCESS(3) func afl_a_peak_doa_bins_intpl, 
[112] MAINPROCESS(3) func afl_a_peak_doa_powers 
[113] MAINPROCESS(3) func<end> ); 
[114] MAINPROCESS(3) return return; 
----------------- Total Codes : 114 lines
--------------------------
[Function Name] : fn_bsm_ordinary_cal_doa 
-Return type : VD 
-Argument : 8 
     [0] : S4   s4_a_updn_flg 
     [1] : const FL   afl_a_Ryy[NB_FFT_PT][CORRE_SIZE_4CH] 
     [2] : S4   s4_a_peak_bin 
     [3] : FL   fl_a_peak_bin_intpl 
     [4] : S4   *ps4_a_doa_num 
     [5] : FL   afl_a_selected_doa_bins_intpl[2] 
     [6] : FL   afl_a_selected_doa_powers[2] 
     [7] : FL   afl_a_selected_bins_intpl[2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc FL afl_t_spec[N_DOA]; 
[3] MAINPROCESS(1) proc S4 s4_t_wall_bin; 
[4] MAINPROCESS(1) proc S4 as4_t_selected_doa_bins[2]; 
[5] MAINPROCESS(1) equal S4 s4_t_temp_wave_num WAVE_NUMBER;
[6] MAINPROCESS(1) proc U1 u1_t_lp_doa_num; 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < N_DOA; 
[10] MAINPROCESS(1) for  s4_t_lp_i++  
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal afl_t_spec[s4_t_lp_i] 0;
[14] MAINPROCESS(2) for  for ( 
[15] MAINPROCESS(2) for  u1_t_lp_doa_num = (U1)0; 
[16] MAINPROCESS(2) for  u1_t_lp_doa_num < (U1)2; 
[17] MAINPROCESS(2) for  u1_t_lp_doa_num++ 
[18] MAINPROCESS(2) for  ) 
[19] MAINPROCESS(2) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) equal as4_t_selected_doa_bins[u1_t_lp_doa_num] (S4)0;
[21] MAINPROCESS(3) if  if ( 
[22] MAINPROCESS(3) if  st_g_bsm_loop_data.afl_wall_width[0] == WALL_MAX 
[23] MAINPROCESS(3) if  ) 
[24] MAINPROCESS(3) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) equal s4_t_wall_bin -1;
[26] MAINPROCESS(4) else else 
[27] MAINPROCESS(4) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) equal s4_t_wall_bin (S4)((st_g_bsm_loop_data.afl_wall_width[0] / RCOF) * 0.5F) + (NB_FFT_PT / 2) -1;
[29] MAINPROCESS(5) func<start> s4_t_temp_wave_num = s4_calc_spec_music_4ch_all( 
[30] MAINPROCESS(5) func afl_a_Ryy[s4_a_peak_bin], 
[31] MAINPROCESS(5) func afl_t_spec, 
[32] MAINPROCESS(5) func 2, 
[33] MAINPROCESS(5) func s4_a_updn_flg 
[34] MAINPROCESS(5) func<end> ); 
[35] MAINPROCESS(5) equal *ps4_a_doa_num 0;
[36] MAINPROCESS(5) if  if ( 
[37] MAINPROCESS(5) if  (s4_t_wall_bin != -1 
[38] MAINPROCESS(5) if  ) 
[39] MAINPROCESS(5) if  && ((S4)fl_abs((FL)(s4_a_peak_bin-s4_t_wall_bin)) == 0 
[40] MAINPROCESS(5) if  ) 
[41] MAINPROCESS(5) if  ) 
[42] MAINPROCESS(5) subproc SUBPROCESS(1) 
[43] SUBPROCESS(1) func<start> *ps4_a_doa_num = s4_search_peak_music_ex_sidewall( 
[44] SUBPROCESS(1) func (const FL *)afl_t_spec, 
[45] SUBPROCESS(1) func afl_a_Ryy[s4_a_peak_bin], 
[46] SUBPROCESS(1) func s4_a_peak_bin, 
[47] SUBPROCESS(1) func s4_a_updn_flg, 
[48] SUBPROCESS(1) func as4_t_selected_doa_bins, 
[49] SUBPROCESS(1) func afl_a_selected_doa_powers, 
[50] SUBPROCESS(1) func s4_t_temp_wave_num 
[51] SUBPROCESS(1) func<end> ); 
[52] MAINPROCESS(6) else else 
[53] MAINPROCESS(6) subproc SUBPROCESS(1) 
[54] SUBPROCESS(1) func<start> *ps4_a_doa_num = s4_search_peak_music( 
[55] SUBPROCESS(1) func (const FL *)afl_t_spec, 
[56] SUBPROCESS(1) func as4_t_selected_doa_bins, 
[57] SUBPROCESS(1) func afl_a_selected_doa_powers, 
[58] SUBPROCESS(1) func s4_t_temp_wave_num 
[59] SUBPROCESS(1) func<end> ); 
[60] SUBPROCESS(1) for  for ( 
[61] SUBPROCESS(1) for  s4_t_lp_i = 0; 
[62] SUBPROCESS(1) for  s4_t_lp_i < 2; 
[63] SUBPROCESS(1) for  s4_t_lp_i++ 
[64] SUBPROCESS(1) for  ) 
[65] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[66] SUBSUBPROCESS(1) if  if ( 
[67] SUBSUBPROCESS(1) if  as4_t_selected_doa_bins[s4_t_lp_i] > 0 
[68] SUBSUBPROCESS(1) if  ) 
[69] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[70] SUBSUBSUBPROCESS(1) func<start> afl_a_selected_doa_powers[s4_t_lp_i] = fl_calc_spec_bf_4ch_fm_of_specified_doa( 
[71] SUBSUBSUBPROCESS(1) func afl_a_Ryy[s4_a_peak_bin], 
[72] SUBSUBSUBPROCESS(1) func s4_a_updn_flg, 
[73] SUBSUBSUBPROCESS(1) func s4_a_peak_bin, 
[74] SUBSUBSUBPROCESS(1) func as4_t_selected_doa_bins[s4_t_lp_i] 
[75] SUBSUBSUBPROCESS(1) func<end> ); 
[76] MAINPROCESS(7) for for( 
[77] MAINPROCESS(7) for s4_t_lp_i=0; 
[78] MAINPROCESS(7) for s4_t_lp_i<2; 
[79] MAINPROCESS(7) for s4_t_lp_i++ 
[80] MAINPROCESS(7) for ) 
[81] MAINPROCESS(7) subproc SUBPROCESS(1) 
[82] SUBPROCESS(1) if if( 
[83] SUBPROCESS(1) if as4_t_selected_doa_bins[s4_t_lp_i]>0 
[84] SUBPROCESS(1) if ) 
[85] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[86] SUBSUBPROCESS(1) func<start> afl_a_selected_doa_bins_intpl[s4_t_lp_i] = fl_interpolate_music_peak( 
[87] SUBSUBPROCESS(1) func (const FL *)afl_t_spec, 
[88] SUBSUBPROCESS(1) func as4_t_selected_doa_bins[s4_t_lp_i], 
[89] SUBSUBPROCESS(1) func (const FL *)FL_BSM_FLSH_YOMIKAE_TBL_FM 
[90] SUBSUBPROCESS(1) func<end> ); 
[91] SUBSUBPROCESS(1) equal afl_a_selected_bins_intpl[s4_t_lp_i] fl_a_peak_bin_intpl;
[92] SUBPROCESS(2) else else 
[93] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[94] SUBSUBPROCESS(1) equal afl_a_selected_doa_bins_intpl[s4_t_lp_i] 0.0F;
[95] SUBSUBPROCESS(1) equal afl_a_selected_bins_intpl[s4_t_lp_i] 0.0F;
[96] MAINPROCESS(8) return return; 
----------------- Total Codes : 96 lines
--------------------------
[Function Name] : fn_bsm_ordinary_store_doa 
-Return type : VD 
-Argument : 10 
     [0] : const FL   afl_a_peak_power[ORDINARY_BUFFSIZE] 
     [1] : const S4   as4_a_doa_num[ORDINARY_BUFFSIZE] 
     [2] : FL   afl_a_selected_doa_bins_intpl[ORDINARY_BUFFSIZE][2] 
     [3] : FL   afl_a_selected_doa_powers[ORDINARY_BUFFSIZE][2] 
     [4] : FL   afl_a_selected_bins_intpl[ORDINARY_BUFFSIZE][2] 
     [5] : S4   *ps4_a_doa_peak_num 
     [6] : FL afl_a_peak_bins_intpl[ORDINARY_BUFFSIZE *   2] 
     [7] : FL afl_a_peak_powers[ORDINARY_BUFFSIZE *   2] 
     [8] : FL afl_a_peak_doa_bins_intpl[ORDINARY_BUFFSIZE *   2] 
     [9] : FL afl_a_peak_doa_powers[ORDINARY_BUFFSIZE *   2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_iRet; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[4] MAINPROCESS(1) equal s4_t_iRet 0;
[5] MAINPROCESS(1) for  for ( 
[6] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[7] MAINPROCESS(1) for  s4_t_lp_i < ORDINARY_BUFFSIZE; 
[8] MAINPROCESS(1) for  s4_t_lp_i++ 
[9] MAINPROCESS(1) for  ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) for  for ( 
[12] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[13] SUBPROCESS(1) for  s4_t_lp_k < as4_a_doa_num[s4_t_lp_i]; 
[14] SUBPROCESS(1) for  s4_t_lp_k++ 
[15] SUBPROCESS(1) for  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) if if( 
[18] SUBSUBPROCESS(1) if afl_a_selected_doa_bins_intpl[s4_t_lp_i][s4_t_lp_k] > 0 
[19] SUBSUBPROCESS(1) if ) 
[20] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[21] SUBSUBSUBPROCESS(1) equal afl_a_peak_bins_intpl[s4_t_iRet] afl_a_selected_bins_intpl[s4_t_lp_i][s4_t_lp_k];
[22] SUBSUBSUBPROCESS(1) equal afl_a_peak_powers[s4_t_iRet] afl_a_peak_power[s4_t_lp_i];
[23] SUBSUBSUBPROCESS(1) equal afl_a_peak_doa_bins_intpl[s4_t_iRet] afl_a_selected_doa_bins_intpl[s4_t_lp_i][s4_t_lp_k];
[24] SUBSUBSUBPROCESS(1) equal afl_a_peak_doa_powers[s4_t_iRet] afl_a_selected_doa_powers[s4_t_lp_i][s4_t_lp_k];
[25] SUBSUBSUBPROCESS(1) proc s4_t_iRet++; 
----------------- Total Codes : 25 lines
--------------------------
[Function Name] : fn_bsm_ordinary_make_pair 
-Return type : VD 
-Argument : 12 
     [0] : S4   s4_a_peak_num_up_music 
     [1] : const FL afl_a_peak_bins_intpl_up[ORDINARY_BUFFSIZE *   2] 
     [2] : FL afl_a_peak_powers_up[ORDINARY_BUFFSIZE *   2] 
     [3] : const FL afl_a_peak_doa_bins_intpl_up[ORDINARY_BUFFSIZE *   2] 
     [4] : const FL afl_a_peak_doa_powers_up[ORDINARY_BUFFSIZE *   2] 
     [5] : S4   s4_a_peak_num_dn_music 
     [6] : const FL afl_a_peak_bins_intpl_dn[ORDINARY_BUFFSIZE *   2] 
     [7] : FL afl_a_peak_powers_dn[ORDINARY_BUFFSIZE *   2] 
     [8] : const FL afl_a_peak_doa_bins_intpl_dn[ORDINARY_BUFFSIZE *   2] 
     [9] : const FL afl_a_peak_doa_powers_dn[ORDINARY_BUFFSIZE *   2] 
     [10] : S4*   ps4_a_pair_num_ordinary 
     [11] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 as4_t_used_peak_up[ORDINARY_BUFFSIZE * 2]; 
[3] MAINPROCESS(1) proc S4 as4_t_used_peak_dn[ORDINARY_BUFFSIZE * 2]; 
[4] MAINPROCESS(1) proc S4 as4_t_pair_index_up[ORDINARY_BUFFSIZE * 2]; 
[5] MAINPROCESS(1) proc S4 as4_t_pair_index_dn[ORDINARY_BUFFSIZE * 2]; 
[6] MAINPROCESS(1) for  for ( 
[7] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[8] MAINPROCESS(1) for  s4_t_lp_i < ( 
[9] MAINPROCESS(1) for  ORDINARY_BUFFSIZE * 2 
[10] MAINPROCESS(1) for  ); 
[11] MAINPROCESS(1) for  s4_t_lp_i++ 
[12] MAINPROCESS(1) for  ) 
[13] MAINPROCESS(1) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal as4_t_used_peak_up[s4_t_lp_i] 0;
[15] SUBPROCESS(1) equal as4_t_used_peak_dn[s4_t_lp_i] 0;
[16] SUBPROCESS(1) equal as4_t_pair_index_up[s4_t_lp_i] 0;
[17] SUBPROCESS(1) equal as4_t_pair_index_dn[s4_t_lp_i] 0;
[18] MAINPROCESS(2) func<start> fn_bsm_ordinary_make_pair_sot( 
[19] MAINPROCESS(2) func s4_a_peak_num_up_music, 
[20] MAINPROCESS(2) func (const FL *)afl_a_peak_bins_intpl_up, 
[21] MAINPROCESS(2) func (const FL *)afl_a_peak_powers_up, 
[22] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_bins_intpl_up, 
[23] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_powers_up, 
[24] MAINPROCESS(2) func s4_a_peak_num_dn_music, 
[25] MAINPROCESS(2) func (const FL *)afl_a_peak_bins_intpl_dn, 
[26] MAINPROCESS(2) func (const FL *)afl_a_peak_powers_dn, 
[27] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_bins_intpl_dn, 
[28] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_powers_dn, 
[29] MAINPROCESS(2) func as4_t_used_peak_up, 
[30] MAINPROCESS(2) func as4_t_used_peak_dn, 
[31] MAINPROCESS(2) func as4_t_pair_index_up, 
[32] MAINPROCESS(2) func as4_t_pair_index_dn, 
[33] MAINPROCESS(2) func ps4_a_pair_num_ordinary, 
[34] MAINPROCESS(2) func ast_a_normal_ordinary 
[35] MAINPROCESS(2) func<end> ); 
[36] MAINPROCESS(2) func<start> fn_bsm_ordinary_make_pair_stationary( 
[37] MAINPROCESS(2) func s4_a_peak_num_up_music, 
[38] MAINPROCESS(2) func (const FL *)afl_a_peak_bins_intpl_up, 
[39] MAINPROCESS(2) func afl_a_peak_powers_up, 
[40] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_bins_intpl_up, 
[41] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_powers_up, 
[42] MAINPROCESS(2) func s4_a_peak_num_dn_music, 
[43] MAINPROCESS(2) func (const FL *)afl_a_peak_bins_intpl_dn, 
[44] MAINPROCESS(2) func afl_a_peak_powers_dn, 
[45] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_bins_intpl_dn, 
[46] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_powers_dn, 
[47] MAINPROCESS(2) func as4_t_used_peak_up, 
[48] MAINPROCESS(2) func as4_t_used_peak_dn, *ps4_a_pair_num_ordinary 
[49] MAINPROCESS(2) func<end> ); 
[50] MAINPROCESS(2) func<start> fn_bsm_ordinary_make_pair_moving( 
[51] MAINPROCESS(2) func s4_a_peak_num_up_music, 
[52] MAINPROCESS(2) func (const FL *)afl_a_peak_bins_intpl_up, 
[53] MAINPROCESS(2) func (const FL *)afl_a_peak_powers_up, 
[54] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_bins_intpl_up, 
[55] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_powers_up, 
[56] MAINPROCESS(2) func s4_a_peak_num_dn_music, 
[57] MAINPROCESS(2) func (const FL *)afl_a_peak_bins_intpl_dn, 
[58] MAINPROCESS(2) func (const FL *)afl_a_peak_powers_dn, 
[59] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_bins_intpl_dn, 
[60] MAINPROCESS(2) func (const FL *)afl_a_peak_doa_powers_dn, 
[61] MAINPROCESS(2) func as4_t_used_peak_up, 
[62] MAINPROCESS(2) func as4_t_used_peak_dn, 
[63] MAINPROCESS(2) func as4_t_pair_index_up, 
[64] MAINPROCESS(2) func as4_t_pair_index_dn, 
[65] MAINPROCESS(2) func ps4_a_pair_num_ordinary, 
[66] MAINPROCESS(2) func ast_a_normal_ordinary 
[67] MAINPROCESS(2) func<end> ); 
[68] MAINPROCESS(2) func<start> fn_bsm_ordinary_make_pair_outer( 
[69] MAINPROCESS(2) func ps4_a_pair_num_ordinary, 
[70] MAINPROCESS(2) func ast_a_normal_ordinary 
[71] MAINPROCESS(2) func<end> ); 
[72] MAINPROCESS(2) return return; 
----------------- Total Codes : 72 lines
--------------------------
[Function Name] : fn_bsm_ordinary_make_pair_sot 
-Return type : VD 
-Argument : 16 
     [0] : S4   s4_a_peak_num_up 
     [1] : const FL afl_a_peak_bins_intpl_up[ORDINARY_BUFFSIZE *   2] 
     [2] : const FL afl_a_peak_powers_up[ORDINARY_BUFFSIZE *   2] 
     [3] : const FL afl_a_peak_doa_bins_intpl_up[ORDINARY_BUFFSIZE *   2] 
     [4] : const FL afl_a_peak_doa_powers_up[ORDINARY_BUFFSIZE *   2] 
     [5] : S4   s4_a_peak_num_dn 
     [6] : const FL afl_a_peak_bins_intpl_dn[ORDINARY_BUFFSIZE *   2] 
     [7] : const FL afl_a_peak_powers_dn[ORDINARY_BUFFSIZE *   2] 
     [8] : const FL afl_a_peak_doa_bins_intpl_dn[ORDINARY_BUFFSIZE *   2] 
     [9] : const FL afl_a_peak_doa_powers_dn[ORDINARY_BUFFSIZE *   2] 
     [10] : S4 as4_a_used_peak_up[ORDINARY_BUFFSIZE *   2] 
     [11] : S4 as4_a_used_peak_dn[ORDINARY_BUFFSIZE *   2] 
     [12] : S4 as4_a_pair_index_up[ORDINARY_BUFFSIZE *   2] 
     [13] : S4 as4_a_pair_index_dn[ORDINARY_BUFFSIZE *   2] 
     [14] : S4   *ps4_a_pair_num 
     [15] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc FL afl_t_compare[ORDINARY_BUFFSIZE * 2][ORDINARY_BUFFSIZE * 2]; 
[4] MAINPROCESS(1) equal S4 s4_t_tmp_doa_diff_up_down DOA_DIFF_UP_DOWN;
[5] MAINPROCESS(1) proc FL fl_t_tmp_Robs; 
[6] MAINPROCESS(1) proc FL fl_t_tmp_Rxobs; 
[7] MAINPROCESS(1) proc FL fl_t_tmp_theta_up; 
[8] MAINPROCESS(1) proc FL fl_t_tmp_theta_dn; 
[9] MAINPROCESS(1) proc S4 s4_t_found; 
[10] MAINPROCESS(1) proc FL fl_t_min_comp; 
[11] MAINPROCESS(1) equal S4 as4_t_tmp_pair_index_up 0;
[12] MAINPROCESS(1) equal S4 as4_t_tmp_pair_index_dn 0;
[13] MAINPROCESS(1) proc S4 s4_t_pair_num; 
[14] MAINPROCESS(1) proc S4 s4_t_tmp_pair_num; 
[15] MAINPROCESS(1) for  for ( 
[16] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[17] MAINPROCESS(1) for  s4_t_lp_i < ( 
[18] MAINPROCESS(1) for  ORDINARY_BUFFSIZE * 2 
[19] MAINPROCESS(1) for  ); 
[20] MAINPROCESS(1) for  s4_t_lp_i++ 
[21] MAINPROCESS(1) for  ) 
[22] MAINPROCESS(1) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) for  for ( 
[24] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[25] SUBPROCESS(1) for  s4_t_lp_k < ( 
[26] SUBPROCESS(1) for  ORDINARY_BUFFSIZE * 2 
[27] SUBPROCESS(1) for  ); 
[28] SUBPROCESS(1) for  s4_t_lp_k++ 
[29] SUBPROCESS(1) for  ) 
[30] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) equal afl_t_compare[s4_t_lp_i][s4_t_lp_k] 1000.0;
[32] MAINPROCESS(2) equal s4_t_tmp_pair_num 0;
[33] MAINPROCESS(2) equal s4_t_pair_num 0;
[34] MAINPROCESS(2) for  for ( 
[35] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[36] MAINPROCESS(2) for  s4_t_lp_i < s4_a_peak_num_up; 
[37] MAINPROCESS(2) for  s4_t_lp_i++ 
[38] MAINPROCESS(2) for  ) 
[39] MAINPROCESS(2) subproc SUBPROCESS(1) 
[40] SUBPROCESS(1) equal fl_t_tmp_Rxobs CFL_UNKNOWN_VALUE;
[41] SUBPROCESS(1) if  if ( 
[42] SUBPROCESS(1) if  as4_a_used_peak_up[s4_t_lp_i] == 0 
[43] SUBPROCESS(1) if  ) 
[44] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[45] SUBSUBPROCESS(1) func<start> fl_t_tmp_theta_up = fl_transform_doabin_to_rad_float( 
[46] SUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_up[s4_t_lp_i], 
[47] SUBSUBPROCESS(1) func 0 
[48] SUBSUBPROCESS(1) func<end> ); 
[49] SUBSUBPROCESS(1) for  for ( 
[50] SUBSUBPROCESS(1) for  s4_t_lp_k = 0; 
[51] SUBSUBPROCESS(1) for  s4_t_lp_k < s4_a_peak_num_dn; 
[52] SUBSUBPROCESS(1) for  s4_t_lp_k++ 
[53] SUBSUBPROCESS(1) for  ) 
[54] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[55] SUBSUBSUBPROCESS(1) if  if ( 
[56] SUBSUBSUBPROCESS(1) if  as4_a_used_peak_dn[s4_t_lp_k] == 0 
[57] SUBSUBSUBPROCESS(1) if  ) 
[58] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBSUBPROCESS(1) if  if ( 
[60] SUBSUBSUBSUBPROCESS(1) if  (afl_a_peak_bins_intpl_up[s4_t_lp_i] < (FL)((NB_FFT_PT / 2) + VERYNEAR_FREQ_BIN_LIMIT) 
[61] SUBSUBSUBSUBPROCESS(1) if  ) 
[62] SUBSUBSUBSUBPROCESS(1) if  && (afl_a_peak_bins_intpl_dn[s4_t_lp_k] < (FL)((NB_FFT_PT / 2) + VERYNEAR_FREQ_BIN_LIMIT) 
[63] SUBSUBSUBSUBPROCESS(1) if  ) 
[64] SUBSUBSUBSUBPROCESS(1) if  ) 
[65] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[66] SUBSUBSUBSUBSUBPROCESS(1) equal s4_t_tmp_doa_diff_up_down (S4)CU1_DOA_DIFF_UP_DOWN_VERYNEAR;
[67] SUBSUBSUBSUBPROCESS(2) else if  else if ( 
[68] SUBSUBSUBSUBPROCESS(2) else if  (afl_a_peak_bins_intpl_up[s4_t_lp_i] < (FL)((NB_FFT_PT / 2) + NEAR_FREQ_BIN_LIMIT) 
[69] SUBSUBSUBSUBPROCESS(2) else if  ) 
[70] SUBSUBSUBSUBPROCESS(2) else if  && (afl_a_peak_bins_intpl_dn[s4_t_lp_k] < (FL)((NB_FFT_PT / 2) + NEAR_FREQ_BIN_LIMIT) 
[71] SUBSUBSUBSUBPROCESS(2) else if  ) 
[72] SUBSUBSUBSUBPROCESS(2) else if  ) 
[73] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[74] SUBSUBSUBSUBSUBPROCESS(1) equal s4_t_tmp_doa_diff_up_down DOA_DIFF_UP_DOWN_NEAR;
[75] SUBSUBSUBSUBPROCESS(3) else else 
[76] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[77] SUBSUBSUBSUBSUBPROCESS(1) equal s4_t_tmp_doa_diff_up_down DOA_DIFF_UP_DOWN;
[78] SUBSUBSUBSUBPROCESS(4) func<start> fl_t_tmp_Robs = - RCOF * ( 
[79] SUBSUBSUBSUBPROCESS(4) func afl_a_peak_bins_intpl_up[s4_t_lp_i] + afl_a_peak_bins_intpl_dn[s4_t_lp_k] - (FL)NB_FFT_PT 
[80] SUBSUBSUBSUBPROCESS(4) func<end> ); 
[81] SUBSUBSUBSUBPROCESS(4) func<start> fl_t_tmp_theta_dn = fl_transform_doabin_to_rad_float( 
[82] SUBSUBSUBSUBPROCESS(4) func afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k], 
[83] SUBSUBSUBSUBPROCESS(4) func 1 
[84] SUBSUBSUBSUBPROCESS(4) func<end> ); 
[85] SUBSUBSUBSUBPROCESS(4) equal fl_t_tmp_Rxobs (fl_t_tmp_Robs * (FL)fl_sin(0.50F * (fl_t_tmp_theta_up + fl_t_tmp_theta_dn))) + st_g_bsm_loop_data.afl_installed_angle[1];
[86] SUBSUBSUBPROCESS(2) else else 
[87] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[88] SUBSUBSUBSUBPROCESS(1) equal fl_t_tmp_Rxobs CFL_UNKNOWN_VALUE;
[89] SUBSUBSUBPROCESS(3) if  if ( 
[90] SUBSUBSUBPROCESS(3) if  ((fl_t_tmp_Rxobs != CFL_UNKNOWN_VALUE 
[91] SUBSUBSUBPROCESS(3) if  ) 
[92] SUBSUBSUBPROCESS(3) if  && (fl_t_tmp_Rxobs < (st_g_bsm_loop_data.afl_wall_width[0] - 3.0F)) 
[93] SUBSUBSUBPROCESS(3) if  ) 
[94] SUBSUBSUBPROCESS(3) if  && (afl_a_peak_bins_intpl_up[s4_t_lp_i] > 259.0F 
[95] SUBSUBSUBPROCESS(3) if  ) 
[96] SUBSUBSUBPROCESS(3) if  && (afl_a_peak_bins_intpl_dn[s4_t_lp_k] > 259.0F 
[97] SUBSUBSUBPROCESS(3) if  ) 
[98] SUBSUBSUBPROCESS(3) if  && (afl_a_peak_bins_intpl_up[s4_t_lp_i] < 266.0F 
[99] SUBSUBSUBPROCESS(3) if  ) 
[100] SUBSUBSUBPROCESS(3) if  && (afl_a_peak_bins_intpl_dn[s4_t_lp_k] < 266.0F 
[101] SUBSUBSUBPROCESS(3) if  ) 
[102] SUBSUBSUBPROCESS(3) if  && (fl_g_v_self_bsm_for_base > CFL_CANOUT_VSELF_MIN 
[103] SUBSUBSUBPROCESS(3) if  ) 
[104] SUBSUBSUBPROCESS(3) if  && ((S4)fl_abs((FL)s2_g_curvr_for_base ) > (S4)CU1_CANOUT_CURVER_MIN_SOT 
[105] SUBSUBSUBPROCESS(3) if  ) 
[106] SUBSUBSUBPROCESS(3) if  ) 
[107] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[108] SUBSUBSUBSUBPROCESS(1) if  if ( 
[109] SUBSUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.afl_wall_width[0] > 5.0F 
[110] SUBSUBSUBSUBPROCESS(1) if  ) 
[111] SUBSUBSUBSUBPROCESS(1) if  && (st_g_bsm_loop_data.as4_slow_sot_find[0] > 0 
[112] SUBSUBSUBSUBPROCESS(1) if  ) 
[113] SUBSUBSUBSUBPROCESS(1) if  ) 
[114] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[115] SUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[116] SUBSUBSUBSUBSUBPROCESS(1) if  (afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] > (FL)CS4_SLOW_SOT_DOA_LOWER_LIMIT 
[117] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[118] SUBSUBSUBSUBSUBPROCESS(1) if  && (afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k] > (FL)CS4_SLOW_SOT_DOA_LOWER_LIMIT 
[119] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[120] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[121] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[122] SUBSUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[123] SUBSUBSUBSUBSUBSUBPROCESS(1) if  (fl_abs(afl_a_peak_doa_powers_up[s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k]) < POW_DIFF_UP_DOWN_DOA 
[124] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[125] SUBSUBSUBSUBSUBSUBPROCESS(1) if  && (fl_abs(afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]) < (FL)s4_t_tmp_doa_diff_up_down 
[126] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[127] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[128] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[129] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal<start> afl_t_compare[s4_t_lp_i][s4_t_lp_k] = ( 
[130] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal  8.0F * fl_abs(afl_a_peak_doa_powers_up[s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k])) + 1.0F * fl_abs((FL)(afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]) 
[131] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal<end> ); 
[132] SUBSUBSUBSUBPROCESS(2) else if  else if ( 
[133] SUBSUBSUBSUBPROCESS(2) else if  (st_g_bsm_loop_data.afl_wall_width[0] <= 4.0F 
[134] SUBSUBSUBSUBPROCESS(2) else if  ) 
[135] SUBSUBSUBSUBPROCESS(2) else if  && (st_g_bsm_loop_data.as4_slow_sot_find[0] > 0 
[136] SUBSUBSUBSUBPROCESS(2) else if  ) 
[137] SUBSUBSUBSUBPROCESS(2) else if  && (st_g_bsm_loop_data.as4_slow_sot_find[1] < WALL_REJECT_TH1 
[138] SUBSUBSUBSUBPROCESS(2) else if  ) 
[139] SUBSUBSUBSUBPROCESS(2) else if  ) 
[140] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[141] SUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[142] SUBSUBSUBSUBSUBPROCESS(1) if  (afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] > ((FL)N_DOA - st_g_bsm_loop_data.afl_installed_angle[0] + (FL)SLOW_SOT_DOA_TH1) 
[143] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[144] SUBSUBSUBSUBSUBPROCESS(1) if  && (afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k] > ((FL)N_DOA - st_g_bsm_loop_data.afl_installed_angle[0] + (FL)SLOW_SOT_DOA_TH1) 
[145] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[146] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[147] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[148] SUBSUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[149] SUBSUBSUBSUBSUBSUBPROCESS(1) if  (fl_abs(afl_a_peak_doa_powers_up[s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k]) < POW_DIFF_UP_DOWN_DOA 
[150] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[151] SUBSUBSUBSUBSUBSUBPROCESS(1) if  && (fl_abs(afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]) < (FL)s4_t_tmp_doa_diff_up_down 
[152] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[153] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[154] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[155] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal<start> afl_t_compare[s4_t_lp_i][s4_t_lp_k] = ( 
[156] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal 8.0F * fl_abs(afl_a_peak_doa_powers_up[s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k])) + (1.0F * fl_abs(afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]) 
[157] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal<end> ); 
[158] SUBSUBSUBSUBPROCESS(3) else else 
[159] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[160] SUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[161] SUBSUBSUBSUBSUBPROCESS(1) if  (afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] > ((FL)N_DOA - st_g_bsm_loop_data.afl_installed_angle[0] + (FL)SLOW_SOT_DOA_TH2) 
[162] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[163] SUBSUBSUBSUBSUBPROCESS(1) if  && (afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k] > ((FL)N_DOA - st_g_bsm_loop_data.afl_installed_angle[0] + (FL)SLOW_SOT_DOA_TH2) 
[164] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[165] SUBSUBSUBSUBSUBPROCESS(1) if  && (afl_a_peak_doa_powers_up[s4_t_lp_i] > SLOW_SOT_DOA_POW_TH 
[166] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[167] SUBSUBSUBSUBSUBPROCESS(1) if  && (afl_a_peak_doa_powers_dn[s4_t_lp_k] > SLOW_SOT_DOA_POW_TH 
[168] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[169] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[170] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[171] SUBSUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[172] SUBSUBSUBSUBSUBSUBPROCESS(1) if  (fl_abs(afl_a_peak_doa_powers_up[s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k]) < POW_DIFF_UP_DOWN_DOA 
[173] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[174] SUBSUBSUBSUBSUBSUBPROCESS(1) if  && (fl_abs(afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]) < (FL)s4_t_tmp_doa_diff_up_down 
[175] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[176] SUBSUBSUBSUBSUBSUBPROCESS(1) if  && ((afl_a_peak_bins_intpl_dn[s4_t_lp_k] - afl_a_peak_bins_intpl_up[s4_t_lp_i]) > 0.0F  
[177] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[178] SUBSUBSUBSUBSUBSUBPROCESS(1) if  && ((afl_a_peak_bins_intpl_dn[s4_t_lp_k] - afl_a_peak_bins_intpl_up[s4_t_lp_i]) < 3.0F  
[179] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[180] SUBSUBSUBSUBSUBSUBPROCESS(1) if  ) 
[181] SUBSUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBSUBPROCESS(1) 
[182] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal<start> afl_t_compare[s4_t_lp_i][s4_t_lp_k] = ( 
[183] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal 8.0F * fl_abs(afl_a_peak_doa_powers_up[s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k])) + (1.0F * fl_abs(afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]) 
[184] SUBSUBSUBSUBSUBSUBSUBPROCESS(1) equal<end> ); 
[185] MAINPROCESS(3) for  for ( 
[186] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[187] MAINPROCESS(3) for  s4_t_lp_i < s4_a_peak_num_up; 
[188] MAINPROCESS(3) for  s4_t_lp_i++ 
[189] MAINPROCESS(3) for  ) 
[190] MAINPROCESS(3) subproc SUBPROCESS(1) 
[191] SUBPROCESS(1) equal fl_t_min_comp 1000.0;
[192] SUBPROCESS(1) equal s4_t_found 0;
[193] SUBPROCESS(1) for  for ( 
[194] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[195] SUBPROCESS(1) for  s4_t_lp_k < s4_a_peak_num_dn; 
[196] SUBPROCESS(1) for  s4_t_lp_k++ 
[197] SUBPROCESS(1) for  ) 
[198] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[199] SUBSUBPROCESS(1) func<start> fn_bsm_ordinary_check_minimum_pair( 
[200] SUBSUBPROCESS(1) func s4_t_lp_i, 
[201] SUBSUBPROCESS(1) func s4_t_lp_k, 
[202] SUBSUBPROCESS(1) func afl_t_compare, 
[203] SUBSUBPROCESS(1) func as4_a_used_peak_up, 
[204] SUBSUBPROCESS(1) func as4_a_used_peak_dn, 
[205] SUBSUBPROCESS(1) func as4_a_pair_index_up, 
[206] SUBSUBPROCESS(1) func as4_a_pair_index_dn, 
[207] SUBSUBPROCESS(1) func &fl_t_min_comp, 
[208] SUBSUBPROCESS(1) func &s4_t_found, 
[209] SUBSUBPROCESS(1) func &as4_t_tmp_pair_index_up, 
[210] SUBSUBPROCESS(1) func &as4_t_tmp_pair_index_dn, 
[211] SUBSUBPROCESS(1) func &s4_t_pair_num 
[212] SUBSUBPROCESS(1) func<end> ); 
[213] SUBPROCESS(2) if  if ( 
[214] SUBPROCESS(2) if  s4_t_found == 1 
[215] SUBPROCESS(2) if  ) 
[216] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[217] SUBSUBPROCESS(1) equal as4_a_used_peak_up[as4_t_tmp_pair_index_up] 1;
[218] SUBSUBPROCESS(1) equal as4_a_used_peak_dn[as4_t_tmp_pair_index_dn] 1;
[219] SUBSUBPROCESS(1) equal as4_a_pair_index_up[s4_t_pair_num] as4_t_tmp_pair_index_up;
[220] SUBSUBPROCESS(1) equal as4_a_pair_index_dn[s4_t_pair_num] as4_t_tmp_pair_index_dn;
[221] SUBSUBPROCESS(1) proc s4_t_pair_num++; 
[222] MAINPROCESS(4) for  for ( 
[223] MAINPROCESS(4) for  s4_t_lp_i = 0; 
[224] MAINPROCESS(4) for  s4_t_lp_i < s4_t_pair_num; 
[225] MAINPROCESS(4) for  s4_t_lp_i++ 
[226] MAINPROCESS(4) for  ) 
[227] MAINPROCESS(4) subproc SUBPROCESS(1) 
[228] SUBPROCESS(1) if  if ( 
[229] SUBPROCESS(1) if  s4_t_lp_i < ORDINARY_BUFFSIZE 
[230] SUBPROCESS(1) if  ) 
[231] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[232] SUBSUBPROCESS(1) func<start> fl_t_tmp_theta_up = fl_transform_doabin_to_rad_float( 
[233] SUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_up[as4_a_pair_index_up[s4_t_lp_i]], 
[234] SUBSUBPROCESS(1) func 0 
[235] SUBSUBPROCESS(1) func<end> ); 
[236] SUBSUBPROCESS(1) func<start> fl_t_tmp_theta_dn = fl_transform_doabin_to_rad_float( 
[237] SUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_dn[as4_a_pair_index_dn[s4_t_lp_i]], 
[238] SUBSUBPROCESS(1) func 1 
[239] SUBSUBPROCESS(1) func<end> ); 
[240] SUBSUBPROCESS(1) func<start> fl_t_tmp_Robs = -RCOF * ( 
[241] SUBSUBPROCESS(1) func (afl_a_peak_bins_intpl_up[as4_a_pair_index_up[s4_t_lp_i]] + afl_a_peak_bins_intpl_dn[as4_a_pair_index_dn[s4_t_lp_i]]) - NB_FFT_PT 
[242] SUBSUBPROCESS(1) func<end> ); 
[243] SUBSUBPROCESS(1) equal fl_t_tmp_Rxobs (fl_t_tmp_Robs * (FL)fl_sin(0.50F * (fl_t_tmp_theta_up + fl_t_tmp_theta_dn))) + st_g_bsm_loop_data.afl_installed_angle[1];
[244] SUBSUBPROCESS(1) if  if ( 
[245] SUBSUBPROCESS(1) if  fl_abs(fl_t_tmp_Rxobs - st_g_bsm_loop_data.afl_wall_width[0]) > 0.8F 
[246] SUBSUBPROCESS(1) if  ) 
[247] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[248] SUBSUBSUBPROCESS(1) func<start> fn_set_normal_data( 
[249] SUBSUBSUBPROCESS(1) func &ast_a_normal_ordinary[s4_t_lp_i], 
[250] SUBSUBSUBPROCESS(1) func afl_a_peak_bins_intpl_up[as4_a_pair_index_up[s4_t_lp_i]], 
[251] SUBSUBSUBPROCESS(1) func afl_a_peak_bins_intpl_dn[as4_a_pair_index_dn[s4_t_lp_i]], 
[252] SUBSUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_up[as4_a_pair_index_up[s4_t_lp_i]], 
[253] SUBSUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_dn[as4_a_pair_index_dn[s4_t_lp_i]], 
[254] SUBSUBSUBPROCESS(1) func afl_a_peak_powers_up[as4_a_pair_index_up[s4_t_lp_i]], 
[255] SUBSUBSUBPROCESS(1) func afl_a_peak_powers_dn[as4_a_pair_index_dn[s4_t_lp_i]], 
[256] SUBSUBSUBPROCESS(1) func afl_a_peak_doa_powers_up[as4_a_pair_index_up[s4_t_lp_i]], 
[257] SUBSUBSUBPROCESS(1) func afl_a_peak_doa_powers_dn[as4_a_pair_index_dn[s4_t_lp_i]], 
[258] SUBSUBSUBPROCESS(1) func 1, 
[259] SUBSUBSUBPROCESS(1) func 0 
[260] SUBSUBSUBPROCESS(1) func<end> ); 
[261] SUBSUBSUBPROCESS(1) proc s4_t_tmp_pair_num++; 
[262] SUBSUBPROCESS(2) else else 
[263] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[264] SUBSUBSUBPROCESS(1) if  if ( 
[265] SUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.as4_slow_sot_find[0] > 0 
[266] SUBSUBSUBPROCESS(1) if  ) 
[267] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[268] SUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_slow_sot_find[0] 0;
[269] SUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_leading[0] 0;
[270] MAINPROCESS(5) return return; 
----------------- Total Codes : 270 lines
--------------------------
[Function Name] : fn_bsm_ordinary_make_pair_stationary 
-Return type : VD 
-Argument : 13 
     [0] : S4   s4_a_peak_num_up 
     [1] : const FL afl_a_peak_bins_intpl_up[ORDINARY_BUFFSIZE *   2] 
     [2] : FL afl_a_peak_powers_up[ORDINARY_BUFFSIZE *   2] 
     [3] : const FL afl_a_peak_doa_bins_intpl_up[ORDINARY_BUFFSIZE *   2] 
     [4] : const FL afl_a_peak_doa_powers_up[ORDINARY_BUFFSIZE *   2] 
     [5] : S4   s4_a_peak_num_dn 
     [6] : const FL afl_a_peak_bins_intpl_dn[ORDINARY_BUFFSIZE *   2] 
     [7] : FL afl_a_peak_powers_dn[ORDINARY_BUFFSIZE *   2] 
     [8] : const FL afl_a_peak_doa_bins_intpl_dn[ORDINARY_BUFFSIZE *   2] 
     [9] : const FL afl_a_peak_doa_powers_dn[ORDINARY_BUFFSIZE *   2] 
     [10] : S4 as4_a_used_peak_up[ORDINARY_BUFFSIZE *   2] 
     [11] : S4 as4_a_used_peak_dn[ORDINARY_BUFFSIZE *   2] 
     [12] : S4   s4_a_pair_num 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc FL afl_t_compare[ORDINARY_BUFFSIZE * 2][ORDINARY_BUFFSIZE * 2]; 
[4] MAINPROCESS(1) equal S4 s4_t_tmp_doa_diff_up_down DOA_DIFF_UP_DOWN;
[5] MAINPROCESS(1) proc S4 s4_t_shift; 
[6] MAINPROCESS(1) proc S4 s4_t_found; 
[7] MAINPROCESS(1) proc FL fl_t_min_comp; 
[8] MAINPROCESS(1) equal S4 as4_t_tmp_pair_index_up 0;
[9] MAINPROCESS(1) equal S4 as4_t_tmp_pair_index_dn 0;
[10] MAINPROCESS(1) proc S4 s4_t_pair_num_dummy; 
[11] MAINPROCESS(1) proc S4 as4_t_pair_index_up_dummy[ORDINARY_BUFFSIZE * 2]; 
[12] MAINPROCESS(1) proc S4 as4_t_pair_index_dn_dummy[ORDINARY_BUFFSIZE * 2]; 
[13] MAINPROCESS(1) equal<start> s4_t_shift = ( 
[14] MAINPROCESS(1) equal S4)(fl_g_v_self_bsm_for_base / 3.60F / VCOF + 0.50F 
[15] MAINPROCESS(1) equal<end> ); 
[16] MAINPROCESS(1) equal s4_t_pair_num_dummy (S4)0;
[17] MAINPROCESS(1) for  for ( 
[18] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[19] MAINPROCESS(1) for  s4_t_lp_i < ( 
[20] MAINPROCESS(1) for  ORDINARY_BUFFSIZE * 2 
[21] MAINPROCESS(1) for  ); 
[22] MAINPROCESS(1) for  s4_t_lp_i++ 
[23] MAINPROCESS(1) for  ) 
[24] MAINPROCESS(1) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) for  for ( 
[26] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[27] SUBPROCESS(1) for  s4_t_lp_k < ( 
[28] SUBPROCESS(1) for  ORDINARY_BUFFSIZE * 2 
[29] SUBPROCESS(1) for  ); 
[30] SUBPROCESS(1) for  s4_t_lp_k++ 
[31] SUBPROCESS(1) for  ) 
[32] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[33] SUBSUBPROCESS(1) equal afl_t_compare[s4_t_lp_i][s4_t_lp_k] 1000.0;
[34] SUBPROCESS(2) equal as4_t_pair_index_up_dummy[s4_t_lp_i] (S4)0;
[35] SUBPROCESS(2) equal as4_t_pair_index_dn_dummy[s4_t_lp_i] (S4)0;
[36] MAINPROCESS(2) for  for ( 
[37] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[38] MAINPROCESS(2) for  s4_t_lp_i < s4_a_peak_num_up; 
[39] MAINPROCESS(2) for  s4_t_lp_i++ 
[40] MAINPROCESS(2) for  ) 
[41] MAINPROCESS(2) subproc SUBPROCESS(1) 
[42] SUBPROCESS(1) if  if ( 
[43] SUBPROCESS(1) if  as4_a_used_peak_up[s4_a_peak_num_up - 1 - s4_t_lp_i] == 0 
[44] SUBPROCESS(1) if  ) 
[45] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[46] SUBSUBPROCESS(1) if  if ( 
[47] SUBSUBPROCESS(1) if  afl_a_peak_bins_intpl_up[s4_a_peak_num_up - 1 - s4_t_lp_i] > (FL)((NB_FFT_PT / 2) + s4_t_shift) 
[48] SUBSUBPROCESS(1) if  ) 
[49] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBPROCESS(1) for  for ( 
[51] SUBSUBSUBPROCESS(1) for  s4_t_lp_k = 0; 
[52] SUBSUBSUBPROCESS(1) for  s4_t_lp_k < s4_a_peak_num_dn; 
[53] SUBSUBSUBPROCESS(1) for  s4_t_lp_k++ 
[54] SUBSUBSUBPROCESS(1) for  ) 
[55] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[56] SUBSUBSUBSUBPROCESS(1) if  if ( 
[57] SUBSUBSUBSUBPROCESS(1) if  (as4_a_used_peak_dn[s4_t_lp_k] == 0 
[58] SUBSUBSUBSUBPROCESS(1) if  ) 
[59] SUBSUBSUBSUBPROCESS(1) if  && ((afl_a_peak_bins_intpl_up[s4_a_peak_num_up - 1 - s4_t_lp_i] - afl_a_peak_bins_intpl_dn[s4_t_lp_k]) > (FL)(s4_t_shift - (S4)(5.0F/3.6F/VCOF) + 1)  
[60] SUBSUBSUBSUBPROCESS(1) if  ) 
[61] SUBSUBSUBSUBPROCESS(1) if  ) 
[62] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBSUBSUBPROCESS(1) equal s4_t_tmp_doa_diff_up_down DOA_DIFF_UP_DOWN;
[64] SUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[65] SUBSUBSUBSUBSUBPROCESS(1) if  (fl_abs(afl_a_peak_doa_powers_up[s4_a_peak_num_up - 1 - s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k]) < POW_DIFF_UP_DOWN_DOA 
[66] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[67] SUBSUBSUBSUBSUBPROCESS(1) if  && ((S4)fl_abs((FL)(afl_a_peak_doa_bins_intpl_up[s4_a_peak_num_up - 1 - s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k])) < s4_t_tmp_doa_diff_up_down 
[68] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[69] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[70] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[71] SUBSUBSUBSUBSUBSUBPROCESS(1) equal<start> afl_t_compare[s4_a_peak_num_up - 1 - s4_t_lp_i][s4_t_lp_k] = ( 
[72] SUBSUBSUBSUBSUBSUBPROCESS(1) equal 0.5F * fl_abs(afl_a_peak_doa_powers_up[s4_a_peak_num_up - 1 - s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k])) + (1.0F * fl_abs((FL)(afl_a_peak_doa_bins_intpl_up[s4_a_peak_num_up - 1 - s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]))) + (1.0F * fl_abs((FL)(afl_a_peak_bins_intpl_up[s4_a_peak_num_up - 1 - s4_t_lp_i] - afl_a_peak_bins_intpl_dn[s4_t_lp_k] - (FL)s4_t_shift)) 
[73] SUBSUBSUBSUBSUBSUBPROCESS(1) equal<end> ); 
[74] MAINPROCESS(3) for  for ( 
[75] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[76] MAINPROCESS(3) for  s4_t_lp_i < s4_a_peak_num_up; 
[77] MAINPROCESS(3) for  s4_t_lp_i++ 
[78] MAINPROCESS(3) for  ) 
[79] MAINPROCESS(3) subproc SUBPROCESS(1) 
[80] SUBPROCESS(1) equal fl_t_min_comp 1000.0;
[81] SUBPROCESS(1) equal s4_t_found 0;
[82] SUBPROCESS(1) for  for ( 
[83] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[84] SUBPROCESS(1) for  s4_t_lp_k < s4_a_peak_num_dn; 
[85] SUBPROCESS(1) for  s4_t_lp_k++ 
[86] SUBPROCESS(1) for  ) 
[87] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[88] SUBSUBPROCESS(1) func<start> fn_bsm_ordinary_check_minimum_pair( 
[89] SUBSUBPROCESS(1) func s4_a_peak_num_up - (S4)1 - s4_t_lp_i, 
[90] SUBSUBPROCESS(1) func s4_t_lp_k, 
[91] SUBSUBPROCESS(1) func afl_t_compare, 
[92] SUBSUBPROCESS(1) func as4_a_used_peak_up, 
[93] SUBSUBPROCESS(1) func as4_a_used_peak_dn, 
[94] SUBSUBPROCESS(1) func as4_t_pair_index_up_dummy, 
[95] SUBSUBPROCESS(1) func as4_t_pair_index_dn_dummy, 
[96] SUBSUBPROCESS(1) func &fl_t_min_comp, 
[97] SUBSUBPROCESS(1) func &s4_t_found, 
[98] SUBSUBPROCESS(1) func &as4_t_tmp_pair_index_up, 
[99] SUBSUBPROCESS(1) func &as4_t_tmp_pair_index_dn, 
[100] SUBSUBPROCESS(1) func &s4_t_pair_num_dummy 
[101] SUBSUBPROCESS(1) func<end> ); 
[102] SUBPROCESS(2) if  if ( 
[103] SUBPROCESS(2) if  s4_t_found == 1 
[104] SUBPROCESS(2) if  ) 
[105] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[106] SUBSUBPROCESS(1) equal as4_a_used_peak_up[as4_t_tmp_pair_index_up] 1;
[107] SUBSUBPROCESS(1) equal as4_a_used_peak_dn[as4_t_tmp_pair_index_dn] 1;
[108] SUBSUBPROCESS(1) equal as4_t_pair_index_up_dummy[s4_t_pair_num_dummy] as4_t_tmp_pair_index_up;
[109] SUBSUBPROCESS(1) equal as4_t_pair_index_dn_dummy[s4_t_pair_num_dummy] as4_t_tmp_pair_index_dn;
[110] SUBSUBPROCESS(1) proc s4_t_pair_num_dummy++; 
[111] MAINPROCESS(4) return return; 
----------------- Total Codes : 111 lines
--------------------------
[Function Name] : fn_bsm_ordinary_make_pair_moving 
-Return type : VD 
-Argument : 16 
     [0] : S4   s4_a_peak_num_up 
     [1] : const FL afl_a_peak_bins_intpl_up[ORDINARY_BUFFSIZE *   2] 
     [2] : const FL afl_a_peak_powers_up[ORDINARY_BUFFSIZE *   2] 
     [3] : const FL afl_a_peak_doa_bins_intpl_up[ORDINARY_BUFFSIZE *   2] 
     [4] : const FL afl_a_peak_doa_powers_up[ORDINARY_BUFFSIZE *   2] 
     [5] : S4   s4_a_peak_num_dn 
     [6] : const FL afl_a_peak_bins_intpl_dn[ORDINARY_BUFFSIZE *   2] 
     [7] : const FL afl_a_peak_powers_dn[ORDINARY_BUFFSIZE *   2] 
     [8] : const FL afl_a_peak_doa_bins_intpl_dn[ORDINARY_BUFFSIZE *   2] 
     [9] : const FL afl_a_peak_doa_powers_dn[ORDINARY_BUFFSIZE *   2] 
     [10] : S4 as4_a_used_peak_up[ORDINARY_BUFFSIZE *   2] 
     [11] : S4 as4_a_used_peak_dn[ORDINARY_BUFFSIZE *   2] 
     [12] : S4 as4_a_pair_index_up[ORDINARY_BUFFSIZE *   2] 
     [13] : S4 as4_a_pair_index_dn[ORDINARY_BUFFSIZE *   2] 
     [14] : S4   *ps4_a_pair_num 
     [15] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc FL afl_t_compare[ORDINARY_BUFFSIZE * 2][ORDINARY_BUFFSIZE * 2]; 
[4] MAINPROCESS(1) equal S4 s4_t_tmp_doa_diff_up_down DOA_DIFF_UP_DOWN;
[5] MAINPROCESS(1) proc FL fl_t_tmp_pow_diff_up_down; 
[6] MAINPROCESS(1) proc U2 u2_t_tmp_freq_diff_up_down; 
[7] MAINPROCESS(1) proc S4 s4_t_found; 
[8] MAINPROCESS(1) proc FL fl_t_min_comp; 
[9] MAINPROCESS(1) equal S4 as4_t_tmp_pair_index_up 0;
[10] MAINPROCESS(1) equal S4 as4_t_tmp_pair_index_dn 0;
[11] MAINPROCESS(1) proc S4 s4_t_pair_num; 
[12] MAINPROCESS(1) proc S4 s4_t_tmp_pair_num; 
[13] MAINPROCESS(1) equal fl_t_tmp_pow_diff_up_down POW_DIFF_UP_DOWN_DOA;
[14] MAINPROCESS(1) equal u2_t_tmp_freq_diff_up_down NB_FFT_PT;
[15] MAINPROCESS(1) for  for ( 
[16] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[17] MAINPROCESS(1) for  s4_t_lp_i < ( 
[18] MAINPROCESS(1) for  ORDINARY_BUFFSIZE * 2 
[19] MAINPROCESS(1) for  ); 
[20] MAINPROCESS(1) for  s4_t_lp_i++ 
[21] MAINPROCESS(1) for  ) 
[22] MAINPROCESS(1) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) for  for ( 
[24] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[25] SUBPROCESS(1) for  s4_t_lp_k < ( 
[26] SUBPROCESS(1) for  ORDINARY_BUFFSIZE * 2 
[27] SUBPROCESS(1) for  ); 
[28] SUBPROCESS(1) for  s4_t_lp_k++ 
[29] SUBPROCESS(1) for  ) 
[30] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) equal afl_t_compare[s4_t_lp_i][s4_t_lp_k] 1000.0;
[32] MAINPROCESS(2) for  for ( 
[33] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[34] MAINPROCESS(2) for  s4_t_lp_i < s4_a_peak_num_up; 
[35] MAINPROCESS(2) for  s4_t_lp_i++ 
[36] MAINPROCESS(2) for  ) 
[37] MAINPROCESS(2) subproc SUBPROCESS(1) 
[38] SUBPROCESS(1) if  if ( 
[39] SUBPROCESS(1) if  as4_a_used_peak_up[s4_t_lp_i] == 0 
[40] SUBPROCESS(1) if  ) 
[41] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[42] SUBSUBPROCESS(1) for  for ( 
[43] SUBSUBPROCESS(1) for  s4_t_lp_k = 0; 
[44] SUBSUBPROCESS(1) for  s4_t_lp_k < s4_a_peak_num_dn; 
[45] SUBSUBPROCESS(1) for  s4_t_lp_k++ 
[46] SUBSUBPROCESS(1) for  ) 
[47] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[48] SUBSUBSUBPROCESS(1) if  if ( 
[49] SUBSUBSUBPROCESS(1) if  as4_a_used_peak_dn[s4_t_lp_k] == 0 
[50] SUBSUBSUBPROCESS(1) if  ) 
[51] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[52] SUBSUBSUBSUBPROCESS(1) if  if ( 
[53] SUBSUBSUBSUBPROCESS(1) if  (afl_a_peak_bins_intpl_up[s4_t_lp_i] < (FL)((NB_FFT_PT / 2) + VERYNEAR_FREQ_BIN_LIMIT) 
[54] SUBSUBSUBSUBPROCESS(1) if  ) 
[55] SUBSUBSUBSUBPROCESS(1) if  && (afl_a_peak_bins_intpl_dn[s4_t_lp_k] < (FL)((NB_FFT_PT / 2) + VERYNEAR_FREQ_BIN_LIMIT) 
[56] SUBSUBSUBSUBPROCESS(1) if  ) 
[57] SUBSUBSUBSUBPROCESS(1) if  ) 
[58] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBSUBSUBPROCESS(1) equal s4_t_tmp_doa_diff_up_down (S4)CU1_DOA_DIFF_UP_DOWN_VERYNEAR;
[60] SUBSUBSUBSUBPROCESS(2) else if  else if ( 
[61] SUBSUBSUBSUBPROCESS(2) else if  (afl_a_peak_bins_intpl_up[s4_t_lp_i] < (FL)((NB_FFT_PT / 2) + NEAR_FREQ_BIN_LIMIT) 
[62] SUBSUBSUBSUBPROCESS(2) else if  ) 
[63] SUBSUBSUBSUBPROCESS(2) else if  && (afl_a_peak_bins_intpl_dn[s4_t_lp_k] < (FL)((NB_FFT_PT / 2) + NEAR_FREQ_BIN_LIMIT) 
[64] SUBSUBSUBSUBPROCESS(2) else if  ) 
[65] SUBSUBSUBSUBPROCESS(2) else if  ) 
[66] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[67] SUBSUBSUBSUBSUBPROCESS(1) equal s4_t_tmp_doa_diff_up_down DOA_DIFF_UP_DOWN_NEAR;
[68] SUBSUBSUBSUBPROCESS(3) else else 
[69] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[70] SUBSUBSUBSUBSUBPROCESS(1) equal s4_t_tmp_doa_diff_up_down DOA_DIFF_UP_DOWN;
[71] SUBSUBSUBSUBPROCESS(4) if  if ( 
[72] SUBSUBSUBSUBPROCESS(4) if  (fl_g_v_self_bsm_for_base < CANOUT_VSELF_SLOW 
[73] SUBSUBSUBSUBPROCESS(4) if  ) 
[74] SUBSUBSUBSUBPROCESS(4) if  &&  ((afl_a_peak_doa_powers_up[s4_t_lp_i] < PEAK_POW_TH_FOR_DOA_TH 
[75] SUBSUBSUBSUBPROCESS(4) if  ) 
[76] SUBSUBSUBSUBPROCESS(4) if  ||   (afl_a_peak_doa_powers_dn[s4_t_lp_k] < PEAK_POW_TH_FOR_DOA_TH)) 
[77] SUBSUBSUBSUBPROCESS(4) if  ) 
[78] SUBSUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[79] SUBSUBSUBSUBSUBPROCESS(1) equal s4_t_tmp_doa_diff_up_down DOA_DIFF_UP_DOWN_SLOW;
[80] SUBSUBSUBSUBPROCESS(5) if  if ( 
[81] SUBSUBSUBSUBPROCESS(5) if  (st_g_bsm_loop_data.as4_slow_sot_find[0] != (S4)0 
[82] SUBSUBSUBSUBPROCESS(5) if  ) 
[83] SUBSUBSUBSUBPROCESS(5) if  &&  (afl_a_peak_bins_intpl_dn[s4_t_lp_k] < (FL)(NB_FFT_PT / (S4)2 + (S4)9)) 
[84] SUBSUBSUBSUBPROCESS(5) if  ) 
[85] SUBSUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[86] SUBSUBSUBSUBSUBPROCESS(1) equal s4_t_tmp_doa_diff_up_down (S4)3;
[87] SUBSUBSUBSUBSUBPROCESS(1) equal fl_t_tmp_pow_diff_up_down (FL)2.0F;
[88] SUBSUBSUBSUBSUBPROCESS(1) func<start> u2_t_tmp_freq_diff_up_down = u2_cast_from_fl( 
[89] SUBSUBSUBSUBSUBPROCESS(1) func (FL)15.0F / (FL)3.6F / (FL)RCOF / (FL)2.0F 
[90] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[91] SUBSUBSUBSUBPROCESS(6) else else 
[92] SUBSUBSUBSUBPROCESS(6) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[93] SUBSUBSUBSUBSUBPROCESS(1) equal fl_t_tmp_pow_diff_up_down POW_DIFF_UP_DOWN_DOA;
[94] SUBSUBSUBSUBSUBPROCESS(1) equal u2_t_tmp_freq_diff_up_down NB_FFT_PT;
[95] SUBSUBSUBSUBPROCESS(7) if  if ( 
[96] SUBSUBSUBSUBPROCESS(7) if  fl_g_v_self_bsm_for_base < (FL)20.0F 
[97] SUBSUBSUBSUBPROCESS(7) if  ) 
[98] SUBSUBSUBSUBPROCESS(7) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[99] SUBSUBSUBSUBSUBPROCESS(1) equal fl_t_tmp_pow_diff_up_down (FL)3.0F;
[100] SUBSUBSUBSUBPROCESS(8) if  if ( 
[101] SUBSUBSUBSUBPROCESS(8) if  (fl_abs(afl_a_peak_doa_powers_up[s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k]) < fl_t_tmp_pow_diff_up_down 
[102] SUBSUBSUBSUBPROCESS(8) if  ) 
[103] SUBSUBSUBSUBPROCESS(8) if  &&  ((S4)fl_abs((FL)(afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k])) < s4_t_tmp_doa_diff_up_down 
[104] SUBSUBSUBSUBPROCESS(8) if  ) 
[105] SUBSUBSUBSUBPROCESS(8) if  &&  ((afl_a_peak_bins_intpl_up[s4_t_lp_i] - afl_a_peak_bins_intpl_dn[s4_t_lp_k]) < (FL)u2_t_tmp_freq_diff_up_down) 
[106] SUBSUBSUBSUBPROCESS(8) if  ) 
[107] SUBSUBSUBSUBPROCESS(8) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[108] SUBSUBSUBSUBSUBPROCESS(1) equal<start> afl_t_compare[s4_t_lp_i][s4_t_lp_k] = ( 
[109] SUBSUBSUBSUBSUBPROCESS(1) equal 0.5F * fl_abs(afl_a_peak_doa_powers_up[s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k])) + (1.0F * fl_abs((FL)(afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]))) + (0.5F * fl_abs(afl_a_peak_powers_up[s4_t_lp_i] - afl_a_peak_powers_dn[s4_t_lp_k]) 
[110] SUBSUBSUBSUBSUBPROCESS(1) equal<end> ); 
[111] MAINPROCESS(3) equal s4_t_pair_num *ps4_a_pair_num;
[112] MAINPROCESS(3) for  for ( 
[113] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[114] MAINPROCESS(3) for  s4_t_lp_i < s4_a_peak_num_up; 
[115] MAINPROCESS(3) for  s4_t_lp_i++ 
[116] MAINPROCESS(3) for  ) 
[117] MAINPROCESS(3) subproc SUBPROCESS(1) 
[118] SUBPROCESS(1) equal fl_t_min_comp 1000.0;
[119] SUBPROCESS(1) equal s4_t_found 0;
[120] SUBPROCESS(1) for  for ( 
[121] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[122] SUBPROCESS(1) for  s4_t_lp_k < s4_a_peak_num_dn; 
[123] SUBPROCESS(1) for  s4_t_lp_k++ 
[124] SUBPROCESS(1) for  ) 
[125] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[126] SUBSUBPROCESS(1) func<start> fn_bsm_ordinary_check_minimum_pair( 
[127] SUBSUBPROCESS(1) func s4_t_lp_i, 
[128] SUBSUBPROCESS(1) func s4_t_lp_k, 
[129] SUBSUBPROCESS(1) func afl_t_compare, 
[130] SUBSUBPROCESS(1) func as4_a_used_peak_up, 
[131] SUBSUBPROCESS(1) func as4_a_used_peak_dn, 
[132] SUBSUBPROCESS(1) func as4_a_pair_index_up, 
[133] SUBSUBPROCESS(1) func as4_a_pair_index_dn, 
[134] SUBSUBPROCESS(1) func &fl_t_min_comp, 
[135] SUBSUBPROCESS(1) func &s4_t_found, 
[136] SUBSUBPROCESS(1) func &as4_t_tmp_pair_index_up, 
[137] SUBSUBPROCESS(1) func &as4_t_tmp_pair_index_dn, 
[138] SUBSUBPROCESS(1) func &s4_t_pair_num 
[139] SUBSUBPROCESS(1) func<end> ); 
[140] SUBPROCESS(2) if  if ( 
[141] SUBPROCESS(2) if  s4_t_found == 1 
[142] SUBPROCESS(2) if  ) 
[143] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[144] SUBSUBPROCESS(1) equal as4_a_used_peak_up[as4_t_tmp_pair_index_up] 1;
[145] SUBSUBPROCESS(1) equal as4_a_used_peak_dn[as4_t_tmp_pair_index_dn] 1;
[146] SUBSUBPROCESS(1) equal as4_a_pair_index_up[s4_t_pair_num] as4_t_tmp_pair_index_up;
[147] SUBSUBPROCESS(1) equal as4_a_pair_index_dn[s4_t_pair_num] as4_t_tmp_pair_index_dn;
[148] SUBSUBPROCESS(1) proc s4_t_pair_num++; 
[149] MAINPROCESS(4) equal s4_t_tmp_pair_num *ps4_a_pair_num;
[150] MAINPROCESS(4) for  for ( 
[151] MAINPROCESS(4) for  s4_t_lp_i = s4_t_tmp_pair_num; 
[152] MAINPROCESS(4) for  s4_t_lp_i < s4_t_pair_num; 
[153] MAINPROCESS(4) for  s4_t_lp_i++ 
[154] MAINPROCESS(4) for  ) 
[155] MAINPROCESS(4) subproc SUBPROCESS(1) 
[156] SUBPROCESS(1) if  if ( 
[157] SUBPROCESS(1) if  (s4_t_lp_i) < ORDINARY_BUFFSIZE 
[158] SUBPROCESS(1) if  ) 
[159] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[160] SUBSUBPROCESS(1) func<start> fn_set_normal_data( 
[161] SUBSUBPROCESS(1) func &ast_a_normal_ordinary[s4_t_lp_i], 
[162] SUBSUBPROCESS(1) func afl_a_peak_bins_intpl_up[as4_a_pair_index_up[s4_t_lp_i]], 
[163] SUBSUBPROCESS(1) func afl_a_peak_bins_intpl_dn[as4_a_pair_index_dn[s4_t_lp_i]], 
[164] SUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_up[as4_a_pair_index_up[s4_t_lp_i]], 
[165] SUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_dn[as4_a_pair_index_dn[s4_t_lp_i]], 
[166] SUBSUBPROCESS(1) func afl_a_peak_powers_up[as4_a_pair_index_up[s4_t_lp_i]], 
[167] SUBSUBPROCESS(1) func afl_a_peak_powers_dn[as4_a_pair_index_dn[s4_t_lp_i]], 
[168] SUBSUBPROCESS(1) func afl_a_peak_doa_powers_up[as4_a_pair_index_up[s4_t_lp_i]], 
[169] SUBSUBPROCESS(1) func afl_a_peak_doa_powers_dn[as4_a_pair_index_dn[s4_t_lp_i]], 
[170] SUBSUBPROCESS(1) func 0, 
[171] SUBSUBPROCESS(1) func 0 
[172] SUBSUBPROCESS(1) func<end> ); 
[173] MAINPROCESS(5) if  if ( 
[174] MAINPROCESS(5) if  *ps4_a_pair_num > ORDINARY_BUFFSIZE 
[175] MAINPROCESS(5) if  ) 
[176] MAINPROCESS(5) subproc SUBPROCESS(1) 
[177] SUBPROCESS(1) equal *ps4_a_pair_num ORDINARY_BUFFSIZE;
[178] MAINPROCESS(6) return return; 
----------------- Total Codes : 178 lines
--------------------------
[Function Name] : fn_bsm_ordinary_check_minimum_pair 
-Return type : static VD 
-Argument : 12 
     [0] : S4   s4_a_lp_peak_num_up 
     [1] : S4   s4_a_lp_peak_num_dn 
     [2] : FL afl_a_compare[ORDINARY_BUFFSIZE * 2][ORDINARY_BUFFSIZE *   2] 
     [3] : S4 as4_a_used_peak_up[ORDINARY_BUFFSIZE *   2] 
     [4] : S4 as4_a_used_peak_dn[ORDINARY_BUFFSIZE *   2] 
     [5] : S4 as4_a_pair_index_up[ORDINARY_BUFFSIZE *   2] 
     [6] : S4 as4_a_pair_index_dn[ORDINARY_BUFFSIZE *   2] 
     [7] : FL*   pfl_a_min_comp 
     [8] : S4*   ps4_a_found 
     [9] : S4*   ps4_a_pair_index_up 
     [10] : S4*   ps4_a_pair_index_dn 
     [11] : S4*   ps4_a_pair_num 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_min_comp_prev; 
[2] MAINPROCESS(1) proc FL fl_t_min_comp_temp; 
[3] MAINPROCESS(1) proc S4 s4_t_pair_num_tmp; 
[4] MAINPROCESS(1) proc S4 as4_t_pair_index_up[ORDINARY_BUFFSIZE * 2]; 
[5] MAINPROCESS(1) proc S4 as4_t_pair_index_dn[ORDINARY_BUFFSIZE * 2]; 
[6] MAINPROCESS(1) proc S4 s4_t_lp_pair_num; 
[7] MAINPROCESS(1) proc S4 s4_t_lp_num_ordi_2; 
[8] MAINPROCESS(1) for  for ( 
[9] MAINPROCESS(1) for  s4_t_lp_num_ordi_2 = (S4)0; 
[10] MAINPROCESS(1) for  s4_t_lp_num_ordi_2 < ( 
[11] MAINPROCESS(1) for  (S4)ORDINARY_BUFFSIZE * (S4)2 
[12] MAINPROCESS(1) for  ); 
[13] MAINPROCESS(1) for  s4_t_lp_num_ordi_2++ 
[14] MAINPROCESS(1) for  ) 
[15] MAINPROCESS(1) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) equal as4_t_pair_index_up[s4_t_lp_num_ordi_2] (S4)0;
[17] SUBPROCESS(1) equal as4_t_pair_index_dn[s4_t_lp_num_ordi_2] (S4)0;
[18] MAINPROCESS(2) if  if ( 
[19] MAINPROCESS(2) if  afl_a_compare[s4_a_lp_peak_num_up][s4_a_lp_peak_num_dn] < *pfl_a_min_comp 
[20] MAINPROCESS(2) if  ) 
[21] MAINPROCESS(2) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) if  if ( 
[23] SUBPROCESS(1) if  (as4_a_used_peak_up[s4_a_lp_peak_num_up] == (S4)0 
[24] SUBPROCESS(1) if  ) 
[25] SUBPROCESS(1) if  &&  (as4_a_used_peak_dn[s4_a_lp_peak_num_dn] == (S4)0) 
[26] SUBPROCESS(1) if  ) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) equal *pfl_a_min_comp afl_a_compare[s4_a_lp_peak_num_up][s4_a_lp_peak_num_dn];
[29] SUBSUBPROCESS(1) equal *ps4_a_found (S4)1;
[30] SUBSUBPROCESS(1) equal *ps4_a_pair_index_up s4_a_lp_peak_num_up;
[31] SUBSUBPROCESS(1) equal *ps4_a_pair_index_dn s4_a_lp_peak_num_dn;
[32] SUBPROCESS(2) else else 
[33] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) for  for ( 
[35] SUBSUBPROCESS(1) for  s4_t_lp_pair_num = (S4)0; 
[36] SUBSUBPROCESS(1) for  s4_t_lp_pair_num < *ps4_a_pair_num; 
[37] SUBSUBPROCESS(1) for  s4_t_lp_pair_num++ 
[38] SUBSUBPROCESS(1) for  ) 
[39] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[40] SUBSUBSUBPROCESS(1) if  if ( 
[41] SUBSUBSUBPROCESS(1) if  ((!(as4_a_used_peak_up[s4_a_lp_peak_num_up] == (S4)0) 
[42] SUBSUBSUBPROCESS(1) if  ) 
[43] SUBSUBSUBPROCESS(1) if  &&   (as4_a_pair_index_up[s4_t_lp_pair_num] == s4_a_lp_peak_num_up) 
[44] SUBSUBSUBPROCESS(1) if  ) 
[45] SUBSUBSUBPROCESS(1) if  ||  ((!(as4_a_used_peak_dn[s4_a_lp_peak_num_dn] == (S4)0) 
[46] SUBSUBSUBPROCESS(1) if  ) 
[47] SUBSUBSUBPROCESS(1) if  &&   (as4_a_pair_index_dn[s4_t_lp_pair_num] == s4_a_lp_peak_num_dn)) 
[48] SUBSUBSUBPROCESS(1) if  ) 
[49] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBSUBPROCESS(1) equal fl_t_min_comp_temp *pfl_a_min_comp;
[51] SUBSUBSUBSUBPROCESS(1) equal *pfl_a_min_comp afl_a_compare[s4_a_lp_peak_num_up][s4_a_lp_peak_num_dn];
[52] SUBSUBSUBSUBPROCESS(1) equal fl_t_min_comp_prev afl_a_compare[as4_a_pair_index_up[s4_t_lp_pair_num]][as4_a_pair_index_dn[s4_t_lp_pair_num]];
[53] SUBSUBSUBSUBPROCESS(1) if  if ( 
[54] SUBSUBSUBSUBPROCESS(1) if  *pfl_a_min_comp < fl_t_min_comp_prev 
[55] SUBSUBSUBSUBPROCESS(1) if  ) 
[56] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[57] SUBSUBSUBSUBSUBPROCESS(1) equal as4_a_used_peak_up[as4_a_pair_index_up[s4_t_lp_pair_num]] (S4)0;
[58] SUBSUBSUBSUBSUBPROCESS(1) equal as4_a_used_peak_dn[as4_a_pair_index_dn[s4_t_lp_pair_num]] (S4)0;
[59] SUBSUBSUBSUBSUBPROCESS(1) equal as4_a_pair_index_up[s4_t_lp_pair_num] (S4)-1;
[60] SUBSUBSUBSUBSUBPROCESS(1) equal as4_a_pair_index_dn[s4_t_lp_pair_num] (S4)-1;
[61] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_found (S4)1;
[62] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_pair_index_up s4_a_lp_peak_num_up;
[63] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_pair_index_dn s4_a_lp_peak_num_dn;
[64] SUBSUBSUBSUBPROCESS(2) else else 
[65] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[66] SUBSUBSUBSUBSUBPROCESS(1) equal *pfl_a_min_comp fl_t_min_comp_temp;
[67] SUBPROCESS(3) equal s4_t_pair_num_tmp (S4)0;
[68] SUBPROCESS(3) for  for ( 
[69] SUBPROCESS(3) for  s4_t_lp_pair_num = (S4)0; 
[70] SUBPROCESS(3) for  s4_t_lp_pair_num < *ps4_a_pair_num; 
[71] SUBPROCESS(3) for  s4_t_lp_pair_num++ 
[72] SUBPROCESS(3) for  ) 
[73] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[74] SUBSUBPROCESS(1) if  if ( 
[75] SUBSUBPROCESS(1) if  as4_a_pair_index_up[s4_t_lp_pair_num] != (S4)-1 
[76] SUBSUBPROCESS(1) if  ) 
[77] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[78] SUBSUBSUBPROCESS(1) equal as4_t_pair_index_up[s4_t_pair_num_tmp] as4_a_pair_index_up[s4_t_lp_pair_num];
[79] SUBSUBSUBPROCESS(1) equal as4_t_pair_index_dn[s4_t_pair_num_tmp] as4_a_pair_index_dn[s4_t_lp_pair_num];
[80] SUBSUBSUBPROCESS(1) proc s4_t_pair_num_tmp++; 
[81] SUBPROCESS(4) if  if ( 
[82] SUBPROCESS(4) if  s4_t_pair_num_tmp > (S4)0 
[83] SUBPROCESS(4) if  ) 
[84] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[85] SUBSUBPROCESS(1) for  for ( 
[86] SUBSUBPROCESS(1) for  s4_t_lp_pair_num = (S4)0; 
[87] SUBSUBPROCESS(1) for  s4_t_lp_pair_num < s4_t_pair_num_tmp; 
[88] SUBSUBPROCESS(1) for  s4_t_lp_pair_num++ 
[89] SUBSUBPROCESS(1) for  ) 
[90] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[91] SUBSUBSUBPROCESS(1) equal as4_a_pair_index_up[s4_t_lp_pair_num] as4_t_pair_index_up[s4_t_lp_pair_num];
[92] SUBSUBSUBPROCESS(1) equal as4_a_pair_index_dn[s4_t_lp_pair_num] as4_t_pair_index_dn[s4_t_lp_pair_num];
[93] MAINPROCESS(3) return return; 
----------------- Total Codes : 93 lines
--------------------------
[Function Name] : fn_bsm_ordinary_make_pair_outer 
-Return type : VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num 
     [1] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc FL afl_t_Rx_right[70]; 
[3] MAINPROCESS(1) equal S4 s4_t_Ry_int 0;
[4] MAINPROCESS(1) proc FL fl_t_wall_th; 
[5] MAINPROCESS(1) if  if ( 
[6] MAINPROCESS(1) if  fl_g_v_self_bsm_for_base > SLOW_WALL_SPEED4 
[7] MAINPROCESS(1) if  ) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) equal fl_t_wall_th SLOW_WALL_DIST4;
[10] MAINPROCESS(2) else if  else if ( 
[11] MAINPROCESS(2) else if  fl_g_v_self_bsm_for_base > SLOW_WALL_SPEED3 
[12] MAINPROCESS(2) else if  ) 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal fl_t_wall_th (((SLOW_WALL_DIST4 - SLOW_WALL_DIST3) / (SLOW_WALL_SPEED4 - SLOW_WALL_SPEED3)) * (fl_g_v_self_bsm_for_base - SLOW_WALL_SPEED3)) + SLOW_WALL_DIST3;
[15] MAINPROCESS(3) else if  else if ( 
[16] MAINPROCESS(3) else if  fl_g_v_self_bsm_for_base > SLOW_WALL_SPEED2 
[17] MAINPROCESS(3) else if  ) 
[18] MAINPROCESS(3) subproc SUBPROCESS(1) 
[19] SUBPROCESS(1) equal fl_t_wall_th (((SLOW_WALL_DIST3 - SLOW_WALL_DIST2) / (SLOW_WALL_SPEED3 - SLOW_WALL_SPEED2)) * (fl_g_v_self_bsm_for_base - SLOW_WALL_SPEED2)) + SLOW_WALL_DIST2;
[20] MAINPROCESS(4) else if  else if ( 
[21] MAINPROCESS(4) else if  fl_g_v_self_bsm_for_base > SLOW_WALL_SPEED1 
[22] MAINPROCESS(4) else if  ) 
[23] MAINPROCESS(4) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) equal fl_t_wall_th (((SLOW_WALL_DIST2 - SLOW_WALL_DIST1) / (SLOW_WALL_SPEED2 - SLOW_WALL_SPEED1)) * (fl_g_v_self_bsm_for_base - SLOW_WALL_SPEED1)) + SLOW_WALL_DIST1;
[25] MAINPROCESS(5) else else 
[26] MAINPROCESS(5) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) equal fl_t_wall_th (((SLOW_WALL_DIST1 - SLOW_WALL_DIST0) / (SLOW_WALL_SPEED1 - SLOW_WALL_SPEED0)) * (fl_g_v_self_bsm_for_base - SLOW_WALL_SPEED0)) + SLOW_WALL_DIST0;
[28] MAINPROCESS(6) func<start> fn_estimate_road_shape( 
[29] MAINPROCESS(6) func afl_t_Rx_right 
[30] MAINPROCESS(6) func<end> ); 
[31] MAINPROCESS(6) for  for ( 
[32] MAINPROCESS(6) for  s4_t_lp_i = 0; 
[33] MAINPROCESS(6) for  s4_t_lp_i < *ps4_a_pair_num; 
[34] MAINPROCESS(6) for  s4_t_lp_i++ 
[35] MAINPROCESS(6) for  ) 
[36] MAINPROCESS(6) subproc SUBPROCESS(1) 
[37] SUBPROCESS(1) if  if ( 
[38] SUBPROCESS(1) if  ast_a_normal_ordinary[s4_t_lp_i].fl_Ryobs < 0.0F 
[39] SUBPROCESS(1) if  ) 
[40] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[41] SUBSUBPROCESS(1) equal<start> s4_t_Ry_int = ( 
[42] SUBSUBPROCESS(1) equal S4)(-ast_a_normal_ordinary[s4_t_lp_i].fl_Ryobs 
[43] SUBSUBPROCESS(1) equal<end> ); 
[44] SUBPROCESS(2) else else 
[45] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[46] SUBSUBPROCESS(1) equal s4_t_Ry_int 0;
[47] SUBPROCESS(3) if  if ( 
[48] SUBPROCESS(3) if  s4_t_Ry_int >= 70 
[49] SUBPROCESS(3) if  ) 
[50] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[51] SUBSUBPROCESS(1) equal s4_t_Ry_int 69;
[52] SUBPROCESS(4) if  if ( 
[53] SUBPROCESS(4) if  s4_t_lp_i < ORDINARY_BUFFSIZE 
[54] SUBPROCESS(4) if  ) 
[55] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[56] SUBSUBPROCESS(1) if  if ( 
[57] SUBSUBPROCESS(1) if  (ast_a_normal_ordinary[s4_t_lp_i].fl_Ryobs < -EKF_RY_SIDE 
[58] SUBSUBPROCESS(1) if  ) 
[59] SUBSUBPROCESS(1) if  && ((ast_a_normal_ordinary[s4_t_lp_i].fl_Rxobs - afl_t_Rx_right[s4_t_Ry_int]) > fl_t_wall_th 
[60] SUBSUBPROCESS(1) if  ) 
[61] SUBSUBPROCESS(1) if  ) 
[62] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBPROCESS(1) func<start> fn_init( 
[64] SUBSUBSUBPROCESS(1) func &ast_a_normal_ordinary[s4_t_lp_i], 1 
[65] SUBSUBSUBPROCESS(1) func<end> ); 
[66] MAINPROCESS(7) return return; 
----------------- Total Codes : 66 lines
--------------------------
[Function Name] : fn_bsm_ordinary_compare_with_2FCW 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num 
     [1] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) equal S4 s4_t_erase_flg 0;
[4] MAINPROCESS(1) proc S4 s4_t_2f_bin; 
[5] MAINPROCESS(1) equal S4 s4_t_wave_num 0;
[6] MAINPROCESS(1) equal S4 s4_t_peak_num 0;
[7] MAINPROCESS(1) proc FL afl_t_doa_spec[N_DOA]; 
[8] MAINPROCESS(1) proc S4 as4_t_doa[2]; 
[9] MAINPROCESS(1) proc FL afl_t_power_music[2]; 
[10] MAINPROCESS(1) proc U1 u1_t_lp_n_doa; 
[11] MAINPROCESS(1) for  for ( 
[12] MAINPROCESS(1) for  u1_t_lp_n_doa = (U1)0; 
[13] MAINPROCESS(1) for  u1_t_lp_n_doa < (U1)N_DOA; 
[14] MAINPROCESS(1) for  u1_t_lp_n_doa++ 
[15] MAINPROCESS(1) for  ) 
[16] MAINPROCESS(1) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) equal afl_t_doa_spec[u1_t_lp_n_doa] (FL)0.0F;
[18] MAINPROCESS(2) equal as4_t_doa[0] (S4)-1;
[19] MAINPROCESS(2) equal as4_t_doa[1] (S4)-1;
[20] MAINPROCESS(2) equal afl_t_power_music[0] (FL)0.0F;
[21] MAINPROCESS(2) equal afl_t_power_music[1] (FL)0.0F;
[22] MAINPROCESS(2) for for( 
[23] MAINPROCESS(2) for s4_t_lp_i=0; 
[24] MAINPROCESS(2) for s4_t_lp_i<*ps4_a_pair_num; 
[25] MAINPROCESS(2) for s4_t_lp_i++ 
[26] MAINPROCESS(2) for ) 
[27] MAINPROCESS(2) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) if  if ( 
[29] SUBPROCESS(1) if  ast_a_normal_ordinary[s4_t_lp_i].fl_Ryobs < -15.0F 
[30] SUBPROCESS(1) if  ) 
[31] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) equal s4_t_erase_flg 0;
[33] SUBSUBPROCESS(1) equal s4_t_peak_num 0;
[34] SUBSUBPROCESS(1) func<start> s4_t_2f_bin =  NB_FFT_PT_2F/2 + ( 
[35] SUBSUBPROCESS(1) func S4)(ast_a_normal_ordinary[s4_t_lp_i].fl_Vobs/VCOF_2F 
[36] SUBSUBPROCESS(1) func<end> ); 
[37] SUBSUBPROCESS(1) if  if ( 
[38] SUBSUBPROCESS(1) if  ((s4_t_2f_bin > 0 
[39] SUBSUBPROCESS(1) if  ) 
[40] SUBSUBPROCESS(1) if  &&   (s4_t_2f_bin < (NB_FFT_PT_2F / 2 - CENTER_FREQ_RANGE_2F)) 
[41] SUBSUBPROCESS(1) if  ) 
[42] SUBSUBPROCESS(1) if  ||  ((s4_t_2f_bin > (NB_FFT_PT_2F / 2 + CENTER_FREQ_RANGE_2F) 
[43] SUBSUBPROCESS(1) if  ) 
[44] SUBSUBPROCESS(1) if  &&   (s4_t_2f_bin < NB_FFT_PT_2F)) 
[45] SUBSUBPROCESS(1) if  ) 
[46] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[47] SUBSUBSUBPROCESS(1) func<start> s4_t_wave_num = s4_calc_spec_music_4ch_all( 
[48] SUBSUBSUBPROCESS(1) func (const FL *)(afl_g_cvw_fcw_ryy_matrix[s4_t_2f_bin]), 
[49] SUBSUBSUBPROCESS(1) func afl_t_doa_spec, 
[50] SUBSUBSUBPROCESS(1) func 2, 
[51] SUBSUBSUBPROCESS(1) func 1 
[52] SUBSUBSUBPROCESS(1) func<end> ); 
[53] SUBSUBSUBPROCESS(1) func<start> s4_t_peak_num = s4_peak_search_music_fsk( 
[54] SUBSUBSUBPROCESS(1) func (const FL *)afl_t_doa_spec, 
[55] SUBSUBSUBPROCESS(1) func as4_t_doa, 
[56] SUBSUBSUBPROCESS(1) func afl_t_power_music, 
[57] SUBSUBSUBPROCESS(1) func s4_t_wave_num 
[58] SUBSUBSUBPROCESS(1) func<end> ); 
[59] SUBSUBSUBPROCESS(1) if if( 
[60] SUBSUBSUBPROCESS(1) if s4_t_peak_num!=0 
[61] SUBSUBSUBPROCESS(1) if ) 
[62] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBSUBPROCESS(1) for for( 
[64] SUBSUBSUBSUBPROCESS(1) for s4_t_lp_k=0; 
[65] SUBSUBSUBSUBPROCESS(1) for s4_t_lp_k<s4_t_peak_num; 
[66] SUBSUBSUBSUBPROCESS(1) for s4_t_lp_k++ 
[67] SUBSUBSUBSUBPROCESS(1) for ) 
[68] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[69] SUBSUBSUBSUBSUBPROCESS(1) if  if ( 
[70] SUBSUBSUBSUBSUBPROCESS(1) if  (s4_abs(as4_t_doa[s4_t_lp_k] - ast_a_normal_ordinary[s4_t_lp_i].s4_bin_up_music) > (S4)CU1_DOA_DIFF_FM_2F 
[71] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[72] SUBSUBSUBSUBSUBPROCESS(1) if  ||  (s4_abs(as4_t_doa[s4_t_lp_k] - ast_a_normal_ordinary[s4_t_lp_i].s4_bin_dn_music) > (S4)CU1_DOA_DIFF_FM_2F) 
[73] SUBSUBSUBSUBSUBPROCESS(1) if  ) 
[74] SUBSUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBSUBPROCESS(1) 
[75] SUBSUBSUBSUBSUBSUBPROCESS(1) equal s4_t_erase_flg 1;
[76] SUBSUBSUBPROCESS(2) if if( 
[77] SUBSUBSUBPROCESS(2) if s4_t_erase_flg==1 
[78] SUBSUBSUBPROCESS(2) if ) 
[79] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[80] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( 
[81] SUBSUBSUBSUBPROCESS(1) func &ast_a_normal_ordinary[s4_t_lp_i], 1 
[82] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[83] MAINPROCESS(3) return return; 
----------------- Total Codes : 83 lines
--------------------------
[Function Name] : fn_bsm_ordinary_set_object 
-Return type : VD 
-Argument : 2 
     [0] : const S4   *ps4_a_pair_num 
     [1] : NORMAL_BSM   ast_a_normal_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[4] MAINPROCESS(1) for  s4_t_lp_i < *ps4_a_pair_num; 
[5] MAINPROCESS(1) for  s4_t_lp_i++ 
[6] MAINPROCESS(1) for  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal ast_a_normal_ordinary[s4_t_lp_i].s4_flg_dc OBJECT_TYPE_ORDINARY;
[9] MAINPROCESS(2) return return; 
----------------- Total Codes : 9 lines
