Total lines: 730 
Total functions : 13 
--------------------------
[Function Name] : fn_bsm_seek_2f_object 
-Return type : VD 
-Argument : 3 
     [0] : S4   *ps4_a_pair_num_2f 
     [1] : NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
     [2] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 s4_t_peak_num_2f; 
[3] MAINPROCESS(1) proc S4 as4_t_peak_bin_2f[AUX_BUFFSIZE]; 
[4] MAINPROCESS(1) proc FL afl_t_peak_power_2f[AUX_BUFFSIZE]; 
[5] MAINPROCESS(1) proc S4 s4_t_peak_num_2f_doa; 
[6] MAINPROCESS(1) proc FL afl_t_peak_bins_intpl_2f[AUX_BUFFSIZE * 2]; 
[7] MAINPROCESS(1) proc FL afl_t_peak_doa_bins_intpl_2f[AUX_BUFFSIZE * 2]; 
[8] MAINPROCESS(1) proc FL afl_t_peak_powers_2f[AUX_BUFFSIZE * 2]; 
[9] MAINPROCESS(1) proc FL afl_t_peak_doa_powers_2f[AUX_BUFFSIZE * 2]; 
[10] MAINPROCESS(1) proc S4 as4_t_peak_wave_num[AUX_BUFFSIZE*2]; 
[11] MAINPROCESS(1) proc FL afl_t_thres_2f[NB_FFT_PT_2F]; 
[12] MAINPROCESS(1) func<start> fn_bsm_2f_init_data( 
[13] MAINPROCESS(1) func as4_t_peak_wave_num 
[14] MAINPROCESS(1) func<end> ); 
[15] MAINPROCESS(1) func<start> fn_set_freq_threshold_fsk( 
[16] MAINPROCESS(1) func fl_g_v_self_bsm_for_base 
[17] MAINPROCESS(1) func<end> ); 
[18] MAINPROCESS(1) func<start> memcpy(afl_g_thres_2f, afl_t_thres_2f, sizeof(FL)*NB_FFT_PT_2F 
[19] MAINPROCESS(1) func<end> ); 
[20] MAINPROCESS(1) func<start> st_g_tx_noise_chk_fsk_bsm.u2_thres1 = u2_cast_from_fl(afl_t_thres_2f[140] * (FL)100 
[21] MAINPROCESS(1) func<end> ); 
[22] MAINPROCESS(1) func<start> st_g_tx_noise_chk_fsk_bsm.u2_thres2 = u2_cast_from_fl(afl_t_thres_2f[180] * (FL)100 
[23] MAINPROCESS(1) func<end> ); 
[24] MAINPROCESS(1) if  if ( 
[25] MAINPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_leading[0] != 0) 
[26] MAINPROCESS(1) if  || (st_g_bsm_loop_data.as4_flg_passing[0] > PASSING_COUNT_MIN) 
[27] MAINPROCESS(1) if  ) 
[28] MAINPROCESS(1) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) func<start> s4_t_peak_num_2f = s4_search_freq_peak_fsk_IQ( 
[30] SUBPROCESS(1) func (const FL *)afl_t_thres_2f 
[31] SUBPROCESS(1) func<end> ); 
[32] MAINPROCESS(2) else else 
[33] MAINPROCESS(2) subproc SUBPROCESS(1) 
[34] SUBPROCESS(1) func<start> s4_t_peak_num_2f = s4_search_freq_peak_fsk( 
[35] SUBPROCESS(1) func (const FL *)afl_t_thres_2f 
[36] SUBPROCESS(1) func<end> ); 
[37] MAINPROCESS(3) equal st_g_tx_noise_chk_fsk_bsm.u1_peak_num (U1)s4_t_peak_num_2f;
[38] MAINPROCESS(3) func<start> fn_bsm_2f_estimate_doa( 
[39] MAINPROCESS(3) func as4_t_peak_wave_num 
[40] MAINPROCESS(3) func<end> ); 
[41] MAINPROCESS(3) func<start> fn_bsm_2f_make_pair( 
[42] MAINPROCESS(3) func ast_a_normal_2f 
[43] MAINPROCESS(3) func<end> ); 
[44] MAINPROCESS(3) func<start> fn_bsm_2f_set_object( 
[45] MAINPROCESS(3) func ast_a_normal_2f 
[46] MAINPROCESS(3) func<end> ); 
[47] MAINPROCESS(3) func<start> memset(afl_g_peak_2f, 0x00, sizeof(afl_g_peak_2f) 
[48] MAINPROCESS(3) func<end> ); 
[49] MAINPROCESS(3) for for( 
[50] MAINPROCESS(3) for i=0; 
[51] MAINPROCESS(3) for i<s4_t_peak_num_2f_doa; 
[52] MAINPROCESS(3) for i++) 
[53] MAINPROCESS(3) subproc SUBPROCESS(1) 
[54] SUBPROCESS(1) equal afl_g_peak_2f[(int)(afl_t_peak_bins_intpl_2f[i]+0.5F)] afl_t_peak_doa_powers_2f[i];
[55] MAINPROCESS(4) func u1_a_alarming_flag 
[56] MAINPROCESS(4) func<end> ); 
[57] MAINPROCESS(4) proc return; 
----------------- Total Codes : 57 lines
--------------------------
[Function Name] : fn_bsm_2f_init_data 
-Return type : VD 
-Argument : 10 
     [0] : S4   *ps4_a_peak_num_2f 
     [1] : S4   as4_a_peak_bin_2f[AUX_BUFFSIZE] 
     [2] : FL   afl_a_peak_power_2f[AUX_BUFFSIZE] 
     [3] : FL   afl_a_thres_2f[NB_FFT_PT_2F] 
     [4] : S4   *ps4_a_peak_num_2f_doa 
     [5] : FL afl_a_peak_bins_intpl_2f[AUX_BUFFSIZE *   2] 
     [6] : FL afl_a_peak_powers_2f[AUX_BUFFSIZE *   2] 
     [7] : FL afl_a_peak_doa_bins_intpl_2f[AUX_BUFFSIZE *   2] 
     [8] : FL afl_a_peak_doa_powers_2f[AUX_BUFFSIZE *   2] 
     [9] : S4 as4_a_peak_wave_num[AUX_BUFFSIZE *   2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) equal *ps4_a_peak_num_2f 0;
[3] MAINPROCESS(1) for  for ( 
[4] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[5] MAINPROCESS(1) for  s4_t_lp_i < AUX_BUFFSIZE; 
[6] MAINPROCESS(1) for  s4_t_lp_i++) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal as4_a_peak_bin_2f[s4_t_lp_i] (S4)-1;
[9] SUBPROCESS(1) equal afl_a_peak_power_2f[s4_t_lp_i] 0.0F;
[10] MAINPROCESS(2) for  for ( 
[11] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[12] MAINPROCESS(2) for  s4_t_lp_i < NB_FFT_PT_2F; 
[13] MAINPROCESS(2) for  s4_t_lp_i++) 
[14] MAINPROCESS(2) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal afl_a_thres_2f[s4_t_lp_i] 0.0F;
[16] MAINPROCESS(3) for  for ( 
[17] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[18] MAINPROCESS(3) for  s4_t_lp_i < (AUX_BUFFSIZE * (S4)2 
[19] MAINPROCESS(3) for  ); 
[20] MAINPROCESS(3) for  s4_t_lp_i++) 
[21] MAINPROCESS(3) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal afl_a_peak_bins_intpl_2f[s4_t_lp_i] 0.0F;
[23] SUBPROCESS(1) equal afl_a_peak_doa_bins_intpl_2f[s4_t_lp_i] (FL)-1.0F;
[24] SUBPROCESS(1) equal afl_a_peak_powers_2f[s4_t_lp_i] 0.0F;
[25] SUBPROCESS(1) equal afl_a_peak_doa_powers_2f[s4_t_lp_i] 0.0F;
[26] SUBPROCESS(1) equal as4_a_peak_wave_num[s4_t_lp_i] (S4)0;
[27] MAINPROCESS(4) proc return; 
----------------- Total Codes : 27 lines
--------------------------
[Function Name] : s4_search_freq_peak_fsk_IQ 
-Return type : S4 
-Argument : 4 
     [0] : const FL   afl_a_power_2f[NB_FFT_PT_2F] 
     [1] : S4   as4_a_bin_2f[AUX_BUFFSIZE] 
     [2] : FL   afl_a_bin_power_2f[AUX_BUFFSIZE] 
     [3] : const FL   afl_a_thres_2f[NB_FFT_PT_2F] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) equal S4 s4_t_peak_num 0;
[4] MAINPROCESS(1) equal FL fl_t_temp 0;
[5] MAINPROCESS(1) equal s4_t_lp_k 0;
[6] MAINPROCESS(1) for  for ( 
[7] MAINPROCESS(1) for  s4_t_lp_i = FREQ_BIN_LOWER_LIMIT_2F; 
[8] MAINPROCESS(1) for  s4_t_lp_i < FREQ_BIN_UPPER_LIMIT_2F; 
[9] MAINPROCESS(1) for  s4_t_lp_i++) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) if  if ( 
[12] SUBPROCESS(1) if  (afl_a_power_2f[s4_t_lp_i] < afl_a_power_2f[s4_t_lp_i + 1]) 
[13] SUBPROCESS(1) if  && (afl_a_power_2f[s4_t_lp_i + 1] > afl_a_power_2f[s4_t_lp_i + 2]) 
[14] SUBPROCESS(1) if  && (afl_a_power_2f[s4_t_lp_i + 1] > afl_a_thres_2f[s4_t_lp_i + 1]) 
[15] SUBPROCESS(1) if  && (s4_t_lp_k < AUX_BUFFSIZE) 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal as4_a_bin_2f[s4_t_lp_k] s4_t_lp_i + (S4)1;
[19] SUBSUBPROCESS(1) equal afl_a_bin_power_2f[s4_t_lp_k] afl_a_power_2f[s4_t_lp_i + 1];
[20] SUBSUBPROCESS(1) proc s4_t_lp_k++; 
[21] MAINPROCESS(2) for  for ( 
[22] MAINPROCESS(2) for  s4_t_lp_i = FREQ_BIN_LOWER_LIMIT_2F_Q; 
[23] MAINPROCESS(2) for  s4_t_lp_i < (S4)((NB_FFT_PT_2F / 2) - 1 
[24] MAINPROCESS(2) for  ); 
[25] MAINPROCESS(2) for  s4_t_lp_i++) 
[26] MAINPROCESS(2) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) if  if ( 
[28] SUBPROCESS(1) if  (afl_a_power_2f[s4_t_lp_i] < afl_a_power_2f[s4_t_lp_i + 1]) 
[29] SUBPROCESS(1) if  && (afl_a_power_2f[s4_t_lp_i + 1] > afl_a_power_2f[s4_t_lp_i + 2]) 
[30] SUBPROCESS(1) if  && (afl_a_power_2f[s4_t_lp_i + 1] > afl_a_thres_2f[s4_t_lp_i + 1]) 
[31] SUBPROCESS(1) if  && (s4_t_lp_k < AUX_BUFFSIZE) 
[32] SUBPROCESS(1) if  ) 
[33] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) equal as4_a_bin_2f[s4_t_lp_k] s4_t_lp_i + (S4)1;
[35] SUBSUBPROCESS(1) equal afl_a_bin_power_2f[s4_t_lp_k] afl_a_power_2f[s4_t_lp_i + 1];
[36] SUBSUBPROCESS(1) proc s4_t_lp_k++; 
[37] MAINPROCESS(3) equal s4_t_peak_num s4_t_lp_k;
[38] MAINPROCESS(3) func<start> return (s4_t_peak_num 
[39] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 39 lines
--------------------------
[Function Name] : s4_search_freq_peak_fsk 
-Return type : S4 
-Argument : 4 
     [0] : const FL   afl_a_power_2f[NB_FFT_PT_2F] 
     [1] : S4   as4_a_bin_2f[AUX_BUFFSIZE] 
     [2] : FL   afl_a_bin_power_2f[AUX_BUFFSIZE] 
     [3] : const FL   afl_a_thres_2f[NB_FFT_PT_2F] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) equal S4 s4_t_peak_num 0;
[4] MAINPROCESS(1) equal FL fl_t_temp 0;
[5] MAINPROCESS(1) equal s4_t_lp_k 0;
[6] MAINPROCESS(1) for  for ( 
[7] MAINPROCESS(1) for  s4_t_lp_i = FREQ_BIN_LOWER_LIMIT_2F; 
[8] MAINPROCESS(1) for  s4_t_lp_i < FREQ_BIN_UPPER_LIMIT_2F; 
[9] MAINPROCESS(1) for  s4_t_lp_i++) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) if  if ( 
[12] SUBPROCESS(1) if  (afl_a_power_2f[s4_t_lp_i] < afl_a_power_2f[s4_t_lp_i + 1]) 
[13] SUBPROCESS(1) if  && (afl_a_power_2f[s4_t_lp_i + 1] > afl_a_power_2f[s4_t_lp_i + 2]) 
[14] SUBPROCESS(1) if  && (afl_a_power_2f[s4_t_lp_i + 1] > afl_a_thres_2f[s4_t_lp_i + 1]) 
[15] SUBPROCESS(1) if  && (s4_t_lp_k < AUX_BUFFSIZE) 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal as4_a_bin_2f[s4_t_lp_k] s4_t_lp_i + (S4)1;
[19] SUBSUBPROCESS(1) equal afl_a_bin_power_2f[s4_t_lp_k] afl_a_power_2f[s4_t_lp_i + 1];
[20] SUBSUBPROCESS(1) proc s4_t_lp_k++; 
[21] MAINPROCESS(2) equal s4_t_peak_num s4_t_lp_k;
[22] MAINPROCESS(2) func<start> return (s4_t_peak_num 
[23] MAINPROCESS(2) func<end> ); 
----------------- Total Codes : 23 lines
--------------------------
[Function Name] : fn_bsm_2f_estimate_doa 
-Return type : VD 
-Argument : 11 
     [0] : S4   s4_a_DOA_mode 
     [1] : FL   afl_a_Ryy_2f[NB_FFT_PT_2F][CORRE_SIZE_4CH] 
     [2] : S4   s4_a_peak_num_2f 
     [3] : const S4   as4_a_peak_bin_2f[AUX_BUFFSIZE] 
     [4] : const FL   afl_a_peak_power_2f[AUX_BUFFSIZE] 
     [5] : S4   *ps4_a_doa_peak_num_2f 
     [6] : FL afl_a_peak_bins_intpl_2f[AUX_BUFFSIZE *   2] 
     [7] : FL afl_a_peak_powers_2f[AUX_BUFFSIZE *   2] 
     [8] : FL afl_a_peak_doa_bins_intpl_2f[AUX_BUFFSIZE *   2] 
     [9] : FL afl_a_peak_doa_powers_2f[AUX_BUFFSIZE *   2] 
     [10] : S4 as4_a_peak_wave_num[AUX_BUFFSIZE *   2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc S4 as4_t_doa_num_2f[AUX_BUFFSIZE]; 
[4] MAINPROCESS(1) proc FL afl_t_selected_doa_bins_intpl_2f[AUX_BUFFSIZE][2]; 
[5] MAINPROCESS(1) proc FL afl_t_selected_doa_powers_2f[AUX_BUFFSIZE][2]; 
[6] MAINPROCESS(1) proc FL afl_t_selected_bins_intpl_2f[AUX_BUFFSIZE][2]; 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < AUX_BUFFSIZE; 
[10] MAINPROCESS(1) for  s4_t_lp_i++) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal as4_t_doa_num_2f[s4_t_lp_i] 0;
[13] SUBPROCESS(1) for  for ( 
[14] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[15] SUBPROCESS(1) for  s4_t_lp_k < 2; 
[16] SUBPROCESS(1) for  s4_t_lp_k++) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal afl_t_selected_doa_bins_intpl_2f[s4_t_lp_i][s4_t_lp_k] (FL)-1.0F;
[19] SUBSUBPROCESS(1) equal afl_t_selected_doa_powers_2f[s4_t_lp_i][s4_t_lp_k] 0.0F;
[20] SUBSUBPROCESS(1) equal afl_t_selected_bins_intpl_2f[s4_t_lp_i][s4_t_lp_k] (FL)-1.0F;
[21] MAINPROCESS(2) for  for ( 
[22] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[23] MAINPROCESS(2) for  s4_t_lp_i < s4_a_peak_num_2f; 
[24] MAINPROCESS(2) for  s4_t_lp_i++) 
[25] MAINPROCESS(2) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) func<start> fn_bsm_2f_cal_doa( 
[27] SUBPROCESS(1) func afl_t_selected_doa_powers_2f[s4_t_lp_i] 
[28] SUBPROCESS(1) func<end> ); 
[29] SUBPROCESS(1) func<start> fn_bsm_2f_cal_interpolate_freq_peak( 
[30] SUBPROCESS(1) func afl_t_selected_bins_intpl_2f[s4_t_lp_i] 
[31] SUBPROCESS(1) func<end> ); 
[32] SUBPROCESS(1) func afl_t_selected_doa_powers_2f[s4_t_lp_i] 
[33] SUBPROCESS(1) func<end> ); 
[34] MAINPROCESS(3) func<start> fn_bsm_2f_store_doa( 
[35] MAINPROCESS(3) func as4_a_peak_wave_num 
[36] MAINPROCESS(3) func<end> ); 
[37] MAINPROCESS(3) proc return; 
----------------- Total Codes : 37 lines
--------------------------
[Function Name] : fn_bsm_2f_cal_doa 
-Return type : VD 
-Argument : 6 
     [0] : S4   s4_a_DOA_mode 
     [1] : const FL   afl_a_Ryy_2f[NB_FFT_PT_2F][CORRE_SIZE_4CH] 
     [2] : S4   s4_a_peak_bin_2f 
     [3] : S4   *ps4_a_doa_num 
     [4] : FL   afl_a_selected_doa_bins_intpl_2f[2] 
     [5] : FL   afl_a_selected_doa_powers_2f[2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc FL afl_t_spec_bf[N_DOA_2F]; 
[4] MAINPROCESS(1) proc FL afl_t_spec_music[N_DOA_2F]; 
[5] MAINPROCESS(1) proc S4 as4_t_selected_doa_bins[2]; 
[6] MAINPROCESS(1) equal S4 s4_t_wave_num 1;
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < N_DOA_2F; 
[10] MAINPROCESS(1) for  s4_t_lp_i++) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal afl_t_spec_bf[s4_t_lp_i] 0.0F;
[13] MAINPROCESS(2) for  for ( 
[14] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[15] MAINPROCESS(2) for  s4_t_lp_i < N_DOA_2F; 
[16] MAINPROCESS(2) for  s4_t_lp_i++) 
[17] MAINPROCESS(2) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) equal afl_t_spec_music[s4_t_lp_i] 0.0F;
[19] MAINPROCESS(3) equal as4_t_selected_doa_bins[0] (S4)-1;
[20] MAINPROCESS(3) equal as4_t_selected_doa_bins[1] (S4)-1;
[21] MAINPROCESS(3) switch  switch ( 
[22] MAINPROCESS(3) switch  s4_a_DOA_mode 
[23] MAINPROCESS(3) switch  ) 
[24] MAINPROCESS(3) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) ??? case 1: 
[26] SUBPROCESS(1) func<start> fn_calc_spec_bf_4ch_2f( 
[27] SUBPROCESS(1) func s4_a_peak_bin_2f 
[28] SUBPROCESS(1) func<end> ); 
[29] SUBPROCESS(1) func<start> *ps4_a_doa_num = s4_search_peak_bf( 
[30] SUBPROCESS(1) func 1 
[31] SUBPROCESS(1) func<end> ); 
[32] SUBPROCESS(1) for for( 
[33] SUBPROCESS(1) for s4_t_lp_k=0; 
[34] SUBPROCESS(1) for s4_t_lp_k<2; 
[35] SUBPROCESS(1) for s4_t_lp_k++) 
[36] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[37] SUBSUBPROCESS(1) equal afl_a_selected_doa_bins_intpl_2f[s4_t_lp_k] (FL)as4_t_selected_doa_bins[s4_t_lp_k];
[38] SUBPROCESS(2) proc break; 
[39] SUBPROCESS(2) ??? default: 
[40] SUBPROCESS(2) func<start> s4_t_wave_num = s4_calc_spec_music_4ch_all( 
[41] SUBPROCESS(2) func 1 
[42] SUBPROCESS(2) func<end> ); 
[43] SUBPROCESS(2) func<start> *ps4_a_doa_num = s4_peak_search_music_fsk( 
[44] SUBPROCESS(2) func s4_t_wave_num 
[45] SUBPROCESS(2) func<end> ); 
[46] SUBPROCESS(2) for for( 
[47] SUBPROCESS(2) for s4_t_lp_k=0; 
[48] SUBPROCESS(2) for s4_t_lp_k<*ps4_a_doa_num; 
[49] SUBPROCESS(2) for s4_t_lp_k++) 
[50] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[51] SUBSUBPROCESS(1) if if( 
[52] SUBSUBPROCESS(1) if as4_t_selected_doa_bins[s4_t_lp_k]>0 
[53] SUBSUBPROCESS(1) if ) 
[54] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[55] SUBSUBSUBPROCESS(1) func<start> afl_a_selected_doa_bins_intpl_2f[s4_t_lp_k] = fl_interpolate_music_peak( 
[56] SUBSUBSUBPROCESS(1) func (const FL *)FL_BSM_FLSH_YOMIKAE_TBL_2F 
[57] SUBSUBSUBPROCESS(1) func<end> ); 
[58] SUBSUBPROCESS(2) else else 
[59] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[60] SUBSUBSUBPROCESS(1) equal afl_a_selected_doa_bins_intpl_2f[s4_t_lp_k] -1.0F;
[61] SUBPROCESS(3) proc break; 
[62] MAINPROCESS(4) for  for ( 
[63] MAINPROCESS(4) for  s4_t_lp_i = 0; 
[64] MAINPROCESS(4) for  s4_t_lp_i < *ps4_a_doa_num; 
[65] MAINPROCESS(4) for  s4_t_lp_i++) 
[66] MAINPROCESS(4) subproc SUBPROCESS(1) 
[67] SUBPROCESS(1) if if( 
[68] SUBPROCESS(1) if as4_t_selected_doa_bins[s4_t_lp_i] > 0 
[69] SUBPROCESS(1) if ) 
[70] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[71] SUBSUBPROCESS(1) func<start> afl_a_selected_doa_powers_2f[s4_t_lp_i] = fl_calc_spec_bf_4ch_2f_of_specified_doa( 
[72] SUBSUBPROCESS(1) func as4_t_selected_doa_bins[s4_t_lp_i] 
[73] SUBSUBPROCESS(1) func<end> ); 
[74] MAINPROCESS(5) proc return; 
----------------- Total Codes : 74 lines
--------------------------
[Function Name] : fn_bsm_2f_cal_interpolate_freq_peak 
-Return type : static VD 
-Argument : 3 
     [0] : S4   s4_a_peak_bin_2f 
     [1] : S4   s4_a_doa_num_2f 
     [2] : FL   afl_a_selected_bins_intpl_2f[2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for s4_t_i=0; 
[4] MAINPROCESS(1) for s4_t_i<s4_a_doa_num_2f; 
[5] MAINPROCESS(1) for s4_t_i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if if( 
[8] SUBPROCESS(1) if (FL)s4_a_peak_bin_2f != -1.0F 
[9] SUBPROCESS(1) if ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) func<start> afl_a_selected_bins_intpl_2f[s4_t_i] = fl_interpolate_freq_peak_fsk( 
[12] SUBSUBPROCESS(1) func (S4)s4_a_peak_bin_2f 
[13] SUBSUBPROCESS(1) func<end> ); 
[14] MAINPROCESS(2) proc return; 
----------------- Total Codes : 14 lines
--------------------------
[Function Name] : fn_bsm_2f_store_doa 
-Return type : VD 
-Argument : 11 
     [0] : const FL   afl_a_peak_power_2f[AUX_BUFFSIZE] 
     [1] : const S4   as4_a_doa_num_2f[AUX_BUFFSIZE] 
     [2] : const FL   afl_a_selected_doa_bins_intpl_2f[AUX_BUFFSIZE][2] 
     [3] : const FL   afl_a_selected_doa_powers_2f[AUX_BUFFSIZE][2] 
     [4] : const FL   afl_a_selected_bins_intpl_2f[AUX_BUFFSIZE][2] 
     [5] : S4   *ps4_a_doa_peak_num_2f 
     [6] : FL afl_a_peak_bins_intpl_2f[AUX_BUFFSIZE *   2] 
     [7] : FL afl_a_peak_powers_2f[AUX_BUFFSIZE *   2] 
     [8] : FL afl_a_peak_doa_bins_intpl_2f[AUX_BUFFSIZE *   2] 
     [9] : FL afl_a_peak_doa_powers_2f[AUX_BUFFSIZE *   2] 
     [10] : S4 as4_a_peak_wave_num[AUX_BUFFSIZE *   2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_iRet; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[4] MAINPROCESS(1) equal s4_t_iRet 0;
[5] MAINPROCESS(1) for  for ( 
[6] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[7] MAINPROCESS(1) for  s4_t_lp_i < AUX_BUFFSIZE; 
[8] MAINPROCESS(1) for  s4_t_lp_i++) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) for  for ( 
[11] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[12] SUBPROCESS(1) for  s4_t_lp_k < as4_a_doa_num_2f[s4_t_lp_i]; 
[13] SUBPROCESS(1) for  s4_t_lp_k++) 
[14] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[15] SUBSUBPROCESS(1) equal afl_a_peak_bins_intpl_2f[s4_t_iRet] afl_a_selected_bins_intpl_2f[s4_t_lp_i][s4_t_lp_k];
[16] SUBSUBPROCESS(1) equal afl_a_peak_powers_2f[s4_t_iRet] afl_a_peak_power_2f[s4_t_lp_i];
[17] SUBSUBPROCESS(1) equal afl_a_peak_doa_bins_intpl_2f[s4_t_iRet] afl_a_selected_doa_bins_intpl_2f[s4_t_lp_i][s4_t_lp_k];
[18] SUBSUBPROCESS(1) equal afl_a_peak_doa_powers_2f[s4_t_iRet] afl_a_selected_doa_powers_2f[s4_t_lp_i][s4_t_lp_k];
[19] SUBSUBPROCESS(1) equal as4_a_peak_wave_num[s4_t_iRet] as4_a_doa_num_2f[s4_t_lp_i];
[20] SUBSUBPROCESS(1) proc s4_t_iRet++; 
[21] MAINPROCESS(2) proc return; 
----------------- Total Codes : 21 lines
--------------------------
[Function Name] : fn_bsm_2f_make_pair 
-Return type : VD 
-Argument : 7 
     [0] : S4   s4_a_doa_peak_num_2f 
     [1] : S4 as4_a_peak_wave_num[AUX_BUFFSIZE *   2] 
     [2] : const FL afl_a_peak_bins_intpl_2f[AUX_BUFFSIZE *   2] 
     [3] : const FL afl_a_peak_doa_bins_intpl_2f[AUX_BUFFSIZE *   2] 
     [4] : const FL afl_a_peak_doa_powers_2f[AUX_BUFFSIZE *   2] 
     [5] : S4   *ps4_a_pair_num_2f 
     [6] : NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc S4 s4_t_pair_num; 
[4] MAINPROCESS(1) proc FL afl_t_tmp_Ryy[3]; 
[5] MAINPROCESS(1) proc FL fl_t_tmp_Robs; 
[6] MAINPROCESS(1) proc FL fl_t_tmp_Vobs; 
[7] MAINPROCESS(1) proc FL fl_t_tmp_Rxobs; 
[8] MAINPROCESS(1) proc FL fl_t_tmp_Ryobs; 
[9] MAINPROCESS(1) proc FL fl_t_tmp_theta; 
[10] MAINPROCESS(1) proc S4 s4_t_wave_number[AUX_BUFFSIZE*2]; 
[11] MAINPROCESS(1) equal FL fl_t_pow_min 0.0F;
[12] MAINPROCESS(1) equal S4 s4_t_index -1;
[13] MAINPROCESS(1) proc U1 u1_t_lp_aux_buffsize; 
[14] MAINPROCESS(1) for  for ( 
[15] MAINPROCESS(1) for  u1_t_lp_aux_buffsize = (U1)0; 
[16] MAINPROCESS(1) for  u1_t_lp_aux_buffsize < ((U1)AUX_BUFFSIZE * (U1)2 
[17] MAINPROCESS(1) for  ); 
[18] MAINPROCESS(1) for  u1_t_lp_aux_buffsize++) 
[19] MAINPROCESS(1) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) equal s4_t_wave_number[u1_t_lp_aux_buffsize] (S4)0;
[21] MAINPROCESS(2) equal s4_t_pair_num 0;
[22] MAINPROCESS(2) for  for ( 
[23] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[24] MAINPROCESS(2) for  s4_t_lp_i < s4_a_doa_peak_num_2f; 
[25] MAINPROCESS(2) for  s4_t_lp_i++) 
[26] MAINPROCESS(2) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) func<start> fl_t_tmp_theta = -(PI / 180.0F * (st_g_bsm_loop_data.afl_installed_angle[0] + afl_a_peak_doa_bins_intpl_2f[s4_t_lp_i] +  (FL)DOA_BIN_START_ANG) 
[28] SUBPROCESS(1) func<end> ); 
[29] SUBPROCESS(1) for  for ( 
[30] SUBPROCESS(1) for  s4_t_lp_k = 0 ; 
[31] SUBPROCESS(1) for  s4_t_lp_k < 3 ; 
[32] SUBPROCESS(1) for  s4_t_lp_k++) 
[33] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) equal afl_t_tmp_Ryy[s4_t_lp_k] afl_g_cvw_fcw_ryy_matrix_2f[(S4)afl_a_peak_bins_intpl_2f[s4_t_lp_i]][s4_t_lp_k];
[35] SUBPROCESS(2) func<start> fl_t_tmp_Robs = fl_cal_r_fsk((const FL *)afl_t_tmp_Ryy 
[36] SUBPROCESS(2) func<end> ); 
[37] SUBPROCESS(2) equal fl_t_tmp_Rxobs (fl_t_tmp_Robs * (FL)fl_sin(fl_t_tmp_theta)) + st_g_bsm_loop_data.afl_installed_angle[1];
[38] SUBPROCESS(2) func<start> fl_t_tmp_Ryobs = fl_t_tmp_Robs * (FL)fl_cos(fl_t_tmp_theta 
[39] SUBPROCESS(2) func<end> ); 
[40] SUBPROCESS(2) func<start> fl_t_tmp_Vobs = VCOF_2F * (afl_a_peak_bins_intpl_2f[s4_t_lp_i] - (FL)(NB_FFT_PT_2F / 2) 
[41] SUBPROCESS(2) func<end> ); 
[42] SUBPROCESS(2) if  if ( 
[43] SUBPROCESS(2) if  fl_abs(fl_t_tmp_Ryobs) < EKF_RY_SIDE 
[44] SUBPROCESS(2) if  ) 
[45] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[46] SUBSUBPROCESS(1) equal fl_t_tmp_Vobs 0.0F;
[47] SUBPROCESS(3) if  if ( 
[48] SUBPROCESS(3) if  s4_t_pair_num < AUX_BUFFSIZE 
[49] SUBPROCESS(3) if  ) 
[50] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[51] SUBSUBPROCESS(1) if  if ( 
[52] SUBSUBPROCESS(1) if  (fl_t_tmp_Rxobs > st_g_bsm_loop_data.afl_installed_angle[1]) 
[53] SUBSUBPROCESS(1) if  && (fl_t_tmp_Rxobs < RX_MAX_2F) 
[54] SUBSUBPROCESS(1) if  && (fl_t_tmp_Ryobs < RY_MIN_2F) 
[55] SUBSUBPROCESS(1) if  && (fl_t_tmp_Robs > R_MAX_2F) 
[56] SUBSUBPROCESS(1) if  && (fl_t_tmp_Robs < R_MIN_2F) 
[57] SUBSUBPROCESS(1) if  ) 
[58] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBPROCESS(1) if  if ( 
[60] SUBSUBSUBPROCESS(1) if  fl_t_tmp_Robs < 0 
[61] SUBSUBSUBPROCESS(1) if  ) 
[62] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].s4_bin_up = (S4)(( 0.50F * ((-fl_t_tmp_Robs / RCOF) - (fl_t_tmp_Vobs / VCOF))) + 0.50F) + (S4)(NB_FFT_PT / 2 
[64] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[65] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].fl_bin_up_interpolate = ((0.50F * ((-fl_t_tmp_Robs / RCOF) - (fl_t_tmp_Vobs / VCOF))) + 0.50F) + ((FL)NB_FFT_PT / 2.0F 
[66] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[67] SUBSUBSUBPROCESS(2) else else 
[68] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[69] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].s4_bin_up = (S4)(( 0.50F * ((fl_t_tmp_Robs / RCOF) - (fl_t_tmp_Vobs / VCOF))) + 0.50F) + (S4)(NB_FFT_PT / 2 
[70] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[71] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].fl_bin_up_interpolate = (( 0.50F * (fl_t_tmp_Robs / RCOF - fl_t_tmp_Vobs / VCOF)) + 0.50F) + (FL)(NB_FFT_PT / 2 
[72] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[73] SUBSUBSUBPROCESS(3) if  if ( 
[74] SUBSUBSUBPROCESS(3) if  fl_t_tmp_Robs < 0 
[75] SUBSUBSUBPROCESS(3) if  ) 
[76] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[77] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].s4_bin_dn = (S4)(( 0.50F * ((-fl_t_tmp_Robs / RCOF) + (fl_t_tmp_Vobs / VCOF))) + 0.50F) + (S4)(NB_FFT_PT / 2 
[78] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[79] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].fl_bin_dn_interpolate = (( 0.50F * (-fl_t_tmp_Robs / RCOF + fl_t_tmp_Vobs / VCOF)) + 0.50F) + ((FL)NB_FFT_PT / 2.0F 
[80] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[81] SUBSUBSUBPROCESS(4) else else 
[82] SUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBPROCESS(1) 
[83] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].s4_bin_dn = (S4)((0.50F * ((fl_t_tmp_Robs / RCOF) + (fl_t_tmp_Vobs / VCOF)) + 0.50F)) + (S4)(NB_FFT_PT / 2 
[84] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[85] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].fl_bin_dn_interpolate = ((0.50F * ((fl_t_tmp_Robs / RCOF) + (fl_t_tmp_Vobs / VCOF))) + 0.50F) + ((FL)NB_FFT_PT / 2.0F 
[86] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[87] SUBSUBSUBPROCESS(5) equal s4_t_wave_number[s4_t_pair_num] as4_a_peak_wave_num[s4_t_lp_i];
[88] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].s4_bin_up_music (S4)afl_a_peak_doa_bins_intpl_2f[s4_t_lp_i];
[89] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_doa_up_interpolate afl_a_peak_doa_bins_intpl_2f[s4_t_lp_i];
[90] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_power_up afl_g_cvw_lfm_ftt_power[0][ast_a_normal_2f[s4_t_pair_num].s4_bin_up];
[91] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_power_up_music afl_a_peak_doa_powers_2f[s4_t_lp_i];
[92] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_theta_up fl_t_tmp_theta;
[93] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].s4_bin_dn_music ast_a_normal_2f[s4_t_pair_num].s4_bin_up_music;
[94] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_doa_dn_interpolate ast_a_normal_2f[s4_t_pair_num].fl_doa_up_interpolate;
[95] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_power_dn afl_g_cvw_lfm_ftt_power[1][ast_a_normal_2f[s4_t_pair_num].s4_bin_dn];
[96] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_power_dn_music ast_a_normal_2f[s4_t_pair_num].fl_power_up_music;
[97] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_theta_dn ast_a_normal_2f[s4_t_pair_num].fl_theta_up;
[98] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_Robs fl_t_tmp_Robs;
[99] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_Rxobs fl_t_tmp_Rxobs;
[100] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_Ryobs fl_t_tmp_Ryobs;
[101] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_Vobs fl_t_tmp_Vobs;
[102] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_Vxobs 0.0F;
[103] SUBSUBSUBPROCESS(5) func<start> ast_a_normal_2f[s4_t_pair_num].fl_Vyobs = fl_get_vy( 
[104] SUBSUBSUBPROCESS(5) func fl_g_v_self_bsm_for_base 
[105] SUBSUBSUBPROCESS(5) func<end> ); 
[106] SUBSUBSUBPROCESS(5) if  if ( 
[107] SUBSUBSUBPROCESS(5) if  fl_abs(ast_a_normal_2f[s4_t_pair_num].fl_Vyobs + fl_g_v_self_bsm_for_base / 3.6F) < 0.5F 
[108] SUBSUBSUBPROCESS(5) if  ) 
[109] SUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBPROCESS(1) 
[110] SUBSUBSUBSUBPROCESS(1) equal ast_a_normal_2f[s4_t_pair_num].s4_flg_stop 1;
[111] SUBSUBSUBPROCESS(6) else else 
[112] SUBSUBSUBPROCESS(6) subproc SUBSUBSUBSUBPROCESS(1) 
[113] SUBSUBSUBSUBPROCESS(1) equal ast_a_normal_2f[s4_t_pair_num].s4_flg_stop 0;
[114] SUBSUBSUBPROCESS(7) proc s4_t_pair_num++; 
[115] SUBPROCESS(4) else else 
[116] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[117] SUBSUBPROCESS(1) equal fl_t_pow_min 0.0F;
[118] SUBSUBPROCESS(1) equal s4_t_index -1;
[119] SUBSUBPROCESS(1) for for( 
[120] SUBSUBPROCESS(1) for s4_t_lp_k=0; 
[121] SUBSUBPROCESS(1) for s4_t_lp_k<s4_t_pair_num; 
[122] SUBSUBPROCESS(1) for s4_t_lp_k++) 
[123] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[124] SUBSUBSUBPROCESS(1) if  if ( 
[125] SUBSUBSUBPROCESS(1) if  (fl_abs(afl_g_cvw_fcw_ftt_power[(S4)afl_a_peak_bins_intpl_2f[s4_t_lp_i]]) > fl_abs(afl_g_cvw_fcw_ftt_power[(S4)afl_a_peak_bins_intpl_2f[s4_t_lp_k]]) 
[126] SUBSUBSUBPROCESS(1) if  ) 
[127] SUBSUBSUBPROCESS(1) if  &&  (fl_t_pow_min > afl_g_cvw_fcw_ftt_power[(S4)afl_a_peak_bins_intpl_2f[s4_t_lp_k]])) 
[128] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[129] SUBSUBSUBSUBPROCESS(1) equal fl_t_pow_min afl_g_cvw_fcw_ftt_power[(S4)afl_a_peak_bins_intpl_2f[s4_t_lp_k]];
[130] SUBSUBSUBSUBPROCESS(1) equal s4_t_index s4_t_lp_k;
[131] SUBSUBPROCESS(2) if if( 
[132] SUBSUBPROCESS(2) if s4_t_index != -1 
[133] SUBSUBPROCESS(2) if ) 
[134] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[135] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_2f[s4_t_index], 1 
[136] SUBSUBSUBPROCESS(1) func<end> ); 
[137] SUBSUBSUBPROCESS(1) func<start> s4_trim_normal_2f(ast_a_normal_2f 
[138] SUBSUBSUBPROCESS(1) func<end> ); 
[139] SUBSUBSUBPROCESS(1) proc s4_t_pair_num--; 
[140] SUBSUBSUBPROCESS(1) proc s4_t_lp_i--; 
[141] SUBSUBSUBPROCESS(1) if if( 
[142] SUBSUBSUBPROCESS(1) if s4_t_lp_i<-1 
[143] SUBSUBSUBPROCESS(1) if ) 
[144] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[145] SUBSUBSUBSUBPROCESS(1) equal s4_t_lp_i -1;
[146] MAINPROCESS(3) for  for ( 
[147] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[148] MAINPROCESS(3) for  s4_t_lp_i < (AUX_BUFFSIZE * 2 
[149] MAINPROCESS(3) for  ); 
[150] MAINPROCESS(3) for  s4_t_lp_i++) 
[151] MAINPROCESS(3) subproc SUBPROCESS(1) 
[152] SUBPROCESS(1) equal as4_a_peak_wave_num[s4_t_lp_i] s4_t_wave_number[s4_t_lp_i];
[153] MAINPROCESS(4) proc return; 
----------------- Total Codes : 153 lines
--------------------------
[Function Name] : fn_bsm_2f_set_object 
-Return type : VD 
-Argument : 2 
     [0] : const S4   *ps4_a_pair_num_2f 
     [1] : NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[4] MAINPROCESS(1) for  s4_t_lp_i < *ps4_a_pair_num_2f; 
[5] MAINPROCESS(1) for  s4_t_lp_i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal ast_a_normal_2f[s4_t_lp_i].s4_flg_dc OBJECT_TYPE_2F;
[8] MAINPROCESS(2) proc return; 
----------------- Total Codes : 8 lines
--------------------------
[Function Name] : s4_bsm_2f_compare_with_FMCW 
-Return type : S4 
-Argument : 6 
     [0] : S4   peak_num_2f 
     [1] : NORMAL_BSM   normal_2f[AUX_BUFFSIZE] 
     [2] : const S4   peak_wave_num[AUX_BUFFSIZE*2] 
     [3] : const FL   Ryy_up[NB_FFT_PT][CORRE_SIZE_4CH] 
     [4] : const FL   Ryy_dn[NB_FFT_PT][CORRE_SIZE_4CH] 
     [5] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) equal S4 iret peak_num_2f;
[2] MAINPROCESS(1) proc S4 i, j; 
[3] MAINPROCESS(1) equal S4 tmp_erase_flg 0;
[4] MAINPROCESS(1) proc FL tmp_doa_spec[N_DOA]; 
[5] MAINPROCESS(1) equal S4 tmp_wave_num_up 0;
[6] MAINPROCESS(1) proc S4 tmp_doa_up[2]; 
[7] MAINPROCESS(1) proc FL tmp_peak_power_up[2]; 
[8] MAINPROCESS(1) equal S4 tmp_wave_num_dn 0;
[9] MAINPROCESS(1) proc S4 tmp_doa_dn[2]; 
[10] MAINPROCESS(1) proc FL tmp_peak_power_dn[2]; 
[11] MAINPROCESS(1) proc U1 u1_t_lp_n_doa; 
[12] MAINPROCESS(1) proc U1 u1_t_jdg_b10_flg; 
[13] MAINPROCESS(1) proc U1 u1_t_jdg_a3_flg; 
[14] MAINPROCESS(1) for  for ( 
[15] MAINPROCESS(1) for  u1_t_lp_n_doa = (U1)0; 
[16] MAINPROCESS(1) for  u1_t_lp_n_doa < (U1)N_DOA; 
[17] MAINPROCESS(1) for  u1_t_lp_n_doa++) 
[18] MAINPROCESS(1) subproc SUBPROCESS(1) 
[19] SUBPROCESS(1) equal tmp_doa_spec[u1_t_lp_n_doa] (FL)0.0F;
[20] MAINPROCESS(2) equal tmp_doa_up[0] (S4)-1;
[21] MAINPROCESS(2) equal tmp_doa_up[1] (S4)-1;
[22] MAINPROCESS(2) equal tmp_peak_power_up[0] (FL)0.0F;
[23] MAINPROCESS(2) equal tmp_peak_power_up[1] (FL)0.0F;
[24] MAINPROCESS(2) equal tmp_doa_dn[0] (S4)-1;
[25] MAINPROCESS(2) equal tmp_doa_dn[1] (S4)-1;
[26] MAINPROCESS(2) equal tmp_peak_power_dn[0] (FL)0.0F;
[27] MAINPROCESS(2) equal tmp_peak_power_dn[1] (FL)0.0F;
[28] MAINPROCESS(2) for for( 
[29] MAINPROCESS(2) for i=0; 
[30] MAINPROCESS(2) for i<peak_num_2f; 
[31] MAINPROCESS(2) for i++) 
[32] MAINPROCESS(2) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) func<start> u1_t_jdg_b10_flg = u1_bsm_2f_compare_with_FMCW_b10(normal_2f[i].fl_Ryobs 
[34] SUBPROCESS(1) func<end> ); 
[35] SUBPROCESS(1) if  if ( 
[36] SUBPROCESS(1) if  ((peak_wave_num[i] > (S4)0 
[37] SUBPROCESS(1) if  ) 
[38] SUBPROCESS(1) if  &&   (fl_g_v_self_bsm_for_base < (FL)12.0F)) 
[39] SUBPROCESS(1) if  ||  ((peak_wave_num[i] > (S4)1) 
[40] SUBPROCESS(1) if  &&   (!(fl_g_v_self_bsm_for_base < (FL)12.0F))) 
[41] SUBPROCESS(1) if  ||  ((normal_2f[i].s4_bin_up_music > (S4)CU1_COMPARE_FM2F_DOA_LOWER_LIMIT) 
[42] SUBPROCESS(1) if  &&   (normal_2f[i].s4_bin_up_music < (S4)CU1_COMPARE_FM2F_DOA_UPPER_LIMIT) 
[43] SUBPROCESS(1) if  &&   (normal_2f[i].s4_bin_dn_music > (S4)CU1_COMPARE_FM2F_DOA_LOWER_LIMIT) 
[44] SUBPROCESS(1) if  &&   (normal_2f[i].s4_bin_dn_music < (S4)CU1_COMPARE_FM2F_DOA_UPPER_LIMIT) 
[45] SUBPROCESS(1) if  &&   (st_g_bsm_loop_data.as4_fast_sot_flg[0] != (S4)0)) 
[46] SUBPROCESS(1) if  ||  ((normal_2f[i].s4_bin_up_music > (S4)CU1_COMPARE_FM2F_DOA_LOWER_LIMIT) 
[47] SUBPROCESS(1) if  &&   (normal_2f[i].s4_bin_up_music < (S4)CU1_COMPARE_FM2F_DOA_UPPER_LIMIT) 
[48] SUBPROCESS(1) if  &&   (normal_2f[i].s4_bin_dn_music > (S4)CU1_COMPARE_FM2F_DOA_LOWER_LIMIT) 
[49] SUBPROCESS(1) if  &&   (normal_2f[i].s4_bin_dn_music < (S4)CU1_COMPARE_FM2F_DOA_UPPER_LIMIT) 
[50] SUBPROCESS(1) if  &&   (u1_a_alarming_flag == (U1)0) 
[51] SUBPROCESS(1) if  &&   (u1_t_jdg_b10_flg == CU1_TRUE) 
[52] SUBPROCESS(1) if  &&   (normal_2f[i].fl_Ryobs > (FL)-9.0F))) 
[53] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[54] SUBSUBPROCESS(1) equal tmp_erase_flg 0;
[55] SUBSUBPROCESS(1) func<start> fn_calc_spec_bf_4ch_fm( 
[56] SUBSUBPROCESS(1) func normal_2f[i].s4_bin_up 
[57] SUBSUBPROCESS(1) func<end> ); 
[58] SUBSUBPROCESS(1) func<start> tmp_wave_num_up = s4_search_peak_bf( 
[59] SUBSUBPROCESS(1) func 1 
[60] SUBSUBPROCESS(1) func<end> ); 
[61] SUBSUBPROCESS(1) for for( 
[62] SUBSUBPROCESS(1) for j=0; 
[63] SUBSUBPROCESS(1) for j<tmp_wave_num_up; 
[64] SUBSUBPROCESS(1) for j++ ) 
[65] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[66] SUBSUBSUBPROCESS(1) func<start> u1_t_jdg_a3_flg = u1_bsm_2f_compare_with_FMCW_a3(normal_2f[i].fl_power_up_music, tmp_peak_power_up[j] 
[67] SUBSUBSUBPROCESS(1) func<end> ); 
[68] SUBSUBSUBPROCESS(1) if  if ( 
[69] SUBSUBSUBPROCESS(1) if  (normal_2f[i].fl_Robs != CFL_UNKNOWN_VALUE 
[70] SUBSUBSUBPROCESS(1) if  ) 
[71] SUBSUBSUBPROCESS(1) if  &&  (s4_abs(normal_2f[i].s4_bin_up_music - tmp_doa_up[j]) > (S4)CU1_DOA_DIFF_FM_2F) 
[72] SUBSUBSUBPROCESS(1) if  &&  (u1_t_jdg_a3_flg == CU1_TRUE)) 
[73] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[74] SUBSUBSUBSUBPROCESS(1) equal tmp_erase_flg 1;
[75] SUBSUBPROCESS(2) if if( 
[76] SUBSUBPROCESS(2) if tmp_erase_flg == 0 
[77] SUBSUBPROCESS(2) if ) 
[78] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[79] SUBSUBSUBPROCESS(1) func<start> fn_calc_spec_bf_4ch_fm( 
[80] SUBSUBSUBPROCESS(1) func normal_2f[i].s4_bin_dn 
[81] SUBSUBSUBPROCESS(1) func<end> ); 
[82] SUBSUBSUBPROCESS(1) func<start> tmp_wave_num_dn = s4_search_peak_bf( 
[83] SUBSUBSUBPROCESS(1) func 1 
[84] SUBSUBSUBPROCESS(1) func<end> ); 
[85] SUBSUBSUBPROCESS(1) for for( 
[86] SUBSUBSUBPROCESS(1) for j=0; 
[87] SUBSUBSUBPROCESS(1) for j<tmp_wave_num_dn; 
[88] SUBSUBSUBPROCESS(1) for j++ ) 
[89] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[90] SUBSUBSUBSUBPROCESS(1) if  if ( 
[91] SUBSUBSUBSUBPROCESS(1) if  (normal_2f[i].fl_Robs != CFL_UNKNOWN_VALUE 
[92] SUBSUBSUBSUBPROCESS(1) if  ) 
[93] SUBSUBSUBSUBPROCESS(1) if  &&  (s4_abs(normal_2f[i].s4_bin_dn_music - tmp_doa_dn[j]) > (S4)CU1_DOA_DIFF_FM_2F)) 
[94] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[95] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_erase_flg 1;
[96] SUBSUBPROCESS(3) if if( 
[97] SUBSUBPROCESS(3) if tmp_erase_flg==1 
[98] SUBSUBPROCESS(3) if ) 
[99] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[100] SUBSUBSUBPROCESS(1) func<start> fn_init(&normal_2f[i], 1 
[101] SUBSUBSUBPROCESS(1) func<end> ); 
[102] MAINPROCESS(3) func<start> iret = s4_trim_normal_2f(normal_2f 
[103] MAINPROCESS(3) func<end> ); 
[104] MAINPROCESS(3) proc return iret; 
----------------- Total Codes : 104 lines
--------------------------
[Function Name] : u1_bsm_2f_compare_with_FMCW_b10 
-Return type : static U1 
-Argument : 1 
     [0] : FL   fl_a_Ryobs 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_b10_flag; 
[2] MAINPROCESS(1) equal u1_t_jdg_b10_flag CU1_FALSE;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  fl_a_Ryobs < (FL)-3.5F 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_b10_flag CU1_TRUE;
[8] MAINPROCESS(2) else else 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal u1_t_jdg_b10_flag CU1_FALSE;
[11] MAINPROCESS(3) proc return u1_t_jdg_b10_flag; 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : u1_bsm_2f_compare_with_FMCW_a3 
-Return type : static U1 
-Argument : 2 
     [0] : FL   fl_a_power_up_music 
     [1] : FL   fl_a_peak_power_up 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_a3_flag; 
[2] MAINPROCESS(1) equal u1_t_jdg_a3_flag CU1_FALSE;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  fl_a_power_up_music < (FL)45.0F 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal u1_t_jdg_a3_flag CU1_TRUE;
[8] MAINPROCESS(2) else else 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal u1_t_jdg_a3_flag CU1_FALSE;
[11] MAINPROCESS(3) proc return u1_t_jdg_a3_flag; 
----------------- Total Codes : 11 lines
