Total lines: 2213 
Total functions : 25 
--------------------------
[Function Name] : fn_matmul_4x4 
-Return type : ;VD 
-Argument : 3 
     [0] : FL   afl_a_mat_A[4][4] 
     [1] : FL   afl_a_mat_B[4][4] 
     [2] : FL   afl_a_mat_C[4][4] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[4] MAINPROCESS(1) proc FL fl_t_res_s; 
[5] MAINPROCESS(1) for  for ( 
[6] MAINPROCESS(1) for  s4_t_lp_k = 0; 
[7] MAINPROCESS(1) for  s4_t_lp_k < 4; 
[8] MAINPROCESS(1) for  s4_t_lp_k++  
[9] MAINPROCESS(1) for  ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) for  for ( 
[12] SUBPROCESS(1) for  s4_t_lp_i = 0; 
[13] SUBPROCESS(1) for  s4_t_lp_i < 4; 
[14] SUBPROCESS(1) for  s4_t_lp_i++  
[15] SUBPROCESS(1) for  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal fl_t_res_s 0.0;
[18] SUBSUBPROCESS(1) for  for ( 
[19] SUBSUBPROCESS(1) for  s4_t_lp_j = 0; 
[20] SUBSUBPROCESS(1) for  s4_t_lp_j < 4; 
[21] SUBSUBPROCESS(1) for  s4_t_lp_j++  
[22] SUBSUBPROCESS(1) for  ) 
[23] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBPROCESS(1) equal fl_t_res_s + afl_a_mat_A[s4_t_lp_i][s4_t_lp_j] * afl_a_mat_B[s4_t_lp_j][s4_t_lp_k];
[25] SUBSUBPROCESS(2) equal afl_a_mat_C[s4_t_lp_i][s4_t_lp_k] fl_t_res_s;
[26] MAINPROCESS(2) return return; 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_calc_spec_music_4ch 
-Return type : VD 
-Argument : 4 
     [0] : const FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : FL   afl_a_spec_music[N_DOA] 
     [2] : S4   s4_a_wave_num 
     [3] : S4   s4_a_updn_flg 
----- Codes -----
[1] MAINPROCESS(1) proc FL afl_t_eigen_vec[4][4]; 
[2] MAINPROCESS(1) func<start> s4_calc_eigen_vector_4ch( 
[3] MAINPROCESS(1) func (const FL *)afl_a_Ryy, 
[4] MAINPROCESS(1) func afl_t_eigen_vec 
[5] MAINPROCESS(1) func<end> ); 
[6] MAINPROCESS(1) func<start> fn_matrix_spec_4ch( 
[7] MAINPROCESS(1) func afl_t_eigen_vec, 
[8] MAINPROCESS(1) func afl_a_spec_music, 
[9] MAINPROCESS(1) func s4_a_wave_num, 
[10] MAINPROCESS(1) func s4_a_updn_flg, 
[11] MAINPROCESS(1) func (S4)((N_DOA * 0.5F) - st_g_bsm_loop_data.afl_installed_angle[0] - CU1_DOA_BIN_LOWER_LIMIT), 
[12] MAINPROCESS(1) func (S4)((N_DOA * 0.5F) - st_g_bsm_loop_data.afl_installed_angle[0] - CU1_DOA_BIN_LOWER_LIMIT + CU1_DOA_BIN_UPPER_LIMIT) 
[13] MAINPROCESS(1) func<end> ); 
----------------- Total Codes : 13 lines
--------------------------
[Function Name] : s4_calc_spec_music_4ch_all 
-Return type : S4 
-Argument : 4 
     [0] : const FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : FL   afl_a_spec_music[N_DOA] 
     [2] : S4   s4_a_wave_num 
     [3] : S4   s4_a_updn_flg 
----- Codes -----
[1] MAINPROCESS(1) proc FL afl_t_eigen_vec[4][4]; 
[2] MAINPROCESS(1) equal S4 s4_t_temp_wave_num s4_a_wave_num;
[3] MAINPROCESS(1) func<start> s4_t_temp_wave_num = s4_calc_eigen_vector_4ch( 
[4] MAINPROCESS(1) func (const FL *)afl_a_Ryy, 
[5] MAINPROCESS(1) func afl_t_eigen_vec 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) if  if ( 
[8] MAINPROCESS(1) if  (s4_a_wave_num == 1) && (s4_t_temp_wave_num >= 2) 
[9] MAINPROCESS(1) if  ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal s4_t_temp_wave_num 1;
[12] MAINPROCESS(2) func<start> fn_matrix_spec_4ch_all( 
[13] MAINPROCESS(2) func afl_t_eigen_vec, 
[14] MAINPROCESS(2) func afl_a_spec_music, 
[15] MAINPROCESS(2) func s4_t_temp_wave_num, 
[16] MAINPROCESS(2) func s4_a_updn_flg 
[17] MAINPROCESS(2) func<end> ); 
[18] MAINPROCESS(2) if  if ( 
[19] MAINPROCESS(2) if  s4_t_temp_wave_num > (S4)2 
[20] MAINPROCESS(2) if  ) 
[21] MAINPROCESS(2) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal s4_t_temp_wave_num (S4)2;
[23] MAINPROCESS(3) func<start> return ( 
[24] MAINPROCESS(3) func s4_t_temp_wave_num 
[25] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 25 lines
--------------------------
[Function Name] : s4_calc_spec_music_4ch_all_2wavefix 
-Return type : S4 
-Argument : 3 
     [0] : const FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : FL   afl_a_spec_music[N_DOA] 
     [2] : S4   s4_a_updn_flg 
----- Codes -----
[1] MAINPROCESS(1) proc FL afl_t_eigen_vec[4][4]; 
[2] MAINPROCESS(1) equal S4 s4_t_temp_wave_num 2;
[3] MAINPROCESS(1) func<start> s4_t_temp_wave_num = s4_calc_eigen_vector_4ch( 
[4] MAINPROCESS(1) func (const FL *)afl_a_Ryy, 
[5] MAINPROCESS(1) func afl_t_eigen_vec 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) func<start> fn_matrix_spec_4ch_all( 
[8] MAINPROCESS(1) func afl_t_eigen_vec, 
[9] MAINPROCESS(1) func afl_a_spec_music, 
[10] MAINPROCESS(1) func 2, 
[11] MAINPROCESS(1) func s4_a_updn_flg 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) proc return 2; 
----------------- Total Codes : 13 lines
--------------------------
[Function Name] : fn_calc_spec_bf_4ch_fm 
-Return type : VD 
-Argument : 4 
     [0] : const FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : FL   afl_a_spec_bf[N_DOA] 
     [2] : S4   s4_a_updn_flg 
     [3] : S4   s4_a_freq_bin 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) func<start> fn_calc_spec_bf_4ch( 
[3] MAINPROCESS(1) func afl_a_Ryy, 
[4] MAINPROCESS(1) func afl_a_spec_bf, 
[5] MAINPROCESS(1) func s4_a_updn_flg 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < N_DOA; 
[10] MAINPROCESS(1) for  s4_t_lp_i++ 
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal afl_a_spec_bf[s4_t_lp_i] afl_a_spec_bf[s4_t_lp_i] - CAFL_D_FIL_CAL[s4_a_freq_bin];
----------------- Total Codes : 13 lines
--------------------------
[Function Name] : fl_calc_spec_bf_4ch_fm_of_specified_doa 
-Return type : FL 
-Argument : 4 
     [0] : const FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : S4   s4_a_updn_flg 
     [2] : S4   s4_a_freq_bin 
     [3] : S4   s4_a_doa_bin 
----- Codes -----
[1] MAINPROCESS(1) equal FL fl_t_spec_bf 0.0F;
[2] MAINPROCESS(1) func<start> fl_t_spec_bf = fl_calc_spec_bf_4ch_of_specified_doa( 
[3] MAINPROCESS(1) func (const FL *)afl_a_Ryy, 
[4] MAINPROCESS(1) func s4_a_doa_bin, 
[5] MAINPROCESS(1) func s4_a_updn_flg 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) equal fl_t_spec_bf fl_t_spec_bf - CAFL_D_FIL_CAL[s4_a_freq_bin];
[8] MAINPROCESS(1) func<start> return ( 
[9] MAINPROCESS(1) func fl_t_spec_bf 
[10] MAINPROCESS(1) func<end> ); 
----------------- Total Codes : 10 lines
--------------------------
[Function Name] : fl_calc_spec_bf_4ch_2f_of_specified_doa 
-Return type : FL 
-Argument : 3 
     [0] : const FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : S4   s4_a_freq_bin 
     [2] : S4   s4_a_doa_bin 
----- Codes -----
[1] MAINPROCESS(1) equal FL fl_t_spec_bf 0.0F;
[2] MAINPROCESS(1) func<start> fl_t_spec_bf = fl_calc_spec_bf_4ch_of_specified_doa( 
[3] MAINPROCESS(1) func (const FL *)afl_a_Ryy, 
[4] MAINPROCESS(1) func s4_a_doa_bin, 
[5] MAINPROCESS(1) func 1 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) equal fl_t_spec_bf fl_t_spec_bf - CAFL_D_FIL_CAL_FSK[s4_a_freq_bin];
[8] MAINPROCESS(1) func<start> return ( 
[9] MAINPROCESS(1) func fl_t_spec_bf 
[10] MAINPROCESS(1) func<end> ); 
----------------- Total Codes : 10 lines
--------------------------
[Function Name] : fn_calc_spec_bf_4ch_2f 
-Return type : VD 
-Argument : 4 
     [0] : const FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : FL   afl_a_spec_bf[N_DOA] 
     [2] : S4   s4_a_updn_flg 
     [3] : S4   s4_a_freq_bin 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) func<start> fn_calc_spec_bf_4ch( 
[3] MAINPROCESS(1) func afl_a_Ryy, 
[4] MAINPROCESS(1) func afl_a_spec_bf, 
[5] MAINPROCESS(1) func s4_a_updn_flg 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < N_DOA; 
[10] MAINPROCESS(1) for  s4_t_lp_i++ 
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal afl_a_spec_bf[s4_t_lp_i] afl_a_spec_bf[s4_t_lp_i] - CAFL_D_FIL_CAL_FSK[s4_a_freq_bin];
----------------- Total Codes : 13 lines
--------------------------
[Function Name] : fl_calc_spec_bf_4ch_of_specified_doa 
-Return type : FL 
-Argument : 3 
     [0] : const FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : S4   s4_a_doa_bin 
     [2] : S4   s4_a_updn_flg 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_j, s4_t_lp_k; 
[2] MAINPROCESS(1) proc FL afl_t_Ryy[4][4]; 
[3] MAINPROCESS(1) proc FL afl_t_mode_vec[4]; 
[4] MAINPROCESS(1) proc FL afl_t_Ryy_mode[4]; 
[5] MAINPROCESS(1) equal FL fl_t_mode_sum 4.0F;
[6] MAINPROCESS(1) proc FL fl_t_Ryy_sum; 
[7] MAINPROCESS(1) proc FL fl_t_spec_bf; 
[8] MAINPROCESS(1) equal afl_t_Ryy[0][0] afl_a_Ryy[0];
[9] MAINPROCESS(1) equal afl_t_Ryy[0][1] afl_a_Ryy[1];
[10] MAINPROCESS(1) equal afl_t_Ryy[0][2] afl_a_Ryy[3];
[11] MAINPROCESS(1) equal afl_t_Ryy[0][3] afl_a_Ryy[6];
[12] MAINPROCESS(1) equal afl_t_Ryy[1][0] afl_a_Ryy[1];
[13] MAINPROCESS(1) equal afl_t_Ryy[1][1] afl_a_Ryy[2];
[14] MAINPROCESS(1) equal afl_t_Ryy[1][2] afl_a_Ryy[4];
[15] MAINPROCESS(1) equal afl_t_Ryy[1][3] afl_a_Ryy[7];
[16] MAINPROCESS(1) equal afl_t_Ryy[2][0] afl_a_Ryy[3];
[17] MAINPROCESS(1) equal afl_t_Ryy[2][1] afl_a_Ryy[4];
[18] MAINPROCESS(1) equal afl_t_Ryy[2][2] afl_a_Ryy[5];
[19] MAINPROCESS(1) equal afl_t_Ryy[2][3] afl_a_Ryy[8];
[20] MAINPROCESS(1) equal afl_t_Ryy[3][0] afl_a_Ryy[6];
[21] MAINPROCESS(1) equal afl_t_Ryy[3][1] afl_a_Ryy[7];
[22] MAINPROCESS(1) equal afl_t_Ryy[3][2] afl_a_Ryy[8];
[23] MAINPROCESS(1) equal afl_t_Ryy[3][3] afl_a_Ryy[9];
[24] MAINPROCESS(1) equal fl_t_spec_bf 0.0F;
[25] MAINPROCESS(1) if  if ( 
[26] MAINPROCESS(1) if  s4_a_updn_flg == 1 
[27] MAINPROCESS(1) if  ) 
[28] MAINPROCESS(1) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) equal afl_t_mode_vec[0] CAFL_D_MODE_VECTOR_0[s4_a_doa_bin];
[30] SUBPROCESS(1) equal afl_t_mode_vec[1] CAFL_D_MODE_VECTOR_1[s4_a_doa_bin];
[31] SUBPROCESS(1) equal afl_t_mode_vec[2] -CAFL_D_MODE_VECTOR_2[s4_a_doa_bin];
[32] SUBPROCESS(1) equal afl_t_mode_vec[3] -CAFL_D_MODE_VECTOR_3[s4_a_doa_bin];
[33] MAINPROCESS(2) else else 
[34] MAINPROCESS(2) subproc SUBPROCESS(1) 
[35] SUBPROCESS(1) equal afl_t_mode_vec[0] CAFL_D_MODE_VECTOR_0[s4_a_doa_bin];
[36] SUBPROCESS(1) equal afl_t_mode_vec[1] CAFL_D_MODE_VECTOR_1[s4_a_doa_bin];
[37] SUBPROCESS(1) equal afl_t_mode_vec[2] CAFL_D_MODE_VECTOR_2[s4_a_doa_bin];
[38] SUBPROCESS(1) equal afl_t_mode_vec[3] CAFL_D_MODE_VECTOR_3[s4_a_doa_bin];
[39] MAINPROCESS(3) equal fl_t_Ryy_sum 0.0F;
[40] MAINPROCESS(3) for  for ( 
[41] MAINPROCESS(3) for  s4_t_lp_j = 0; 
[42] MAINPROCESS(3) for  s4_t_lp_j < 4; 
[43] MAINPROCESS(3) for  s4_t_lp_j++  
[44] MAINPROCESS(3) for  ) 
[45] MAINPROCESS(3) subproc SUBPROCESS(1) 
[46] SUBPROCESS(1) equal afl_t_Ryy_mode[s4_t_lp_j] 0.0F;
[47] SUBPROCESS(1) for  for ( 
[48] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[49] SUBPROCESS(1) for  s4_t_lp_k < 4; 
[50] SUBPROCESS(1) for  s4_t_lp_k++  
[51] SUBPROCESS(1) for  ) 
[52] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[53] SUBSUBPROCESS(1) equal afl_t_Ryy_mode[s4_t_lp_j] + afl_t_Ryy[s4_t_lp_j][s4_t_lp_k] * afl_t_mode_vec[s4_t_lp_k];
[54] SUBPROCESS(2) equal fl_t_Ryy_sum + afl_t_mode_vec[s4_t_lp_j] * afl_t_Ryy_mode[s4_t_lp_j];
[55] MAINPROCESS(4) func<start> fl_t_spec_bf = 10 * ( 
[56] MAINPROCESS(4) func FL)fl_log10( (0.25F * fl_t_Ryy_sum) / fl_t_mode_sum 
[57] MAINPROCESS(4) func<end> ); 
[58] MAINPROCESS(4) func<start> return ( 
[59] MAINPROCESS(4) func fl_t_spec_bf 
[60] MAINPROCESS(4) func<end> ); 
----------------- Total Codes : 60 lines
--------------------------
[Function Name] : s4_search_peak_music 
-Return type : S4 
-Argument : 4 
     [0] : const FL   afl_a_music_spec[N_DOA] 
     [1] : S4   *ps4_a_bin_music 
     [2] : FL   *pfl_a_power_music 
     [3] : S4   s4_a_wave_num 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_peak_num 0;
[2] MAINPROCESS(1) func<start> s4_t_peak_num = s4_search_peak_music_within_doa_range( 
[3] MAINPROCESS(1) func (const FL *)afl_a_music_spec, 
[4] MAINPROCESS(1) func ps4_a_bin_music, 
[5] MAINPROCESS(1) func pfl_a_power_music, 
[6] MAINPROCESS(1) func s4_a_wave_num, 
[7] MAINPROCESS(1) func (S4)((FL)(N_DOA * 0.5F) - st_g_bsm_loop_data.afl_installed_angle[0] - (FL)CU1_DOA_BIN_LOWER_LIMIT), 
[8] MAINPROCESS(1) func (S4)((FL)(N_DOA * 0.5F) - st_g_bsm_loop_data.afl_installed_angle[0] - (FL)CU1_DOA_BIN_LOWER_LIMIT + (FL)CU1_DOA_BIN_UPPER_LIMIT) 
[9] MAINPROCESS(1) func<end> ); 
[10] MAINPROCESS(1) func<start> return ( 
[11] MAINPROCESS(1) func s4_t_peak_num 
[12] MAINPROCESS(1) func<end> ); 
----------------- Total Codes : 12 lines
--------------------------
[Function Name] : s4_search_peak_music_ex_sidewall 
-Return type : S4 
-Argument : 7 
     [0] : const FL   afl_a_music_spec[N_DOA] 
     [1] : const FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [2] : S4   s4_a_freq_bin 
     [3] : S4   s4_a_updn_flg 
     [4] : S4   as4_a_bin_music[2] 
     [5] : FL   afl_a_power_music[2] 
     [6] : S4   s4_a_wave_num 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_iret 0;
[2] MAINPROCESS(1) equal S4 s4_t_peak_num 0;
[3] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[4] MAINPROCESS(1) proc S4 as4_t_bin_music[2]; 
[5] MAINPROCESS(1) proc FL afl_t_power_music[2]; 
[6] MAINPROCESS(1) equal FL fl_t_pow_max 0.0F;
[7] MAINPROCESS(1) equal S4 s4_t_wave_index -1;
[8] MAINPROCESS(1) for  for ( 
[9] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[10] MAINPROCESS(1) for  s4_t_lp_i < 2; 
[11] MAINPROCESS(1) for  s4_t_lp_i++ 
[12] MAINPROCESS(1) for  ) 
[13] MAINPROCESS(1) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal as4_t_bin_music[s4_t_lp_i] 0;
[15] SUBPROCESS(1) equal afl_t_power_music[s4_t_lp_i] 0.0F;
[16] MAINPROCESS(2) func<start> s4_t_peak_num = s4_search_peak_music_within_doa_range( 
[17] MAINPROCESS(2) func (const FL *)afl_a_music_spec, 
[18] MAINPROCESS(2) func as4_t_bin_music, 
[19] MAINPROCESS(2) func afl_t_power_music, 
[20] MAINPROCESS(2) func s4_a_wave_num, 
[21] MAINPROCESS(2) func (S4)((FL)(N_DOA * 0.5F) - st_g_bsm_loop_data.afl_installed_angle[0] - (FL)CU1_DOA_BIN_LOWER_LIMIT), 
[22] MAINPROCESS(2) func (S4)((FL)(N_DOA * 0.5F) - st_g_bsm_loop_data.afl_installed_angle[0] - (FL)CU1_DOA_BIN_LOWER_LIMIT + (FL)CU1_DOA_BIN_UPPER_LIMIT) 
[23] MAINPROCESS(2) func<end> ); 
[24] MAINPROCESS(2) for  for ( 
[25] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[26] MAINPROCESS(2) for  s4_t_lp_i < 2; 
[27] MAINPROCESS(2) for  s4_t_lp_i++ 
[28] MAINPROCESS(2) for  ) 
[29] MAINPROCESS(2) subproc SUBPROCESS(1) 
[30] SUBPROCESS(1) if  if ( 
[31] SUBPROCESS(1) if  as4_t_bin_music[s4_t_lp_i] > 0 
[32] SUBPROCESS(1) if  ) 
[33] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) func<start> afl_t_power_music[s4_t_lp_i] = fl_calc_spec_bf_4ch_fm_of_specified_doa( 
[35] SUBSUBPROCESS(1) func afl_a_Ryy, 
[36] SUBSUBPROCESS(1) func s4_a_updn_flg, 
[37] SUBSUBPROCESS(1) func s4_a_freq_bin, 
[38] SUBSUBPROCESS(1) func as4_t_bin_music[s4_t_lp_i] 
[39] SUBSUBPROCESS(1) func<end> ); 
[40] MAINPROCESS(3) if  if ( 
[41] MAINPROCESS(3) if  s4_t_peak_num > 1 
[42] MAINPROCESS(3) if  ) 
[43] MAINPROCESS(3) subproc SUBPROCESS(1) 
[44] SUBPROCESS(1) for  for ( 
[45] SUBPROCESS(1) for  s4_t_lp_i = 0; 
[46] SUBPROCESS(1) for  s4_t_lp_i < s4_t_peak_num; 
[47] SUBPROCESS(1) for  s4_t_lp_i++ 
[48] SUBPROCESS(1) for  ) 
[49] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[50] SUBSUBPROCESS(1) if  if ( 
[51] SUBSUBPROCESS(1) if  (as4_t_bin_music[s4_t_lp_i] < (N_DOA - (S4)st_g_bsm_loop_data.afl_installed_angle[0] - DOA_RANGE_FORWARD) 
[52] SUBSUBPROCESS(1) if  ) 
[53] SUBSUBPROCESS(1) if  && (as4_t_bin_music[s4_t_lp_i] > (N_DOA - (S4)st_g_bsm_loop_data.afl_installed_angle[0] - (S4)CU1_DOA_RANGE_BACKWARD) 
[54] SUBSUBPROCESS(1) if  ) 
[55] SUBSUBPROCESS(1) if  && (afl_t_power_music[s4_t_lp_i] > fl_t_pow_max 
[56] SUBSUBPROCESS(1) if  ) 
[57] SUBSUBPROCESS(1) if  ) 
[58] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBPROCESS(1) equal fl_t_pow_max afl_t_power_music[s4_t_lp_i];
[60] SUBSUBSUBPROCESS(1) equal s4_t_wave_index s4_t_lp_i;
[61] SUBSUBSUBPROCESS(1) equal s4_t_iret 1;
[62] SUBPROCESS(2) if  if ( 
[63] SUBPROCESS(2) if  s4_t_iret != 0 
[64] SUBPROCESS(2) if  ) 
[65] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[66] SUBSUBPROCESS(1) equal as4_a_bin_music[0] as4_t_bin_music[s4_t_wave_index];
[67] SUBSUBPROCESS(1) equal afl_a_power_music[0] afl_t_power_music[s4_t_wave_index];
[68] SUBPROCESS(3) else else 
[69] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[70] SUBSUBPROCESS(1) equal as4_a_bin_music[0] 0;
[71] SUBSUBPROCESS(1) equal afl_a_power_music[0] 0.0F;
[72] SUBSUBPROCESS(1) equal s4_t_iret 0;
[73] MAINPROCESS(4) else else 
[74] MAINPROCESS(4) subproc SUBPROCESS(1) 
[75] SUBPROCESS(1) for  for ( 
[76] SUBPROCESS(1) for  s4_t_lp_i = 0; 
[77] SUBPROCESS(1) for  s4_t_lp_i < 2; 
[78] SUBPROCESS(1) for  s4_t_lp_i++ 
[79] SUBPROCESS(1) for  ) 
[80] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[81] SUBSUBPROCESS(1) equal as4_a_bin_music[s4_t_lp_i] as4_t_bin_music[s4_t_lp_i];
[82] SUBSUBPROCESS(1) equal afl_a_power_music[s4_t_lp_i] afl_t_power_music[s4_t_lp_i];
[83] SUBSUBPROCESS(1) equal s4_t_iret s4_t_peak_num;
[84] MAINPROCESS(5) func<start> return ( 
[85] MAINPROCESS(5) func s4_t_iret 
[86] MAINPROCESS(5) func<end> ); 
----------------- Total Codes : 86 lines
--------------------------
[Function Name] : s4_search_peak_music_within_doa_range 
-Return type : S4 
-Argument : 6 
     [0] : const FL   afl_a_music_spec[N_DOA] 
     [1] : S4   *ps4_a_bin_music 
     [2] : FL   *pfl_a_power_music 
     [3] : S4   s4_a_wave_num 
     [4] : S4   s4_a_start_doa 
     [5] : S4   s4_a_end_doa 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc S4 as4_t_bin_music[4]; 
[4] MAINPROCESS(1) proc FL afl_t_power_music[4]; 
[5] MAINPROCESS(1) proc S4 as4_t_tmp_bin_music[4]; 
[6] MAINPROCESS(1) proc FL afl_t_tmp_power_music[4]; 
[7] MAINPROCESS(1) equal S4 s4_t_peak_num 0;
[8] MAINPROCESS(1) proc S4 s4_t_int; 
[9] MAINPROCESS(1) proc FL s4_t_float; 
[10] MAINPROCESS(1) equal S4 s4_t_begin -1;
[11] MAINPROCESS(1) proc U1 u1_t_lp_peak_num; 
[12] MAINPROCESS(1) for  for ( 
[13] MAINPROCESS(1) for  u1_t_lp_peak_num = (U1)0; 
[14] MAINPROCESS(1) for  u1_t_lp_peak_num < (U1)4; 
[15] MAINPROCESS(1) for  u1_t_lp_peak_num++ 
[16] MAINPROCESS(1) for  ) 
[17] MAINPROCESS(1) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) equal as4_t_bin_music[u1_t_lp_peak_num] (S4)0;
[19] SUBPROCESS(1) equal afl_t_power_music[u1_t_lp_peak_num] (FL)0.0F;
[20] SUBPROCESS(1) equal as4_t_tmp_bin_music[u1_t_lp_peak_num] (S4)0;
[21] SUBPROCESS(1) equal afl_t_tmp_power_music[u1_t_lp_peak_num] (FL)0.0F;
[22] MAINPROCESS(2) for  for ( 
[23] MAINPROCESS(2) for  s4_t_lp_i = s4_a_start_doa; 
[24] MAINPROCESS(2) for  s4_t_lp_i < ( 
[25] MAINPROCESS(2) for  s4_a_end_doa - (S4)1 
[26] MAINPROCESS(2) for  ); 
[27] MAINPROCESS(2) for  s4_t_lp_i++ 
[28] MAINPROCESS(2) for  ) 
[29] MAINPROCESS(2) subproc SUBPROCESS(1) 
[30] SUBPROCESS(1) if if( 
[31] SUBPROCESS(1) if s4_t_peak_num < 4 
[32] SUBPROCESS(1) if ) 
[33] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) if  if ( 
[35] SUBSUBPROCESS(1) if  (afl_a_music_spec[s4_t_lp_i] < afl_a_music_spec[s4_t_lp_i+1] 
[36] SUBSUBPROCESS(1) if  ) 
[37] SUBSUBPROCESS(1) if  &&  (afl_a_music_spec[s4_t_lp_i+1] > DOA_POW_THRESHOLD_MUSIC) 
[38] SUBSUBPROCESS(1) if  ) 
[39] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[40] SUBSUBSUBPROCESS(1) equal s4_t_begin s4_t_lp_i;
[41] SUBSUBPROCESS(2) if if( 
[42] SUBSUBPROCESS(2) if s4_t_begin != -1 
[43] SUBSUBPROCESS(2) if ) 
[44] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[45] SUBSUBSUBPROCESS(1) if  if ( 
[46] SUBSUBSUBPROCESS(1) if  (afl_a_music_spec[s4_t_lp_i] > afl_a_music_spec[s4_t_lp_i+1] 
[47] SUBSUBSUBPROCESS(1) if  ) 
[48] SUBSUBSUBPROCESS(1) if  &&  (afl_a_music_spec[s4_t_lp_i] > DOA_POW_THRESHOLD_MUSIC) 
[49] SUBSUBSUBPROCESS(1) if  ) 
[50] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[51] SUBSUBSUBSUBPROCESS(1) equal<start> as4_t_bin_music[s4_t_peak_num] = ( 
[52] SUBSUBSUBSUBPROCESS(1) equal S4)((FL)(s4_t_begin+s4_t_lp_i+(S4)1)*0.5F 
[53] SUBSUBSUBSUBPROCESS(1) equal<end> ); 
[54] SUBSUBSUBSUBPROCESS(1) equal afl_t_power_music[s4_t_peak_num] afl_a_music_spec[as4_t_bin_music[s4_t_peak_num]];
[55] SUBSUBSUBSUBPROCESS(1) proc s4_t_peak_num++; 
[56] SUBSUBSUBSUBPROCESS(1) equal s4_t_begin -1;
[57] MAINPROCESS(3) if if( 
[58] MAINPROCESS(3) if s4_t_peak_num < s4_a_wave_num 
[59] MAINPROCESS(3) if ) 
[60] MAINPROCESS(3) subproc SUBPROCESS(1) 
[61] SUBPROCESS(1) if if( 
[62] SUBPROCESS(1) if afl_a_music_spec[s4_a_end_doa-2] < afl_a_music_spec[s4_a_end_doa-1] 
[63] SUBPROCESS(1) if ) 
[64] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[65] SUBSUBPROCESS(1) if if( 
[66] SUBSUBPROCESS(1) if afl_a_music_spec[s4_a_end_doa-1] > DOA_POW_THRESHOLD_MUSIC 
[67] SUBSUBPROCESS(1) if ) 
[68] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[69] SUBSUBSUBPROCESS(1) equal as4_t_bin_music[s4_t_peak_num] s4_a_end_doa-(S4)1;
[70] SUBSUBSUBPROCESS(1) equal afl_t_power_music[s4_t_peak_num] afl_a_music_spec[s4_a_end_doa-1];
[71] SUBSUBSUBPROCESS(1) proc s4_t_peak_num++; 
[72] MAINPROCESS(4) for  for ( 
[73] MAINPROCESS(4) for  s4_t_lp_i=0; 
[74] MAINPROCESS(4) for  s4_t_lp_i<s4_t_peak_num; 
[75] MAINPROCESS(4) for  s4_t_lp_i++  
[76] MAINPROCESS(4) for  ) 
[77] MAINPROCESS(4) subproc SUBPROCESS(1) 
[78] SUBPROCESS(1) for  for ( 
[79] SUBPROCESS(1) for  s4_t_lp_k = s4_t_lp_i+1; 
[80] SUBPROCESS(1) for  s4_t_lp_k < s4_t_peak_num; 
[81] SUBPROCESS(1) for  s4_t_lp_k++  
[82] SUBPROCESS(1) for  ) 
[83] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[84] SUBSUBPROCESS(1) if  if ( 
[85] SUBSUBPROCESS(1) if  afl_t_power_music[s4_t_lp_i] < afl_t_power_music[s4_t_lp_k] 
[86] SUBSUBPROCESS(1) if  ) 
[87] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[88] SUBSUBSUBPROCESS(1) equal s4_t_int as4_t_bin_music[s4_t_lp_i];
[89] SUBSUBSUBPROCESS(1) equal as4_t_bin_music[s4_t_lp_i] as4_t_bin_music[s4_t_lp_k];
[90] SUBSUBSUBPROCESS(1) equal as4_t_bin_music[s4_t_lp_k] s4_t_int;
[91] SUBSUBSUBPROCESS(1) equal s4_t_float afl_t_power_music[s4_t_lp_i];
[92] SUBSUBSUBPROCESS(1) equal afl_t_power_music[s4_t_lp_i] afl_t_power_music[s4_t_lp_k];
[93] SUBSUBSUBPROCESS(1) equal afl_t_power_music[s4_t_lp_k] s4_t_float;
[94] MAINPROCESS(5) if if( 
[95] MAINPROCESS(5) if s4_t_peak_num > s4_a_wave_num 
[96] MAINPROCESS(5) if ) 
[97] MAINPROCESS(5) subproc SUBPROCESS(1) 
[98] SUBPROCESS(1) equal s4_t_peak_num s4_a_wave_num;
[99] MAINPROCESS(6) for  for ( 
[100] MAINPROCESS(6) for  s4_t_lp_i=0; 
[101] MAINPROCESS(6) for  s4_t_lp_i<s4_t_peak_num; 
[102] MAINPROCESS(6) for  s4_t_lp_i++  
[103] MAINPROCESS(6) for  ) 
[104] MAINPROCESS(6) subproc SUBPROCESS(1) 
[105] SUBPROCESS(1) equal as4_t_tmp_bin_music[s4_t_lp_i] as4_t_bin_music[s4_t_lp_i];
[106] SUBPROCESS(1) equal afl_t_tmp_power_music[s4_t_lp_i] afl_t_power_music[s4_t_lp_i];
[107] MAINPROCESS(7) for  for ( 
[108] MAINPROCESS(7) for  s4_t_lp_i=0; 
[109] MAINPROCESS(7) for  s4_t_lp_i<s4_t_peak_num; 
[110] MAINPROCESS(7) for  s4_t_lp_i++  
[111] MAINPROCESS(7) for  ) 
[112] MAINPROCESS(7) subproc SUBPROCESS(1) 
[113] SUBPROCESS(1) for  for ( 
[114] SUBPROCESS(1) for  s4_t_lp_k = s4_t_lp_i+1; 
[115] SUBPROCESS(1) for  s4_t_lp_k < s4_t_peak_num; 
[116] SUBPROCESS(1) for  s4_t_lp_k++  
[117] SUBPROCESS(1) for  ) 
[118] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[119] SUBSUBPROCESS(1) if  if ( 
[120] SUBSUBPROCESS(1) if  afl_t_tmp_power_music[s4_t_lp_i] > afl_t_tmp_power_music[s4_t_lp_k] 
[121] SUBSUBPROCESS(1) if  ) 
[122] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[123] SUBSUBSUBPROCESS(1) equal s4_t_int as4_t_tmp_bin_music[s4_t_lp_i];
[124] SUBSUBSUBPROCESS(1) equal as4_t_tmp_bin_music[s4_t_lp_i] as4_t_tmp_bin_music[s4_t_lp_k];
[125] SUBSUBSUBPROCESS(1) equal as4_t_tmp_bin_music[s4_t_lp_k] s4_t_int;
[126] SUBSUBSUBPROCESS(1) equal s4_t_float afl_t_tmp_power_music[s4_t_lp_i];
[127] SUBSUBSUBPROCESS(1) equal afl_t_tmp_power_music[s4_t_lp_i] afl_t_tmp_power_music[s4_t_lp_k];
[128] SUBSUBSUBPROCESS(1) equal afl_t_tmp_power_music[s4_t_lp_k] s4_t_float;
[129] MAINPROCESS(8) for  for ( 
[130] MAINPROCESS(8) for  s4_t_lp_i=0; 
[131] MAINPROCESS(8) for  s4_t_lp_i<s4_a_wave_num; 
[132] MAINPROCESS(8) for  s4_t_lp_i++  
[133] MAINPROCESS(8) for  ) 
[134] MAINPROCESS(8) subproc SUBPROCESS(1) 
[135] SUBPROCESS(1) equal ps4_a_bin_music[s4_t_lp_i] as4_t_tmp_bin_music[s4_t_lp_i];
[136] SUBPROCESS(1) equal pfl_a_power_music[s4_t_lp_i] afl_t_tmp_power_music[s4_t_lp_i];
[137] MAINPROCESS(9) proc return s4_t_peak_num; 
----------------- Total Codes : 137 lines
--------------------------
[Function Name] : fl_interpolate_music_peak 
-Return type : FL 
-Argument : 3 
     [0] : const FL   afl_a_music_spec[N_DOA] 
     [1] : S4   s4_a_peak_doa 
     [2] : const FL   afl_a_yomikae_table[YOMIKAE_TABLE_SIZE] 
----- Codes -----
[1] MAINPROCESS(1) equal FL fl_t_doa 0.0F;
[2] MAINPROCESS(1) proc FL afl_t_bin[3]; 
[3] MAINPROCESS(1) proc FL afl_t_pow[3]; 
[4] MAINPROCESS(1) proc FL afl_t_pow_diff[2]; 
[5] MAINPROCESS(1) equal afl_t_bin[0] (FL)0.0F;
[6] MAINPROCESS(1) equal afl_t_bin[1] (FL)0.0F;
[7] MAINPROCESS(1) equal afl_t_bin[2] (FL)0.0F;
[8] MAINPROCESS(1) equal afl_t_pow[0] (FL)0.0F;
[9] MAINPROCESS(1) equal afl_t_pow[1] (FL)0.0F;
[10] MAINPROCESS(1) equal afl_t_pow[2] (FL)0.0F;
[11] MAINPROCESS(1) equal afl_t_pow_diff[0] (FL)0.0F;
[12] MAINPROCESS(1) equal afl_t_pow_diff[1] (FL)0.0F;
[13] MAINPROCESS(1) if  if ( 
[14] MAINPROCESS(1) if  (s4_a_peak_doa < (S4)1 
[15] MAINPROCESS(1) if  ) 
[16] MAINPROCESS(1) if  ||	(s4_a_peak_doa > (N_DOA - (S4)2)) 
[17] MAINPROCESS(1) if  ) 
[18] MAINPROCESS(1) subproc SUBPROCESS(1) 
[19] SUBPROCESS(1) equal fl_t_doa (FL)s4_a_peak_doa;
[20] MAINPROCESS(2) else else 
[21] MAINPROCESS(2) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal afl_t_bin[0] (FL)(s4_a_peak_doa - (S4)1) * (FL)DOA_ANG_PER_BIN;
[23] SUBPROCESS(1) equal afl_t_bin[1] (FL)(s4_a_peak_doa)         * (FL)DOA_ANG_PER_BIN;
[24] SUBPROCESS(1) equal afl_t_bin[2] (FL)(s4_a_peak_doa + (S4)1) * (FL)DOA_ANG_PER_BIN;
[25] SUBPROCESS(1) equal afl_t_pow[0] afl_a_music_spec[s4_a_peak_doa - 1];
[26] SUBPROCESS(1) equal afl_t_pow[1] afl_a_music_spec[s4_a_peak_doa];
[27] SUBPROCESS(1) equal afl_t_pow[2] afl_a_music_spec[s4_a_peak_doa + 1];
[28] SUBPROCESS(1) equal afl_t_pow_diff[0] afl_t_pow[0] - afl_t_pow[1];
[29] SUBPROCESS(1) equal afl_t_pow_diff[1] afl_t_pow[1] - afl_t_pow[2];
[30] SUBPROCESS(1) if  if ( 
[31] SUBPROCESS(1) if  (afl_t_pow_diff[0] + afl_t_pow_diff[1]) == (FL)0.0F 
[32] SUBPROCESS(1) if  ) 
[33] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) equal fl_t_doa afl_t_bin[1];
[35] SUBPROCESS(2) else if  else if ( 
[36] SUBPROCESS(2) else if  (afl_t_pow[0] > afl_t_pow[1] 
[37] SUBPROCESS(2) else if  ) 
[38] SUBPROCESS(2) else if  &&  (afl_t_pow[1] > afl_t_pow[2]) 
[39] SUBPROCESS(2) else if  ) 
[40] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[41] SUBSUBPROCESS(1) equal fl_t_doa afl_t_bin[0];
[42] SUBPROCESS(3) else if  else if ( 
[43] SUBPROCESS(3) else if  (afl_t_pow[2] > afl_t_pow[1] 
[44] SUBPROCESS(3) else if  ) 
[45] SUBPROCESS(3) else if  &&  (afl_t_pow[1] > afl_t_pow[0]) 
[46] SUBPROCESS(3) else if  ) 
[47] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[48] SUBSUBPROCESS(1) equal fl_t_doa afl_t_bin[2];
[49] SUBPROCESS(4) else else 
[50] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[51] SUBSUBPROCESS(1) equal<start> fl_t_doa = ( 
[52] SUBSUBPROCESS(1) equal afl_t_pow_diff[1] * ((afl_t_bin[0] * afl_t_bin[0]) - (afl_t_bin[1] * afl_t_bin[1])) -  afl_t_pow_diff[0] * ((afl_t_bin[1] * afl_t_bin[1]) - (afl_t_bin[2] * afl_t_bin[2]))) / ((FL)2.0F * (FL)DOA_ANG_PER_BIN * (afl_t_pow_diff[0] - afl_t_pow_diff[1]) 
[53] SUBSUBPROCESS(1) equal<end> ); 
[54] SUBPROCESS(5) func<start> fl_t_doa =  afl_a_yomikae_table[( 
[55] SUBPROCESS(5) func S4)(fl_t_doa / (FL)3.0F)] + (afl_a_yomikae_table[(S4)(fl_t_doa / (FL)3.0F) + 1] - afl_a_yomikae_table[(S4)(fl_t_doa / (FL)3.0F)]) / (FL)3.0F * (fl_t_doa - (S4)(fl_t_doa / (FL)3.0F) * (FL)3.0F 
[56] SUBPROCESS(5) func<end> ); 
[57] SUBPROCESS(5) if  if ( 
[58] SUBPROCESS(5) if  fl_t_doa > ((FL)N_DOA - (FL)1.0F) 
[59] SUBPROCESS(5) if  ) 
[60] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[61] SUBSUBPROCESS(1) equal fl_t_doa (FL)N_DOA - (FL)1.0F;
[62] SUBPROCESS(6) else if  else if ( 
[63] SUBPROCESS(6) else if  fl_t_doa < (FL)0.0F 
[64] SUBPROCESS(6) else if  ) 
[65] SUBPROCESS(6) subproc SUBSUBPROCESS(1) 
[66] SUBSUBPROCESS(1) equal fl_t_doa (FL)0.0F;
[67] SUBPROCESS(7) else else 
[68] SUBPROCESS(7) subproc SUBSUBPROCESS(1) 
[69] MAINPROCESS(3) proc return fl_t_doa; 
----------------- Total Codes : 69 lines
--------------------------
[Function Name] : s4_search_peak_bf 
-Return type : S4 
-Argument : 4 
     [0] : const FL   afl_a_spec[N_DOA] 
     [1] : S4   as4_a_peak_bin[WAVE_NUMBER_MAX] 
     [2] : FL   afl_a_peak_power[WAVE_NUMBER_MAX] 
     [3] : S4   s4_a_wave_num 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) equal S4 s4_t_peak_bin_num 0;
[3] MAINPROCESS(1) equal FL fl_t_peak_power 0.0F;
[4] MAINPROCESS(1) equal S4 s4_t_peak_num 0;
[5] MAINPROCESS(1) equal FL fl_t_power_sum 0.0F;
[6] MAINPROCESS(1) equal S4 s4_t_begin -1;
[7] MAINPROCESS(1) equal S4 s4_t_point_num 0;
[8] MAINPROCESS(1) for  for ( 
[9] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[10] MAINPROCESS(1) for  s4_t_lp_i < N_DOA; 
[11] MAINPROCESS(1) for  s4_t_lp_i++ 
[12] MAINPROCESS(1) for  ) 
[13] MAINPROCESS(1) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) if if( 
[15] SUBPROCESS(1) if s4_t_begin == -1 
[16] SUBPROCESS(1) if ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) if if( 
[19] SUBSUBPROCESS(1) if afl_a_spec[s4_t_lp_i] > fl_t_peak_power 
[20] SUBSUBPROCESS(1) if ) 
[21] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBPROCESS(1) equal fl_t_power_sum afl_a_spec[s4_t_lp_i];
[23] SUBSUBSUBPROCESS(1) equal s4_t_point_num 1;
[24] SUBSUBSUBPROCESS(1) equal s4_t_begin s4_t_lp_i;
[25] SUBSUBSUBPROCESS(1) equal s4_t_peak_bin_num s4_t_lp_i;
[26] SUBSUBSUBPROCESS(1) equal fl_t_peak_power fl_t_power_sum / (FL)s4_t_point_num;
[27] SUBPROCESS(2) else else 
[28] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(1) if if( 
[30] SUBSUBPROCESS(1) if afl_a_spec[s4_t_lp_i] > (fl_t_peak_power + (FL)0.05F) 
[31] SUBSUBPROCESS(1) if ) 
[32] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[33] SUBSUBSUBPROCESS(1) equal fl_t_power_sum afl_a_spec[s4_t_lp_i];
[34] SUBSUBSUBPROCESS(1) equal s4_t_point_num 1;
[35] SUBSUBSUBPROCESS(1) equal s4_t_begin s4_t_lp_i;
[36] SUBSUBSUBPROCESS(1) equal<start> s4_t_peak_bin_num = ( 
[37] SUBSUBSUBPROCESS(1) equal S4)((FL)(s4_t_begin+s4_t_lp_i+(S4)1)*0.5F 
[38] SUBSUBSUBPROCESS(1) equal<end> ); 
[39] SUBSUBSUBPROCESS(1) equal fl_t_peak_power fl_t_power_sum / (FL)s4_t_point_num;
[40] SUBSUBPROCESS(2) else if else if( 
[41] SUBSUBPROCESS(2) else if afl_a_spec[s4_t_lp_i] < fl_t_peak_power 
[42] SUBSUBPROCESS(2) else if ) 
[43] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBPROCESS(1) equal<start> s4_t_peak_bin_num = ( 
[45] SUBSUBSUBPROCESS(1) equal S4)((FL)(s4_t_begin+s4_t_lp_i)*0.5F 
[46] SUBSUBSUBPROCESS(1) equal<end> ); 
[47] SUBSUBSUBPROCESS(1) equal fl_t_peak_power fl_t_power_sum / (FL)s4_t_point_num;
[48] SUBSUBSUBPROCESS(1) equal s4_t_begin -1;
[49] SUBSUBSUBPROCESS(1) equal fl_t_power_sum 0.0F;
[50] SUBSUBSUBPROCESS(1) equal s4_t_point_num 0;
[51] SUBSUBPROCESS(3) else else 
[52] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[53] SUBSUBSUBPROCESS(1) equal fl_t_power_sum + afl_a_spec[s4_t_lp_i];
[54] SUBSUBSUBPROCESS(1) proc s4_t_point_num++; 
[55] MAINPROCESS(2) if  if ( 
[56] MAINPROCESS(2) if  fl_t_peak_power != 0.0F 
[57] MAINPROCESS(2) if  ) 
[58] MAINPROCESS(2) subproc SUBPROCESS(1) 
[59] SUBPROCESS(1) equal as4_a_peak_bin[0] s4_t_peak_bin_num;
[60] SUBPROCESS(1) equal afl_a_peak_power[0] fl_t_peak_power;
[61] SUBPROCESS(1) equal s4_t_peak_num 1;
[62] MAINPROCESS(3) func<start> return ( 
[63] MAINPROCESS(3) func s4_t_peak_num 
[64] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 64 lines
--------------------------
[Function Name] : s4_calc_eigen_vector_4ch 
-Return type : S4 
-Argument : 2 
     [0] : const FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : FL   afl_a_W[4][4] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_iRet 1;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[4] MAINPROCESS(1) proc FL afl_t_lamda[4]; 
[5] MAINPROCESS(1) proc FL afl_t_Ryy[4][4]; 
[6] MAINPROCESS(1) proc FL fl_t_ave_power; 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < 4; 
[10] MAINPROCESS(1) for  s4_t_lp_i++ 
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal afl_t_lamda[s4_t_lp_i] 0.0F;
[14] MAINPROCESS(2) equal afl_t_Ryy[0][0] afl_a_Ryy[0];
[15] MAINPROCESS(2) equal afl_t_Ryy[0][1] afl_a_Ryy[1];
[16] MAINPROCESS(2) equal afl_t_Ryy[0][2] afl_a_Ryy[3];
[17] MAINPROCESS(2) equal afl_t_Ryy[0][3] afl_a_Ryy[6];
[18] MAINPROCESS(2) equal afl_t_Ryy[1][0] afl_a_Ryy[1];
[19] MAINPROCESS(2) equal afl_t_Ryy[1][1] afl_a_Ryy[2];
[20] MAINPROCESS(2) equal afl_t_Ryy[1][2] afl_a_Ryy[4];
[21] MAINPROCESS(2) equal afl_t_Ryy[1][3] afl_a_Ryy[7];
[22] MAINPROCESS(2) equal afl_t_Ryy[2][0] afl_a_Ryy[3];
[23] MAINPROCESS(2) equal afl_t_Ryy[2][1] afl_a_Ryy[4];
[24] MAINPROCESS(2) equal afl_t_Ryy[2][2] afl_a_Ryy[5];
[25] MAINPROCESS(2) equal afl_t_Ryy[2][3] afl_a_Ryy[8];
[26] MAINPROCESS(2) equal afl_t_Ryy[3][0] afl_a_Ryy[6];
[27] MAINPROCESS(2) equal afl_t_Ryy[3][1] afl_a_Ryy[7];
[28] MAINPROCESS(2) equal afl_t_Ryy[3][2] afl_a_Ryy[8];
[29] MAINPROCESS(2) equal afl_t_Ryy[3][3] afl_a_Ryy[9];
[30] MAINPROCESS(2) equal fl_t_ave_power 0.0;
[31] MAINPROCESS(2) for  for ( 
[32] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[33] MAINPROCESS(2) for  s4_t_lp_i < 4; 
[34] MAINPROCESS(2) for  s4_t_lp_i++ 
[35] MAINPROCESS(2) for  ) 
[36] MAINPROCESS(2) subproc SUBPROCESS(1) 
[37] SUBPROCESS(1) equal fl_t_ave_power + afl_t_Ryy[s4_t_lp_i][s4_t_lp_i];
[38] MAINPROCESS(3) equal fl_t_ave_power fl_t_ave_power / (FL)4;
[39] MAINPROCESS(3) if  if ( 
[40] MAINPROCESS(3) if  fl_t_ave_power != (FL)0.0F 
[41] MAINPROCESS(3) if  ) 
[42] MAINPROCESS(3) subproc SUBPROCESS(1) 
[43] SUBPROCESS(1) for  for ( 
[44] SUBPROCESS(1) for  s4_t_lp_i = 0; 
[45] SUBPROCESS(1) for  s4_t_lp_i < 4; 
[46] SUBPROCESS(1) for  s4_t_lp_i++  
[47] SUBPROCESS(1) for  ) 
[48] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[49] SUBSUBPROCESS(1) for  for ( 
[50] SUBSUBPROCESS(1) for  s4_t_lp_j = 0; 
[51] SUBSUBPROCESS(1) for  s4_t_lp_j < 4; 
[52] SUBSUBPROCESS(1) for  s4_t_lp_j++  
[53] SUBSUBPROCESS(1) for  ) 
[54] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[55] SUBSUBSUBPROCESS(1) equal afl_t_Ryy[s4_t_lp_i][s4_t_lp_j] afl_t_Ryy[s4_t_lp_i][s4_t_lp_j] / fl_t_ave_power;
[56] MAINPROCESS(4) else else 
[57] MAINPROCESS(4) subproc SUBPROCESS(1) 
[58] SUBPROCESS(1) for  for ( 
[59] SUBPROCESS(1) for  s4_t_lp_i = (S4)0; 
[60] SUBPROCESS(1) for  s4_t_lp_i < (S4)4; 
[61] SUBPROCESS(1) for  s4_t_lp_i++  
[62] SUBPROCESS(1) for  ) 
[63] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[64] SUBSUBPROCESS(1) for  for ( 
[65] SUBSUBPROCESS(1) for  s4_t_lp_j = (S4)0; 
[66] SUBSUBPROCESS(1) for  s4_t_lp_j < (S4)4; 
[67] SUBSUBPROCESS(1) for  s4_t_lp_j++  
[68] SUBSUBPROCESS(1) for  ) 
[69] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[70] SUBSUBSUBPROCESS(1) if  if ( 
[71] SUBSUBSUBPROCESS(1) if  s4_t_lp_i == s4_t_lp_j 
[72] SUBSUBSUBPROCESS(1) if  ) 
[73] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[74] SUBSUBSUBSUBPROCESS(1) equal afl_t_Ryy[s4_t_lp_i][s4_t_lp_j] (FL)1.0F;
[75] SUBSUBSUBPROCESS(2) else else 
[76] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[77] SUBSUBSUBSUBPROCESS(1) equal afl_t_Ryy[s4_t_lp_i][s4_t_lp_j] (FL)0.0F;
[78] MAINPROCESS(5) func<start> fn_cmn_qr_cal_4ch( 
[79] MAINPROCESS(5) func afl_t_Ryy, 
[80] MAINPROCESS(5) func afl_t_lamda, 
[81] MAINPROCESS(5) func afl_a_W 
[82] MAINPROCESS(5) func<end> ); 
[83] MAINPROCESS(5) for  for ( 
[84] MAINPROCESS(5) for  s4_t_lp_i = 0; 
[85] MAINPROCESS(5) for  s4_t_lp_i < 4; 
[86] MAINPROCESS(5) for  s4_t_lp_i++ 
[87] MAINPROCESS(5) for  ) 
[88] MAINPROCESS(5) subproc SUBPROCESS(1) 
[89] SUBPROCESS(1) func<start> afl_t_lamda[s4_t_lp_i] = 10.0F * ( 
[90] SUBPROCESS(1) func FL)fl_log10(afl_t_lamda[s4_t_lp_i] * fl_t_ave_power 
[91] SUBPROCESS(1) func<end> ); 
[92] MAINPROCESS(6) if  if ( 
[93] MAINPROCESS(6) if  (fl_abs(afl_t_lamda[0]) > fl_abs(afl_t_lamda[3]) 
[94] MAINPROCESS(6) if  ) 
[95] MAINPROCESS(6) if  &&  (fl_abs(afl_t_lamda[1]) > fl_abs(afl_t_lamda[3]) 
[96] MAINPROCESS(6) if  ) 
[97] MAINPROCESS(6) if  &&  (fl_abs(afl_t_lamda[0] - afl_t_lamda[1]) < fl_abs(afl_t_lamda[1] - afl_t_lamda[3]) 
[98] MAINPROCESS(6) if  ) 
[99] MAINPROCESS(6) if  &&  (fl_abs(afl_t_lamda[1] - afl_t_lamda[2]) > fl_abs(afl_t_lamda[0] - afl_t_lamda[1])) 
[100] MAINPROCESS(6) if  ) 
[101] MAINPROCESS(6) subproc SUBPROCESS(1) 
[102] SUBPROCESS(1) equal s4_t_iRet (S4)2;
[103] MAINPROCESS(7) if  if ( 
[104] MAINPROCESS(7) if  (fl_abs(afl_t_lamda[0]) > fl_abs(afl_t_lamda[3]) 
[105] MAINPROCESS(7) if  ) 
[106] MAINPROCESS(7) if  &&  (fl_abs(afl_t_lamda[1]) > fl_abs(afl_t_lamda[3]) 
[107] MAINPROCESS(7) if  ) 
[108] MAINPROCESS(7) if  &&  (fl_abs(afl_t_lamda[2]) > fl_abs(afl_t_lamda[3]) 
[109] MAINPROCESS(7) if  ) 
[110] MAINPROCESS(7) if  &&  (fl_abs(afl_t_lamda[0] - afl_t_lamda[1]) < fl_abs(afl_t_lamda[1] - afl_t_lamda[3]) 
[111] MAINPROCESS(7) if  ) 
[112] MAINPROCESS(7) if  &&  (fl_abs(afl_t_lamda[1] - afl_t_lamda[2]) < fl_abs(afl_t_lamda[0] - afl_t_lamda[1])) 
[113] MAINPROCESS(7) if  ) 
[114] MAINPROCESS(7) subproc SUBPROCESS(1) 
[115] SUBPROCESS(1) equal s4_t_iRet (S4)3;
[116] MAINPROCESS(8) func<start> return ( 
[117] MAINPROCESS(8) func s4_t_iRet 
[118] MAINPROCESS(8) func<end> ); 
----------------- Total Codes : 118 lines
--------------------------
[Function Name] : fn_check_existing_peak_and_doa_info_fm 
-Return type : VD 
-Argument : 6 
     [0] : S4   s4_a_focus_bin 
     [1] : S4   *ps4_a_doa_num 
     [2] : S4   as4_t_selected_doa_bins[2] 
     [3] : FL   afl_t_selected_doa_powers[2] 
     [4] : const S4   as4_a_finished_doa_bin_fm[COMMON_PEAKBUFF_SIZE_FM][2] 
     [5] : const FL   afl_a_finished_doa_power_fm[COMMON_PEAKBUFF_SIZE_FM][2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) equal *ps4_a_doa_num 0;
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  (s4_a_focus_bin >= FREQ_BIN_LOWER_LIMIT) && (s4_a_focus_bin < (FREQ_BIN_UPPER_LIMIT + 1)) 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) for  for ( 
[8] SUBPROCESS(1) for  s4_t_lp_i = 0; 
[9] SUBPROCESS(1) for  s4_t_lp_i < 2; 
[10] SUBPROCESS(1) for  s4_t_lp_i++ 
[11] SUBPROCESS(1) for  ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) if  if ( 
[14] SUBSUBPROCESS(1) if  as4_a_finished_doa_bin_fm[s4_a_focus_bin - FREQ_BIN_LOWER_LIMIT][s4_t_lp_i] != -1.0F 
[15] SUBSUBPROCESS(1) if  ) 
[16] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[17] SUBSUBSUBPROCESS(1) equal as4_t_selected_doa_bins[s4_t_lp_i] as4_a_finished_doa_bin_fm[s4_a_focus_bin - FREQ_BIN_LOWER_LIMIT][s4_t_lp_i];
[18] SUBSUBSUBPROCESS(1) equal afl_t_selected_doa_powers[s4_t_lp_i] afl_a_finished_doa_power_fm[s4_a_focus_bin - FREQ_BIN_LOWER_LIMIT][s4_t_lp_i];
[19] SUBSUBSUBPROCESS(1) proc (*ps4_a_doa_num)++; 
[20] MAINPROCESS(2) return return; 
----------------- Total Codes : 20 lines
--------------------------
[Function Name] : s4_search_freq_peak 
-Return type : S4 
-Argument : 7 
     [0] : const FL   afl_a_power[NB_FFT_PT] 
     [1] : S4   as4_a_peak_bin[PEAK_BUFFSIZE] 
     [2] : FL   afl_a_peak_bin_intpl[PEAK_BUFFSIZE] 
     [3] : FL   afl_a_peak_power[PEAK_BUFFSIZE] 
     [4] : const FL   afl_a_thres[NB_FFT_PT] 
     [5] : S4   s4_a_start_bin 
     [6] : S4   s4_a_end_bin 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_i; 
[2] MAINPROCESS(1) equal S4 s4_t_peak_num 0;
[3] MAINPROCESS(1) func<start> s4_t_peak_num = s4_search_freq_peaks_within_freq_range( 
[4] MAINPROCESS(1) func (const FL *)afl_a_power, 
[5] MAINPROCESS(1) func as4_a_peak_bin, 
[6] MAINPROCESS(1) func afl_a_peak_power, 
[7] MAINPROCESS(1) func (const FL *)afl_a_thres, 
[8] MAINPROCESS(1) func 0, 
[9] MAINPROCESS(1) func s4_a_start_bin, 
[10] MAINPROCESS(1) func s4_a_end_bin 
[11] MAINPROCESS(1) func<end> ); 
[12] MAINPROCESS(1) for for( 
[13] MAINPROCESS(1) for s4_t_i=0; 
[14] MAINPROCESS(1) for s4_t_i<s4_t_peak_num; 
[15] MAINPROCESS(1) for s4_t_i++ 
[16] MAINPROCESS(1) for ) 
[17] MAINPROCESS(1) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) func<start> afl_a_peak_bin_intpl[s4_t_i] = fl_interpolate_freq_peak( 
[19] SUBPROCESS(1) func (const FL *)afl_a_power, 
[20] SUBPROCESS(1) func as4_a_peak_bin[s4_t_i] 
[21] SUBPROCESS(1) func<end> ); 
[22] MAINPROCESS(2) proc return s4_t_peak_num; 
----------------- Total Codes : 22 lines
--------------------------
[Function Name] : s4_search_freq_peaks_within_freq_range 
-Return type : S4 
-Argument : 7 
     [0] : const FL   afl_a_power[NB_FFT_PT] 
     [1] : S4   as4_a_peak_bin[PEAK_BUFFSIZE] 
     [2] : FL   afl_a_peak_power[PEAK_BUFFSIZE] 
     [3] : const FL   afl_a_thres[NB_FFT_PT] 
     [4] : S4   s4_a_index 
     [5] : S4   s4_a_start_bin 
     [6] : S4   s4_a_end_bin 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) equal S4 s4_t_peak_num 0;
[4] MAINPROCESS(1) equal S4 s4_t_start_bin 0;
[5] MAINPROCESS(1) equal S4 s4_t_end_bin 0;
[6] MAINPROCESS(1) equal S4 s4_t_pieak_num_max PEAK_BUFFSIZE;
[7] MAINPROCESS(1) equal S4 s4_t_buf_peak_num 0;
[8] MAINPROCESS(1) proc S4 as4_t_peak_bin[NB_FFT_PT]; 
[9] MAINPROCESS(1) proc FL afl_t_peak_power[NB_FFT_PT]; 
[10] MAINPROCESS(1) for  for ( 
[11] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[12] MAINPROCESS(1) for  s4_t_lp_i < NB_FFT_PT; 
[13] MAINPROCESS(1) for  s4_t_lp_i++ 
[14] MAINPROCESS(1) for  ) 
[15] MAINPROCESS(1) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) equal as4_t_peak_bin[s4_t_lp_i] 0;
[17] SUBPROCESS(1) equal afl_t_peak_power[s4_t_lp_i] 0.0F;
[18] MAINPROCESS(2) equal s4_t_start_bin s4_a_start_bin - (S4)1;
[19] MAINPROCESS(2) if  if ( 
[20] MAINPROCESS(2) if  s4_t_start_bin < 0 
[21] MAINPROCESS(2) if  ) 
[22] MAINPROCESS(2) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) equal s4_t_start_bin 0;
[24] MAINPROCESS(3) equal s4_t_end_bin s4_a_end_bin + (S4)1;
[25] MAINPROCESS(3) if  if ( 
[26] MAINPROCESS(3) if  s4_t_end_bin > (S4)(NB_FFT_PT - 2) 
[27] MAINPROCESS(3) if  ) 
[28] MAINPROCESS(3) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) equal s4_t_end_bin NB_FFT_PT - (S4)2;
[30] MAINPROCESS(4) for  for ( 
[31] MAINPROCESS(4) for  s4_t_lp_i = s4_t_start_bin; 
[32] MAINPROCESS(4) for  s4_t_lp_i < s4_t_end_bin; 
[33] MAINPROCESS(4) for  s4_t_lp_i++ 
[34] MAINPROCESS(4) for  ) 
[35] MAINPROCESS(4) subproc SUBPROCESS(1) 
[36] SUBPROCESS(1) if  if ( 
[37] SUBPROCESS(1) if  (afl_a_power[s4_t_lp_i] < afl_a_power[s4_t_lp_i + 1] 
[38] SUBPROCESS(1) if  ) 
[39] SUBPROCESS(1) if  && (afl_a_power[s4_t_lp_i + 1] > afl_a_power[s4_t_lp_i + 2] 
[40] SUBPROCESS(1) if  ) 
[41] SUBPROCESS(1) if  && (afl_a_power[s4_t_lp_i + 1] > afl_a_thres[s4_t_lp_i + 1] 
[42] SUBPROCESS(1) if  ) 
[43] SUBPROCESS(1) if  && (s4_t_buf_peak_num < s4_t_pieak_num_max 
[44] SUBPROCESS(1) if  ) 
[45] SUBPROCESS(1) if  ) 
[46] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[47] SUBSUBPROCESS(1) equal as4_t_peak_bin[s4_t_buf_peak_num] s4_t_lp_i + (S4)1;
[48] SUBSUBPROCESS(1) equal afl_t_peak_power[s4_t_buf_peak_num] afl_a_power[s4_t_lp_i + 1];
[49] SUBSUBPROCESS(1) proc s4_t_buf_peak_num++; 
[50] MAINPROCESS(5) for  for ( 
[51] MAINPROCESS(5) for  s4_t_lp_i = 0; 
[52] MAINPROCESS(5) for  s4_t_lp_i < s4_t_buf_peak_num; 
[53] MAINPROCESS(5) for  s4_t_lp_i++ 
[54] MAINPROCESS(5) for  ) 
[55] MAINPROCESS(5) subproc SUBPROCESS(1) 
[56] SUBPROCESS(1) equal as4_a_peak_bin[s4_t_peak_num] as4_t_peak_bin[s4_t_lp_i];
[57] SUBPROCESS(1) equal afl_a_peak_power[s4_t_peak_num] afl_t_peak_power[s4_t_lp_i];
[58] SUBPROCESS(1) proc s4_t_peak_num++; 
[59] MAINPROCESS(6) func<start> return ( 
[60] MAINPROCESS(6) func s4_t_peak_num 
[61] MAINPROCESS(6) func<end> ); 
----------------- Total Codes : 61 lines
--------------------------
[Function Name] : fl_interpolate_freq_peak 
-Return type : FL 
-Argument : 2 
     [0] : const FL   power[NB_FFT_PT] 
     [1] : S4   peak_bin 
----- Codes -----
[1] MAINPROCESS(1) equal FL bin_intpl 0.0F;
[2] MAINPROCESS(1) proc FL bin[3]; 
[3] MAINPROCESS(1) proc FL pow[3]; 
[4] MAINPROCESS(1) proc FL pow_diff[2]; 
[5] MAINPROCESS(1) equal bin[0] (FL)0.0F;
[6] MAINPROCESS(1) equal bin[1] (FL)0.0F;
[7] MAINPROCESS(1) equal bin[2] (FL)0.0F;
[8] MAINPROCESS(1) equal pow[0] (FL)0.0F;
[9] MAINPROCESS(1) equal pow[1] (FL)0.0F;
[10] MAINPROCESS(1) equal pow[2] (FL)0.0F;
[11] MAINPROCESS(1) equal pow_diff[0] (FL)0.0F;
[12] MAINPROCESS(1) equal pow_diff[1] (FL)0.0F;
[13] MAINPROCESS(1) if  if ( 
[14] MAINPROCESS(1) if  (peak_bin < (S4)1 
[15] MAINPROCESS(1) if  ) 
[16] MAINPROCESS(1) if  ||  (peak_bin > (NB_FFT_PT - (S4)2)) 
[17] MAINPROCESS(1) if  ) 
[18] MAINPROCESS(1) subproc SUBPROCESS(1) 
[19] SUBPROCESS(1) equal bin_intpl (FL)peak_bin;
[20] MAINPROCESS(2) else else 
[21] MAINPROCESS(2) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal bin[0] (FL)(peak_bin-1)*1.0F;
[23] SUBPROCESS(1) equal bin[1] (FL)(peak_bin)*1.0F;
[24] SUBPROCESS(1) equal bin[2] (FL)(peak_bin+1)*1.0F;
[25] SUBPROCESS(1) equal pow[0] power[peak_bin-1];
[26] SUBPROCESS(1) equal pow[1] power[peak_bin];
[27] SUBPROCESS(1) equal pow[2] power[peak_bin+1];
[28] SUBPROCESS(1) equal pow_diff[0] pow[0]-pow[1];
[29] SUBPROCESS(1) equal pow_diff[1] pow[1]-pow[2];
[30] SUBPROCESS(1) if  if ( 
[31] SUBPROCESS(1) if  (pow_diff[0] + pow_diff[1]) == 0 
[32] SUBPROCESS(1) if  ) 
[33] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) equal bin_intpl bin[1];
[35] SUBPROCESS(2) else if  else if ( 
[36] SUBPROCESS(2) else if  (pow[0] > pow[1] 
[37] SUBPROCESS(2) else if  ) 
[38] SUBPROCESS(2) else if  &&  (pow[1] > pow[2]) 
[39] SUBPROCESS(2) else if  ) 
[40] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[41] SUBSUBPROCESS(1) equal bin_intpl bin[0];
[42] SUBPROCESS(3) else if  else if ( 
[43] SUBPROCESS(3) else if  (pow[2] > pow[1] 
[44] SUBPROCESS(3) else if  ) 
[45] SUBPROCESS(3) else if  &&  (pow[1] > pow[0]) 
[46] SUBPROCESS(3) else if  ) 
[47] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[48] SUBSUBPROCESS(1) equal bin_intpl bin[2];
[49] SUBPROCESS(4) else else 
[50] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[51] SUBSUBPROCESS(1) equal<start> bin_intpl = ( 
[52] SUBSUBPROCESS(1) equal  pow_diff[1]*(bin[0]*bin[0] - bin[1]*bin[1]) -  pow_diff[0]*(bin[1]*bin[1] - bin[2]*bin[2]) ) / (2.0F*(pow_diff[0] - pow_diff[1]) 
[53] SUBSUBPROCESS(1) equal<end> ); 
[54] SUBPROCESS(5) if  if ( 
[55] SUBPROCESS(5) if  (bin_intpl > (FL)(NB_FFT_PT-1) 
[56] SUBPROCESS(5) if  ) 
[57] SUBPROCESS(5) if  ||  (bin_intpl < (FL)0.0F) 
[58] SUBPROCESS(5) if  ) 
[59] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[60] SUBSUBPROCESS(1) equal bin_intpl (FL)peak_bin;
[61] MAINPROCESS(3) proc return bin_intpl; 
----------------- Total Codes : 61 lines
--------------------------
[Function Name] : fn_set_freq_threshold 
-Return type : VD 
-Argument : 2 
     [0] : const FL   afl_a_power[NB_FFT_PT] 
     [1] : FL   afl_a_thres[NB_FFT_PT] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) equal S4 s4_t_index_near_center -1;
[4] MAINPROCESS(1) equal S4 s4_t_ave_range AVE_BIN_WIDTH;
[5] MAINPROCESS(1) proc FL afl_t_ave_power[NB_FFT_PT / AVE_BIN_WIDTH]; 
[6] MAINPROCESS(1) equal FL fl_t_clearance AVE_POW_CLEARANCE;
[7] MAINPROCESS(1) equal FL fl_t_max_power_th PEAK_POW_TH_MAX;
[8] MAINPROCESS(1) equal<start> S4 s4_t_center_bin = ( 
[9] MAINPROCESS(1) equal S4)(NB_FFT_PT / 2 
[10] MAINPROCESS(1) equal<end> ); 
[11] MAINPROCESS(1) equal S4 s4_t_center_range CENTER_FREQ_RANGE;
[12] MAINPROCESS(1) proc FL fl_t_peak_pow_th_min; 
[13] MAINPROCESS(1) proc S4 s4_t_loop_max; 
[14] MAINPROCESS(1) equal s4_t_loop_max NB_FFT_PT / s4_t_ave_range;
[15] MAINPROCESS(1) for  for ( 
[16] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[17] MAINPROCESS(1) for  s4_t_lp_i < s4_t_loop_max; 
[18] MAINPROCESS(1) for  s4_t_lp_i++ 
[19] MAINPROCESS(1) for  ) 
[20] MAINPROCESS(1) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal afl_t_ave_power[s4_t_lp_i] 0.0;
[22] SUBPROCESS(1) for  for ( 
[23] SUBPROCESS(1) for  s4_t_lp_j = 0; 
[24] SUBPROCESS(1) for  s4_t_lp_j < s4_t_ave_range; 
[25] SUBPROCESS(1) for  s4_t_lp_j++ 
[26] SUBPROCESS(1) for  ) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) equal afl_t_ave_power[s4_t_lp_i] afl_t_ave_power[s4_t_lp_i] + afl_a_power[(s4_t_lp_i * s4_t_ave_range) + s4_t_lp_j];
[29] SUBPROCESS(2) equal afl_t_ave_power[s4_t_lp_i] afl_t_ave_power[s4_t_lp_i] / (FL)s4_t_ave_range;
[30] SUBPROCESS(2) if  if ( 
[31] SUBPROCESS(2) if  (s4_t_lp_i * s4_t_ave_range) > FREQ_BIN_LOWER_LIMIT 
[32] SUBPROCESS(2) if  ) 
[33] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) equal fl_t_peak_pow_th_min (PEAK_POW_TH_MIN_SLOPE * (FL)((s4_t_lp_i * s4_t_ave_range) - FREQ_BIN_LOWER_LIMIT)) + PEAK_POW_TH_MIN_NEAR;
[35] SUBSUBPROCESS(1) if if( 
[36] SUBSUBPROCESS(1) if s4_t_index_near_center == -1 
[37] SUBSUBPROCESS(1) if ) 
[38] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[39] SUBSUBSUBPROCESS(1) equal s4_t_index_near_center s4_t_lp_i*s4_t_ave_range;
[40] SUBPROCESS(3) else else 
[41] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[42] SUBSUBPROCESS(1) equal fl_t_peak_pow_th_min PEAK_POW_TH_MAX;
[43] SUBPROCESS(4) if  if ( 
[44] SUBPROCESS(4) if  u1_ecu_chk_exe_stt() == CU1_CHK_EXE 
[45] SUBPROCESS(4) if  ) 
[46] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[47] SUBSUBPROCESS(1) equal fl_t_peak_pow_th_min (FL)-1000.0F;
[48] SUBPROCESS(5) if  if ( 
[49] SUBPROCESS(5) if  afl_t_ave_power[s4_t_lp_i] < fl_t_peak_pow_th_min 
[50] SUBPROCESS(5) if  ) 
[51] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[52] SUBSUBPROCESS(1) equal afl_t_ave_power[s4_t_lp_i] fl_t_peak_pow_th_min;
[53] SUBPROCESS(6) for  for ( 
[54] SUBPROCESS(6) for  s4_t_lp_j = 0; 
[55] SUBPROCESS(6) for  s4_t_lp_j < s4_t_ave_range; 
[56] SUBPROCESS(6) for  s4_t_lp_j++ 
[57] SUBPROCESS(6) for  ) 
[58] SUBPROCESS(6) subproc SUBSUBPROCESS(1) 
[59] SUBSUBPROCESS(1) equal afl_a_thres[(s4_t_lp_i * s4_t_ave_range) + s4_t_lp_j] afl_t_ave_power[s4_t_lp_i] + fl_t_clearance;
[60] MAINPROCESS(2) for  for ( 
[61] MAINPROCESS(2) for  s4_t_lp_i = (s4_t_center_bin - s4_t_center_range 
[62] MAINPROCESS(2) for  ); 
[63] MAINPROCESS(2) for  s4_t_lp_i < ( 
[64] MAINPROCESS(2) for  s4_t_center_bin + s4_t_center_range + 1 
[65] MAINPROCESS(2) for  ); 
[66] MAINPROCESS(2) for  s4_t_lp_i++ 
[67] MAINPROCESS(2) for  ) 
[68] MAINPROCESS(2) subproc SUBPROCESS(1) 
[69] SUBPROCESS(1) equal afl_a_thres[s4_t_lp_i] fl_t_max_power_th;
[70] MAINPROCESS(3) for for( 
[71] MAINPROCESS(3) for s4_t_lp_i = FREQ_BIN_LOWER_LIMIT-1; 
[72] MAINPROCESS(3) for s4_t_lp_i < s4_t_index_near_center; 
[73] MAINPROCESS(3) for s4_t_lp_i++ 
[74] MAINPROCESS(3) for ) 
[75] MAINPROCESS(3) subproc SUBPROCESS(1) 
[76] SUBPROCESS(1) if if( 
[77] SUBPROCESS(1) if st_g_bsm_loop_data.as4_slow_sot_find[0]==0 
[78] SUBPROCESS(1) if ) 
[79] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[80] SUBSUBPROCESS(1) equal afl_a_thres[s4_t_lp_i] PEAK_POW_TH_AROUND_CENTER;
[81] SUBPROCESS(2) else else 
[82] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[83] SUBSUBPROCESS(1) equal afl_a_thres[s4_t_lp_i] PEAK_POW_TH_AROUND_CENTER-1.0F;
[84] MAINPROCESS(4) return return; 
----------------- Total Codes : 84 lines
--------------------------
[Function Name] : fn_matrix_spec_4ch 
-Return type : VD 
-Argument : 6 
     [0] : FL   afl_a_E[4][4] 
     [1] : FL   afl_a_spec[N_DOA] 
     [2] : S4   s4_a_wave_num 
     [3] : S4   s4_a_updn_flg 
     [4] : S4   s4_a_start_bin 
     [5] : S4   s4_a_end_bin 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[4] MAINPROCESS(1) proc FL afl_t_modeEN[4]; 
[5] MAINPROCESS(1) proc FL afl_t_mode_vec[4]; 
[6] MAINPROCESS(1) proc FL fl_t_spec_max; 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < N_DOA; 
[10] MAINPROCESS(1) for  s4_t_lp_i++  
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal afl_a_spec[s4_t_lp_i] 0.0F;
[14] MAINPROCESS(2) for  for ( 
[15] MAINPROCESS(2) for  s4_t_lp_i = s4_a_start_bin; 
[16] MAINPROCESS(2) for  s4_t_lp_i < s4_a_end_bin; 
[17] MAINPROCESS(2) for  s4_t_lp_i++  
[18] MAINPROCESS(2) for  ) 
[19] MAINPROCESS(2) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) if  if ( 
[21] SUBPROCESS(1) if  s4_a_updn_flg == 1 
[22] SUBPROCESS(1) if  ) 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) equal afl_t_mode_vec[0] CAFL_D_MODE_VECTOR_0[s4_t_lp_i];
[25] SUBSUBPROCESS(1) equal afl_t_mode_vec[1] CAFL_D_MODE_VECTOR_1[s4_t_lp_i];
[26] SUBSUBPROCESS(1) equal afl_t_mode_vec[2] -CAFL_D_MODE_VECTOR_2[s4_t_lp_i];
[27] SUBSUBPROCESS(1) equal afl_t_mode_vec[3] -CAFL_D_MODE_VECTOR_3[s4_t_lp_i];
[28] SUBPROCESS(2) else else 
[29] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[30] SUBSUBPROCESS(1) equal afl_t_mode_vec[0] CAFL_D_MODE_VECTOR_0[s4_t_lp_i];
[31] SUBSUBPROCESS(1) equal afl_t_mode_vec[1] CAFL_D_MODE_VECTOR_1[s4_t_lp_i];
[32] SUBSUBPROCESS(1) equal afl_t_mode_vec[2] CAFL_D_MODE_VECTOR_2[s4_t_lp_i];
[33] SUBSUBPROCESS(1) equal afl_t_mode_vec[3] CAFL_D_MODE_VECTOR_3[s4_t_lp_i];
[34] SUBPROCESS(3) for  for ( 
[35] SUBPROCESS(3) for  s4_t_lp_k = s4_a_wave_num; 
[36] SUBPROCESS(3) for  s4_t_lp_k < 4; 
[37] SUBPROCESS(3) for  s4_t_lp_k++  
[38] SUBPROCESS(3) for  ) 
[39] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[40] SUBSUBPROCESS(1) equal afl_t_modeEN[s4_t_lp_k - s4_a_wave_num] 0;
[41] SUBSUBPROCESS(1) for  for ( 
[42] SUBSUBPROCESS(1) for  s4_t_lp_j = 0; 
[43] SUBSUBPROCESS(1) for  s4_t_lp_j < 4; 
[44] SUBSUBPROCESS(1) for  s4_t_lp_j++ 
[45] SUBSUBPROCESS(1) for  ) 
[46] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[47] SUBSUBSUBPROCESS(1) equal afl_t_modeEN[s4_t_lp_k - s4_a_wave_num] + afl_t_mode_vec[s4_t_lp_j] * afl_a_E[s4_t_lp_j][s4_t_lp_k];
[48] SUBPROCESS(4) equal afl_a_spec[s4_t_lp_i] 0.0;
[49] SUBPROCESS(4) for  for ( 
[50] SUBPROCESS(4) for  s4_t_lp_k = 0; 
[51] SUBPROCESS(4) for  s4_t_lp_k < ( 
[52] SUBPROCESS(4) for  4 - s4_a_wave_num 
[53] SUBPROCESS(4) for  ); 
[54] SUBPROCESS(4) for  s4_t_lp_k++  
[55] SUBPROCESS(4) for  ) 
[56] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[57] SUBSUBPROCESS(1) func<start> afl_a_spec[s4_t_lp_i] = afl_a_spec[s4_t_lp_i] + ( 
[58] SUBSUBPROCESS(1) func afl_t_modeEN[s4_t_lp_k] * afl_t_modeEN[s4_t_lp_k] 
[59] SUBSUBPROCESS(1) func<end> ); 
[60] MAINPROCESS(3) equal fl_t_spec_max 0.0F;
[61] MAINPROCESS(3) for  for ( 
[62] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[63] MAINPROCESS(3) for  s4_t_lp_i < N_DOA; 
[64] MAINPROCESS(3) for  s4_t_lp_i++ 
[65] MAINPROCESS(3) for  ) 
[66] MAINPROCESS(3) subproc SUBPROCESS(1) 
[67] SUBPROCESS(1) if  if ( 
[68] SUBPROCESS(1) if  fl_t_spec_max < fl_abs(afl_a_spec[s4_t_lp_i]) 
[69] SUBPROCESS(1) if  ) 
[70] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[71] SUBSUBPROCESS(1) func<start> fl_t_spec_max = fl_abs( 
[72] SUBSUBPROCESS(1) func afl_a_spec[s4_t_lp_i] 
[73] SUBSUBPROCESS(1) func<end> ); 
[74] MAINPROCESS(4) for  for ( 
[75] MAINPROCESS(4) for  s4_t_lp_i = 0; 
[76] MAINPROCESS(4) for  s4_t_lp_i < N_DOA; 
[77] MAINPROCESS(4) for  s4_t_lp_i++ 
[78] MAINPROCESS(4) for  ) 
[79] MAINPROCESS(4) subproc SUBPROCESS(1) 
[80] SUBPROCESS(1) func<start> afl_a_spec[s4_t_lp_i] = 10 * ( 
[81] SUBPROCESS(1) func FL)fl_log10( 4.0F / afl_a_spec[s4_t_lp_i] 
[82] SUBPROCESS(1) func<end> ); 
----------------- Total Codes : 82 lines
--------------------------
[Function Name] : fn_matrix_spec_4ch_all 
-Return type : VD 
-Argument : 4 
     [0] : FL   afl_a_E[4][4] 
     [1] : FL   afl_a_spec[N_DOA] 
     [2] : S4   s4_a_wave_num 
     [3] : S4   s4_a_updn_flg 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[4] MAINPROCESS(1) proc FL afl_t_modeEN[4]; 
[5] MAINPROCESS(1) proc FL afl_t_mode_vec[4]; 
[6] MAINPROCESS(1) proc FL fl_t_spec_max; 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < N_DOA; 
[10] MAINPROCESS(1) for  s4_t_lp_i++  
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) equal afl_a_spec[s4_t_lp_i] 0.0F;
[14] MAINPROCESS(2) for  for ( 
[15] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[16] MAINPROCESS(2) for  s4_t_lp_i < N_DOA; 
[17] MAINPROCESS(2) for  s4_t_lp_i++  
[18] MAINPROCESS(2) for  ) 
[19] MAINPROCESS(2) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) if  if ( 
[21] SUBPROCESS(1) if  s4_a_updn_flg == 1 
[22] SUBPROCESS(1) if  ) 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) equal afl_t_mode_vec[0] CAFL_D_MODE_VECTOR_0[s4_t_lp_i];
[25] SUBSUBPROCESS(1) equal afl_t_mode_vec[1] CAFL_D_MODE_VECTOR_1[s4_t_lp_i];
[26] SUBSUBPROCESS(1) equal afl_t_mode_vec[2] -CAFL_D_MODE_VECTOR_2[s4_t_lp_i];
[27] SUBSUBPROCESS(1) equal afl_t_mode_vec[3] -CAFL_D_MODE_VECTOR_3[s4_t_lp_i];
[28] SUBPROCESS(2) else else 
[29] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[30] SUBSUBPROCESS(1) equal afl_t_mode_vec[0] CAFL_D_MODE_VECTOR_0[s4_t_lp_i];
[31] SUBSUBPROCESS(1) equal afl_t_mode_vec[1] CAFL_D_MODE_VECTOR_1[s4_t_lp_i];
[32] SUBSUBPROCESS(1) equal afl_t_mode_vec[2] CAFL_D_MODE_VECTOR_2[s4_t_lp_i];
[33] SUBSUBPROCESS(1) equal afl_t_mode_vec[3] CAFL_D_MODE_VECTOR_3[s4_t_lp_i];
[34] SUBPROCESS(3) for  for ( 
[35] SUBPROCESS(3) for  s4_t_lp_k = s4_a_wave_num; 
[36] SUBPROCESS(3) for  s4_t_lp_k < 4; 
[37] SUBPROCESS(3) for  s4_t_lp_k++  
[38] SUBPROCESS(3) for  ) 
[39] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[40] SUBSUBPROCESS(1) equal afl_t_modeEN[s4_t_lp_k - s4_a_wave_num] 0;
[41] SUBSUBPROCESS(1) for  for ( 
[42] SUBSUBPROCESS(1) for  s4_t_lp_j = 0; 
[43] SUBSUBPROCESS(1) for  s4_t_lp_j < 4; 
[44] SUBSUBPROCESS(1) for  s4_t_lp_j++ 
[45] SUBSUBPROCESS(1) for  ) 
[46] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[47] SUBSUBSUBPROCESS(1) equal afl_t_modeEN[s4_t_lp_k - s4_a_wave_num] + afl_t_mode_vec[s4_t_lp_j] * afl_a_E[s4_t_lp_j][s4_t_lp_k];
[48] SUBPROCESS(4) equal afl_a_spec[s4_t_lp_i] 0.0;
[49] SUBPROCESS(4) for  for ( 
[50] SUBPROCESS(4) for  s4_t_lp_k = 0; 
[51] SUBPROCESS(4) for  s4_t_lp_k < ( 
[52] SUBPROCESS(4) for  4 - s4_a_wave_num 
[53] SUBPROCESS(4) for  ); 
[54] SUBPROCESS(4) for  s4_t_lp_k++  
[55] SUBPROCESS(4) for  ) 
[56] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[57] SUBSUBPROCESS(1) func<start> afl_a_spec[s4_t_lp_i] = afl_a_spec[s4_t_lp_i] + ( 
[58] SUBSUBPROCESS(1) func afl_t_modeEN[s4_t_lp_k] * afl_t_modeEN[s4_t_lp_k] 
[59] SUBSUBPROCESS(1) func<end> ); 
[60] MAINPROCESS(3) equal fl_t_spec_max 0.0F;
[61] MAINPROCESS(3) for  for ( 
[62] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[63] MAINPROCESS(3) for  s4_t_lp_i < N_DOA; 
[64] MAINPROCESS(3) for  s4_t_lp_i++ 
[65] MAINPROCESS(3) for  ) 
[66] MAINPROCESS(3) subproc SUBPROCESS(1) 
[67] SUBPROCESS(1) if  if ( 
[68] SUBPROCESS(1) if  fl_t_spec_max < fl_abs(afl_a_spec[s4_t_lp_i]) 
[69] SUBPROCESS(1) if  ) 
[70] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[71] SUBSUBPROCESS(1) func<start> fl_t_spec_max = fl_abs( 
[72] SUBSUBPROCESS(1) func afl_a_spec[s4_t_lp_i] 
[73] SUBSUBPROCESS(1) func<end> ); 
[74] MAINPROCESS(4) for  for ( 
[75] MAINPROCESS(4) for  s4_t_lp_i = 0; 
[76] MAINPROCESS(4) for  s4_t_lp_i < N_DOA; 
[77] MAINPROCESS(4) for  s4_t_lp_i++ 
[78] MAINPROCESS(4) for  ) 
[79] MAINPROCESS(4) subproc SUBPROCESS(1) 
[80] SUBPROCESS(1) func<start> afl_a_spec[s4_t_lp_i] = 10 * ( 
[81] SUBPROCESS(1) func FL)fl_log10( 4.0F / afl_a_spec[s4_t_lp_i] 
[82] SUBPROCESS(1) func<end> ); 
----------------- Total Codes : 82 lines
--------------------------
[Function Name] : fn_qr_cal_pivot 
-Return type : VD 
-Argument : 3 
     [0] : FL   afl_a_R_0[4][4] 
     [1] : FL   afl_a_Lam[4] 
     [2] : FL   afl_a_B[4][4] 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_Q[16]; 
[2] MAINPROCESS(1) proc FL fl_t_R[16]; 
[3] MAINPROCESS(1) proc FL fl_t_E[4]; 
[4] MAINPROCESS(1) proc FL fl_t_Qraux[4]; 
[5] MAINPROCESS(1) proc FL fl_t_Work[4]; 
[6] MAINPROCESS(1) proc FL fl_t_S[16]; 
[7] MAINPROCESS(1) proc FL fl_t_Ryy[4][4]; 
[8] MAINPROCESS(1) proc FL fl_t_R_rat_2dimension4x4[4][4]; 
[9] MAINPROCESS(1) proc FL fl_t_Q_first[4][4]; 
[10] MAINPROCESS(1) proc FL fl_t_Q_second[4][4]; 
[11] MAINPROCESS(1) proc FL fl_t_R_rat_1dimension16[16]; 
[12] MAINPROCESS(1) proc S4 fl_t_Jpvt[4]; 
[13] MAINPROCESS(1) proc U1 u1_t_lp_jpvt; 
[14] MAINPROCESS(1) proc U1 u1_t_lp_ryy_dime1; 
[15] MAINPROCESS(1) proc U1 u1_t_lp_ryy_dime2; 
[16] MAINPROCESS(1) proc U1 u1_t_lp_R_data; 
[17] MAINPROCESS(1) proc U1 u1_t_lp_E_data; 
[18] MAINPROCESS(1) proc U1 u1_t_lp_Q_data_dime1; 
[19] MAINPROCESS(1) proc U1 u1_t_lp_Q_data_dime2; 
[20] MAINPROCESS(1) for  for ( 
[21] MAINPROCESS(1) for  u1_t_lp_jpvt = (U1)0; 
[22] MAINPROCESS(1) for  u1_t_lp_jpvt < (U1)4 ; 
[23] MAINPROCESS(1) for  u1_t_lp_jpvt++ 
[24] MAINPROCESS(1) for  ) 
[25] MAINPROCESS(1) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal fl_t_Jpvt[u1_t_lp_jpvt] (FL)0.0F;
[27] MAINPROCESS(2) for  for ( 
[28] MAINPROCESS(2) for  u1_t_lp_ryy_dime2 = (U1)0; 
[29] MAINPROCESS(2) for  u1_t_lp_ryy_dime2 < (U1)4; 
[30] MAINPROCESS(2) for  u1_t_lp_ryy_dime2++ 
[31] MAINPROCESS(2) for  ) 
[32] MAINPROCESS(2) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) for  for ( 
[34] SUBPROCESS(1) for  u1_t_lp_ryy_dime1 = (U1)0 ; 
[35] SUBPROCESS(1) for  u1_t_lp_ryy_dime1 < (U1)4 ; 
[36] SUBPROCESS(1) for  u1_t_lp_ryy_dime1++  
[37] SUBPROCESS(1) for  ) 
[38] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[39] SUBSUBPROCESS(1) equal fl_t_R[u1_t_lp_ryy_dime1 + (4 * u1_t_lp_ryy_dime2)] afl_a_R_0[u1_t_lp_ryy_dime1][u1_t_lp_ryy_dime2];
[40] MAINPROCESS(3) func<start> MWDSP_QRE_R( 
[41] MAINPROCESS(3) func 4, 
[42] MAINPROCESS(3) func 4, 
[43] MAINPROCESS(3) func (FL*)fl_t_Q, 
[44] MAINPROCESS(3) func (FL*)fl_t_R, 
[45] MAINPROCESS(3) func (FL*)fl_t_E, 
[46] MAINPROCESS(3) func (FL*)fl_t_Qraux, 
[47] MAINPROCESS(3) func (FL*)fl_t_Work, 
[48] MAINPROCESS(3) func (S4*)fl_t_Jpvt, 
[49] MAINPROCESS(3) func (FL*)fl_t_S 
[50] MAINPROCESS(3) func<end> ); 
[51] MAINPROCESS(3) for  for ( 
[52] MAINPROCESS(3) for  u1_t_lp_R_data= (U1)0; 
[53] MAINPROCESS(3) for  u1_t_lp_R_data < (U1)16; 
[54] MAINPROCESS(3) for  u1_t_lp_R_data++ 
[55] MAINPROCESS(3) for  ) 
[56] MAINPROCESS(3) subproc SUBPROCESS(1) 
[57] SUBPROCESS(1) equal fl_t_R_rat_1dimension16[u1_t_lp_R_data] fl_t_R[u1_t_lp_R_data];
[58] MAINPROCESS(4) for  for ( 
[59] MAINPROCESS(4) for  u1_t_lp_E_data = (U1)0; 
[60] MAINPROCESS(4) for  u1_t_lp_E_data < (U1)4; 
[61] MAINPROCESS(4) for  u1_t_lp_E_data++ 
[62] MAINPROCESS(4) for  ) 
[63] MAINPROCESS(4) subproc SUBPROCESS(1) 
[64] SUBPROCESS(1) for  for ( 
[65] SUBPROCESS(1) for  u1_t_lp_R_data = (U1)0; 
[66] SUBPROCESS(1) for  u1_t_lp_R_data < (U1)4; 
[67] SUBPROCESS(1) for  u1_t_lp_R_data++ 
[68] SUBPROCESS(1) for  ) 
[69] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[70] SUBSUBPROCESS(1) equal fl_t_R[(((S4)fl_t_E[u1_t_lp_E_data] - 1) * 4) + u1_t_lp_R_data] fl_t_R_rat_1dimension16[(u1_t_lp_E_data * 4) + u1_t_lp_R_data];
[71] MAINPROCESS(5) for  for ( 
[72] MAINPROCESS(5) for  u1_t_lp_Q_data_dime2 = (U1)0; 
[73] MAINPROCESS(5) for  u1_t_lp_Q_data_dime2 < (U1)4; 
[74] MAINPROCESS(5) for  u1_t_lp_Q_data_dime2++ 
[75] MAINPROCESS(5) for  ) 
[76] MAINPROCESS(5) subproc SUBPROCESS(1) 
[77] SUBPROCESS(1) for  for ( 
[78] SUBPROCESS(1) for  u1_t_lp_Q_data_dime1 = (U1)0 ; 
[79] SUBPROCESS(1) for  u1_t_lp_Q_data_dime1 < (U1)4; 
[80] SUBPROCESS(1) for  u1_t_lp_Q_data_dime1++ 
[81] SUBPROCESS(1) for  ) 
[82] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[83] SUBSUBPROCESS(1) equal fl_t_R_rat_2dimension4x4[u1_t_lp_Q_data_dime1][u1_t_lp_Q_data_dime2] fl_t_R[u1_t_lp_Q_data_dime1 + 4 * u1_t_lp_Q_data_dime2];
[84] SUBSUBPROCESS(1) equal fl_t_Q_first[u1_t_lp_Q_data_dime1][u1_t_lp_Q_data_dime2] fl_t_Q[u1_t_lp_Q_data_dime1 + (4 * u1_t_lp_Q_data_dime2)];
[85] MAINPROCESS(6) func<start> fn_matmul_4x4( 
[86] MAINPROCESS(6) func  fl_t_R_rat_2dimension4x4, fl_t_Q_first, fl_t_Ryy 
[87] MAINPROCESS(6) func<end> ); 
[88] MAINPROCESS(6) for  for ( 
[89] MAINPROCESS(6) for  u1_t_lp_ryy_dime2 = (U1)0; 
[90] MAINPROCESS(6) for  u1_t_lp_ryy_dime2 < (U1)4; 
[91] MAINPROCESS(6) for  u1_t_lp_ryy_dime2++ 
[92] MAINPROCESS(6) for  ) 
[93] MAINPROCESS(6) subproc SUBPROCESS(1) 
[94] SUBPROCESS(1) for  for ( 
[95] SUBPROCESS(1) for  u1_t_lp_ryy_dime1 = (U1)0 ; 
[96] SUBPROCESS(1) for  u1_t_lp_ryy_dime1 < (U1)4; 
[97] SUBPROCESS(1) for  u1_t_lp_ryy_dime1++ 
[98] SUBPROCESS(1) for  ) 
[99] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[100] SUBSUBPROCESS(1) equal fl_t_R[u1_t_lp_ryy_dime1 + (4 * u1_t_lp_ryy_dime2)] fl_t_Ryy[u1_t_lp_ryy_dime1][u1_t_lp_ryy_dime2];
[101] MAINPROCESS(7) for  for ( 
[102] MAINPROCESS(7) for  u1_t_lp_jpvt = (U1)0; 
[103] MAINPROCESS(7) for  u1_t_lp_jpvt < (U1)4; 
[104] MAINPROCESS(7) for  u1_t_lp_jpvt++ 
[105] MAINPROCESS(7) for  ) 
[106] MAINPROCESS(7) subproc SUBPROCESS(1) 
[107] SUBPROCESS(1) equal fl_t_Jpvt[u1_t_lp_jpvt] (FL)0.0F;
[108] MAINPROCESS(8) func<start> MWDSP_QRE_R( 
[109] MAINPROCESS(8) func 4, 
[110] MAINPROCESS(8) func 4, 
[111] MAINPROCESS(8) func (FL*)fl_t_Q, 
[112] MAINPROCESS(8) func (FL*)fl_t_R, 
[113] MAINPROCESS(8) func (FL*)fl_t_E, 
[114] MAINPROCESS(8) func (FL*)fl_t_Qraux, 
[115] MAINPROCESS(8) func (FL*)fl_t_Work, 
[116] MAINPROCESS(8) func (S4*)fl_t_Jpvt, 
[117] MAINPROCESS(8) func (FL*)fl_t_S 
[118] MAINPROCESS(8) func<end> ); 
[119] MAINPROCESS(8) for  for ( 
[120] MAINPROCESS(8) for  u1_t_lp_R_data = (U1)0; 
[121] MAINPROCESS(8) for  u1_t_lp_R_data < (U1)16; 
[122] MAINPROCESS(8) for  u1_t_lp_R_data++ 
[123] MAINPROCESS(8) for  ) 
[124] MAINPROCESS(8) subproc SUBPROCESS(1) 
[125] SUBPROCESS(1) equal fl_t_R_rat_1dimension16[u1_t_lp_R_data] fl_t_R[u1_t_lp_R_data];
[126] MAINPROCESS(9) for  for ( 
[127] MAINPROCESS(9) for  u1_t_lp_E_data = (U1)0; 
[128] MAINPROCESS(9) for  u1_t_lp_E_data < (U1)4; 
[129] MAINPROCESS(9) for  u1_t_lp_E_data++ 
[130] MAINPROCESS(9) for  ) 
[131] MAINPROCESS(9) subproc SUBPROCESS(1) 
[132] SUBPROCESS(1) for  for ( 
[133] SUBPROCESS(1) for  u1_t_lp_R_data = (U1)0; 
[134] SUBPROCESS(1) for  u1_t_lp_R_data < (U1)4; 
[135] SUBPROCESS(1) for  u1_t_lp_R_data++ 
[136] SUBPROCESS(1) for  ) 
[137] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[138] SUBSUBPROCESS(1) equal fl_t_R[(((S4)fl_t_E[u1_t_lp_E_data] - 1) * 4) + u1_t_lp_R_data] fl_t_R_rat_1dimension16[(u1_t_lp_E_data * 4) + u1_t_lp_R_data];
[139] MAINPROCESS(10) for  for ( 
[140] MAINPROCESS(10) for  u1_t_lp_Q_data_dime2 = (U1)0; 
[141] MAINPROCESS(10) for  u1_t_lp_Q_data_dime2 < (U1)4; 
[142] MAINPROCESS(10) for  u1_t_lp_Q_data_dime2++ 
[143] MAINPROCESS(10) for  ) 
[144] MAINPROCESS(10) subproc SUBPROCESS(1) 
[145] SUBPROCESS(1) for  for ( 
[146] SUBPROCESS(1) for  u1_t_lp_Q_data_dime1 = (U1)0; 
[147] SUBPROCESS(1) for  u1_t_lp_Q_data_dime1 < (U1)4; 
[148] SUBPROCESS(1) for  u1_t_lp_Q_data_dime1++ 
[149] SUBPROCESS(1) for  ) 
[150] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[151] SUBSUBPROCESS(1) equal fl_t_Q_second[u1_t_lp_Q_data_dime1][u1_t_lp_Q_data_dime2] fl_t_Q[u1_t_lp_Q_data_dime1 + (4 * u1_t_lp_Q_data_dime2)];
[152] MAINPROCESS(11) func<start> fn_matmul_4x4( 
[153] MAINPROCESS(11) func  fl_t_Q_first, fl_t_Q_second, afl_a_B 
[154] MAINPROCESS(11) func<end> ); 
[155] MAINPROCESS(11) func<start> afl_a_Lam[0] = fl_abs( 
[156] MAINPROCESS(11) func fl_t_R[0] 
[157] MAINPROCESS(11) func<end> ); 
[158] MAINPROCESS(11) func<start> afl_a_Lam[1] = fl_abs( 
[159] MAINPROCESS(11) func fl_t_R[5] 
[160] MAINPROCESS(11) func<end> ); 
[161] MAINPROCESS(11) func<start> afl_a_Lam[2] = fl_abs( 
[162] MAINPROCESS(11) func fl_t_R[10] 
[163] MAINPROCESS(11) func<end> ); 
[164] MAINPROCESS(11) func<start> afl_a_Lam[3] = fl_abs( 
[165] MAINPROCESS(11) func fl_t_R[15] 
[166] MAINPROCESS(11) func<end> ); 
[167] MAINPROCESS(11) return return; 
----------------- Total Codes : 167 lines
--------------------------
[Function Name] : fn_calc_spec_bf_4ch 
-Return type : VD 
-Argument : 3 
     [0] : FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : FL   afl_a_spec_bf[N_DOA] 
     [2] : S4   s4_a_updn_flg 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[4] MAINPROCESS(1) proc FL afl_t_Ryy[4][4]; 
[5] MAINPROCESS(1) proc FL afl_t_mode_vec[4]; 
[6] MAINPROCESS(1) proc FL afl_t_Ryy_mode[4]; 
[7] MAINPROCESS(1) equal FL fl_t_mode_sum 4.0F;
[8] MAINPROCESS(1) proc FL fl_t_Ryy_sum; 
[9] MAINPROCESS(1) equal afl_t_Ryy[0][0] afl_a_Ryy[0];
[10] MAINPROCESS(1) equal afl_t_Ryy[0][1] afl_a_Ryy[1];
[11] MAINPROCESS(1) equal afl_t_Ryy[0][2] afl_a_Ryy[3];
[12] MAINPROCESS(1) equal afl_t_Ryy[0][3] afl_a_Ryy[6];
[13] MAINPROCESS(1) equal afl_t_Ryy[1][0] afl_a_Ryy[1];
[14] MAINPROCESS(1) equal afl_t_Ryy[1][1] afl_a_Ryy[2];
[15] MAINPROCESS(1) equal afl_t_Ryy[1][2] afl_a_Ryy[4];
[16] MAINPROCESS(1) equal afl_t_Ryy[1][3] afl_a_Ryy[7];
[17] MAINPROCESS(1) equal afl_t_Ryy[2][0] afl_a_Ryy[3];
[18] MAINPROCESS(1) equal afl_t_Ryy[2][1] afl_a_Ryy[4];
[19] MAINPROCESS(1) equal afl_t_Ryy[2][2] afl_a_Ryy[5];
[20] MAINPROCESS(1) equal afl_t_Ryy[2][3] afl_a_Ryy[8];
[21] MAINPROCESS(1) equal afl_t_Ryy[3][0] afl_a_Ryy[6];
[22] MAINPROCESS(1) equal afl_t_Ryy[3][1] afl_a_Ryy[7];
[23] MAINPROCESS(1) equal afl_t_Ryy[3][2] afl_a_Ryy[8];
[24] MAINPROCESS(1) equal afl_t_Ryy[3][3] afl_a_Ryy[9];
[25] MAINPROCESS(1) for  for ( 
[26] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[27] MAINPROCESS(1) for  s4_t_lp_i < N_DOA; 
[28] MAINPROCESS(1) for  s4_t_lp_i++  
[29] MAINPROCESS(1) for  ) 
[30] MAINPROCESS(1) subproc SUBPROCESS(1) 
[31] SUBPROCESS(1) equal afl_a_spec_bf[s4_t_lp_i] 0.0;
[32] MAINPROCESS(2) for  for ( 
[33] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[34] MAINPROCESS(2) for  s4_t_lp_i < N_DOA; 
[35] MAINPROCESS(2) for  s4_t_lp_i++  
[36] MAINPROCESS(2) for  ) 
[37] MAINPROCESS(2) subproc SUBPROCESS(1) 
[38] SUBPROCESS(1) if  if ( 
[39] SUBPROCESS(1) if  s4_a_updn_flg == 1 
[40] SUBPROCESS(1) if  ) 
[41] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[42] SUBSUBPROCESS(1) equal afl_t_mode_vec[0] CAFL_D_MODE_VECTOR_0[s4_t_lp_i];
[43] SUBSUBPROCESS(1) equal afl_t_mode_vec[1] CAFL_D_MODE_VECTOR_1[s4_t_lp_i];
[44] SUBSUBPROCESS(1) equal afl_t_mode_vec[2] -CAFL_D_MODE_VECTOR_2[s4_t_lp_i];
[45] SUBSUBPROCESS(1) equal afl_t_mode_vec[3] -CAFL_D_MODE_VECTOR_3[s4_t_lp_i];
[46] SUBPROCESS(2) else else 
[47] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[48] SUBSUBPROCESS(1) equal afl_t_mode_vec[0] CAFL_D_MODE_VECTOR_0[s4_t_lp_i];
[49] SUBSUBPROCESS(1) equal afl_t_mode_vec[1] CAFL_D_MODE_VECTOR_1[s4_t_lp_i];
[50] SUBSUBPROCESS(1) equal afl_t_mode_vec[2] CAFL_D_MODE_VECTOR_2[s4_t_lp_i];
[51] SUBSUBPROCESS(1) equal afl_t_mode_vec[3] CAFL_D_MODE_VECTOR_3[s4_t_lp_i];
[52] SUBPROCESS(3) equal fl_t_Ryy_sum 0.0F;
[53] SUBPROCESS(3) for  for ( 
[54] SUBPROCESS(3) for  s4_t_lp_j = 0; 
[55] SUBPROCESS(3) for  s4_t_lp_j < 4; 
[56] SUBPROCESS(3) for  s4_t_lp_j++  
[57] SUBPROCESS(3) for  ) 
[58] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[59] SUBSUBPROCESS(1) equal afl_t_Ryy_mode[s4_t_lp_j] 0.0F;
[60] SUBSUBPROCESS(1) for  for ( 
[61] SUBSUBPROCESS(1) for  s4_t_lp_k = 0; 
[62] SUBSUBPROCESS(1) for  s4_t_lp_k < 4; 
[63] SUBSUBPROCESS(1) for  s4_t_lp_k++  
[64] SUBSUBPROCESS(1) for  ) 
[65] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[66] SUBSUBSUBPROCESS(1) equal afl_t_Ryy_mode[s4_t_lp_j] + afl_t_Ryy[s4_t_lp_j][s4_t_lp_k] * afl_t_mode_vec[s4_t_lp_k];
[67] SUBSUBPROCESS(2) equal fl_t_Ryy_sum + afl_t_mode_vec[s4_t_lp_j] * afl_t_Ryy_mode[s4_t_lp_j];
[68] SUBPROCESS(4) func<start> afl_a_spec_bf[s4_t_lp_i] = 10 * ( 
[69] SUBPROCESS(4) func FL)fl_log10( (0.25F * fl_t_Ryy_sum) / fl_t_mode_sum 
[70] SUBPROCESS(4) func<end> ); 
[71] MAINPROCESS(3) return return; 
----------------- Total Codes : 71 lines
--------------------------
[Function Name] : fn_calc_spec_bf_4ch_before_log10 
-Return type : VD 
-Argument : 3 
     [0] : FL   afl_a_Ryy[CORRE_SIZE_4CH] 
     [1] : FL   afl_a_spec_bf[N_DOA] 
     [2] : S4   s4_a_updn_flg 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[4] MAINPROCESS(1) proc FL afl_t_Ryy[4][4]; 
[5] MAINPROCESS(1) proc FL afl_t_mode_vec[4]; 
[6] MAINPROCESS(1) proc FL afl_t_Ryy_mode[4]; 
[7] MAINPROCESS(1) equal FL fl_t_mode_sum 4.0F;
[8] MAINPROCESS(1) proc FL fl_t_Ryy_sum; 
[9] MAINPROCESS(1) equal afl_t_Ryy[0][0] afl_a_Ryy[0];
[10] MAINPROCESS(1) equal afl_t_Ryy[0][1] afl_a_Ryy[1];
[11] MAINPROCESS(1) equal afl_t_Ryy[0][2] afl_a_Ryy[3];
[12] MAINPROCESS(1) equal afl_t_Ryy[0][3] afl_a_Ryy[6];
[13] MAINPROCESS(1) equal afl_t_Ryy[1][0] afl_a_Ryy[1];
[14] MAINPROCESS(1) equal afl_t_Ryy[1][1] afl_a_Ryy[2];
[15] MAINPROCESS(1) equal afl_t_Ryy[1][2] afl_a_Ryy[4];
[16] MAINPROCESS(1) equal afl_t_Ryy[1][3] afl_a_Ryy[7];
[17] MAINPROCESS(1) equal afl_t_Ryy[2][0] afl_a_Ryy[3];
[18] MAINPROCESS(1) equal afl_t_Ryy[2][1] afl_a_Ryy[4];
[19] MAINPROCESS(1) equal afl_t_Ryy[2][2] afl_a_Ryy[5];
[20] MAINPROCESS(1) equal afl_t_Ryy[2][3] afl_a_Ryy[8];
[21] MAINPROCESS(1) equal afl_t_Ryy[3][0] afl_a_Ryy[6];
[22] MAINPROCESS(1) equal afl_t_Ryy[3][1] afl_a_Ryy[7];
[23] MAINPROCESS(1) equal afl_t_Ryy[3][2] afl_a_Ryy[8];
[24] MAINPROCESS(1) equal afl_t_Ryy[3][3] afl_a_Ryy[9];
[25] MAINPROCESS(1) for  for ( 
[26] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[27] MAINPROCESS(1) for  s4_t_lp_i < N_DOA; 
[28] MAINPROCESS(1) for  s4_t_lp_i++  
[29] MAINPROCESS(1) for  ) 
[30] MAINPROCESS(1) subproc SUBPROCESS(1) 
[31] SUBPROCESS(1) equal afl_a_spec_bf[s4_t_lp_i] 0.0;
[32] MAINPROCESS(2) for  for ( 
[33] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[34] MAINPROCESS(2) for  s4_t_lp_i < N_DOA; 
[35] MAINPROCESS(2) for  s4_t_lp_i++  
[36] MAINPROCESS(2) for  ) 
[37] MAINPROCESS(2) subproc SUBPROCESS(1) 
[38] SUBPROCESS(1) if  if ( 
[39] SUBPROCESS(1) if  s4_a_updn_flg == 1 
[40] SUBPROCESS(1) if  ) 
[41] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[42] SUBSUBPROCESS(1) equal afl_t_mode_vec[0] CAFL_D_MODE_VECTOR_0[s4_t_lp_i];
[43] SUBSUBPROCESS(1) equal afl_t_mode_vec[1] CAFL_D_MODE_VECTOR_1[s4_t_lp_i];
[44] SUBSUBPROCESS(1) equal afl_t_mode_vec[2] -CAFL_D_MODE_VECTOR_2[s4_t_lp_i];
[45] SUBSUBPROCESS(1) equal afl_t_mode_vec[3] -CAFL_D_MODE_VECTOR_3[s4_t_lp_i];
[46] SUBPROCESS(2) else else 
[47] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[48] SUBSUBPROCESS(1) equal afl_t_mode_vec[0] CAFL_D_MODE_VECTOR_0[s4_t_lp_i];
[49] SUBSUBPROCESS(1) equal afl_t_mode_vec[1] CAFL_D_MODE_VECTOR_1[s4_t_lp_i];
[50] SUBSUBPROCESS(1) equal afl_t_mode_vec[2] CAFL_D_MODE_VECTOR_2[s4_t_lp_i];
[51] SUBSUBPROCESS(1) equal afl_t_mode_vec[3] CAFL_D_MODE_VECTOR_3[s4_t_lp_i];
[52] SUBPROCESS(3) equal fl_t_Ryy_sum 0.0F;
[53] SUBPROCESS(3) for  for ( 
[54] SUBPROCESS(3) for  s4_t_lp_j = 0; 
[55] SUBPROCESS(3) for  s4_t_lp_j < 4; 
[56] SUBPROCESS(3) for  s4_t_lp_j++  
[57] SUBPROCESS(3) for  ) 
[58] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[59] SUBSUBPROCESS(1) equal afl_t_Ryy_mode[s4_t_lp_j] 0.0F;
[60] SUBSUBPROCESS(1) for  for ( 
[61] SUBSUBPROCESS(1) for  s4_t_lp_k = 0; 
[62] SUBSUBPROCESS(1) for  s4_t_lp_k < 4; 
[63] SUBSUBPROCESS(1) for  s4_t_lp_k++  
[64] SUBSUBPROCESS(1) for  ) 
[65] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[66] SUBSUBSUBPROCESS(1) equal afl_t_Ryy_mode[s4_t_lp_j] + afl_t_Ryy[s4_t_lp_j][s4_t_lp_k] * afl_t_mode_vec[s4_t_lp_k];
[67] SUBSUBPROCESS(2) equal fl_t_Ryy_sum + afl_t_mode_vec[s4_t_lp_j] * afl_t_Ryy_mode[s4_t_lp_j];
[68] SUBPROCESS(4) equal afl_a_spec_bf[s4_t_lp_i] (0.25F * fl_t_Ryy_sum) / fl_t_mode_sum;
[69] MAINPROCESS(3) return return; 
----------------- Total Codes : 69 lines
