Total lines: 972 
Total functions : 14 
--------------------------
[Function Name] : fn_bsm_seek_prior_object 
-Return type : VD 
-Argument : 2 
     [0] : S4   *ps4_a_pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_normal_num; 
[2] MAINPROCESS(1) proc NORMAL_BSM ast_t_normal[PRIOR_BUFFSIZE]; 
[3] MAINPROCESS(1) proc NORMAL_BSM st_t_buf_normal; 
[4] MAINPROCESS(1) proc NORMAL_BSM ast_t_ast_normal_copy[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[6] MAINPROCESS(1) proc S4 s4_t_start_bin; 
[7] MAINPROCESS(1) proc S4 as4_t_prev_index[PRIOR_BUFFSIZE]; 
[8] MAINPROCESS(1) equal S4 s4_t_peak_num_prior_up 0;
[9] MAINPROCESS(1) proc FL afl_t_peak_bins_intpl_up[PRIOR_RANGE][2]; 
[10] MAINPROCESS(1) proc FL afl_t_peak_powers_up[PRIOR_RANGE][2]; 
[11] MAINPROCESS(1) proc FL afl_t_peak_doa_bins_intpl_up[PRIOR_RANGE][2]; 
[12] MAINPROCESS(1) proc FL afl_t_peak_doa_powers_up[PRIOR_RANGE][2]; 
[13] MAINPROCESS(1) equal S4 s4_t_peak_num_prior_dn 0;
[14] MAINPROCESS(1) proc FL afl_t_peak_bins_intpl_dn[PRIOR_RANGE][2]; 
[15] MAINPROCESS(1) proc FL afl_t_peak_powers_dn[PRIOR_RANGE][2]; 
[16] MAINPROCESS(1) proc FL afl_t_peak_doa_bins_intpl_dn[PRIOR_RANGE][2]; 
[17] MAINPROCESS(1) proc FL afl_t_peak_doa_powers_dn[PRIOR_RANGE][2]; 
[18] MAINPROCESS(1) proc U1 u1_make_pair_result; 
[19] MAINPROCESS(1) proc U1 u1_t_up_peak_num_of_search; 
[20] MAINPROCESS(1) proc U1 u1_t_dn_peak_num_of_search; 
[21] MAINPROCESS(1) proc S4 s4_t_lower_limit_th; 
[22] MAINPROCESS(1) proc U1 u1_t_flg_near_target_exist; 
[23] MAINPROCESS(1) proc S4 s4_t_lp_target_num; 
[24] MAINPROCESS(1) func<start> fn_init( 
[25] MAINPROCESS(1) func ast_t_normal, PRIOR_BUFFSIZE 
[26] MAINPROCESS(1) func<end> ); 
[27] MAINPROCESS(1) for  for ( 
[28] MAINPROCESS(1) for  s4_t_lp_i = (S4)0; 
[29] MAINPROCESS(1) for  s4_t_lp_i < (S4)NORMAL_BUFFSIZE; 
[30] MAINPROCESS(1) for  s4_t_lp_i++ 
[31] MAINPROCESS(1) for  ) 
[32] MAINPROCESS(1) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) equal ast_t_ast_normal_copy[s4_t_lp_i] st_g_bsm_loop_data.ast_normal[s4_t_lp_i];
[34] MAINPROCESS(2) func<start> fn_sort_normal_by_power( 
[35] MAINPROCESS(2) func ast_t_ast_normal_copy 
[36] MAINPROCESS(2) func<end> ); 
[37] MAINPROCESS(2) equal *ps4_a_pair_num_prior 0;
[38] MAINPROCESS(2) if  if ( 
[39] MAINPROCESS(2) if  (fl_abs(fl_g_v_self_bsm_for_base) < CFL_CANOUT_VSELF_MIN 
[40] MAINPROCESS(2) if  ) 
[41] MAINPROCESS(2) if  || (s4_abs(s2_g_curvr_for_base) < CANOUT_CURVER_MIN 
[42] MAINPROCESS(2) if  ) 
[43] MAINPROCESS(2) if  ) 
[44] MAINPROCESS(2) subproc SUBPROCESS(1) 
[45] SUBPROCESS(1) func<start> fn_init( 
[46] SUBPROCESS(1) func ast_a_normal_prior,  PRIOR_BUFFSIZE 
[47] SUBPROCESS(1) func<end> ); 
[48] SUBPROCESS(1) return return; 
[49] MAINPROCESS(3) equal u1_t_up_peak_num_of_search 0;
[50] MAINPROCESS(3) equal u1_t_dn_peak_num_of_search 0;
[51] MAINPROCESS(3) equal u1_t_flg_near_target_exist (U1)0;
[52] MAINPROCESS(3) for  for ( 
[53] MAINPROCESS(3) for  s4_t_lp_target_num = (S4)0; 
[54] MAINPROCESS(3) for  s4_t_lp_target_num < st_g_bsm_loop_data.as4_buf_pair_num[1]; 
[55] MAINPROCESS(3) for  s4_t_lp_target_num++ 
[56] MAINPROCESS(3) for  ) 
[57] MAINPROCESS(3) subproc SUBPROCESS(1) 
[58] SUBPROCESS(1) if  if ( 
[59] SUBPROCESS(1) if  st_g_bsm_loop_data.ast_target[s4_t_lp_target_num].fl_Ryfil > (FL)-15.0F 
[60] SUBPROCESS(1) if  ) 
[61] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[62] SUBSUBPROCESS(1) equal u1_t_flg_near_target_exist (U1)1;
[63] SUBSUBPROCESS(1) proc break; 
[64] MAINPROCESS(4) equal s4_t_normal_num 0;
[65] MAINPROCESS(4) for  for ( 
[66] MAINPROCESS(4) for  s4_t_lp_i = 0; 
[67] MAINPROCESS(4) for  s4_t_lp_i < st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[68] MAINPROCESS(4) for  s4_t_lp_i++ 
[69] MAINPROCESS(4) for  ) 
[70] MAINPROCESS(4) subproc SUBPROCESS(1) 
[71] SUBPROCESS(1) if  if ( 
[72] SUBPROCESS(1) if  s4_t_lp_i >= PRIOR_BUFFSIZE 
[73] SUBPROCESS(1) if  ) 
[74] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[75] SUBSUBPROCESS(1) proc break; 
[76] SUBPROCESS(2) if  if ( 
[77] SUBPROCESS(2) if  (u1_t_flg_near_target_exist == (U1)0 
[78] SUBPROCESS(2) if  ) 
[79] SUBPROCESS(2) if  &&  (st_g_bsm_loop_data.s4_flg_alarm == (S4)0 
[80] SUBPROCESS(2) if  ) 
[81] SUBPROCESS(2) if  &&  ((CFL_ALARM_Y_BACKWARD - (FL)ALARM_Y_OFFSET) < ast_t_ast_normal_copy[s4_t_lp_i].fl_Rypred 
[82] SUBPROCESS(2) if  ) 
[83] SUBPROCESS(2) if  &&  (ast_t_ast_normal_copy[s4_t_lp_i].fl_Rypred  < (FL)-EKF_RY_SIDE 
[84] SUBPROCESS(2) if  ) 
[85] SUBPROCESS(2) if  &&  (st_g_bsm_loop_data.as4_low_speed_flg[0] == (S4)0) 
[86] SUBPROCESS(2) if  ) 
[87] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[88] SUBPROCESS(3) else else 
[89] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[90] SUBSUBPROCESS(1) equal s4_t_lower_limit_th FREQ_BIN_LOWER_LIMIT_PRIOR;
[91] SUBSUBPROCESS(1) if  if ( 
[92] SUBSUBPROCESS(1) if  (ast_t_ast_normal_copy[s4_t_lp_i].fl_Rypred < FREQ_EXPAND_R_TH 
[93] SUBSUBPROCESS(1) if  ) 
[94] SUBSUBPROCESS(1) if  &&  (ast_t_ast_normal_copy[s4_t_lp_i].fl_Vypred > FREQ_EXPAND_V_TH) 
[95] SUBSUBPROCESS(1) if  ) 
[96] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[97] SUBSUBSUBPROCESS(1) equal s4_t_lower_limit_th FREQ_BIN_LOWER_LIMIT_PRIOR_EX;
[98] SUBSUBPROCESS(2) if  if ( 
[99] SUBSUBPROCESS(2) if  (ast_t_ast_normal_copy[s4_t_lp_i].s4_flg_track > PRIOR_TRK_NUM 
[100] SUBSUBPROCESS(2) if  ) 
[101] SUBSUBPROCESS(2) if  || (ast_t_ast_normal_copy[s4_t_lp_i].s4_flg_dc == OBJECT_TYPE_PRIOR 
[102] SUBSUBPROCESS(2) if  ) 
[103] SUBSUBPROCESS(2) if  ) 
[104] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[105] SUBSUBSUBPROCESS(1) equal s4_t_peak_num_prior_up 0;
[106] SUBSUBSUBPROCESS(1) if  if ( 
[107] SUBSUBSUBPROCESS(1) if  ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_up_pred > FREQ_BIN_LOWER_LIMIT 
[108] SUBSUBSUBPROCESS(1) if  ) 
[109] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[110] SUBSUBSUBSUBPROCESS(1) proc u1_t_up_peak_num_of_search++; 
[111] SUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_prior_init_data( 
[112] SUBSUBSUBSUBPROCESS(1) func &s4_t_peak_num_prior_up, 
[113] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_bins_intpl_up, 
[114] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_powers_up, 
[115] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_bins_intpl_up, 
[116] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_powers_up 
[117] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[118] SUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_prior_set_peak( 
[119] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_up_pred, 
[120] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_Ayfil, 
[121] SUBSUBSUBSUBPROCESS(1) func CU2_LFM_MOD_UP, 
[122] SUBSUBSUBSUBPROCESS(1) func &s4_t_start_bin 
[123] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[124] SUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_prior_estimate_doa( 
[125] SUBSUBSUBSUBPROCESS(1) func 0, 
[126] SUBSUBSUBSUBPROCESS(1) func afl_g_cvw_lfm_ryy_matrix[0], 
[127] SUBSUBSUBSUBPROCESS(1) func (const FL *)(afl_g_cvw_lfm_ftt_power[0]), 
[128] SUBSUBSUBSUBPROCESS(1) func s4_t_start_bin, 
[129] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_power_up, 
[130] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_doa_up_interpolate_pred, 
[131] SUBSUBSUBSUBPROCESS(1) func &s4_t_peak_num_prior_up, 
[132] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_bins_intpl_up, 
[133] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_powers_up, 
[134] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_bins_intpl_up, 
[135] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_powers_up 
[136] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[137] SUBSUBSUBPROCESS(2) else if else if( 
[138] SUBSUBSUBPROCESS(2) else if ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_up_pred > s4_t_lower_limit_th 
[139] SUBSUBSUBPROCESS(2) else if ) 
[140] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[141] SUBSUBSUBSUBPROCESS(1) proc u1_t_up_peak_num_of_search++; 
[142] SUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_prior_estimate_doa_around_dc( 
[143] SUBSUBSUBSUBPROCESS(1) func 0, 
[144] SUBSUBSUBSUBPROCESS(1) func (const FL (*)[CORRE_SIZE_4CH])afl_g_cvw_lfm_ryy_matrix[0], 
[145] SUBSUBSUBSUBPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[0], 
[146] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_up_pred, 
[147] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_dn_pred, 
[148] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_bin_up_interpolate_pred, 
[149] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_doa_dn_interpolate_pred, 
[150] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_power_dn_music, 
[151] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_dn_music_pred, 
[152] SUBSUBSUBSUBPROCESS(1) func &s4_t_peak_num_prior_up, 
[153] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_bins_intpl_up, 
[154] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_powers_up, 
[155] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_bins_intpl_up, 
[156] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_powers_up 
[157] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[158] SUBSUBSUBPROCESS(3) else else 
[159] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[160] SUBSUBSUBPROCESS(4) equal s4_t_peak_num_prior_dn 0;
[161] SUBSUBSUBPROCESS(4) if  if ( 
[162] SUBSUBSUBPROCESS(4) if  ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_dn_pred > FREQ_BIN_LOWER_LIMIT 
[163] SUBSUBSUBPROCESS(4) if  ) 
[164] SUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBPROCESS(1) 
[165] SUBSUBSUBSUBPROCESS(1) proc u1_t_dn_peak_num_of_search++; 
[166] SUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_prior_init_data( 
[167] SUBSUBSUBSUBPROCESS(1) func &s4_t_peak_num_prior_dn, 
[168] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_bins_intpl_dn, 
[169] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_powers_dn, 
[170] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_bins_intpl_dn, 
[171] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_powers_dn 
[172] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[173] SUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_prior_set_peak( 
[174] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_dn_pred, 
[175] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_Ayfil, 
[176] SUBSUBSUBSUBPROCESS(1) func CU2_LFM_MOD_DN, 
[177] SUBSUBSUBSUBPROCESS(1) func &s4_t_start_bin 
[178] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[179] SUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_prior_estimate_doa( 
[180] SUBSUBSUBSUBPROCESS(1) func 1, 
[181] SUBSUBSUBSUBPROCESS(1) func afl_g_cvw_lfm_ryy_matrix[1], 
[182] SUBSUBSUBSUBPROCESS(1) func (const FL *)(afl_g_cvw_lfm_ftt_power[1]), 
[183] SUBSUBSUBSUBPROCESS(1) func s4_t_start_bin, 
[184] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_power_dn, 
[185] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_doa_dn_interpolate_pred, 
[186] SUBSUBSUBSUBPROCESS(1) func &s4_t_peak_num_prior_dn, 
[187] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_bins_intpl_dn, 
[188] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_powers_dn, 
[189] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_bins_intpl_dn, 
[190] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_powers_dn 
[191] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[192] SUBSUBSUBPROCESS(5) else if else if( 
[193] SUBSUBSUBPROCESS(5) else if ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_dn_pred > s4_t_lower_limit_th 
[194] SUBSUBSUBPROCESS(5) else if ) 
[195] SUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBPROCESS(1) 
[196] SUBSUBSUBSUBPROCESS(1) proc u1_t_dn_peak_num_of_search++; 
[197] SUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_prior_estimate_doa_around_dc( 
[198] SUBSUBSUBSUBPROCESS(1) func 1, 
[199] SUBSUBSUBSUBPROCESS(1) func (const FL (*)[CORRE_SIZE_4CH])afl_g_cvw_lfm_ryy_matrix[1], 
[200] SUBSUBSUBSUBPROCESS(1) func (const FL *)afl_g_cvw_lfm_ftt_power[1], 
[201] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_dn_pred, 
[202] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_up_pred, 
[203] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_bin_dn_interpolate_pred, 
[204] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_doa_up_interpolate_pred, 
[205] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].fl_power_up_music, 
[206] SUBSUBSUBSUBPROCESS(1) func ast_t_ast_normal_copy[s4_t_lp_i].s4_bin_up_music_pred, 
[207] SUBSUBSUBSUBPROCESS(1) func &s4_t_peak_num_prior_dn, 
[208] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_bins_intpl_dn, 
[209] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_powers_dn, 
[210] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_bins_intpl_dn, 
[211] SUBSUBSUBSUBPROCESS(1) func afl_t_peak_doa_powers_dn 
[212] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[213] SUBSUBSUBPROCESS(6) else else 
[214] SUBSUBSUBPROCESS(6) subproc SUBSUBSUBSUBPROCESS(1) 
[215] SUBSUBSUBPROCESS(7) func<start> fn_init( 
[216] SUBSUBSUBPROCESS(7) func &st_t_buf_normal, 1 
[217] SUBSUBSUBPROCESS(7) func<end> ); 
[218] SUBSUBSUBPROCESS(7) func<start> u1_make_pair_result = u1_bsm_prior_make_pair( 
[219] SUBSUBSUBPROCESS(7) func ast_t_ast_normal_copy[s4_t_lp_i].fl_doa_up_interpolate_pred, 
[220] SUBSUBSUBPROCESS(7) func ast_t_ast_normal_copy[s4_t_lp_i].fl_doa_dn_interpolate_pred, 
[221] SUBSUBSUBPROCESS(7) func ast_t_ast_normal_copy[s4_t_lp_i].fl_power_up_music, 
[222] SUBSUBSUBPROCESS(7) func ast_t_ast_normal_copy[s4_t_lp_i].fl_power_dn_music, 
[223] SUBSUBSUBPROCESS(7) func s4_t_peak_num_prior_up, 
[224] SUBSUBSUBPROCESS(7) func afl_t_peak_bins_intpl_up, 
[225] SUBSUBSUBPROCESS(7) func afl_t_peak_powers_up, 
[226] SUBSUBSUBPROCESS(7) func afl_t_peak_doa_bins_intpl_up, 
[227] SUBSUBSUBPROCESS(7) func afl_t_peak_doa_powers_up, 
[228] SUBSUBSUBPROCESS(7) func s4_t_peak_num_prior_dn, 
[229] SUBSUBSUBPROCESS(7) func afl_t_peak_bins_intpl_dn, 
[230] SUBSUBSUBPROCESS(7) func afl_t_peak_powers_dn, 
[231] SUBSUBSUBPROCESS(7) func afl_t_peak_doa_bins_intpl_dn, 
[232] SUBSUBSUBPROCESS(7) func afl_t_peak_doa_powers_dn, 
[233] SUBSUBSUBPROCESS(7) func s4_t_normal_num, 
[234] SUBSUBSUBPROCESS(7) func &st_t_buf_normal 
[235] SUBSUBSUBPROCESS(7) func<end> ); 
[236] SUBSUBSUBPROCESS(7) if if( 
[237] SUBSUBSUBPROCESS(7) if u1_make_pair_result == CU1_TRUE 
[238] SUBSUBSUBPROCESS(7) if ) 
[239] SUBSUBSUBPROCESS(7) subproc SUBSUBSUBSUBPROCESS(1) 
[240] SUBSUBSUBSUBPROCESS(1) equal ast_t_normal[s4_t_normal_num] st_t_buf_normal;
[241] SUBSUBSUBSUBPROCESS(1) equal as4_t_prev_index[s4_t_normal_num] s4_t_lp_i;
[242] SUBSUBSUBSUBPROCESS(1) proc s4_t_normal_num++; 
[243] MAINPROCESS(5) func<start> fn_bsm_prior_delete_same_object( 
[244] MAINPROCESS(5) func (const S4 *)as4_t_prev_index, 
[245] MAINPROCESS(5) func s4_t_normal_num, 
[246] MAINPROCESS(5) func ast_t_normal, 
[247] MAINPROCESS(5) func (const NORMAL_BSM *)ast_t_ast_normal_copy 
[248] MAINPROCESS(5) func<end> ); 
[249] MAINPROCESS(5) func<start> fn_bsm_prior_set_object( 
[250] MAINPROCESS(5) func ps4_a_pair_num_prior, 
[251] MAINPROCESS(5) func ast_a_normal_prior, 
[252] MAINPROCESS(5) func s4_t_normal_num, 
[253] MAINPROCESS(5) func (const NORMAL_BSM *)ast_t_normal 
[254] MAINPROCESS(5) func<end> ); 
[255] MAINPROCESS(5) return return; 
----------------- Total Codes : 255 lines
--------------------------
[Function Name] : fn_bsm_prior_init_data 
-Return type : VD 
-Argument : 5 
     [0] : S4   *ps4_a_peak_num_prior 
     [1] : FL   afl_a_peak_bins_intpl[PRIOR_RANGE][2] 
     [2] : FL   afl_a_peak_powers[PRIOR_RANGE][2] 
     [3] : FL   afl_a_peak_doa_bins_intpl[PRIOR_RANGE][2] 
     [4] : FL   afl_a_peak_doa_powers[PRIOR_RANGE][2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) equal *ps4_a_peak_num_prior 0;
[4] MAINPROCESS(1) for  for ( 
[5] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[6] MAINPROCESS(1) for  s4_t_lp_i < (S4)PRIOR_RANGE; 
[7] MAINPROCESS(1) for  s4_t_lp_i++  
[8] MAINPROCESS(1) for  ) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) for for( 
[11] SUBPROCESS(1) for s4_t_lp_j = 0; 
[12] SUBPROCESS(1) for s4_t_lp_j < (S4)2; 
[13] SUBPROCESS(1) for s4_t_lp_j++  
[14] SUBPROCESS(1) for ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) equal afl_a_peak_bins_intpl[s4_t_lp_i][s4_t_lp_j] 0.0F;
[17] SUBSUBPROCESS(1) equal afl_a_peak_powers[s4_t_lp_i][s4_t_lp_j] 0.0F;
[18] SUBSUBPROCESS(1) equal afl_a_peak_doa_bins_intpl[s4_t_lp_i][s4_t_lp_j] 0.0F;
[19] SUBSUBPROCESS(1) equal afl_a_peak_doa_powers[s4_t_lp_i][s4_t_lp_j] 0.0F;
[20] MAINPROCESS(2) return return; 
----------------- Total Codes : 20 lines
--------------------------
[Function Name] : fn_bsm_prior_set_peak 
-Return type : VD 
-Argument : 4 
     [0] : S4   s4_a_focus_bin 
     [1] : FL   fl_a_Ayfil 
     [2] : U2   u2_a_flg_undn 
     [3] : S4   *ps4_a_start_bin 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if u2_a_flg_undn == CU2_LFM_MOD_UP 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) if  if ( 
[6] SUBPROCESS(1) if  fl_a_Ayfil > AY_TH_NT 
[7] SUBPROCESS(1) if  ) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] SUBSUBPROCESS(1) func<start> *ps4_a_start_bin = s4_a_focus_bin - ( 
[10] SUBSUBPROCESS(1) func PRIOR_RANGE - 2 
[11] SUBSUBPROCESS(1) func<end> ); 
[12] SUBPROCESS(2) else if  else if ( 
[13] SUBPROCESS(2) else if  fl_a_Ayfil < -AY_TH_NT 
[14] SUBPROCESS(2) else if  ) 
[15] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) equal *ps4_a_start_bin s4_a_focus_bin - 1;
[17] SUBPROCESS(3) else else 
[18] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[19] SUBSUBPROCESS(1) func<start> *ps4_a_start_bin = s4_a_focus_bin - ( 
[20] SUBSUBPROCESS(1) func (((S4)PRIOR_RANGE + (S4)1) / (S4)2) - (S4)1 
[21] SUBSUBPROCESS(1) func<end> ); 
[22] MAINPROCESS(2) else else 
[23] MAINPROCESS(2) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) if if( 
[25] SUBPROCESS(1) if fl_a_Ayfil > AY_TH_NT 
[26] SUBPROCESS(1) if ) 
[27] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) equal *ps4_a_start_bin s4_a_focus_bin - 1;
[29] SUBPROCESS(2) else if else if( 
[30] SUBPROCESS(2) else if fl_a_Ayfil < -AY_TH_NT 
[31] SUBPROCESS(2) else if ) 
[32] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[33] SUBSUBPROCESS(1) func<start> *ps4_a_start_bin = s4_a_focus_bin - ( 
[34] SUBSUBPROCESS(1) func PRIOR_RANGE - 2 
[35] SUBSUBPROCESS(1) func<end> ); 
[36] SUBPROCESS(3) else else 
[37] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[38] SUBSUBPROCESS(1) func<start> *ps4_a_start_bin = s4_a_focus_bin - ( 
[39] SUBSUBPROCESS(1) func (((S4)PRIOR_RANGE + (S4)1) / (S4)2) - (S4)1 
[40] SUBSUBPROCESS(1) func<end> ); 
[41] MAINPROCESS(3) if  if ( 
[42] MAINPROCESS(3) if  *ps4_a_start_bin < ((NB_FFT_PT / 2) + CENTER_FREQ_RANGE + 1) 
[43] MAINPROCESS(3) if  ) 
[44] MAINPROCESS(3) subproc SUBPROCESS(1) 
[45] SUBPROCESS(1) equal *ps4_a_start_bin (NB_FFT_PT / 2) + CENTER_FREQ_RANGE + 1;
[46] MAINPROCESS(4) if  if ( 
[47] MAINPROCESS(4) if  *ps4_a_start_bin < ((NB_FFT_PT / 2) + CENTER_FREQ_RANGE + 1) 
[48] MAINPROCESS(4) if  ) 
[49] MAINPROCESS(4) subproc SUBPROCESS(1) 
[50] SUBPROCESS(1) equal *ps4_a_start_bin NB_FFT_PT/2+CENTER_FREQ_RANGE+1;
[51] MAINPROCESS(5) if  if ( 
[52] MAINPROCESS(5) if  (*ps4_a_start_bin + (PRIOR_RANGE - 1)) > (NB_FFT_PT - 1) 
[53] MAINPROCESS(5) if  ) 
[54] MAINPROCESS(5) subproc SUBPROCESS(1) 
[55] SUBPROCESS(1) equal *ps4_a_start_bin NB_FFT_PT - PRIOR_RANGE;
[56] MAINPROCESS(6) return return; 
----------------- Total Codes : 56 lines
--------------------------
[Function Name] : fn_bsm_prior_estimate_doa 
-Return type : VD 
-Argument : 11 
     [0] : S4   s4_a_flg_updn 
     [1] : FL   afl_a_Ryy[NB_FFT_PT][CORRE_SIZE_4CH] 
     [2] : const FL   afl_a_power[NB_FFT_PT] 
     [3] : S4   s4_a_start_bin 
     [4] : FL   fl_a_focus_power 
     [5] : FL   fl_a_focus_doa_bin_intpl 
     [6] : S4   *ps4_a_doa_peak_num 
     [7] : FL   afl_a_peak_bins_intpl[PRIOR_RANGE][2] 
     [8] : FL   afl_a_peak_powers[PRIOR_RANGE][2] 
     [9] : FL   afl_a_peak_doa_bins_intpl[PRIOR_RANGE][2] 
     [10] : FL   afl_a_peak_doa_powers[PRIOR_RANGE][2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) proc S4 as4_t_focus_bin[PRIOR_RANGE]; 
[4] MAINPROCESS(1) proc FL afl_t_focus_power[PRIOR_RANGE]; 
[5] MAINPROCESS(1) proc S4 as4_t_doa_num[PRIOR_RANGE]; 
[6] MAINPROCESS(1) proc FL afl_t_selected_doa_bins_intpl[PRIOR_RANGE][2]; 
[7] MAINPROCESS(1) proc FL afl_t_selected_doa_powers[PRIOR_RANGE][2]; 
[8] MAINPROCESS(1) proc FL afl_t_selected_bins_intpl[PRIOR_RANGE][2]; 
[9] MAINPROCESS(1) proc S4 s4_t_doa_diff; 
[10] MAINPROCESS(1) equal s4_t_doa_diff N_DOA;
[11] MAINPROCESS(1) for  for ( 
[12] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[13] MAINPROCESS(1) for  s4_t_lp_i < PRIOR_RANGE; 
[14] MAINPROCESS(1) for  s4_t_lp_i++ 
[15] MAINPROCESS(1) for  ) 
[16] MAINPROCESS(1) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) equal as4_t_doa_num[s4_t_lp_i] 0;
[18] SUBPROCESS(1) for  for ( 
[19] SUBPROCESS(1) for  s4_t_lp_j = 0; 
[20] SUBPROCESS(1) for  s4_t_lp_j < 2; 
[21] SUBPROCESS(1) for  s4_t_lp_j++ 
[22] SUBPROCESS(1) for  ) 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) equal afl_t_selected_doa_bins_intpl[s4_t_lp_i][s4_t_lp_j] 0.0F;
[25] SUBSUBPROCESS(1) equal afl_t_selected_doa_powers[s4_t_lp_i][s4_t_lp_j] 0.0F;
[26] SUBSUBPROCESS(1) equal afl_t_selected_bins_intpl[s4_t_lp_i][s4_t_lp_j] 0.0F;
[27] MAINPROCESS(2) for  for ( 
[28] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[29] MAINPROCESS(2) for  s4_t_lp_i < PRIOR_RANGE; 
[30] MAINPROCESS(2) for  s4_t_lp_i++ 
[31] MAINPROCESS(2) for  ) 
[32] MAINPROCESS(2) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) equal as4_t_focus_bin[s4_t_lp_i] s4_a_start_bin + s4_t_lp_i;
[34] SUBPROCESS(1) equal afl_t_focus_power[s4_t_lp_i] afl_a_power[ as4_t_focus_bin[s4_t_lp_i] ];
[35] SUBPROCESS(1) func<start> fn_bsm_prior_cal_doa( 
[36] SUBPROCESS(1) func s4_a_flg_updn, 
[37] SUBPROCESS(1) func (const FL (*)[CORRE_SIZE_4CH])afl_a_Ryy, 
[38] SUBPROCESS(1) func (const FL *)afl_a_power, 
[39] SUBPROCESS(1) func as4_t_focus_bin[s4_t_lp_i], 
[40] SUBPROCESS(1) func fl_a_focus_power, 
[41] SUBPROCESS(1) func fl_a_focus_doa_bin_intpl, 
[42] SUBPROCESS(1) func &s4_t_doa_diff, 
[43] SUBPROCESS(1) func &as4_t_doa_num[s4_t_lp_i], 
[44] SUBPROCESS(1) func afl_t_selected_doa_bins_intpl[s4_t_lp_i], 
[45] SUBPROCESS(1) func afl_t_selected_doa_powers[s4_t_lp_i], 
[46] SUBPROCESS(1) func afl_t_selected_bins_intpl[s4_t_lp_i] 
[47] SUBPROCESS(1) func<end> ); 
[48] MAINPROCESS(3) func<start> fn_bsm_prior_store_doa( 
[49] MAINPROCESS(3) func (const FL *)afl_t_focus_power, 
[50] MAINPROCESS(3) func (const S4 *)as4_t_doa_num, 
[51] MAINPROCESS(3) func (const FL (*)[2])afl_t_selected_doa_bins_intpl, 
[52] MAINPROCESS(3) func (const FL (*)[2])afl_t_selected_doa_powers, 
[53] MAINPROCESS(3) func (const FL (*)[2])afl_t_selected_bins_intpl, 
[54] MAINPROCESS(3) func ps4_a_doa_peak_num, 
[55] MAINPROCESS(3) func afl_a_peak_bins_intpl, 
[56] MAINPROCESS(3) func afl_a_peak_powers, 
[57] MAINPROCESS(3) func afl_a_peak_doa_bins_intpl, 
[58] MAINPROCESS(3) func afl_a_peak_doa_powers 
[59] MAINPROCESS(3) func<end> ); 
[60] MAINPROCESS(3) return return; 
----------------- Total Codes : 60 lines
--------------------------
[Function Name] : fn_bsm_prior_cal_doa 
-Return type : VD 
-Argument : 11 
     [0] : S4   s4_a_flg_updn 
     [1] : const FL   afl_a_Ryy[NB_FFT_PT][CORRE_SIZE_4CH] 
     [2] : const FL   afl_a_power[NB_FFT_PT] 
     [3] : S4   s4_a_focus_bin 
     [4] : FL   fl_a_focus_power 
     [5] : FL   fl_a_focus_doa_bin_intpl 
     [6] : S4   *ps4_a_doa_diff 
     [7] : S4   *ps4_a_doa_num 
     [8] : FL   afl_a_selected_doa_bins_intpl[2] 
     [9] : FL   afl_a_selected_doa_powers[2] 
     [10] : FL   afl_a_selected_bins_intpl[2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc S4 s4_t_wave_num; 
[4] MAINPROCESS(1) proc FL afl_t_spec_doa[N_DOA]; 
[5] MAINPROCESS(1) proc S4 as4_t_selected_doa_bins[2]; 
[6] MAINPROCESS(1) proc S4 s4_t_wall_bin; 
[7] MAINPROCESS(1) proc S4 s4_a_exceptional_bin; 
[8] MAINPROCESS(1) equal S4 s4_t_tmp_doa_num 0;
[9] MAINPROCESS(1) equal as4_t_selected_doa_bins[0] (S4)0;
[10] MAINPROCESS(1) equal as4_t_selected_doa_bins[1] (S4)0;
[11] MAINPROCESS(1) if if( 
[12] MAINPROCESS(1) if st_g_bsm_loop_data.afl_wall_width[0] == WALL_MAX 
[13] MAINPROCESS(1) if ) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal s4_t_wall_bin -1;
[16] MAINPROCESS(2) else else 
[17] MAINPROCESS(2) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) equal s4_t_wall_bin (S4)(st_g_bsm_loop_data.afl_wall_width[0] / RCOF * 0.5F) + NB_FFT_PT / 2 -1;
[19] MAINPROCESS(3) if  if ( 
[20] MAINPROCESS(3) if  s4_a_flg_updn == 0 
[21] MAINPROCESS(3) if  ) 
[22] MAINPROCESS(3) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) equal s4_a_exceptional_bin (S4)(NB_FFT_PT * 0.5F + fl_g_v_self_bsm_for_base / 3.6F / VCOF * 0.5F) + ROAD_REF_FREQ_BIN_OFFSET;
[24] MAINPROCESS(4) else else 
[25] MAINPROCESS(4) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal s4_a_exceptional_bin (S4)(NB_FFT_PT * 0.5F - fl_g_v_self_bsm_for_base / 3.6F / VCOF * 0.5F) + ROAD_REF_FREQ_BIN_OFFSET;
[27] MAINPROCESS(5) if  if ( 
[28] MAINPROCESS(5) if  (s4_t_wall_bin != -1 
[29] MAINPROCESS(5) if  ) 
[30] MAINPROCESS(5) if  &&  (( fl_abs( (FL)(s4_a_focus_bin - s4_t_wall_bin) )) < 3) 
[31] MAINPROCESS(5) if  ) 
[32] MAINPROCESS(5) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) func<start> s4_t_wave_num = s4_calc_spec_music_4ch_all_2wavefix( 
[34] SUBPROCESS(1) func afl_a_Ryy[s4_a_focus_bin], 
[35] SUBPROCESS(1) func afl_t_spec_doa, 
[36] SUBPROCESS(1) func s4_a_flg_updn 
[37] SUBPROCESS(1) func<end> ); 
[38] SUBPROCESS(1) func<start> *ps4_a_doa_num = s4_search_peak_music( 
[39] SUBPROCESS(1) func (const FL *)afl_t_spec_doa, 
[40] SUBPROCESS(1) func as4_t_selected_doa_bins, 
[41] SUBPROCESS(1) func afl_a_selected_doa_powers, 
[42] SUBPROCESS(1) func s4_t_wave_num 
[43] SUBPROCESS(1) func<end> ); 
[44] SUBPROCESS(1) for  for ( 
[45] SUBPROCESS(1) for  s4_t_lp_i = 0; 
[46] SUBPROCESS(1) for  s4_t_lp_i < 2; 
[47] SUBPROCESS(1) for  s4_t_lp_i++ 
[48] SUBPROCESS(1) for  ) 
[49] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[50] SUBSUBPROCESS(1) if  if ( 
[51] SUBSUBPROCESS(1) if  as4_t_selected_doa_bins[s4_t_lp_i]>0 
[52] SUBSUBPROCESS(1) if  ) 
[53] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[54] SUBSUBSUBPROCESS(1) func<start> afl_a_selected_doa_powers[s4_t_lp_i] = fl_calc_spec_bf_4ch_fm_of_specified_doa( 
[55] SUBSUBSUBPROCESS(1) func afl_a_Ryy[s4_a_focus_bin], 
[56] SUBSUBSUBPROCESS(1) func s4_a_flg_updn, 
[57] SUBSUBSUBPROCESS(1) func s4_a_focus_bin, 
[58] SUBSUBSUBPROCESS(1) func as4_t_selected_doa_bins[s4_t_lp_i] 
[59] SUBSUBSUBPROCESS(1) func<end> ); 
[60] SUBPROCESS(2) equal s4_t_tmp_doa_num *ps4_a_doa_num;
[61] SUBPROCESS(2) if if( 
[62] SUBPROCESS(2) if *ps4_a_doa_num > 1 
[63] SUBPROCESS(2) if ) 
[64] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[65] SUBSUBPROCESS(1) for for( 
[66] SUBSUBPROCESS(1) for s4_t_lp_k=0; 
[67] SUBSUBPROCESS(1) for s4_t_lp_k<*ps4_a_doa_num; 
[68] SUBSUBPROCESS(1) for s4_t_lp_k++ 
[69] SUBSUBPROCESS(1) for ) 
[70] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[71] SUBSUBSUBPROCESS(1) if  if ( 
[72] SUBSUBSUBPROCESS(1) if  (as4_t_selected_doa_bins[s4_t_lp_k] < (N_DOA - (S4)st_g_bsm_loop_data.afl_installed_angle[0] - DOA_RANGE_FORWARD) 
[73] SUBSUBSUBPROCESS(1) if  ) 
[74] SUBSUBSUBPROCESS(1) if  &&  (as4_t_selected_doa_bins[s4_t_lp_k] > (N_DOA - (S4)st_g_bsm_loop_data.afl_installed_angle[0] - (S4)CU1_DOA_RANGE_BACKWARD) 
[75] SUBSUBSUBPROCESS(1) if  ) 
[76] SUBSUBSUBPROCESS(1) if  &&  (*ps4_a_doa_diff > fl_abs((FL)as4_t_selected_doa_bins[s4_t_lp_k] - (FL)fl_a_focus_doa_bin_intpl)) 
[77] SUBSUBSUBPROCESS(1) if  ) 
[78] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[79] SUBSUBSUBSUBPROCESS(1) equal<start> *ps4_a_doa_diff = ( 
[80] SUBSUBSUBSUBPROCESS(1) equal S4)fl_abs(as4_t_selected_doa_bins[s4_t_lp_k]-fl_a_focus_doa_bin_intpl 
[81] SUBSUBSUBSUBPROCESS(1) equal<end> ); 
[82] SUBSUBSUBPROCESS(2) else else 
[83] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[84] SUBSUBSUBSUBPROCESS(1) equal as4_t_selected_doa_bins[s4_t_lp_k] 0;
[85] SUBSUBSUBSUBPROCESS(1) equal afl_a_selected_doa_powers[s4_t_lp_k] 0.0F;
[86] SUBSUBSUBSUBPROCESS(1) if  if ( 
[87] SUBSUBSUBSUBPROCESS(1) if  (s4_t_lp_k==0 
[88] SUBSUBSUBSUBPROCESS(1) if  ) 
[89] SUBSUBSUBSUBPROCESS(1) if  &&  (*ps4_a_doa_num==2) 
[90] SUBSUBSUBSUBPROCESS(1) if  ) 
[91] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[92] SUBSUBSUBSUBSUBPROCESS(1) equal as4_t_selected_doa_bins[0] as4_t_selected_doa_bins[1];
[93] SUBSUBSUBSUBSUBPROCESS(1) equal afl_a_selected_doa_powers[0] afl_a_selected_doa_powers[1];
[94] SUBSUBSUBSUBSUBPROCESS(1) equal as4_t_selected_doa_bins[1] 0;
[95] SUBSUBSUBSUBSUBPROCESS(1) equal afl_a_selected_doa_powers[1] 0.0F;
[96] SUBSUBSUBSUBPROCESS(2) proc s4_t_tmp_doa_num--; 
[97] MAINPROCESS(6) else else 
[98] MAINPROCESS(6) subproc SUBPROCESS(1) 
[99] SUBPROCESS(1) func<start> s4_t_wave_num = s4_calc_spec_music_4ch_all( 
[100] SUBPROCESS(1) func afl_a_Ryy[s4_a_focus_bin], 
[101] SUBPROCESS(1) func afl_t_spec_doa, 
[102] SUBPROCESS(1) func 2, 
[103] SUBPROCESS(1) func s4_a_flg_updn 
[104] SUBPROCESS(1) func<end> ); 
[105] SUBPROCESS(1) func<start> *ps4_a_doa_num = s4_search_peak_music( 
[106] SUBPROCESS(1) func (const FL *)afl_t_spec_doa, 
[107] SUBPROCESS(1) func as4_t_selected_doa_bins, 
[108] SUBPROCESS(1) func afl_a_selected_doa_powers, 
[109] SUBPROCESS(1) func s4_t_wave_num 
[110] SUBPROCESS(1) func<end> ); 
[111] SUBPROCESS(1) for for( 
[112] SUBPROCESS(1) for s4_t_lp_k=0; 
[113] SUBPROCESS(1) for s4_t_lp_k<2; 
[114] SUBPROCESS(1) for s4_t_lp_k++ 
[115] SUBPROCESS(1) for ) 
[116] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[117] SUBSUBPROCESS(1) if if( 
[118] SUBSUBPROCESS(1) if as4_t_selected_doa_bins[s4_t_lp_k]>0 
[119] SUBSUBPROCESS(1) if ) 
[120] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[121] SUBSUBSUBPROCESS(1) func<start> afl_a_selected_doa_powers[s4_t_lp_k] = fl_calc_spec_bf_4ch_fm_of_specified_doa( 
[122] SUBSUBSUBPROCESS(1) func afl_a_Ryy[s4_a_focus_bin], 
[123] SUBSUBSUBPROCESS(1) func s4_a_flg_updn, 
[124] SUBSUBSUBPROCESS(1) func s4_a_focus_bin, 
[125] SUBSUBSUBPROCESS(1) func as4_t_selected_doa_bins[s4_t_lp_k] 
[126] SUBSUBSUBPROCESS(1) func<end> ); 
[127] MAINPROCESS(7) for for( 
[128] MAINPROCESS(7) for s4_t_lp_k=0; 
[129] MAINPROCESS(7) for s4_t_lp_k<2; 
[130] MAINPROCESS(7) for s4_t_lp_k++ 
[131] MAINPROCESS(7) for ) 
[132] MAINPROCESS(7) subproc SUBPROCESS(1) 
[133] SUBPROCESS(1) if if( 
[134] SUBPROCESS(1) if as4_t_selected_doa_bins[s4_t_lp_k]>0 
[135] SUBPROCESS(1) if ) 
[136] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[137] SUBSUBPROCESS(1) func<start> afl_a_selected_doa_bins_intpl[s4_t_lp_k] = fl_interpolate_music_peak( 
[138] SUBSUBPROCESS(1) func (const FL *)afl_t_spec_doa, 
[139] SUBSUBPROCESS(1) func as4_t_selected_doa_bins[s4_t_lp_k], 
[140] SUBSUBPROCESS(1) func (const FL *)FL_BSM_FLSH_YOMIKAE_TBL_FM 
[141] SUBSUBPROCESS(1) func<end> ); 
[142] SUBSUBPROCESS(1) func<start> afl_a_selected_bins_intpl[s4_t_lp_k] = fl_interpolate_freq_peak( 
[143] SUBSUBPROCESS(1) func (const FL *)afl_a_power, 
[144] SUBSUBPROCESS(1) func s4_a_focus_bin 
[145] SUBSUBPROCESS(1) func<end> ); 
[146] MAINPROCESS(8) func<start> fn_cmn_shareMUSIC_set_finished_music_data_main( 
[147] MAINPROCESS(8) func  (U1)s4_a_flg_updn, 
[148] MAINPROCESS(8) func (U1)*ps4_a_doa_num, 
[149] MAINPROCESS(8) func (U2)s4_a_focus_bin, 
[150] MAINPROCESS(8) func afl_a_selected_bins_intpl[0], 
[151] MAINPROCESS(8) func afl_a_selected_doa_bins_intpl, 
[152] MAINPROCESS(8) func afl_a_selected_doa_powers 
[153] MAINPROCESS(8) func<end> ); 
[154] MAINPROCESS(8) if  if ( 
[155] MAINPROCESS(8) if  (s4_a_focus_bin > (s4_a_exceptional_bin - ROAD_REF_FREQ_BIN_RANGE) 
[156] MAINPROCESS(8) if  ) 
[157] MAINPROCESS(8) if  && (s4_a_focus_bin < (s4_a_exceptional_bin + ROAD_REF_FREQ_BIN_RANGE) 
[158] MAINPROCESS(8) if  ) 
[159] MAINPROCESS(8) if  ) 
[160] MAINPROCESS(8) subproc SUBPROCESS(1) 
[161] SUBPROCESS(1) for  for ( 
[162] SUBPROCESS(1) for  s4_t_lp_i = 0; 
[163] SUBPROCESS(1) for  s4_t_lp_i < 2; 
[164] SUBPROCESS(1) for  s4_t_lp_i++ 
[165] SUBPROCESS(1) for  ) 
[166] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[167] SUBSUBPROCESS(1) if  if ( 
[168] SUBSUBPROCESS(1) if  (afl_a_selected_doa_bins_intpl[s4_t_lp_i] > ((((FL)N_DOA * 0.5F) - st_g_bsm_loop_data.afl_installed_angle[0]) - (FL)ROAD_REF_DOA_BIN_RANGE) 
[169] SUBSUBPROCESS(1) if  ) 
[170] SUBSUBPROCESS(1) if  && (afl_a_selected_doa_bins_intpl[s4_t_lp_i] < ((((FL)N_DOA * 0.5F) - st_g_bsm_loop_data.afl_installed_angle[0]) + (FL)ROAD_REF_DOA_BIN_RANGE) 
[171] SUBSUBPROCESS(1) if  ) 
[172] SUBSUBPROCESS(1) if  && (fl_a_focus_doa_bin_intpl > ((((FL)N_DOA * 0.5F) - st_g_bsm_loop_data.afl_installed_angle[0]) + (FL)ROAD_REF_DOA_BIN_RANGE) 
[173] SUBSUBPROCESS(1) if  ) 
[174] SUBSUBPROCESS(1) if  ) 
[175] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[176] SUBSUBSUBPROCESS(1) equal *ps4_a_doa_num 1;
[177] SUBSUBSUBPROCESS(1) equal afl_a_selected_doa_bins_intpl[0] fl_a_focus_doa_bin_intpl;
[178] SUBSUBSUBPROCESS(1) equal afl_a_selected_doa_bins_intpl[1] 0;
[179] SUBSUBSUBPROCESS(1) equal afl_a_selected_doa_powers[0] fl_a_focus_power;
[180] SUBSUBSUBPROCESS(1) equal afl_a_selected_doa_powers[1] 0.0F;
[181] MAINPROCESS(9) return return; 
----------------- Total Codes : 181 lines
--------------------------
[Function Name] : fn_bsm_prior_store_doa 
-Return type : VD 
-Argument : 10 
     [0] : const FL   afl_a_focus_power[PRIOR_RANGE] 
     [1] : const S4   as4_a_doa_num[PRIOR_RANGE] 
     [2] : const FL   afl_a_selected_doa_bins_intpl[PRIOR_RANGE][2] 
     [3] : const FL   afl_a_selected_doa_powers[PRIOR_RANGE][2] 
     [4] : const FL   afl_a_selected_bins_intpl[PRIOR_RANGE][2] 
     [5] : S4   *ps4_a_doa_peak_num 
     [6] : FL   afl_a_peak_bins_intpl[PRIOR_RANGE][2] 
     [7] : FL   afl_a_peak_powers[PRIOR_RANGE][2] 
     [8] : FL   afl_a_peak_doa_bins_intpl[PRIOR_RANGE][2] 
     [9] : FL   afl_a_peak_doa_powers[PRIOR_RANGE][2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc S4 s4_t_iRet; 
[4] MAINPROCESS(1) proc U1 au1_t_copy[PRIOR_RANGE][2]; 
[5] MAINPROCESS(1) proc FL afl_t_peak_bins_intpl[PRIOR_RANGE][2]; 
[6] MAINPROCESS(1) proc FL afl_t_peak_powers[PRIOR_RANGE][2]; 
[7] MAINPROCESS(1) proc FL afl_t_peak_doa_bins_intpl[PRIOR_RANGE][2]; 
[8] MAINPROCESS(1) proc FL afl_t_peak_doa_powers[PRIOR_RANGE][2]; 
[9] MAINPROCESS(1) for  for ( 
[10] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[11] MAINPROCESS(1) for  s4_t_lp_i < PRIOR_RANGE; 
[12] MAINPROCESS(1) for  s4_t_lp_i++ 
[13] MAINPROCESS(1) for  ) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) for  for ( 
[16] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[17] SUBPROCESS(1) for  s4_t_lp_k < 2; 
[18] SUBPROCESS(1) for  s4_t_lp_k++ 
[19] SUBPROCESS(1) for  ) 
[20] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[21] SUBSUBPROCESS(1) equal au1_t_copy[s4_t_lp_i][s4_t_lp_k] CU1_DF_NG;
[22] SUBSUBPROCESS(1) equal afl_t_peak_bins_intpl[s4_t_lp_i][s4_t_lp_k] 0.0F;
[23] SUBSUBPROCESS(1) equal afl_t_peak_powers[s4_t_lp_i][s4_t_lp_k] 0.0F;
[24] SUBSUBPROCESS(1) equal afl_t_peak_doa_bins_intpl[s4_t_lp_i][s4_t_lp_k] 0.0F;
[25] SUBSUBPROCESS(1) equal afl_t_peak_doa_powers[s4_t_lp_i][s4_t_lp_k] 0.0F;
[26] MAINPROCESS(2) for  for ( 
[27] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[28] MAINPROCESS(2) for  s4_t_lp_i < PRIOR_RANGE; 
[29] MAINPROCESS(2) for  s4_t_lp_i++ 
[30] MAINPROCESS(2) for  ) 
[31] MAINPROCESS(2) subproc SUBPROCESS(1) 
[32] SUBPROCESS(1) for  for ( 
[33] SUBPROCESS(1) for  s4_t_lp_k = 0; 
[34] SUBPROCESS(1) for  s4_t_lp_k < as4_a_doa_num[s4_t_lp_i]; 
[35] SUBPROCESS(1) for  s4_t_lp_k++ 
[36] SUBPROCESS(1) for  ) 
[37] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[38] SUBSUBPROCESS(1) if  if ( 
[39] SUBSUBPROCESS(1) if  (afl_a_selected_doa_powers[s4_t_lp_i][s4_t_lp_k] > DOA_POW_THRESHOLD_BF 
[40] SUBSUBPROCESS(1) if  ) 
[41] SUBSUBPROCESS(1) if  && (afl_a_selected_doa_bins_intpl[s4_t_lp_i][s4_t_lp_k] < ((FL)N_DOA - st_g_bsm_loop_data.afl_installed_angle[0] - (FL)DOA_RANGE_FORWARD) 
[42] SUBSUBPROCESS(1) if  ) 
[43] SUBSUBPROCESS(1) if  ) 
[44] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[45] SUBSUBSUBPROCESS(1) equal au1_t_copy[s4_t_lp_i][s4_t_lp_k] CU1_DF_OK;
[46] SUBSUBSUBPROCESS(1) equal afl_t_peak_bins_intpl[s4_t_lp_i][s4_t_lp_k] afl_a_selected_bins_intpl[s4_t_lp_i][s4_t_lp_k];
[47] SUBSUBSUBPROCESS(1) equal afl_t_peak_powers[s4_t_lp_i][s4_t_lp_k] afl_a_focus_power[s4_t_lp_i];
[48] SUBSUBSUBPROCESS(1) equal afl_t_peak_doa_bins_intpl[s4_t_lp_i][s4_t_lp_k] afl_a_selected_doa_bins_intpl[s4_t_lp_i][s4_t_lp_k];
[49] SUBSUBSUBPROCESS(1) equal afl_t_peak_doa_powers[s4_t_lp_i][s4_t_lp_k] afl_a_selected_doa_powers[s4_t_lp_i][s4_t_lp_k];
[50] MAINPROCESS(3) equal s4_t_iRet 0;
[51] MAINPROCESS(3) for  for ( 
[52] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[53] MAINPROCESS(3) for  s4_t_lp_i < PRIOR_RANGE; 
[54] MAINPROCESS(3) for  s4_t_lp_i++ 
[55] MAINPROCESS(3) for  ) 
[56] MAINPROCESS(3) subproc SUBPROCESS(1) 
[57] SUBPROCESS(1) if  if ( 
[58] SUBPROCESS(1) if  au1_t_copy[s4_t_lp_i][0] == CU1_DF_OK 
[59] SUBPROCESS(1) if  ) 
[60] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[61] SUBSUBPROCESS(1) for  for ( 
[62] SUBSUBPROCESS(1) for  s4_t_lp_k = 0; 
[63] SUBSUBPROCESS(1) for  s4_t_lp_k < 2; 
[64] SUBSUBPROCESS(1) for  s4_t_lp_k++ 
[65] SUBSUBPROCESS(1) for  ) 
[66] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[67] SUBSUBSUBPROCESS(1) if if( 
[68] SUBSUBSUBPROCESS(1) if afl_t_peak_bins_intpl[s4_t_lp_i][s4_t_lp_k] != 0.0F 
[69] SUBSUBSUBPROCESS(1) if ) 
[70] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[71] SUBSUBSUBSUBPROCESS(1) equal afl_a_peak_bins_intpl[s4_t_iRet][s4_t_lp_k] afl_t_peak_bins_intpl[s4_t_lp_i][s4_t_lp_k];
[72] SUBSUBSUBSUBPROCESS(1) equal afl_a_peak_powers[s4_t_iRet][s4_t_lp_k] afl_t_peak_powers[s4_t_lp_i][s4_t_lp_k];
[73] SUBSUBSUBSUBPROCESS(1) equal afl_a_peak_doa_bins_intpl[s4_t_iRet][s4_t_lp_k] afl_t_peak_doa_bins_intpl[s4_t_lp_i][s4_t_lp_k];
[74] SUBSUBSUBSUBPROCESS(1) equal afl_a_peak_doa_powers[s4_t_iRet][s4_t_lp_k] afl_t_peak_doa_powers[s4_t_lp_i][s4_t_lp_k];
[75] SUBSUBPROCESS(2) proc s4_t_iRet++; 
[76] MAINPROCESS(4) return return; 
----------------- Total Codes : 76 lines
--------------------------
[Function Name] : fn_bsm_prior_estimate_doa_around_dc 
-Return type : static VD 
-Argument : 14 
     [0] : S4   s4_a_flg_updn 
     [1] : const FL   afl_a_Ryy[NB_FFT_PT][CORRE_SIZE_4CH] 
     [2] : const FL   afl_a_power[NB_FFT_PT] 
     [3] : S4   s4_a_focus_bin 
     [4] : S4   s4_a_bin_pred 
     [5] : FL   fl_a_bin_interpolate_pred 
     [6] : FL   fl_a_doa_interpolate_pred 
     [7] : FL   fl_a_power_music 
     [8] : S4   s4_a_bin_music_pred 
     [9] : S4   *ps4_a_doa_peak_num 
     [10] : FL   afl_a_peak_bins_intpl[PRIOR_RANGE][2] 
     [11] : FL   afl_a_peak_powers[PRIOR_RANGE][2] 
     [12] : FL   afl_a_peak_doa_bins_intpl[PRIOR_RANGE][2] 
     [13] : FL   afl_a_peak_doa_powers[PRIOR_RANGE][2] 
----- Codes -----
[1] MAINPROCESS(1) proc FL afl_t_doa_spec[N_DOA]; 
[2] MAINPROCESS(1) proc S4 s4_t_doa[1]; 
[3] MAINPROCESS(1) proc FL fl_t_peak_power[1]; 
[4] MAINPROCESS(1) proc U1 u1_t_lp_n_doa; 
[5] MAINPROCESS(1) for  for ( 
[6] MAINPROCESS(1) for  u1_t_lp_n_doa = (U1)0; 
[7] MAINPROCESS(1) for  u1_t_lp_n_doa < (U1)N_DOA; 
[8] MAINPROCESS(1) for  u1_t_lp_n_doa++ 
[9] MAINPROCESS(1) for  ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal afl_t_doa_spec[u1_t_lp_n_doa] (FL)0.0F;
[12] MAINPROCESS(2) equal s4_t_doa[0] (S4)0;
[13] MAINPROCESS(2) equal fl_t_peak_power[0] (FL)0.0F;
[14] MAINPROCESS(2) func<start> fn_calc_spec_bf_4ch_fm( 
[15] MAINPROCESS(2) func (const FL *)(afl_a_Ryy[s4_a_focus_bin]), 
[16] MAINPROCESS(2) func afl_t_doa_spec, 
[17] MAINPROCESS(2) func s4_a_flg_updn, 
[18] MAINPROCESS(2) func s4_a_focus_bin 
[19] MAINPROCESS(2) func<end> ); 
[20] MAINPROCESS(2) func<start> s4_search_peak_bf( 
[21] MAINPROCESS(2) func (const FL *)afl_t_doa_spec, 
[22] MAINPROCESS(2) func s4_t_doa, 
[23] MAINPROCESS(2) func fl_t_peak_power, 
[24] MAINPROCESS(2) func 1 
[25] MAINPROCESS(2) func<end> ); 
[26] MAINPROCESS(2) if  if ( 
[27] MAINPROCESS(2) if  (!( s4_abs(s4_t_doa[0] - (N_DOA-AXIS_DEFAULT)) < PRIOR_WALL_DOA_DIFF_TH ) 
[28] MAINPROCESS(2) if  ) 
[29] MAINPROCESS(2) if  &&  (s4_abs( s4_t_doa[0] - s4_a_bin_music_pred ) < DOA_DIFF_FM_SINGLEPEAK) 
[30] MAINPROCESS(2) if  ) 
[31] MAINPROCESS(2) subproc SUBPROCESS(1) 
[32] SUBPROCESS(1) equal *ps4_a_doa_peak_num 1;
[33] SUBPROCESS(1) equal afl_a_peak_bins_intpl[0][0] fl_a_bin_interpolate_pred;
[34] SUBPROCESS(1) equal afl_a_peak_powers[0][0] afl_a_power[s4_a_focus_bin];
[35] SUBPROCESS(1) equal afl_a_peak_doa_bins_intpl[0][0] fl_a_doa_interpolate_pred;
[36] SUBPROCESS(1) equal afl_a_peak_doa_powers[0][0] fl_t_peak_power[0];
[37] MAINPROCESS(3) return return; 
----------------- Total Codes : 37 lines
--------------------------
[Function Name] : u1_bsm_prior_make_pair 
-Return type : U1 
-Argument : 16 
     [0] : FL   fl_a_focus_doa_bin_intpl_up 
     [1] : FL   fl_a_focus_doa_bin_intpl_dn 
     [2] : FL   fl_a_power_up_music 
     [3] : FL   fl_a_power_dn_music 
     [4] : S4   s4_a_peak_num_prior_up 
     [5] : FL   afl_a_peak_bins_intpl_up[PRIOR_RANGE][2] 
     [6] : FL   afl_a_peak_powers_up[PRIOR_RANGE][2] 
     [7] : FL   afl_a_peak_doa_bins_intpl_up[PRIOR_RANGE][2] 
     [8] : FL   afl_a_peak_doa_powers_up[PRIOR_RANGE][2] 
     [9] : S4   s4_a_peak_num_prior_dn 
     [10] : FL   afl_a_peak_bins_intpl_dn[PRIOR_RANGE][2] 
     [11] : FL   afl_a_peak_powers_dn[PRIOR_RANGE][2] 
     [12] : FL   afl_a_peak_doa_bins_intpl_dn[PRIOR_RANGE][2] 
     [13] : FL   afl_a_peak_doa_powers_dn[PRIOR_RANGE][2] 
     [14] : S4   s4_a_normal_prior_num 
     [15] : NORMAL_BSM   *pst_a_normal_prior 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_make_pair_result; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[4] MAINPROCESS(1) proc S4 s4_t_shift; 
[5] MAINPROCESS(1) proc FL fl_t_buf_comp; 
[6] MAINPROCESS(1) proc S4 s4_t_index_up1; 
[7] MAINPROCESS(1) proc S4 s4_t_index_dn1; 
[8] MAINPROCESS(1) proc S4 s4_t_index_up2; 
[9] MAINPROCESS(1) proc S4 s4_t_index_dn2; 
[10] MAINPROCESS(1) proc U1 u1_t_jdg_a2_flg; 
[11] MAINPROCESS(1) proc U1 u1_t_jdg_a6_flg; 
[12] MAINPROCESS(1) proc U1 u1_t_jdg_a7_flg; 
[13] MAINPROCESS(1) proc U1 u1_t_jdg_a8_flg; 
[14] MAINPROCESS(1) proc S4 s4_t_doa_diff_predict; 
[15] MAINPROCESS(1) equal s4_t_index_up1 -1;
[16] MAINPROCESS(1) equal s4_t_index_dn1 -1;
[17] MAINPROCESS(1) equal s4_t_index_up2 -1;
[18] MAINPROCESS(1) equal s4_t_index_dn2 -1;
[19] MAINPROCESS(1) equal s4_t_doa_diff_predict (S4)DOA_DIFF_PREDICT;
[20] MAINPROCESS(1) if  if ( 
[21] MAINPROCESS(1) if  fl_g_v_self_bsm_for_base < (FL)CANOUT_VSELF_SLOW 
[22] MAINPROCESS(1) if  ) 
[23] MAINPROCESS(1) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) equal s4_t_doa_diff_predict (S4)DOA_DIFF_PREDICT - (S4)2;
[25] MAINPROCESS(2) if  if ( 
[26] MAINPROCESS(2) if  st_g_bsm_loop_data.s4_flg_alarm == (S4)1 
[27] MAINPROCESS(2) if  ) 
[28] MAINPROCESS(2) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) equal s4_t_doa_diff_predict (S4)DOA_DIFF_PREDICT + (S4)2;
[30] MAINPROCESS(3) equal fl_t_buf_comp 0.0F;
[31] MAINPROCESS(3) for  for ( 
[32] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[33] MAINPROCESS(3) for  s4_t_lp_i < s4_a_peak_num_prior_up; 
[34] MAINPROCESS(3) for  s4_t_lp_i++ 
[35] MAINPROCESS(3) for  ) 
[36] MAINPROCESS(3) subproc SUBPROCESS(1) 
[37] SUBPROCESS(1) for  for ( 
[38] SUBPROCESS(1) for  s4_t_lp_j = 0; 
[39] SUBPROCESS(1) for  s4_t_lp_j < 2; 
[40] SUBPROCESS(1) for  s4_t_lp_j++ 
[41] SUBPROCESS(1) for  ) 
[42] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[43] SUBSUBPROCESS(1) func<start> u1_t_jdg_a2_flg = u1_bsm_prior_make_pair_a2( 
[44] SUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_up[s4_t_lp_i][s4_t_lp_j], fl_a_focus_doa_bin_intpl_up, (FL)s4_t_doa_diff_predict 
[45] SUBSUBPROCESS(1) func<end> ); 
[46] SUBSUBPROCESS(1) if  if ( 
[47] SUBSUBPROCESS(1) if  (afl_a_peak_doa_bins_intpl_up[s4_t_lp_i][s4_t_lp_j] != 0.0F 
[48] SUBSUBPROCESS(1) if  ) 
[49] SUBSUBPROCESS(1) if  && (u1_t_jdg_a2_flg == CU1_TRUE 
[50] SUBSUBPROCESS(1) if  ) 
[51] SUBSUBPROCESS(1) if  && (afl_a_peak_doa_powers_up[s4_t_lp_i][s4_t_lp_j] > fl_t_buf_comp 
[52] SUBSUBPROCESS(1) if  ) 
[53] SUBSUBPROCESS(1) if  ) 
[54] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[55] SUBSUBSUBPROCESS(1) equal fl_t_buf_comp afl_a_peak_doa_powers_up[s4_t_lp_i][s4_t_lp_j];
[56] SUBSUBSUBPROCESS(1) equal s4_t_index_up1 s4_t_lp_i;
[57] SUBSUBSUBPROCESS(1) equal s4_t_index_up2 s4_t_lp_j;
[58] MAINPROCESS(4) if  if ( 
[59] MAINPROCESS(4) if  (s4_t_index_up1 >= (S4)0 
[60] MAINPROCESS(4) if  ) 
[61] MAINPROCESS(4) if  &&  (s4_t_index_up2 >= (S4)0) 
[62] MAINPROCESS(4) if  ) 
[63] MAINPROCESS(4) subproc SUBPROCESS(1) 
[64] SUBPROCESS(1) if  if ( 
[65] SUBPROCESS(1) if  (afl_a_peak_powers_up[s4_t_index_up1][s4_t_index_up2] < (FL)50.0F 
[66] SUBPROCESS(1) if  ) 
[67] SUBPROCESS(1) if  &&  (!(st_g_bsm_loop_data.s4_flg_alarm == (U1)1)) 
[68] SUBPROCESS(1) if  ) 
[69] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[70] SUBSUBPROCESS(1) equal s4_t_index_up1 (S4)-1;
[71] SUBSUBPROCESS(1) equal s4_t_index_up2 (S4)-1;
[72] MAINPROCESS(5) else else 
[73] MAINPROCESS(5) subproc SUBPROCESS(1) 
[74] SUBPROCESS(1) if  if ( 
[75] SUBPROCESS(1) if  !(st_g_bsm_loop_data.s4_flg_alarm == (U1)1) 
[76] SUBPROCESS(1) if  ) 
[77] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[78] SUBSUBPROCESS(1) equal s4_t_index_up1 (S4)-1;
[79] SUBSUBPROCESS(1) equal s4_t_index_up2 (S4)-1;
[80] MAINPROCESS(6) equal fl_t_buf_comp 0.0F;
[81] MAINPROCESS(6) for  for ( 
[82] MAINPROCESS(6) for  s4_t_lp_i = 0; 
[83] MAINPROCESS(6) for  s4_t_lp_i < s4_a_peak_num_prior_dn; 
[84] MAINPROCESS(6) for  s4_t_lp_i++ 
[85] MAINPROCESS(6) for  ) 
[86] MAINPROCESS(6) subproc SUBPROCESS(1) 
[87] SUBPROCESS(1) for  for ( 
[88] SUBPROCESS(1) for  s4_t_lp_j = 0; 
[89] SUBPROCESS(1) for  s4_t_lp_j < 2; 
[90] SUBPROCESS(1) for  s4_t_lp_j++ 
[91] SUBPROCESS(1) for  ) 
[92] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[93] SUBSUBPROCESS(1) func<start> u1_t_jdg_a2_flg = u1_bsm_prior_make_pair_a2( 
[94] SUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_dn[s4_t_lp_i][s4_t_lp_j], fl_a_focus_doa_bin_intpl_dn, (FL)s4_t_doa_diff_predict 
[95] SUBSUBPROCESS(1) func<end> ); 
[96] SUBSUBPROCESS(1) if  if ( 
[97] SUBSUBPROCESS(1) if  (afl_a_peak_doa_bins_intpl_dn[s4_t_lp_i][s4_t_lp_j] != 0.0F 
[98] SUBSUBPROCESS(1) if  ) 
[99] SUBSUBPROCESS(1) if  && (fl_t_buf_comp < afl_a_peak_doa_powers_dn[s4_t_lp_i][s4_t_lp_j] 
[100] SUBSUBPROCESS(1) if  ) 
[101] SUBSUBPROCESS(1) if  && (u1_t_jdg_a2_flg == CU1_TRUE 
[102] SUBSUBPROCESS(1) if  ) 
[103] SUBSUBPROCESS(1) if  ) 
[104] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[105] SUBSUBSUBPROCESS(1) equal fl_t_buf_comp afl_a_peak_doa_powers_dn[s4_t_lp_i][s4_t_lp_j];
[106] SUBSUBSUBPROCESS(1) equal s4_t_index_dn1 s4_t_lp_i;
[107] SUBSUBSUBPROCESS(1) equal s4_t_index_dn2 s4_t_lp_j;
[108] MAINPROCESS(7) if  if ( 
[109] MAINPROCESS(7) if  (s4_t_index_dn1 >= (S4)0 
[110] MAINPROCESS(7) if  ) 
[111] MAINPROCESS(7) if  &&  (s4_t_index_dn2 >= (S4)0) 
[112] MAINPROCESS(7) if  ) 
[113] MAINPROCESS(7) subproc SUBPROCESS(1) 
[114] SUBPROCESS(1) if  if ( 
[115] SUBPROCESS(1) if  (afl_a_peak_powers_dn[s4_t_index_dn1][s4_t_index_dn2] < (FL)50.0F 
[116] SUBPROCESS(1) if  ) 
[117] SUBPROCESS(1) if  &&  (!(st_g_bsm_loop_data.s4_flg_alarm == (U1)1)) 
[118] SUBPROCESS(1) if  ) 
[119] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[120] SUBSUBPROCESS(1) equal s4_t_index_dn1 (S4)-1;
[121] SUBSUBPROCESS(1) equal s4_t_index_dn2 (S4)-1;
[122] MAINPROCESS(8) else else 
[123] MAINPROCESS(8) subproc SUBPROCESS(1) 
[124] SUBPROCESS(1) if  if ( 
[125] SUBPROCESS(1) if  !(st_g_bsm_loop_data.s4_flg_alarm == (U1)1) 
[126] SUBPROCESS(1) if  ) 
[127] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[128] SUBSUBPROCESS(1) equal s4_t_index_dn1 (S4)-1;
[129] SUBSUBPROCESS(1) equal s4_t_index_dn2 (S4)-1;
[130] MAINPROCESS(9) equal u1_make_pair_result CU1_FALSE;
[131] MAINPROCESS(9) equal<start> s4_t_shift = ( 
[132] MAINPROCESS(9) equal S4)((fl_g_v_self_bsm_for_base / 3.60F / VCOF) + 0.50F 
[133] MAINPROCESS(9) equal<end> ); 
[134] MAINPROCESS(9) if  if ( 
[135] MAINPROCESS(9) if  (s4_t_index_up1 >= 0 
[136] MAINPROCESS(9) if  ) 
[137] MAINPROCESS(9) if  &&  (s4_t_index_up2 >= 0 
[138] MAINPROCESS(9) if  ) 
[139] MAINPROCESS(9) if  &&  (s4_t_index_dn1 >= 0 
[140] MAINPROCESS(9) if  ) 
[141] MAINPROCESS(9) if  &&  (s4_t_index_dn2 >= 0) 
[142] MAINPROCESS(9) if  ) 
[143] MAINPROCESS(9) subproc SUBPROCESS(1) 
[144] SUBPROCESS(1) func<start> u1_t_jdg_a6_flg = u1_bsm_prior_make_pair_a6( 
[145] SUBPROCESS(1) func afl_a_peak_doa_powers_up[s4_t_index_up1][s4_t_index_up2], fl_a_power_up_music 
[146] SUBPROCESS(1) func<end> ); 
[147] SUBPROCESS(1) func<start> u1_t_jdg_a7_flg = u1_bsm_prior_make_pair_a7( 
[148] SUBPROCESS(1) func afl_a_peak_doa_powers_dn[s4_t_index_dn1][s4_t_index_dn2], fl_a_power_dn_music 
[149] SUBPROCESS(1) func<end> ); 
[150] SUBPROCESS(1) func<start> u1_t_jdg_a8_flg = u1_bsm_prior_make_pair_a8( 
[151] SUBPROCESS(1) func afl_a_peak_bins_intpl_up[s4_t_index_up1][s4_t_index_up2], afl_a_peak_bins_intpl_dn[s4_t_index_dn1][s4_t_index_dn2] 
[152] SUBPROCESS(1) func<end> ); 
[153] SUBPROCESS(1) if  if ( 
[154] SUBPROCESS(1) if  ((afl_a_peak_bins_intpl_up[s4_t_index_up1][s4_t_index_up2] - afl_a_peak_bins_intpl_dn[s4_t_index_dn1][s4_t_index_dn2])  < (FL)(s4_t_shift - 3) 
[155] SUBPROCESS(1) if  ) 
[156] SUBPROCESS(1) if  &&  (u1_t_jdg_a6_flg == CU1_TRUE 
[157] SUBPROCESS(1) if  ) 
[158] SUBPROCESS(1) if  &&  (u1_t_jdg_a7_flg == CU1_TRUE) 
[159] SUBPROCESS(1) if  ) 
[160] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[161] SUBSUBPROCESS(1) equal S4 s4_t_doa_diff_up_down (S4)CU1_DOA_DIFF_UP_DOWN_PRIOR;
[162] SUBSUBPROCESS(1) if  if ( 
[163] SUBSUBPROCESS(1) if  (fl_g_v_self_bsm_for_base < CANOUT_VSELF_SLOW 
[164] SUBSUBPROCESS(1) if  ) 
[165] SUBSUBPROCESS(1) if  &&  (u1_t_jdg_a8_flg == CU1_TRUE) 
[166] SUBSUBPROCESS(1) if  ) 
[167] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[168] SUBSUBSUBPROCESS(1) equal s4_t_doa_diff_up_down DOA_DIFF_UP_DOWN_SLOW;
[169] SUBSUBPROCESS(2) if  if ( 
[170] SUBSUBPROCESS(2) if  st_g_bsm_loop_data.u1_truck_flg != (U1)0 
[171] SUBSUBPROCESS(2) if  ) 
[172] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[173] SUBSUBSUBPROCESS(1) equal s4_t_doa_diff_up_down + (S4)2;
[174] SUBSUBPROCESS(3) if  if ( 
[175] SUBSUBPROCESS(3) if  (s4_a_normal_prior_num < (S4)PRIOR_BUFFSIZE 
[176] SUBSUBPROCESS(3) if  ) 
[177] SUBSUBPROCESS(3) if  &&  (s4_abs((S4)(afl_a_peak_doa_bins_intpl_up[s4_t_index_up1][s4_t_index_up2] - afl_a_peak_doa_bins_intpl_dn[s4_t_index_dn1][s4_t_index_dn2])) < s4_t_doa_diff_up_down) 
[178] SUBSUBPROCESS(3) if  ) 
[179] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[180] SUBSUBSUBPROCESS(1) func<start> fn_set_normal_data( 
[181] SUBSUBSUBPROCESS(1) func pst_a_normal_prior, 
[182] SUBSUBSUBPROCESS(1) func afl_a_peak_bins_intpl_up[s4_t_index_up1][s4_t_index_up2], 
[183] SUBSUBSUBPROCESS(1) func afl_a_peak_bins_intpl_dn[s4_t_index_dn1][s4_t_index_dn2], 
[184] SUBSUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_up[s4_t_index_up1][s4_t_index_up2], 
[185] SUBSUBSUBPROCESS(1) func afl_a_peak_doa_bins_intpl_dn[s4_t_index_dn1][s4_t_index_dn2], 
[186] SUBSUBSUBPROCESS(1) func afl_a_peak_powers_up[s4_t_index_up1][s4_t_index_up2], 
[187] SUBSUBSUBPROCESS(1) func afl_a_peak_powers_dn[s4_t_index_dn1][s4_t_index_dn2], 
[188] SUBSUBSUBPROCESS(1) func afl_a_peak_doa_powers_up[s4_t_index_up1][s4_t_index_up2], 
[189] SUBSUBSUBPROCESS(1) func afl_a_peak_doa_powers_dn[s4_t_index_dn1][s4_t_index_dn2], 
[190] SUBSUBSUBPROCESS(1) func 0, 
[191] SUBSUBSUBPROCESS(1) func 0 
[192] SUBSUBSUBPROCESS(1) func<end> ); 
[193] SUBSUBSUBPROCESS(1) equal u1_make_pair_result CU1_TRUE;
[194] MAINPROCESS(10) func<start> return ( 
[195] MAINPROCESS(10) func u1_make_pair_result 
[196] MAINPROCESS(10) func<end> ); 
----------------- Total Codes : 196 lines
--------------------------
[Function Name] : u1_bsm_prior_make_pair_a2 
-Return type : static U1 
-Argument : 3 
     [0] : FL   fl_a_peak_doa_bins_intpl 
     [1] : FL   fl_a_focus_doa_bin_intpl 
     [2] : FL   fl_a_doa_diff_predict 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_a2_flag; 
[2] MAINPROCESS(1) proc FL fl_t_diff_doa_bin_intpl_abs; 
[3] MAINPROCESS(1) equal u1_t_jdg_a2_flag CU1_FALSE;
[4] MAINPROCESS(1) func<start> fl_t_diff_doa_bin_intpl_abs = fl_abs( 
[5] MAINPROCESS(1) func fl_a_peak_doa_bins_intpl - fl_a_focus_doa_bin_intpl 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) if  if ( 
[8] MAINPROCESS(1) if  fl_t_diff_doa_bin_intpl_abs < fl_a_doa_diff_predict 
[9] MAINPROCESS(1) if  ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal u1_t_jdg_a2_flag CU1_TRUE;
[12] MAINPROCESS(2) else else 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal u1_t_jdg_a2_flag CU1_FALSE;
[15] MAINPROCESS(3) proc return u1_t_jdg_a2_flag; 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : u1_bsm_prior_make_pair_a6 
-Return type : static U1 
-Argument : 2 
     [0] : FL   fl_a_peak_doa_powers_up 
     [1] : FL   fl_a_power_up_music 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_a6_flag; 
[2] MAINPROCESS(1) proc FL fl_t_diff_doa_power_up_abs; 
[3] MAINPROCESS(1) equal u1_t_jdg_a6_flag CU1_FALSE;
[4] MAINPROCESS(1) func<start> fl_t_diff_doa_power_up_abs = fl_abs( 
[5] MAINPROCESS(1) func fl_a_peak_doa_powers_up - fl_a_power_up_music 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) if  if ( 
[8] MAINPROCESS(1) if  fl_t_diff_doa_power_up_abs < PRIOR_PEAK_POW_DIFF_TH 
[9] MAINPROCESS(1) if  ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal u1_t_jdg_a6_flag CU1_TRUE;
[12] MAINPROCESS(2) else else 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal u1_t_jdg_a6_flag CU1_FALSE;
[15] MAINPROCESS(3) proc return u1_t_jdg_a6_flag; 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : u1_bsm_prior_make_pair_a7 
-Return type : static U1 
-Argument : 2 
     [0] : FL   fl_a_peak_doa_powers_dn 
     [1] : FL   fl_a_power_dn_music 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_a7_flag; 
[2] MAINPROCESS(1) proc FL fl_t_diff_doa_power_dn_abs; 
[3] MAINPROCESS(1) equal u1_t_jdg_a7_flag CU1_FALSE;
[4] MAINPROCESS(1) func<start> fl_t_diff_doa_power_dn_abs = fl_abs( 
[5] MAINPROCESS(1) func fl_a_peak_doa_powers_dn - fl_a_power_dn_music 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) if  if ( 
[8] MAINPROCESS(1) if  fl_t_diff_doa_power_dn_abs < PRIOR_PEAK_POW_DIFF_TH 
[9] MAINPROCESS(1) if  ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal u1_t_jdg_a7_flag CU1_TRUE;
[12] MAINPROCESS(2) else else 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal u1_t_jdg_a7_flag CU1_FALSE;
[15] MAINPROCESS(3) proc return u1_t_jdg_a7_flag; 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : u1_bsm_prior_make_pair_a8 
-Return type : static U1 
-Argument : 2 
     [0] : FL   fl_a_peak_bins_intpl_up 
     [1] : FL   fl_a_peak_bins_intpl_dn 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_a8_flag; 
[2] MAINPROCESS(1) proc FL fl_t_diff_peak_bin_intpl_abs; 
[3] MAINPROCESS(1) equal u1_t_jdg_a8_flag CU1_FALSE;
[4] MAINPROCESS(1) func<start> fl_t_diff_peak_bin_intpl_abs = fl_abs( 
[5] MAINPROCESS(1) func fl_a_peak_bins_intpl_up - fl_a_peak_bins_intpl_dn 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) if  if ( 
[8] MAINPROCESS(1) if  fl_t_diff_peak_bin_intpl_abs > (FL)1.0F 
[9] MAINPROCESS(1) if  ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal u1_t_jdg_a8_flag CU1_TRUE;
[12] MAINPROCESS(2) else else 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal u1_t_jdg_a8_flag CU1_FALSE;
[15] MAINPROCESS(3) proc return u1_t_jdg_a8_flag; 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_bsm_prior_delete_same_object 
-Return type : VD 
-Argument : 4 
     [0] : const S4   as4_a_prev_index[PRIOR_BUFFSIZE] 
     [1] : S4   s4_a_pair_num_prior 
     [2] : NORMAL_BSM   ast_a_normal[PRIOR_BUFFSIZE] 
     [3] : const NORMAL_BSM   ast_a_ast_normal_copy[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) proc FL fl_t_buf_comp; 
[4] MAINPROCESS(1) proc FL fl_t_rx_diff; 
[5] MAINPROCESS(1) proc FL fl_t_ry_diff; 
[6] MAINPROCESS(1) proc FL fl_t_vx_diff; 
[7] MAINPROCESS(1) proc FL fl_t_vy_diff; 
[8] MAINPROCESS(1) equal fl_t_buf_comp 120.0F * 4;
[9] MAINPROCESS(1) equal fl_t_rx_diff CFL_UNKNOWN_VALUE;
[10] MAINPROCESS(1) equal fl_t_ry_diff CFL_UNKNOWN_VALUE;
[11] MAINPROCESS(1) equal fl_t_vx_diff CFL_UNKNOWN_VALUE;
[12] MAINPROCESS(1) equal fl_t_vy_diff CFL_UNKNOWN_VALUE;
[13] MAINPROCESS(1) for  for ( 
[14] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[15] MAINPROCESS(1) for  s4_t_lp_i < s4_a_pair_num_prior; 
[16] MAINPROCESS(1) for  s4_t_lp_i++ 
[17] MAINPROCESS(1) for  ) 
[18] MAINPROCESS(1) subproc SUBPROCESS(1) 
[19] SUBPROCESS(1) for  for ( 
[20] SUBPROCESS(1) for  s4_t_lp_j = 0; 
[21] SUBPROCESS(1) for  s4_t_lp_j < s4_a_pair_num_prior; 
[22] SUBPROCESS(1) for  s4_t_lp_j++ 
[23] SUBPROCESS(1) for  ) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(1) if  if ( 
[26] SUBSUBPROCESS(1) if  (s4_t_lp_i != s4_t_lp_j 
[27] SUBSUBPROCESS(1) if  ) 
[28] SUBSUBPROCESS(1) if  && (ast_a_normal[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[29] SUBSUBPROCESS(1) if  ) 
[30] SUBSUBPROCESS(1) if  && (ast_a_normal[s4_t_lp_j].fl_Robs != CFL_UNKNOWN_VALUE 
[31] SUBSUBPROCESS(1) if  ) 
[32] SUBSUBPROCESS(1) if  && ((ast_a_normal[s4_t_lp_i].s4_bin_up - ast_a_normal[s4_t_lp_j].s4_bin_up) == 0 
[33] SUBSUBPROCESS(1) if  ) 
[34] SUBSUBPROCESS(1) if  && ((ast_a_normal[s4_t_lp_i].s4_bin_dn - ast_a_normal[s4_t_lp_j].s4_bin_dn) == 0 
[35] SUBSUBPROCESS(1) if  ) 
[36] SUBSUBPROCESS(1) if  ) 
[37] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBPROCESS(1) func<start> fl_t_rx_diff = fl_abs( 
[39] SUBSUBSUBPROCESS(1) func ast_a_normal[s4_t_lp_i].fl_Rxobs - ast_a_ast_normal_copy[as4_a_prev_index[s4_t_lp_i]].fl_Rxpred 
[40] SUBSUBSUBPROCESS(1) func<end> ); 
[41] SUBSUBSUBPROCESS(1) func<start> fl_t_ry_diff = fl_abs( 
[42] SUBSUBSUBPROCESS(1) func ast_a_normal[s4_t_lp_i].fl_Ryobs - ast_a_ast_normal_copy[as4_a_prev_index[s4_t_lp_i]].fl_Rypred 
[43] SUBSUBSUBPROCESS(1) func<end> ); 
[44] SUBSUBSUBPROCESS(1) func<start> fl_t_vx_diff = fl_abs( 
[45] SUBSUBSUBPROCESS(1) func ast_a_normal[s4_t_lp_i].fl_Vxobs - ast_a_ast_normal_copy[as4_a_prev_index[s4_t_lp_i]].fl_Vxpred 
[46] SUBSUBSUBPROCESS(1) func<end> ); 
[47] SUBSUBSUBPROCESS(1) func<start> fl_t_vy_diff = fl_abs( 
[48] SUBSUBSUBPROCESS(1) func ast_a_normal[s4_t_lp_i].fl_Vyobs - ast_a_ast_normal_copy[as4_a_prev_index[s4_t_lp_i]].fl_Vypred 
[49] SUBSUBSUBPROCESS(1) func<end> ); 
[50] SUBSUBSUBPROCESS(1) if  if ( 
[51] SUBSUBSUBPROCESS(1) if  fl_t_buf_comp > (fl_t_rx_diff + fl_t_ry_diff + fl_t_vx_diff + fl_t_vy_diff) 
[52] SUBSUBSUBPROCESS(1) if  ) 
[53] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[54] SUBSUBSUBSUBPROCESS(1) equal fl_t_buf_comp fl_t_rx_diff + fl_t_ry_diff + fl_t_vx_diff + fl_t_vy_diff;
[55] SUBSUBSUBPROCESS(2) else else 
[56] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[57] SUBSUBSUBSUBPROCESS(1) func<start> fn_init( 
[58] SUBSUBSUBSUBPROCESS(1) func &ast_a_normal[s4_t_lp_i], 1 
[59] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[60] MAINPROCESS(2) return return; 
----------------- Total Codes : 60 lines
--------------------------
[Function Name] : fn_bsm_prior_set_object 
-Return type : VD 
-Argument : 4 
     [0] : S4   *ps4_a_pair_num_prior 
     [1] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
     [2] : S4   s4_a_buf_normal_num 
     [3] : const NORMAL_BSM   ast_a_buf_normal[PRIOR_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_pair_num_prior; 
[3] MAINPROCESS(1) equal s4_t_pair_num_prior 0;
[4] MAINPROCESS(1) for  for ( 
[5] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[6] MAINPROCESS(1) for  s4_t_lp_i < s4_a_buf_normal_num; 
[7] MAINPROCESS(1) for  s4_t_lp_i++ 
[8] MAINPROCESS(1) for  ) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if  if ( 
[11] SUBPROCESS(1) if  ast_a_buf_normal[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[12] SUBPROCESS(1) if  ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) equal ast_a_normal_prior[s4_t_pair_num_prior] ast_a_buf_normal[s4_t_lp_i];
[15] SUBSUBPROCESS(1) equal ast_a_normal_prior[s4_t_pair_num_prior].s4_flg_dc OBJECT_TYPE_PRIOR;
[16] SUBSUBPROCESS(1) proc s4_t_pair_num_prior++; 
[17] MAINPROCESS(2) return return; 
----------------- Total Codes : 17 lines
