Total lines: 266 
Total functions : 2 
--------------------------
[Function Name] : init_btt_configuration_parameter_dummy 
-Return type : VD 
-Argument : 4 
     [0] : BSM_STANDARD   *pst_a_bsm_alertarea_for_test 
     [1] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [2] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [3] : BTT_HITCH_ANGLE   *pst_a_hitch_angle 
----- Codes -----
[1] MAINPROCESS(1) func<start> miki0 = main( 
[2] MAINPROCESS(1) func arg0_1, 
[3] MAINPROCESS(1) func arg0_2, 
[4] MAINPROCESS(1) func (S1)arg0_3 
[5] MAINPROCESS(1) func<end> ); 
[6] MAINPROCESS(1) if<start> if( 
[7] MAINPROCESS(1) if st_g_btt_stat.BTT_initialized == BTT_RET_t.Init_Stat.INITIALIZED 
[8] MAINPROCESS(1) if ) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
	[10] SUBPROCESS(1) proc return; 
[11] MAINPROCESS(2) if<start> if( 
[12] MAINPROCESS(2) if miki==test 
[13] MAINPROCESS(2) if ) 
[14] MAINPROCESS(2) subproc SUBPROCESS(1) 
	[15] SUBPROCESS(1) equal miki done;
	[16] SUBPROCESS(1) proc hogehoge; 
	[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
		[18] SUBSUBPROCESS(1) equal miki next;
[19] MAINPROCESS(3) else<start> else 
[20] MAINPROCESS(3) subproc SUBPROCESS(1) 
	[21] SUBPROCESS(1) ??? miki = ELSETEST 
[22] MAINPROCESS(4) ??? if( 
[23] MAINPROCESS(4) ??? miki==test 
[24] MAINPROCESS(4) ??? && miki==debug 
[25] MAINPROCESS(4) ??? ) 
[26] MAINPROCESS(4) subproc SUBPROCESS(1) 
	[27] SUBPROCESS(1) equal miki1_1 sub;
	[28] SUBPROCESS(1) func<start> miki1_3( 
	[29] SUBPROCESS(1) func<end> ); 
	[30] SUBPROCESS(1) func<start> miki1_4((S1)arg1_1 
	[31] SUBPROCESS(1) func<end> ); 
	[32] SUBPROCESS(1) ??? if( 
	[33] SUBPROCESS(1) ??? hogehoge1 
	[34] SUBPROCESS(1) ??? ) 
	[35] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
		[36] SUBSUBPROCESS(1) func<start> miki2_1 = subsub_1( 
		[37] SUBSUBPROCESS(1) func (S1)arg2_1_1, 
		[38] SUBSUBPROCESS(1) func arg2_1_2 
		[39] SUBSUBPROCESS(1) func<end> ); 
		[40] SUBSUBPROCESS(1) ??? miki2_2 
		[41] SUBSUBPROCESS(1) func<start> = subsub_2( 
		[42] SUBSUBPROCESS(1) func (S1)arg2_2_1, 
		[43] SUBSUBPROCESS(1) func arg2_2_2 
		[44] SUBSUBPROCESS(1) func<end> ); 
		[45] SUBSUBPROCESS(1) ??? for( 
		[46] SUBSUBPROCESS(1) ??? i=0 
		[47] SUBSUBPROCESS(1) ??? i<hogehoge2; 
		[48] SUBSUBPROCESS(1) ??? i++ 
		[49] SUBSUBPROCESS(1) ??? ) 
		[50] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
			[51] SUBSUBSUBPROCESS(1) func<start> miki3 = (S1)subsubsub(arg3_1,arg3_2,arg3_3 
			[52] SUBSUBSUBPROCESS(1) func<end> ); 
			[53] SUBSUBSUBPROCESS(1) ??? while( 
			[54] SUBSUBSUBPROCESS(1) ??? hogehoge3_1 
			[55] SUBSUBSUBPROCESS(1) ??? ) 
			[56] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
				[57] SUBSUBSUBSUBPROCESS(1) func<start> miki4_1 = subsubsubsub((S1)arg4_1,(S2)arg4_2,(S3)arg4_3 
				[58] SUBSUBSUBSUBPROCESS(1) func<end> ); 
				[59] SUBSUBSUBSUBPROCESS(1) ??? if( 
				[60] SUBSUBSUBSUBPROCESS(1) ??? hogehoge4_1 
				[61] SUBSUBSUBSUBPROCESS(1) ??? ) 
					[62] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
				[63] SUBSUBSUBSUBPROCESS(2) ??? else if( 
				[64] SUBSUBSUBSUBPROCESS(2) ??? hogehoge4_2 
				[65] SUBSUBSUBSUBPROCESS(2) ??? ) 
					[66] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
				[67] SUBSUBSUBSUBPROCESS(3) ??? else if( 
				[68] SUBSUBSUBSUBPROCESS(3) ??? hogehoge4_3 
				[69] SUBSUBSUBSUBPROCESS(3) ??? ) 
					[70] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
				[71] SUBSUBSUBSUBPROCESS(4) ??? else 
					[72] SUBSUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBSUBPROCESS(1) 
			[73] SUBSUBSUBPROCESS(2) ??? switch ( 
			[74] SUBSUBSUBPROCESS(2) ??? hogehoge3_2 
			[75] SUBSUBSUBPROCESS(2) ??? ) 
			[76] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
				[77] SUBSUBSUBSUBPROCESS(1) ??? case mode1: 
				[78] SUBSUBSUBSUBPROCESS(1) equal miki4_2_1 subsubsubsub_mode_1;
				[79] SUBSUBSUBSUBPROCESS(1) proc break; 
				[80] SUBSUBSUBSUBPROCESS(1) ??? case mode1: 
				[81] SUBSUBSUBSUBPROCESS(1) equal miki4_2_2 subsubsubsub_mode_2;
				[82] SUBSUBSUBSUBPROCESS(1) proc break; 
				[83] SUBSUBSUBSUBPROCESS(1) ??? default: 
				[84] SUBSUBSUBSUBPROCESS(1) equal miki4_2_3 subsubsubsub_mode_default;
				[85] SUBSUBSUBSUBPROCESS(1) proc break; 
			[86] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
				[87] SUBSUBSUBSUBPROCESS(1) func<start> miki4_3 = subsubsubsub_mode_default( 
				[88] SUBSUBSUBSUBPROCESS(1) func (S1) arg4_3_1, 
				[89] SUBSUBSUBSUBPROCESS(1) func arg4_3_2, 
				[90] SUBSUBSUBSUBPROCESS(1) func arg4_3_3 
				[91] SUBSUBSUBSUBPROCESS(1) func<end> ); 
	[92] SUBPROCESS(2) ??? else 
	[93] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
	[94] SUBSUBPROCESS(1) func<start> hogehoge1_ELSE( 
	[95] SUBSUBPROCESS(1) func<end> ); 
[96] MAINPROCESS(5) equal st_g_btt_stat.ATD BTT_RET_t.Func_Stat.ENABLE;
[97] MAINPROCESS(5) equal st_g_btt_stat.TLE BTT_RET_t.Func_Stat.ENABLE;
[98] MAINPROCESS(5) equal st_g_btt_stat.AAZ BTT_RET_t.Func_Stat.ENABLE;
[99] MAINPROCESS(5) equal st_g_btt_stat.TWE BTT_RET_t.Func_Stat.ENABLE;
[100] MAINPROCESS(5) equal st_g_btt_stat.TWE BTT_RET_t.Func_Stat.DISABLE;
[101] MAINPROCESS(5) equal st_g_btt_stat.TTM BTT_RET_t.Func_Stat.DISABLE;
[102] MAINPROCESS(5) equal pst_a_cluster_info->dummy CFL_UNKNOWN_VALUE;
[103] MAINPROCESS(5) equal pst_a_aux_trailer_info->dummy CFL_UNKNOWN_VALUE;
[104] MAINPROCESS(5) equal pst_a_hitch_angle->dummy CFL_UNKNOWN_VALUE;
[105] MAINPROCESS(5) proc return; 
----------------- Total Codes : 105 lines
--------------------------
[Function Name] : fn_btt_atd_main 
-Return type : VD 
-Argument : 12 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : S1   s1_a_shift_flg 
     [3] : NORMAL_BSM   *pst_a_object 
     [4] : S4   s4_a_object_size 
     [5] : FL   fl_a_doa_pow_ave[2][3] 
     [6] : FL   fl_a_doa_pow_dev[2][3] 
     [7] : S4   s4_a_doa_bf_peak_bin 
     [8] : FL   fl_a_doa_bf_peak_pow 
     [9] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [10] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [11] : BTT_RESULT*   pst_a_btt_result 
----- Codes -----
[1] MAINPROCESS(1) if<start> if( 
[2] MAINPROCESS(1) if st_g_btt_stat.ATD != BTT_RET_t.Func_Stat.ACTIVE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) proc return; 
[6] MAINPROCESS(2) if<start> if( 
[7] MAINPROCESS(2) if s1_a_shift_flg != (S1) 0 
[8] MAINPROCESS(2) if ) 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if<start> if( 
[11] SUBPROCESS(1) if fl_a_self_v > BTT_ACTIVE_SPEED_TH 
[12] SUBPROCESS(1) if ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if<start> if( 
[15] SUBSUBPROCESS(1) if st_atd_params.timer < BTT_ATD_MAX_TIME 
[16] SUBSUBPROCESS(1) if ) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) if<start> if( 
[19] SUBSUBSUBPROCESS(1) if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.UNKNOWN 
[20] SUBSUBSUBPROCESS(1) if ) 
[21] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBSUBPROCESS(1) func<start> pst_a_btt_result->TFlag = fn_btt_atd_detect_trailer( 
[23] SUBSUBSUBSUBPROCESS(1) func fl_a_self_v, 
[24] SUBSUBSUBSUBPROCESS(1) func s4_a_curve_r, 
[25] SUBSUBSUBSUBPROCESS(1) func pst_a_object, 
[26] SUBSUBSUBSUBPROCESS(1) func s4_a_object_size, 
[27] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_pow_ave, 
[28] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_pow_dev, 
[29] SUBSUBSUBSUBPROCESS(1) func s4_a_doa_bf_peak_bin, 
[30] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_bf_peak_pow, 
[31] SUBSUBSUBSUBPROCESS(1) func pst_a_cluster_info, 
[32] SUBSUBSUBSUBPROCESS(1) func pst_a_aux_trailer_info 
[33] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[34] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[35] SUBSUBSUBSUBPROCESS(1) if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.CONNECT 
[36] SUBSUBSUBSUBPROCESS(1) if ) 
[37] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[39] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[40] SUBSUBSUBSUBPROCESS(2) else if<start> else if( 
[41] SUBSUBSUBSUBPROCESS(2) else if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.NOTCONNECT 
[42] SUBSUBSUBSUBPROCESS(2) else if ) 
[43] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[45] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[46] SUBSUBSUBSUBPROCESS(3) else<start> else 
[47] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[48] SUBSUBPROCESS(2) else<start> else 
[49] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBPROCESS(1) equal pst_a_btt_result->TFlag BTT_RET_t.TFlag.UNKNOWN;
[51] SUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[52] SUBSUBSUBPROCESS(1) func<end> ); 
[53] SUBSUBPROCESS(3) proc st_atd_params.timer++; 
[54] SUBPROCESS(2) else<start> else 
[55] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[56] MAINPROCESS(3) else<start> else 
[57] MAINPROCESS(3) subproc SUBPROCESS(1) 
[58] SUBPROCESS(1) func<start> fn_btt_atd_initialize( 
[59] SUBPROCESS(1) func<end> ); 
[60] MAINPROCESS(4) proc return; 
----------------- Total Codes : 60 lines
