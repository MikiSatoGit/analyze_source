Total lines: 1183 
Total functions : 19 
--------------------------
[Function Name] : init_btt_configuration_parameter_dummy 
-Return type : ;VD 
-Argument : 4 
     [0] : BSM_STANDARD   *pst_a_bsm_alertarea_for_test 
     [1] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [2] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [3] : BTT_HITCH_ANGLE   *pst_a_hitch_angle 
----- Codes -----
[1] MAINPROCESS(1) func<start> miki0 = main( 
[2] MAINPROCESS(1) func arg0_1, 
[3] MAINPROCESS(1) func arg0_2, 
[4] MAINPROCESS(1) func (S1)arg0_3 
[5] MAINPROCESS(1) func<end> ); 
[6] MAINPROCESS(1) if<start> if( 
[7] MAINPROCESS(1) if st_g_btt_stat.BTT_initialized == BTT_RET_t.Init_Stat.INITIALIZED 
[8] MAINPROCESS(1) if ) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) proc return; 
[11] MAINPROCESS(2) if<start> if( 
[12] MAINPROCESS(2) if miki==test 
[13] MAINPROCESS(2) if ) 
[14] MAINPROCESS(2) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal miki done;
[16] SUBPROCESS(1) ??? hogehoge 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal miki next;
[19] MAINPROCESS(3) else<start> else 
[20] MAINPROCESS(3) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal miki ELSETEST;
[22] MAINPROCESS(4) if<start> if( 
[23] MAINPROCESS(4) if miki==test 
[24] MAINPROCESS(4) if && miki==debug 
[25] MAINPROCESS(4) if ) 
[26] MAINPROCESS(4) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) equal miki1_1 sub;
[28] SUBPROCESS(1) equal miki1_2 (S1)sub;
[29] SUBPROCESS(1) func<start> miki1_3( 
[30] SUBPROCESS(1) func<end> ); 
[31] SUBPROCESS(1) func<start> miki1_4((S1)arg1_1 
[32] SUBPROCESS(1) func<end> ); 
[33] SUBPROCESS(1) if<start> if( 
[34] SUBPROCESS(1) if hogehoge1 
[35] SUBPROCESS(1) if ) 
[36] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[37] SUBSUBPROCESS(1) func<start> miki2_1 = subsub_1( 
[38] SUBSUBPROCESS(1) func (S1)arg2_1_1, 
[39] SUBSUBPROCESS(1) func arg2_1_2 
[40] SUBSUBPROCESS(1) func<end> ); 
[41] SUBSUBPROCESS(1) func<start> miki2_2 = subsub_2( 
[42] SUBSUBPROCESS(1) func (S1)arg2_2_1, 
[43] SUBSUBPROCESS(1) func arg2_2_2 
[44] SUBSUBPROCESS(1) func<end> ); 
[45] SUBSUBPROCESS(1) for<start> for( 
[46] SUBSUBPROCESS(1) for i=0; 
[47] SUBSUBPROCESS(1) for i<hogehoge2; 
[48] SUBSUBPROCESS(1) for i++) 
[49] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBPROCESS(1) func<start> miki3 = (S1)subsubsub(arg3_1,arg3_2,arg3_3 
[51] SUBSUBSUBPROCESS(1) func<end> ); 
[52] SUBSUBSUBPROCESS(1) while<start> while( 
[53] SUBSUBSUBPROCESS(1) while hogehoge3_1 
[54] SUBSUBSUBPROCESS(1) while ) 
[55] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[56] SUBSUBSUBSUBPROCESS(1) func<start> miki4_1 = subsubsubsub((S1)arg4_1,(S2)arg4_2,(S3)arg4_3 
[57] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[58] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[59] SUBSUBSUBSUBPROCESS(1) if hogehoge4_1 
[60] SUBSUBSUBSUBPROCESS(1) if ) 
[61] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[62] SUBSUBSUBSUBSUBPROCESS(1) equal (S5)miki5_1 subsubsubsubsub_1;
[63] SUBSUBSUBSUBPROCESS(2) else if<start> else if( 
[64] SUBSUBSUBSUBPROCESS(2) else if hogehoge4_2 
[65] SUBSUBSUBSUBPROCESS(2) else if ) 
[66] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[67] SUBSUBSUBSUBSUBPROCESS(1) equal (S5)miki5_2 subsubsubsubsub_2;
[68] SUBSUBSUBSUBPROCESS(3) else if<start> else if( 
[69] SUBSUBSUBSUBPROCESS(3) else if hogehoge4_3 
[70] SUBSUBSUBSUBPROCESS(3) else if ) 
[71] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[72] SUBSUBSUBSUBSUBPROCESS(1) equal (S5)miki5_3 subsubsubsubsub_2;
[73] SUBSUBSUBSUBPROCESS(4) else<start> else 
[74] SUBSUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[75] SUBSUBSUBSUBSUBPROCESS(1) equal (S5)miki5_4 subsubsubsubsub_3;
[76] SUBSUBSUBPROCESS(2) switch <start> switch ( 
[77] SUBSUBSUBPROCESS(2) switch  hogehoge3_2 
[78] SUBSUBSUBPROCESS(2) switch  ) 
[79] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[80] SUBSUBSUBSUBPROCESS(1) ??? case mode1: 
[81] SUBSUBSUBSUBPROCESS(1) equal miki4_2_1 subsubsubsub_mode_1;
[82] SUBSUBSUBSUBPROCESS(1) proc break; 
[83] SUBSUBSUBSUBPROCESS(1) ??? case mode1: 
[84] SUBSUBSUBSUBPROCESS(1) equal miki4_2_2 subsubsubsub_mode_2;
[85] SUBSUBSUBSUBPROCESS(1) proc break; 
[86] SUBSUBSUBSUBPROCESS(1) ??? default: 
[87] SUBSUBSUBSUBPROCESS(1) equal miki4_2_3 subsubsubsub_mode_default;
[88] SUBSUBSUBSUBPROCESS(1) proc break; 
[89] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[90] SUBSUBSUBSUBPROCESS(1) func<start> miki4_3 = subsubsubsub_mode_default( 
[91] SUBSUBSUBSUBPROCESS(1) func (S1) arg4_3_1, 
[92] SUBSUBSUBSUBPROCESS(1) func arg4_3_2, 
[93] SUBSUBSUBSUBPROCESS(1) func arg4_3_3 
[94] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[95] SUBPROCESS(2) else<start> else 
[96] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[97] SUBSUBPROCESS(1) func<start> hogehoge1_ELSE( 
[98] SUBSUBPROCESS(1) func<end> ); 
[99] MAINPROCESS(5) equal st_g_btt_stat.ATD BTT_RET_t.Func_Stat.ENABLE;
[100] MAINPROCESS(5) equal st_g_btt_stat.TLE BTT_RET_t.Func_Stat.ENABLE;
[101] MAINPROCESS(5) equal st_g_btt_stat.AAZ BTT_RET_t.Func_Stat.ENABLE;
[102] MAINPROCESS(5) equal st_g_btt_stat.TWE BTT_RET_t.Func_Stat.ENABLE;
[103] MAINPROCESS(5) equal st_g_btt_stat.TTM BTT_RET_t.Func_Stat.DISABLE;
[104] MAINPROCESS(5) equal pst_a_bsm_alertarea_for_test->Ymin (FL) 1.0;
[105] MAINPROCESS(5) equal pst_a_bsm_alertarea_for_test->Ymax (FL) -7.0;
[106] MAINPROCESS(5) equal pst_a_bsm_alertarea_for_test->Xmin (FL) 0.5;
[107] MAINPROCESS(5) equal pst_a_bsm_alertarea_for_test->Xmax (FL) 3.8;
[108] MAINPROCESS(5) equal pst_a_cluster_info->dummy CFL_UNKNOWN_VALUE;
[109] MAINPROCESS(5) equal pst_a_aux_trailer_info->dummy CFL_UNKNOWN_VALUE;
[110] MAINPROCESS(5) equal pst_a_hitch_angle->dummy CFL_UNKNOWN_VALUE;
[111] MAINPROCESS(5) proc return; 
----------------- Total Codes : 111 lines
--------------------------
[Function Name] : fn_btt_atd_main 
-Return type : VD 
-Argument : 12 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : S1   s1_a_shift_flg 
     [3] : NORMAL_BSM   *pst_a_object 
     [4] : S4   s4_a_object_size 
     [5] : FL   fl_a_doa_pow_ave[2][3] 
     [6] : FL   fl_a_doa_pow_dev[2][3] 
     [7] : S4   s4_a_doa_bf_peak_bin 
     [8] : FL   fl_a_doa_bf_peak_pow 
     [9] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [10] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [11] : BTT_RESULT*   pst_a_btt_result 
----- Codes -----
[1] MAINPROCESS(1) if<start> if( 
[2] MAINPROCESS(1) if st_g_btt_stat.ATD != BTT_RET_t.Func_Stat.ACTIVE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) proc return; 
[6] MAINPROCESS(2) if<start> if( 
[7] MAINPROCESS(2) if s1_a_shift_flg != (S1) 0 
[8] MAINPROCESS(2) if ) 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if<start> if( 
[11] SUBPROCESS(1) if fl_a_self_v > BTT_ACTIVE_SPEED_TH 
[12] SUBPROCESS(1) if ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if<start> if( 
[15] SUBSUBPROCESS(1) if st_atd_params.timer < BTT_ATD_MAX_TIME 
[16] SUBSUBPROCESS(1) if ) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) if<start> if( 
[19] SUBSUBSUBPROCESS(1) if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.UNKNOWN 
[20] SUBSUBSUBPROCESS(1) if ) 
[21] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBSUBPROCESS(1) func<start> pst_a_btt_result->TFlag = fn_btt_atd_detect_trailer( 
[23] SUBSUBSUBSUBPROCESS(1) func fl_a_self_v, 
[24] SUBSUBSUBSUBPROCESS(1) func s4_a_curve_r, 
[25] SUBSUBSUBSUBPROCESS(1) func pst_a_object, 
[26] SUBSUBSUBSUBPROCESS(1) func s4_a_object_size, 
[27] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_pow_ave, 
[28] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_pow_dev, 
[29] SUBSUBSUBSUBPROCESS(1) func s4_a_doa_bf_peak_bin, 
[30] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_bf_peak_pow, 
[31] SUBSUBSUBSUBPROCESS(1) func pst_a_cluster_info, 
[32] SUBSUBSUBSUBPROCESS(1) func pst_a_aux_trailer_info 
[33] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[34] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[35] SUBSUBSUBSUBPROCESS(1) if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.CONNECT 
[36] SUBSUBSUBSUBPROCESS(1) if ) 
[37] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[39] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[40] SUBSUBSUBSUBPROCESS(2) else if<start> else if( 
[41] SUBSUBSUBSUBPROCESS(2) else if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.NOTCONNECT 
[42] SUBSUBSUBSUBPROCESS(2) else if ) 
[43] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[45] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[46] SUBSUBSUBSUBPROCESS(3) else<start> else 
[47] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[48] SUBSUBPROCESS(2) else<start> else 
[49] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBPROCESS(1) equal pst_a_btt_result->TFlag BTT_RET_t.TFlag.UNKNOWN;
[51] SUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[52] SUBSUBSUBPROCESS(1) func<end> ); 
[53] SUBSUBPROCESS(3) proc st_atd_params.timer++; 
[54] SUBPROCESS(2) else<start> else 
[55] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[56] MAINPROCESS(3) else<start> else 
[57] MAINPROCESS(3) subproc SUBPROCESS(1) 
[58] SUBPROCESS(1) func<start> fn_btt_atd_initialize( 
[59] SUBPROCESS(1) func<end> ); 
[60] MAINPROCESS(4) proc return; 
----------------- Total Codes : 60 lines
--------------------------
[Function Name] : fn_btt_tle_main 
-Return type : FL 
-Argument : 7 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : NORMAL_BSM   *pst_a_object 
     [3] : S4   s4_a_object_size 
     [4] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [5] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [6] : BTT_STAT   *pst_a_btt_stat 
----- Codes -----
[1] MAINPROCESS(1) equal FL fl_t_length BTT_TRAILER_SIZE_UNKNOWN;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc FL fl_a_tle_bf_peak[BTT_TLE_RANGE]; 
[4] MAINPROCESS(1) proc FL fl_a_tle_bf_pow_diff[BTT_TLE_RANGE-(S4)1]; 
[5] MAINPROCESS(1) for<start> for( 
[6] MAINPROCESS(1) for s4_t_lp_i = 0; 
[7] MAINPROCESS(1) for s4_t_lp_i < BTT_TLE_RANGE; 
[8] MAINPROCESS(1) for s4_t_lp_i++) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal fl_a_tle_bf_peak[s4_t_lp_i] (FL)0;
[11] MAINPROCESS(2) for<start> for( 
[12] MAINPROCESS(2) for s4_t_lp_i = 0; 
[13] MAINPROCESS(2) for s4_t_lp_i < BTT_TLE_RANGE - (S4)1; 
[14] MAINPROCESS(2) for s4_t_lp_i++) 
[15] MAINPROCESS(2) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) equal fl_a_tle_bf_pow_diff[s4_t_lp_i] (FL)0;
[17] MAINPROCESS(3) if<start> if( 
[18] MAINPROCESS(3) if st_g_btt_stat.TLE != BTT_RET_t.Func_Stat.ACTIVE 
[19] MAINPROCESS(3) if ) 
[20] MAINPROCESS(3) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) if<start> if( 
[22] SUBPROCESS(1) if st_g_btt_result.TLength != BTT_TRAILER_SIZE_UNKNOWN 
[23] SUBPROCESS(1) if ) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(1) proc return st_g_btt_result.TLength; 
[26] SUBPROCESS(2) else<start> else 
[27] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) proc return fl_t_length; 
[29] MAINPROCESS(4) func<start> fn_btt_tle_search_peak_bf( 
[30] MAINPROCESS(4) func (const FL (*)[CORRE_SIZE_4CH])(afl_g_cvw_lfm_ryy_matrix[0]), 
[31] MAINPROCESS(4) func fl_a_tle_bf_peak 
[32] MAINPROCESS(4) func<end> ); 
[33] MAINPROCESS(4) func<start> fn_btt_tle_calc_bf_power_diff( 
[34] MAINPROCESS(4) func fl_a_tle_bf_peak, 
[35] MAINPROCESS(4) func fl_a_tle_bf_pow_diff 
[36] MAINPROCESS(4) func<end> ); 
[37] MAINPROCESS(4) for <start> for ( 
[38] MAINPROCESS(4) for  s4_t_lp_i = 0; 
[39] MAINPROCESS(4) for  s4_t_lp_i < 30; 
[40] MAINPROCESS(4) for  s4_t_lp_i++ ) 
[41] MAINPROCESS(4) subproc SUBPROCESS(1) 
[42] SUBPROCESS(1) func<start> fn_bsm_cal_trailer_range_doa_ave( 
[43] SUBPROCESS(1) func 0, 
[44] SUBPROCESS(1) func (const FL (*)[CORRE_SIZE_4CH])(afl_g_cvw_lfm_ryy_matrix[0]), 
[45] SUBPROCESS(1) func (256+s4_t_lp_i), 
[46] SUBPROCESS(1) func &afl_a_doa_pow_ave[s4_t_lp_i], 
[47] SUBPROCESS(1) func &afl_a_doa_pow_dev[s4_t_lp_i] 
[48] SUBPROCESS(1) func<end> ); 
[49] MAINPROCESS(5) if<start> if( 
[50] MAINPROCESS(5) if st_tle_params.timer < BTT_TLE_MAX_TIME 
[51] MAINPROCESS(5) if ) 
[52] MAINPROCESS(5) subproc SUBPROCESS(1) 
[53] SUBPROCESS(1) func<start> fl_t_length = fn_btt_tle_estimate_trailer_length( 
[54] SUBPROCESS(1) func<end> ); 
[55] MAINPROCESS(6) else<start> else 
[56] MAINPROCESS(6) subproc SUBPROCESS(1) 
[57] SUBPROCESS(1) func<start> fn_btt_tle_deactivate( 
[58] SUBPROCESS(1) func<end> ); 
[59] MAINPROCESS(7) proc st_tle_params.timer++; 
[60] MAINPROCESS(7) equal fl_t_length (FL)4;
[61] MAINPROCESS(7) proc return fl_t_length; 
----------------- Total Codes : 61 lines
--------------------------
[Function Name] : fn_btt_initialize 
-Return type : VD 
-Argument : 5 
     [0] : U1   u1_a_bsm_configuration 
     [1] : U1   u1_a_bsm_drv_cmd 
     [2] : U1   u1_a_btt_configuration 
     [3] : U1   u1_a_btt_drv_cmd 
     [4] : BSM_STANDARD   st_a_bsm_alertarea 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  (fl_g_v_self_bsm_for_base > BTT_ACTIVE_SPEED_TH) 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.BTT_RESET BTT_TRUE;
[6] MAINPROCESS(2) if<start> if( 
[7] MAINPROCESS(2) if st_g_btt_stat.BTT_RESET == BTT_TRUE 
[8] MAINPROCESS(2) if && st_g_btt_stat.BTT_initialized == BTT_RET_t.Init_Stat.INITIALIZED 
[9] MAINPROCESS(2) if && fl_g_v_self_bsm_for_base < (FL)0.5 ) 
[10] MAINPROCESS(2) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) proc st_g_btt_stat.BTT_timer ++; 
[12] SUBPROCESS(1) if<start> if( 
[13] SUBPROCESS(1) if st_g_btt_stat.BTT_timer > (S4)150 
[14] SUBPROCESS(1) if ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_initialized BTT_RET_t.Init_Stat.UNINITIALIZED;
[17] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_RESET BTT_FALSE;
[18] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_timer (S4)0;
[19] SUBSUBPROCESS(1) equal st_g_btt_stat.ATD BTT_RET_t.Func_Stat.ENABLE;
[20] MAINPROCESS(3) if<start> if( 
[21] MAINPROCESS(3) if st_g_btt_stat.BTT_initialized == BTT_RET_t.Init_Stat.INITIALIZED 
[22] MAINPROCESS(3) if ) 
[23] MAINPROCESS(3) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) proc return; 
[25] MAINPROCESS(4) equal st_g_btt_alertarea.standard st_a_bsm_alertarea;
[26] MAINPROCESS(4) equal st_g_btt_result.TFlag BTT_RET_t.TFlag.UNKNOWN;
[27] MAINPROCESS(4) func<start> fn_btt_set_trailer_length( BTT_TRAILER_SIZE_UNKNOWN 
[28] MAINPROCESS(4) func<end> ); 
[29] MAINPROCESS(4) func<start> fn_btt_set_trailer_width( BTT_TRAILER_SIZE_UNKNOWN 
[30] MAINPROCESS(4) func<end> ); 
[31] MAINPROCESS(4) equal st_g_btt_alertarea.rear.VarY (FL) 0.0;
[32] MAINPROCESS(4) equal st_g_btt_alertarea.rear.VarYmax BTT_REAR_RANGE_MAX;
[33] MAINPROCESS(4) equal st_g_btt_alertarea.side.VarXin (FL) 0.0;
[34] MAINPROCESS(4) equal st_g_btt_alertarea.side.VarXmax (FL) 0.0;
[35] MAINPROCESS(4) equal st_g_btt_alertarea.side.VarXout (FL) 0.0;
[36] MAINPROCESS(4) func<start> fn_btt_ttm_activate( 
[37] MAINPROCESS(4) func<end> ); 
[38] MAINPROCESS(4) func<start> fn_btt_atd_activate( 
[39] MAINPROCESS(4) func<end> ); 
[40] MAINPROCESS(4) func<start> fn_btt_atd_initialize( 
[41] MAINPROCESS(4) func<end> ); 
[42] MAINPROCESS(4) func<start> fn_btt_set_bsm_final_state( 
[43] MAINPROCESS(4) func u1_a_bsm_configuration, 
[44] MAINPROCESS(4) func u1_a_bsm_drv_cmd 
[45] MAINPROCESS(4) func<end> ); 
[46] MAINPROCESS(4) func<start> fn_btt_set_btt_final_state( 
[47] MAINPROCESS(4) func u1_a_btt_configuration, 
[48] MAINPROCESS(4) func u1_a_btt_drv_cmd, 
[49] MAINPROCESS(4) func st_g_btt_result 
[50] MAINPROCESS(4) func<end> ); 
[51] MAINPROCESS(4) if<start> if( 
[52] MAINPROCESS(4) if u1_a_btt_drv_cmd == BTT_RET_t.Drv_SW.ON 
[53] MAINPROCESS(4) if ) 
[54] MAINPROCESS(4) subproc SUBPROCESS(1) 
[55] SUBPROCESS(1) func<start> fn_btt_aaz_activate( 
[56] SUBPROCESS(1) func<end> ); 
[57] MAINPROCESS(5) equal st_g_btt_stat.BTT_initialized BTT_RET_t.Init_Stat.INITIALIZED;
[58] MAINPROCESS(5) proc return; 
----------------- Total Codes : 58 lines
--------------------------
[Function Name] : fn_btt_atd_detect_trailer 
-Return type : U1 
-Argument : 10 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : NORMAL_BSM   *pst_a_object 
     [3] : S4   s4_a_object_size 
     [4] : FL   fl_a_doa_pow_ave[2][3] 
     [5] : FL   fl_a_doa_pow_dev[2][3] 
     [6] : S4   s4_a_doa_bf_peak_bin 
     [7] : FL   fl_a_doa_bf_peak_pow 
     [8] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [9] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) equal U1 u1_t_btt_trailer_flg BTT_RET_t.TFlag.UNKNOWN;
[3] MAINPROCESS(1) func<start> fn_btt_atd_trailerobj_tracking( 
[4] MAINPROCESS(1) func pst_a_object, 
[5] MAINPROCESS(1) func s4_a_object_size 
[6] MAINPROCESS(1) func ,fl_a_doa_pow_ave 
[7] MAINPROCESS(1) func ,fl_a_doa_pow_dev 
[8] MAINPROCESS(1) func ,s4_a_doa_bf_peak_bin 
[9] MAINPROCESS(1) func ,fl_a_doa_bf_peak_pow 
[10] MAINPROCESS(1) func<end> ); 
[11] MAINPROCESS(1) if<start> if( 
[12] MAINPROCESS(1) if st_atd_params.atd_counter[0] > BTT_ATD_CONNECT_TH 
[13] MAINPROCESS(1) if ) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal u1_t_btt_trailer_flg BTT_RET_t.TFlag.CONNECT;
[16] MAINPROCESS(2) if<start> if( 
[17] MAINPROCESS(2) if (st_atd_params.atd_counter[1] > BTT_ATD_NOTCONNECT_TH 
[18] MAINPROCESS(2) if ) 
[19] MAINPROCESS(2) if &&  (st_atd_params.atd_counter[1] - st_atd_params.atd_counter[0] > BTT_ATD_CNT_DIFF) ) 
[20] MAINPROCESS(2) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal u1_t_btt_trailer_flg BTT_RET_t.TFlag.NOTCONNECT;
[22] SUBPROCESS(1) for<start> for( 
[23] SUBPROCESS(1) for s4_t_lp_i=0; 
[24] SUBPROCESS(1) for s4_t_lp_i<6; 
[25] SUBPROCESS(1) for s4_t_lp_i++) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(1) equal afl_g_btt_atd_obj_tracking[s4_t_lp_i] (FL)-120;
[28] MAINPROCESS(3) proc return u1_t_btt_trailer_flg; 
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : fn_btt_atd_trailerobj_tracking 
-Return type : VD 
-Argument : 6 
     [0] : NORMAL_BSM   pst_a_trailer_obj[TRAILER_BUFFSIZE] 
     [1] : S4   as4_a_trailer_obj_num 
     [2] : FL   fl_a_doa_pow_ave[2][3] 
     [3] : FL   fl_a_doa_pow_dev[2][3] 
     [4] : S4   s4_a_doa_bf_peak_bin 
     [5] : FL   fl_a_doa_bf_peak_pow 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i, s4_t_lp_j; 
[2] MAINPROCESS(1) equal S4 as4_a_trk_num (S4)0;
[3] MAINPROCESS(1) equal S4 as4_a_trk_num2 (S4)0;
[4] MAINPROCESS(1) equal S4 as4_a_tmp_trailer_obj_num (S4)0;
[5] MAINPROCESS(1) equal FL afl_a_trailer_obj_rx_ave (FL)0;
[6] MAINPROCESS(1) equal FL afl_a_trailer_obj_rx_dev (FL)0;
[7] MAINPROCESS(1) equal FL afl_a_trailer_obj_ry_ave (FL)0;
[8] MAINPROCESS(1) equal FL afl_a_trailer_obj_ry_dev (FL)0;
[9] MAINPROCESS(1) equal FL afl_a_trailer_obj_vy_ave (FL)0;
[10] MAINPROCESS(1) equal FL afl_a_trailer_obj_vy_dev (FL)0;
[11] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_up (FL)0;
[12] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_dn (FL)0;
[13] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_dev_up (FL)0;
[14] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_dev_dn (FL)0;
[15] MAINPROCESS(1) equal FL afl_a_db_doa_peak_ave_diff (FL)0;
[16] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_th (FL)0;
[17] MAINPROCESS(1) if<start> if( 
[18] MAINPROCESS(1) if s4_abs(s2_g_curvr_for_base) > (S2)80 
[19] MAINPROCESS(1) if ) 
[20] MAINPROCESS(1) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)58;
[22] MAINPROCESS(2) else if<start> else if( 
[23] MAINPROCESS(2) else if s4_abs(s2_g_curvr_for_base) > (S2)40 
[24] MAINPROCESS(2) else if ) 
[25] MAINPROCESS(2) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)55;
[27] MAINPROCESS(3) else<start> else 
[28] MAINPROCESS(3) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) if<start> if( 
[30] SUBPROCESS(1) if s2_g_curvr_for_base < 0 
[31] SUBPROCESS(1) if ) 
[32] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[33] SUBSUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)45;
[34] SUBPROCESS(2) else<start> else 
[35] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[36] SUBSUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)58;
[37] MAINPROCESS(4) for<start> for( 
[38] MAINPROCESS(4) for s4_t_lp_i = 0; 
[39] MAINPROCESS(4) for s4_t_lp_i < BTT_OBJ_HISTORY_CYCLE; 
[40] MAINPROCESS(4) for s4_t_lp_i++ ) 
[41] MAINPROCESS(4) subproc SUBPROCESS(1) 
[42] SUBPROCESS(1) equal as4_a_tmp_trailer_obj_num st_atd_params.trailer_object_num_total[s4_t_lp_i];
[43] SUBPROCESS(1) if<start> if( 
[44] SUBPROCESS(1) if as4_a_tmp_trailer_obj_num != (S4)0 
[45] SUBPROCESS(1) if ) 
[46] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[47] SUBSUBPROCESS(1) proc as4_a_trk_num ++; 
[48] SUBSUBPROCESS(1) for<start> for( 
[49] SUBSUBPROCESS(1) for s4_t_lp_j = 0; 
[50] SUBSUBPROCESS(1) for s4_t_lp_j < as4_a_tmp_trailer_obj_num; 
[51] SUBSUBPROCESS(1) for s4_t_lp_j++ ) 
[52] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[53] SUBSUBSUBPROCESS(1) equal afl_a_trailer_obj_rx_ave + st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs;
[54] SUBSUBSUBPROCESS(1) func<start> afl_a_trailer_obj_rx_dev += (st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs * st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs 
[55] SUBSUBSUBPROCESS(1) func<end> ); 
[56] SUBSUBSUBPROCESS(1) equal afl_a_trailer_obj_ry_ave + st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs;
[57] SUBSUBSUBPROCESS(1) func<start> afl_a_trailer_obj_ry_dev += (st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs * st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs 
[58] SUBSUBSUBPROCESS(1) func<end> ); 
[59] SUBSUBSUBPROCESS(1) equal afl_a_trailer_obj_vy_ave + st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs;
[60] SUBSUBSUBPROCESS(1) func<start> afl_a_trailer_obj_vy_dev += (st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs * st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs 
[61] SUBSUBSUBPROCESS(1) func<end> ); 
[62] SUBSUBSUBPROCESS(1) proc as4_a_trk_num2 ++; 
[63] MAINPROCESS(5) if<start> if( 
[64] MAINPROCESS(5) if as4_a_trk_num2 != (S4)0 
[65] MAINPROCESS(5) if ) 
[66] MAINPROCESS(5) subproc SUBPROCESS(1) 
[67] SUBPROCESS(1) equal afl_a_trailer_obj_rx_ave afl_a_trailer_obj_rx_ave / (FL)as4_a_trk_num2;
[68] SUBPROCESS(1) equal afl_a_trailer_obj_ry_ave afl_a_trailer_obj_ry_ave / (FL)as4_a_trk_num2;
[69] SUBPROCESS(1) equal afl_a_trailer_obj_vy_ave afl_a_trailer_obj_vy_ave / (FL)as4_a_trk_num2;
[70] SUBPROCESS(1) func<start> afl_a_trailer_obj_rx_dev = fl_abs((afl_a_trailer_obj_rx_dev / (FL)as4_a_trk_num2) - afl_a_trailer_obj_rx_ave * afl_a_trailer_obj_rx_ave 
[71] SUBPROCESS(1) func<end> ); 
[72] SUBPROCESS(1) equal afl_a_trailer_obj_ry_dev (afl_a_trailer_obj_ry_dev / (FL)as4_a_trk_num2) - afl_a_trailer_obj_ry_ave * afl_a_trailer_obj_ry_ave;
[73] SUBPROCESS(1) func<start> afl_a_trailer_obj_vy_dev = fl_abs((afl_a_trailer_obj_vy_dev / (FL)as4_a_trk_num2) - afl_a_trailer_obj_vy_ave * afl_a_trailer_obj_vy_ave 
[74] SUBPROCESS(1) func<end> ); 
[75] MAINPROCESS(6) equal afl_a_db_doa_peak_ave_diff fl_a_doa_bf_peak_pow - fl_a_doa_pow_ave[0][1];
[76] MAINPROCESS(6) if<start> if( 
[77] MAINPROCESS(6) if as4_a_trk_num > BTT_OBJ_DETECT_CYC1 
[78] MAINPROCESS(6) if ) 
[79] MAINPROCESS(6) subproc SUBPROCESS(1) 
[80] SUBPROCESS(1) if<start> if( 
[81] SUBPROCESS(1) if fl_abs(afl_a_trailer_obj_rx_ave) < BTT_OBJ_X_RANGE 
[82] SUBPROCESS(1) if &&  afl_a_trailer_obj_ry_ave < BTT_OBJ_Y_RANGE_FORWARD 
[83] SUBPROCESS(1) if &&  afl_a_trailer_obj_ry_ave > BTT_OBJ_Y_RANGE_BACKWARD 
[84] SUBPROCESS(1) if &&  fl_abs(afl_a_trailer_obj_vy_ave) < BTT_OBJ_VY 
[85] SUBPROCESS(1) if &&  afl_a_trailer_obj_rx_dev < BTT_OBJ_DEV_TH 
[86] SUBPROCESS(1) if &&  afl_a_trailer_obj_vy_dev < BTT_OBJ_DEV_TH ) 
[87] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[88] SUBSUBPROCESS(1) if<start> if( 
[89] SUBSUBPROCESS(1) if s4_abs(s2_g_curvr_for_base) > (S2)CU1_CANOUT_CURVER_MIN_SOT 
[90] SUBSUBPROCESS(1) if ) 
[91] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[92] SUBSUBSUBPROCESS(1) if<start> if( 
[93] SUBSUBSUBPROCESS(1) if afl_a_db_doa_peak_ave_diff > (FL)5.0 
[94] SUBSUBSUBPROCESS(1) if ||  fl_a_doa_pow_ave[0][1] < afl_a_trailer_doa_pow_th 
[95] SUBSUBSUBPROCESS(1) if ) 
[96] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[97] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[98] SUBSUBSUBPROCESS(2) else if<start> else if( 
[99] SUBSUBSUBPROCESS(2) else if as4_a_trk_num2 < (S4)10 
[100] SUBSUBSUBPROCESS(2) else if ) 
[101] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[102] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[103] SUBSUBSUBPROCESS(3) else<start> else 
[104] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[105] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[106] SUBSUBPROCESS(2) else if<start> else if( 
[107] SUBSUBPROCESS(2) else if s4_abs(s2_g_curvr_for_base) >= (S2)10 
[108] SUBSUBPROCESS(2) else if ) 
[109] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[110] SUBSUBSUBPROCESS(1) if<start> if( 
[111] SUBSUBSUBPROCESS(1) if fl_a_doa_pow_ave[0][1] > afl_a_trailer_doa_pow_th 
[112] SUBSUBSUBPROCESS(1) if ) 
[113] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[114] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[115] SUBSUBSUBPROCESS(2) else<start> else 
[116] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[117] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[118] SUBPROCESS(2) else<start> else 
[119] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[120] SUBSUBPROCESS(1) if<start> if( 
[121] SUBSUBPROCESS(1) if fl_a_doa_pow_ave[0][1] > afl_a_trailer_doa_pow_th 
[122] SUBSUBPROCESS(1) if &&  afl_a_db_doa_peak_ave_diff < (FL)5.0 ) 
[123] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[124] SUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[125] SUBSUBPROCESS(2) else<start> else 
[126] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[127] SUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[128] MAINPROCESS(7) else<start> else 
[129] MAINPROCESS(7) subproc SUBPROCESS(1) 
[130] SUBPROCESS(1) if<start> if( 
[131] SUBPROCESS(1) if as4_a_trk_num2 > (S4)10 
[132] SUBPROCESS(1) if &&  fl_a_doa_pow_ave[0][1] > afl_a_trailer_doa_pow_th 
[133] SUBPROCESS(1) if &&  afl_a_db_doa_peak_ave_diff < (FL)5.0 ) 
[134] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[135] SUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[136] SUBPROCESS(2) else<start> else 
[137] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[138] SUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[139] MAINPROCESS(8) for<start> for( 
[140] MAINPROCESS(8) for s4_t_lp_i = 0; 
[141] MAINPROCESS(8) for s4_t_lp_i < BTT_OBJ_HISTORY_CYCLE; 
[142] MAINPROCESS(8) for s4_t_lp_i++ ) 
[143] MAINPROCESS(8) subproc SUBPROCESS(1) 
[144] SUBPROCESS(1) for<start> for( 
[145] SUBPROCESS(1) for s4_t_lp_j = 0; 
[146] SUBPROCESS(1) for s4_t_lp_j < TRAILER_BUFFSIZE; 
[147] SUBPROCESS(1) for s4_t_lp_j ++ ) 
[148] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[149] SUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[0][s4_t_lp_j][s4_t_lp_i] st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs;
[150] SUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[1][s4_t_lp_j][s4_t_lp_i] st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs;
[151] SUBSUBPROCESS(1) if<start> if( 
[152] SUBSUBPROCESS(1) if st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs == (FL)0 
[153] SUBSUBPROCESS(1) if ) 
[154] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[155] SUBSUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[2][s4_t_lp_j][s4_t_lp_i] (FL)-120;
[156] SUBSUBPROCESS(2) else<start> else 
[157] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[158] SUBSUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[2][s4_t_lp_j][s4_t_lp_i] st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs * (FL)3.6;
[159] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[0] afl_a_trailer_obj_rx_ave;
[160] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[1] afl_a_trailer_obj_ry_ave;
[161] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[2] afl_a_trailer_obj_vy_ave;
[162] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[3] afl_a_trailer_obj_rx_dev;
[163] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[4] afl_a_trailer_obj_ry_dev;
[164] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[5] afl_a_trailer_obj_vy_dev;
[165] MAINPROCESS(9) equal as4_g_btt_atd_counter[0] as4_a_trk_num;
[166] MAINPROCESS(9) equal as4_g_btt_atd_counter[1] as4_a_trk_num2;
[167] MAINPROCESS(9) equal as4_g_btt_atd_counter[2] st_atd_params.atd_counter[0];
[168] MAINPROCESS(9) equal as4_g_btt_atd_counter[3] st_atd_params.atd_counter[1];
[169] MAINPROCESS(9) equal afl_g_btt_atd_doa_pow_ave[0] fl_a_doa_pow_ave[0][1];
[170] MAINPROCESS(9) equal afl_g_btt_atd_doa_pow_ave[1] afl_a_db_doa_peak_ave_diff;
[171] MAINPROCESS(9) proc return; 
----------------- Total Codes : 171 lines
--------------------------
[Function Name] : fn_miki_test3 
-Return type : VD 
-Argument : 2 
     [0] : type1   arg1 
     [1] : type2   arg2 
----- Codes -----
[1] MAINPROCESS(1) func<start> miki2_1 = subsub_1( 
[2] MAINPROCESS(1) func (S1)arg2_1_1, 
[3] MAINPROCESS(1) func arg2_1_2 
[4] MAINPROCESS(1) func<end> ); 
[5] MAINPROCESS(1) func<start> miki2_2 = subsub_2( 
[6] MAINPROCESS(1) func (S1)arg2_2_1, 
[7] MAINPROCESS(1) func arg2_2_2 
[8] MAINPROCESS(1) func<end> ); 
[9] MAINPROCESS(1) func<start> miki2_3 = subsub_3( 
[10] MAINPROCESS(1) func (S1)arg2_3_1, 
[11] MAINPROCESS(1) func arg2_3_2 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) switch <start> switch ( 
[14] MAINPROCESS(1) switch  hogehoge3_2 
[15] MAINPROCESS(1) switch  ) 
[16] MAINPROCESS(1) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) ??? case mode1: 
[18] SUBPROCESS(1) equal miki4_2_1 subsubsubsub_mode_1;
[19] SUBPROCESS(1) proc break; 
[20] SUBPROCESS(1) ??? case mode1: 
[21] SUBPROCESS(1) equal miki4_2_2 subsubsubsub_mode_2;
[22] SUBPROCESS(1) proc break; 
[23] SUBPROCESS(1) ??? default: 
[24] SUBPROCESS(1) equal miki4_2_3 subsubsubsub_mode_default;
[25] SUBPROCESS(1) proc break; 
[26] MAINPROCESS(2) func<start> fl_t_tmp_theta = -(PI / 180.0F * (st_g_bsm_loop_data.afl_installed_angle[0] + afl_a_peak_doa_bins_intpl_2f[s4_t_lp_i] +  (FL)DOA_BIN_START_ANG) 
[27] MAINPROCESS(2) func<end> ); 
[28] MAINPROCESS(2) if <start> if ( 
[29] MAINPROCESS(2) if  (fl_abs(afl_a_peak_doa_powers_up[s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k]) < POW_DIFF_UP_DOWN_DOA) 
[30] MAINPROCESS(2) if  && (fl_abs(afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]) < (FL)s4_t_tmp_doa_diff_up_down) 
[31] MAINPROCESS(2) if  ) 
[32] MAINPROCESS(2) subproc SUBPROCESS(1) 
[33] SUBPROCESS(1) func<start> afl_t_compare[s4_t_lp_i][s4_t_lp_k] = ( 8.0F * fl_abs(afl_a_peak_doa_powers_up[s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k])) + 1.0F * fl_abs((FL)(afl_a_peak_doa_bins_intpl_up[s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]) 
[34] SUBPROCESS(1) func<end> ); 
[35] MAINPROCESS(3) func<start> afl_t_compare[s4_a_peak_num_up - 1 - s4_t_lp_i][s4_t_lp_k] = (0.5F * fl_abs(afl_a_peak_doa_powers_up[s4_a_peak_num_up - 1 - s4_t_lp_i] - afl_a_peak_doa_powers_dn[s4_t_lp_k])) + (1.0F * fl_abs((FL)(afl_a_peak_doa_bins_intpl_up[s4_a_peak_num_up - 1 - s4_t_lp_i] - afl_a_peak_doa_bins_intpl_dn[s4_t_lp_k]))) + (1.0F * fl_abs((FL)(afl_a_peak_bins_intpl_up[s4_a_peak_num_up - 1 - s4_t_lp_i] - afl_a_peak_bins_intpl_dn[s4_t_lp_k] - (FL)s4_t_shift)) 
[36] MAINPROCESS(3) func<end> ); 
[37] MAINPROCESS(3) func<start> tmp_comp = fl_abs(afl_a_alarmed_target_current[k][0]-afl_a_Tx_float[0][8]) + fl_abs(afl_a_alarmed_target_current[k][1]-afl_a_Tx_float[0][7] 
[38] MAINPROCESS(3) func<end> ); 
[39] MAINPROCESS(3) func<start> tmp_comp = fl_abs(afl_a_alarmed_target_current[k][0]-afl_a_Tx_float[0][8]) + fl_abs(afl_a_alarmed_target_current[k][1]-afl_a_Tx_float[0][7] 
[40] MAINPROCESS(3) func<end> ); 
[41] MAINPROCESS(3) proc return; 
----------------- Total Codes : 41 lines
--------------------------
[Function Name] : fn_bsm_ordinary_check_minimum_pair 
-Return type : static VD 
-Argument : 12 
     [0] : S4   s4_a_lp_peak_num_up 
     [1] : S4   s4_a_lp_peak_num_dn 
     [2] : FL afl_a_compare[ORDINARY_BUFFSIZE * 2][ORDINARY_BUFFSIZE *   2] 
     [3] : S4 as4_a_used_peak_up[ORDINARY_BUFFSIZE *   2] 
     [4] : S4 as4_a_used_peak_dn[ORDINARY_BUFFSIZE *   2] 
     [5] : S4 as4_a_pair_index_up[ORDINARY_BUFFSIZE *   2] 
     [6] : S4 as4_a_pair_index_dn[ORDINARY_BUFFSIZE *   2] 
     [7] : FL*   pfl_a_min_comp 
     [8] : S4*   ps4_a_found 
     [9] : S4*   ps4_a_pair_index_up 
     [10] : S4*   ps4_a_pair_index_dn 
     [11] : S4*   ps4_a_pair_num 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_min_comp_prev; 
[2] MAINPROCESS(1) proc FL fl_t_min_comp_temp; 
[3] MAINPROCESS(1) proc S4 s4_t_pair_num_tmp; 
[4] MAINPROCESS(1) proc S4 as4_t_pair_index_up[ORDINARY_BUFFSIZE * 2]; 
[5] MAINPROCESS(1) proc S4 as4_t_pair_index_dn[ORDINARY_BUFFSIZE * 2]; 
[6] MAINPROCESS(1) proc S4 s4_t_lp_pair_num; 
[7] MAINPROCESS(1) proc S4 s4_t_lp_num_ordi_2; 
[8] MAINPROCESS(1) for <start> for ( 
[9] MAINPROCESS(1) for  s4_t_lp_num_ordi_2 = (S4)0; 
[10] MAINPROCESS(1) for  s4_t_lp_num_ordi_2 < ((S4)ORDINARY_BUFFSIZE * (S4)2 
[11] MAINPROCESS(1) for  ); 
[12] MAINPROCESS(1) for  s4_t_lp_num_ordi_2++) 
[13] MAINPROCESS(1) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal as4_t_pair_index_up[s4_t_lp_num_ordi_2] (S4)0;
[15] SUBPROCESS(1) equal as4_t_pair_index_dn[s4_t_lp_num_ordi_2] (S4)0;
[16] MAINPROCESS(2) if <start> if ( 
[17] MAINPROCESS(2) if  afl_a_compare[s4_a_lp_peak_num_up][s4_a_lp_peak_num_dn] < *pfl_a_min_comp 
[18] MAINPROCESS(2) if  ) 
[19] MAINPROCESS(2) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) if <start> if ( 
[21] SUBPROCESS(1) if  (as4_a_used_peak_up[s4_a_lp_peak_num_up] == (S4)0 
[22] SUBPROCESS(1) if  ) 
[23] SUBPROCESS(1) if  &&  (as4_a_used_peak_dn[s4_a_lp_peak_num_dn] == (S4)0)) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(1) equal *pfl_a_min_comp afl_a_compare[s4_a_lp_peak_num_up][s4_a_lp_peak_num_dn];
[26] SUBSUBPROCESS(1) equal *ps4_a_found (S4)1;
[27] SUBSUBPROCESS(1) equal *ps4_a_pair_index_up s4_a_lp_peak_num_up;
[28] SUBSUBPROCESS(1) equal *ps4_a_pair_index_dn s4_a_lp_peak_num_dn;
[29] SUBPROCESS(2) else<start> else 
[30] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) for <start> for ( 
[32] SUBSUBPROCESS(1) for  s4_t_lp_pair_num = (S4)0; 
[33] SUBSUBPROCESS(1) for  s4_t_lp_pair_num < *ps4_a_pair_num; 
[34] SUBSUBPROCESS(1) for  s4_t_lp_pair_num++) 
[35] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[36] SUBSUBSUBPROCESS(1) if <start> if ( 
[37] SUBSUBSUBPROCESS(1) if  ((!(as4_a_used_peak_up[s4_a_lp_peak_num_up] == (S4)0) 
[38] SUBSUBSUBPROCESS(1) if  ) 
[39] SUBSUBSUBPROCESS(1) if  &&   (as4_a_pair_index_up[s4_t_lp_pair_num] == s4_a_lp_peak_num_up)) 
[40] SUBSUBSUBPROCESS(1) if  ||  ((!(as4_a_used_peak_dn[s4_a_lp_peak_num_dn] == (S4)0)) 
[41] SUBSUBSUBPROCESS(1) if  &&   (as4_a_pair_index_dn[s4_t_lp_pair_num] == s4_a_lp_peak_num_dn))) 
[42] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[43] SUBSUBSUBSUBPROCESS(1) equal fl_t_min_comp_temp *pfl_a_min_comp;
[44] SUBSUBSUBSUBPROCESS(1) equal *pfl_a_min_comp afl_a_compare[s4_a_lp_peak_num_up][s4_a_lp_peak_num_dn];
[45] SUBSUBSUBSUBPROCESS(1) equal fl_t_min_comp_prev afl_a_compare[as4_a_pair_index_up[s4_t_lp_pair_num]][as4_a_pair_index_dn[s4_t_lp_pair_num]];
[46] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[47] SUBSUBSUBSUBPROCESS(1) if  *pfl_a_min_comp < fl_t_min_comp_prev 
[48] SUBSUBSUBSUBPROCESS(1) if  ) 
[49] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBSUBSUBPROCESS(1) equal as4_a_used_peak_up[as4_a_pair_index_up[s4_t_lp_pair_num]] (S4)0;
[51] SUBSUBSUBSUBSUBPROCESS(1) equal as4_a_used_peak_dn[as4_a_pair_index_dn[s4_t_lp_pair_num]] (S4)0;
[52] SUBSUBSUBSUBSUBPROCESS(1) equal as4_a_pair_index_up[s4_t_lp_pair_num] (S4)-1;
[53] SUBSUBSUBSUBSUBPROCESS(1) equal as4_a_pair_index_dn[s4_t_lp_pair_num] (S4)-1;
[54] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_found (S4)1;
[55] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_pair_index_up s4_a_lp_peak_num_up;
[56] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_pair_index_dn s4_a_lp_peak_num_dn;
[57] SUBSUBSUBSUBPROCESS(2) else<start> else 
[58] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBSUBSUBPROCESS(1) equal *pfl_a_min_comp fl_t_min_comp_temp;
[60] SUBPROCESS(3) equal s4_t_pair_num_tmp (S4)0;
[61] SUBPROCESS(3) for <start> for ( 
[62] SUBPROCESS(3) for  s4_t_lp_pair_num = (S4)0; 
[63] SUBPROCESS(3) for  s4_t_lp_pair_num < *ps4_a_pair_num; 
[64] SUBPROCESS(3) for  s4_t_lp_pair_num++) 
[65] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[66] SUBSUBPROCESS(1) if <start> if ( 
[67] SUBSUBPROCESS(1) if  as4_a_pair_index_up[s4_t_lp_pair_num] != (S4)-1 
[68] SUBSUBPROCESS(1) if  ) 
[69] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[70] SUBSUBSUBPROCESS(1) equal as4_t_pair_index_up[s4_t_pair_num_tmp] as4_a_pair_index_up[s4_t_lp_pair_num];
[71] SUBSUBSUBPROCESS(1) equal as4_t_pair_index_dn[s4_t_pair_num_tmp] as4_a_pair_index_dn[s4_t_lp_pair_num];
[72] SUBSUBSUBPROCESS(1) proc s4_t_pair_num_tmp++; 
[73] SUBPROCESS(4) if <start> if ( 
[74] SUBPROCESS(4) if  s4_t_pair_num_tmp > (S4)0 
[75] SUBPROCESS(4) if  ) 
[76] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[77] SUBSUBPROCESS(1) for <start> for ( 
[78] SUBSUBPROCESS(1) for  s4_t_lp_pair_num = (S4)0; 
[79] SUBSUBPROCESS(1) for  s4_t_lp_pair_num < s4_t_pair_num_tmp; 
[80] SUBSUBPROCESS(1) for  s4_t_lp_pair_num++) 
[81] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[82] SUBSUBSUBPROCESS(1) equal as4_a_pair_index_up[s4_t_lp_pair_num] as4_t_pair_index_up[s4_t_lp_pair_num];
[83] SUBSUBSUBPROCESS(1) equal as4_a_pair_index_dn[s4_t_lp_pair_num] as4_t_pair_index_dn[s4_t_lp_pair_num];
[84] MAINPROCESS(3) proc return; 
----------------- Total Codes : 84 lines
--------------------------
[Function Name] : fl_seek_low_speed_sot 
-Return type : FL 
-Argument : 2 
     [0] : const FL   afl_a_sot_detect_param[9] 
     [1] : U1   u1_a_alarming_flag 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j, k; 
[3] MAINPROCESS(1) proc S4 nearfield_doa_i[SLOW_SOT_FREQ_BIN_RANGE][1]; 
[4] MAINPROCESS(1) proc S4 nearfield_doa_peak_num_i[SLOW_SOT_FREQ_BIN_RANGE]; 
[5] MAINPROCESS(1) proc S4 nearfield_doa_q[SLOW_SOT_FREQ_BIN_RANGE][1]; 
[6] MAINPROCESS(1) proc S4 nearfield_doa_peak_num_q[SLOW_SOT_FREQ_BIN_RANGE]; 
[7] MAINPROCESS(1) proc S4 v0_doa_def; 
[8] MAINPROCESS(1) proc S4 v0_doa; 
[9] MAINPROCESS(1) proc FL dev; 
[10] MAINPROCESS(1) equal FL power_ave 0.0F;
[11] MAINPROCESS(1) proc S4 stationary_doa_line[N_DOA]; 
[12] MAINPROCESS(1) proc S4 sot_limit_doa_line_forward[N_DOA]; 
[13] MAINPROCESS(1) proc S4 sot_limit_doa_line_backward[N_DOA]; 
[14] MAINPROCESS(1) proc FL afl_t_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4]; 
[15] MAINPROCESS(1) proc FL afl_t_sot_check_object_q[SLOW_SOT_FREQ_BIN_RANGE][4]; 
[16] MAINPROCESS(1) proc S4 fast_sot_num; 
[17] MAINPROCESS(1) proc S4 not_fast_sot_num; 
[18] MAINPROCESS(1) equal S4 backward_priod 0;
[19] MAINPROCESS(1) equal S4 forward_point 0;
[20] MAINPROCESS(1) proc FL tmp_dev[2]; 
[21] MAINPROCESS(1) proc S4 sot_stop; 
[22] MAINPROCESS(1) equal S4 forward_priod 1;
[23] MAINPROCESS(1) proc U1 u1_t_alarming_flag_local; 
[24] MAINPROCESS(1) proc U1 u1_t_num_nearfield_doa_2f_i; 
[25] MAINPROCESS(1) proc U1 u1_t_num_nearfield_doa_2f_q; 
[26] MAINPROCESS(1) proc U1 u1_t_num_forward; 
[27] MAINPROCESS(1) proc U1 u1_t_num_backward; 
[28] MAINPROCESS(1) equal tmp_dev[0] 999.9F;
[29] MAINPROCESS(1) equal tmp_dev[1] 999.9F;
[30] MAINPROCESS(1) equal fast_sot_num (S4)0;
[31] MAINPROCESS(1) equal not_fast_sot_num (S4)0;
[32] MAINPROCESS(1) equal u1_t_alarming_flag_local (U1)0;
[33] MAINPROCESS(1) equal u1_t_num_nearfield_doa_2f_i (U1)0;
[34] MAINPROCESS(1) equal u1_t_num_nearfield_doa_2f_q (U1)0;
[35] MAINPROCESS(1) equal u1_t_num_forward (U1)0;
[36] MAINPROCESS(1) equal u1_t_num_backward (U1)0;
[37] MAINPROCESS(1) for<start> for( 
[38] MAINPROCESS(1) for j=0; 
[39] MAINPROCESS(1) for j<N_DOA; 
[40] MAINPROCESS(1) for j++) 
[41] MAINPROCESS(1) subproc SUBPROCESS(1) 
[42] SUBPROCESS(1) equal stationary_doa_line[j] 0;
[43] MAINPROCESS(2) for <start> for ( 
[44] MAINPROCESS(2) for  j = (S4)0; 
[45] MAINPROCESS(2) for  j < SLOW_SOT_FREQ_BIN_RANGE; 
[46] MAINPROCESS(2) for  j++) 
[47] MAINPROCESS(2) subproc SUBPROCESS(1) 
[48] SUBPROCESS(1) for <start> for ( 
[49] SUBPROCESS(1) for  k = (S4)0; 
[50] SUBPROCESS(1) for  k < (S4)4; 
[51] SUBPROCESS(1) for  k++) 
[52] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[53] SUBSUBPROCESS(1) equal afl_t_sot_check_object_i[j][k] CFL_UNKNOWN_VALUE;
[54] SUBSUBPROCESS(1) equal afl_t_sot_check_object_q[j][k] CFL_UNKNOWN_VALUE;
[55] MAINPROCESS(3) for <start> for ( 
[56] MAINPROCESS(3) for  j = (S4)0; 
[57] MAINPROCESS(3) for  j < SLOW_SOT_FREQ_BIN_RANGE; 
[58] MAINPROCESS(3) for  j++) 
[59] MAINPROCESS(3) subproc SUBPROCESS(1) 
[60] SUBPROCESS(1) equal nearfield_doa_i[j][0] (S4)-1;
[61] SUBPROCESS(1) equal nearfield_doa_q[j][0] (S4)-1;
[62] SUBPROCESS(1) equal nearfield_doa_peak_num_i[j] (S4)0;
[63] SUBPROCESS(1) equal nearfield_doa_peak_num_q[j] (S4)0;
[64] MAINPROCESS(4) subproc SUBPROCESS(1) 
[65] SUBPROCESS(1) func<start> u1_t_num_nearfield_doa_2f_i = calc_nearfield_doa_2f_I( 
[66] SUBPROCESS(1) func nearfield_doa_i, 
[67] SUBPROCESS(1) func nearfield_doa_peak_num_i, 
[68] SUBPROCESS(1) func SLOW_SOT_FREQ_BIN_START_I, 
[69] SUBPROCESS(1) func afl_t_sot_check_object_i 
[70] SUBPROCESS(1) func<end> ); 
[71] MAINPROCESS(5) subproc SUBPROCESS(1) 
[72] SUBPROCESS(1) func<start> u1_t_num_nearfield_doa_2f_q = calc_nearfield_doa_2f_Q( 
[73] SUBPROCESS(1) func nearfield_doa_q, 
[74] SUBPROCESS(1) func nearfield_doa_peak_num_q, 
[75] SUBPROCESS(1) func SLOW_SOT_FREQ_BIN_START_Q, 
[76] SUBPROCESS(1) func afl_t_sot_check_object_q 
[77] SUBPROCESS(1) func<end> ); 
[78] MAINPROCESS(6) func<start> v0_doa_def = (S4)(180.0 - st_g_bsm_loop_data.afl_installed_angle[0] + afl_a_sot_detect_param[2] 
[79] MAINPROCESS(6) func<end> ); 
[80] MAINPROCESS(6) func<start> v0_doa     = (S4)(180.0 - st_g_bsm_loop_data.afl_installed_angle[0] + afl_a_sot_detect_param[2] 
[81] MAINPROCESS(6) func<end> ); 
[82] MAINPROCESS(6) func<start> set_stationary_doa_line_2f( 
[83] MAINPROCESS(6) func stationary_doa_line, 
[84] MAINPROCESS(6) func v0_doa_def, 
[85] MAINPROCESS(6) func v0_doa 
[86] MAINPROCESS(6) func<end> ); 
[87] MAINPROCESS(6) func<start> set_sot_limit_doa_line_2f( 
[88] MAINPROCESS(6) func sot_limit_doa_line_backward, 
[89] MAINPROCESS(6) func v0_doa_def, 
[90] MAINPROCESS(6) func v0_doa, 
[91] MAINPROCESS(6) func CFL_SoT_V_TH_BWD 
[92] MAINPROCESS(6) func<end> ); 
[93] MAINPROCESS(6) func<start> memcpy(as4_g_stationary_doa_line, stationary_doa_line, sizeof(S4)*N_DOA 
[94] MAINPROCESS(6) func<end> ); 
[95] MAINPROCESS(6) func<start> memcpy(as4_g_sot_limit_doa_line_backward, sot_limit_doa_line_backward, sizeof(S4)*N_DOA 
[96] MAINPROCESS(6) func<end> ); 
[97] MAINPROCESS(6) func<start> memset(as4_g_nearfield_doa, 0x00, sizeof(as4_g_nearfield_doa) 
[98] MAINPROCESS(6) func<end> ); 
[99] MAINPROCESS(6) for<start> for( 
[100] MAINPROCESS(6) for i=0; 
[101] MAINPROCESS(6) for i<SLOW_SOT_FREQ_BIN_RANGE; 
[102] MAINPROCESS(6) for i++) 
[103] MAINPROCESS(6) subproc SUBPROCESS(1) 
[104] SUBPROCESS(1) if<start> if( 
[105] SUBPROCESS(1) if nearfield_doa_i[i][0]!=-1 
[106] SUBPROCESS(1) if ) 
[107] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[108] SUBSUBPROCESS(1) equal as4_g_nearfield_doa[nearfield_doa_i[i][0]] SLOW_SOT_FREQ_BIN_START_I+i;
[109] SUBPROCESS(2) if<start> if( 
[110] SUBPROCESS(2) if nearfield_doa_q[i][0]!=-1 
[111] SUBPROCESS(2) if ) 
[112] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[113] SUBSUBPROCESS(1) equal as4_g_nearfield_doa[nearfield_doa_q[i][0]] SLOW_SOT_FREQ_BIN_START_Q-i;
[114] MAINPROCESS(7) func<start> fn_bsm_low_calc_deviation( 
[115] MAINPROCESS(7) func forward_priod, 
[116] MAINPROCESS(7) func nearfield_doa_i, 
[117] MAINPROCESS(7) func nearfield_doa_q, 
[118] MAINPROCESS(7) func (const S4 *)stationary_doa_line, 
[119] MAINPROCESS(7) func &backward_priod, 
[120] MAINPROCESS(7) func tmp_dev, 
[121] MAINPROCESS(7) func v0_doa, 
[122] MAINPROCESS(7) func &fast_sot_num, 
[123] MAINPROCESS(7) func &not_fast_sot_num, 
[124] MAINPROCESS(7) func afl_t_sot_check_object_i, 
[125] MAINPROCESS(7) func afl_t_sot_check_object_q 
[126] MAINPROCESS(7) func<end> ); 
[127] MAINPROCESS(7) func<start> fn_bsm_low_judge_sot( 
[128] MAINPROCESS(7) func stationary_doa_line, 
[129] MAINPROCESS(7) func sot_limit_doa_line_forward, 
[130] MAINPROCESS(7) func sot_limit_doa_line_backward, 
[131] MAINPROCESS(7) func (const S4 *)nearfield_doa_peak_num_i, 
[132] MAINPROCESS(7) func nearfield_doa_i, 
[133] MAINPROCESS(7) func (const S4 *)nearfield_doa_peak_num_q, 
[134] MAINPROCESS(7) func nearfield_doa_q, 
[135] MAINPROCESS(7) func forward_priod, 
[136] MAINPROCESS(7) func backward_priod, 
[137] MAINPROCESS(7) func tmp_dev, 
[138] MAINPROCESS(7) func &dev, 
[139] MAINPROCESS(7) func v0_doa, 
[140] MAINPROCESS(7) func u1_a_alarming_flag, 
[141] MAINPROCESS(7) func u1_t_num_nearfield_doa_2f_i, 
[142] MAINPROCESS(7) func u1_t_num_nearfield_doa_2f_q, 
[143] MAINPROCESS(7) func afl_t_sot_check_object_i, 
[144] MAINPROCESS(7) func afl_t_sot_check_object_q, 
[145] MAINPROCESS(7) func &u1_t_num_forward, 
[146] MAINPROCESS(7) func &u1_t_num_backward 
[147] MAINPROCESS(7) func<end> ); 
[148] MAINPROCESS(7) func<start> fn_bsm_low_judge_wall( 
[149] MAINPROCESS(7) func (const FL *)tmp_dev, 
[150] MAINPROCESS(7) func u1_t_num_nearfield_doa_2f_i, 
[151] MAINPROCESS(7) func u1_t_num_nearfield_doa_2f_q, 
[152] MAINPROCESS(7) func u1_t_num_forward, 
[153] MAINPROCESS(7) func u1_t_num_backward 
[154] MAINPROCESS(7) func<end> ); 
[155] MAINPROCESS(7) func<start> fn_bsm_low_judge_fast_sot( 
[156] MAINPROCESS(7) func fast_sot_num, 
[157] MAINPROCESS(7) func not_fast_sot_num, 
[158] MAINPROCESS(7) func u1_a_alarming_flag 
[159] MAINPROCESS(7) func<end> ); 
[160] MAINPROCESS(7) func<start> fn_bsm_low_judge_exist_leading_car_main((const S4 (*)[1])nearfield_doa_i, 
[161] MAINPROCESS(7) func (const S4 (*)[1])nearfield_doa_q, 
[162] MAINPROCESS(7) func (const FL (*)[4])afl_t_sot_check_object_i, 
[163] MAINPROCESS(7) func (const FL (*)[4])afl_t_sot_check_object_q 
[164] MAINPROCESS(7) func<end> ); 
[165] MAINPROCESS(7) proc return dev; 
----------------- Total Codes : 165 lines
--------------------------
[Function Name] : s4_search_freq_peak_fsk_IQ 
-Return type : S4 
-Argument : 4 
     [0] : const FL   afl_a_power_2f[NB_FFT_PT_2F] 
     [1] : S4   as4_a_bin_2f[AUX_BUFFSIZE] 
     [2] : FL   afl_a_bin_power_2f[AUX_BUFFSIZE] 
     [3] : const FL   afl_a_thres_2f[NB_FFT_PT_2F] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) equal S4 s4_t_peak_num 0;
[4] MAINPROCESS(1) equal FL fl_t_temp 0;
[5] MAINPROCESS(1) equal s4_t_lp_k 0;
[6] MAINPROCESS(1) for <start> for ( 
[7] MAINPROCESS(1) for  s4_t_lp_i = FREQ_BIN_LOWER_LIMIT_2F; 
[8] MAINPROCESS(1) for  s4_t_lp_i < FREQ_BIN_UPPER_LIMIT_2F; 
[9] MAINPROCESS(1) for  s4_t_lp_i++) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) if <start> if ( 
[12] SUBPROCESS(1) if  (afl_a_power_2f[s4_t_lp_i] < afl_a_power_2f[s4_t_lp_i + 1]) 
[13] SUBPROCESS(1) if  && (afl_a_power_2f[s4_t_lp_i + 1] > afl_a_power_2f[s4_t_lp_i + 2]) 
[14] SUBPROCESS(1) if  && (afl_a_power_2f[s4_t_lp_i + 1] > afl_a_thres_2f[s4_t_lp_i + 1]) 
[15] SUBPROCESS(1) if  && (s4_t_lp_k < AUX_BUFFSIZE) 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal as4_a_bin_2f[s4_t_lp_k] s4_t_lp_i + (S4)1;
[19] SUBSUBPROCESS(1) equal afl_a_bin_power_2f[s4_t_lp_k] afl_a_power_2f[s4_t_lp_i + 1];
[20] SUBSUBPROCESS(1) proc s4_t_lp_k++; 
[21] MAINPROCESS(2) for <start> for ( 
[22] MAINPROCESS(2) for  s4_t_lp_i = FREQ_BIN_LOWER_LIMIT_2F_Q; 
[23] MAINPROCESS(2) for  s4_t_lp_i < (S4)((NB_FFT_PT_2F / 2) - 1 
[24] MAINPROCESS(2) for  ); 
[25] MAINPROCESS(2) for  s4_t_lp_i++) 
[26] MAINPROCESS(2) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) if <start> if ( 
[28] SUBPROCESS(1) if  (afl_a_power_2f[s4_t_lp_i] < afl_a_power_2f[s4_t_lp_i + 1]) 
[29] SUBPROCESS(1) if  && (afl_a_power_2f[s4_t_lp_i + 1] > afl_a_power_2f[s4_t_lp_i + 2]) 
[30] SUBPROCESS(1) if  && (afl_a_power_2f[s4_t_lp_i + 1] > afl_a_thres_2f[s4_t_lp_i + 1]) 
[31] SUBPROCESS(1) if  && (s4_t_lp_k < AUX_BUFFSIZE) 
[32] SUBPROCESS(1) if  ) 
[33] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) equal as4_a_bin_2f[s4_t_lp_k] s4_t_lp_i + (S4)1;
[35] SUBSUBPROCESS(1) equal afl_a_bin_power_2f[s4_t_lp_k] afl_a_power_2f[s4_t_lp_i + 1];
[36] SUBSUBPROCESS(1) proc s4_t_lp_k++; 
[37] MAINPROCESS(3) equal s4_t_peak_num s4_t_lp_k;
[38] MAINPROCESS(3) func<start> return (s4_t_peak_num 
[39] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 39 lines
--------------------------
[Function Name] : fn_bsm_2f_make_pair 
-Return type : VD 
-Argument : 7 
     [0] : S4   s4_a_doa_peak_num_2f 
     [1] : S4 as4_a_peak_wave_num[AUX_BUFFSIZE *   2] 
     [2] : const FL afl_a_peak_bins_intpl_2f[AUX_BUFFSIZE *   2] 
     [3] : const FL afl_a_peak_doa_bins_intpl_2f[AUX_BUFFSIZE *   2] 
     [4] : const FL afl_a_peak_doa_powers_2f[AUX_BUFFSIZE *   2] 
     [5] : S4   *ps4_a_pair_num_2f 
     [6] : NORMAL_BSM   ast_a_normal_2f[AUX_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_k; 
[3] MAINPROCESS(1) proc S4 s4_t_pair_num; 
[4] MAINPROCESS(1) proc FL afl_t_tmp_Ryy[3]; 
[5] MAINPROCESS(1) proc FL fl_t_tmp_Robs; 
[6] MAINPROCESS(1) proc FL fl_t_tmp_Vobs; 
[7] MAINPROCESS(1) proc FL fl_t_tmp_Rxobs; 
[8] MAINPROCESS(1) proc FL fl_t_tmp_Ryobs; 
[9] MAINPROCESS(1) proc FL fl_t_tmp_theta; 
[10] MAINPROCESS(1) proc S4 s4_t_wave_number[AUX_BUFFSIZE*2]; 
[11] MAINPROCESS(1) equal FL fl_t_pow_min 0.0F;
[12] MAINPROCESS(1) equal S4 s4_t_index -1;
[13] MAINPROCESS(1) proc U1 u1_t_lp_aux_buffsize; 
[14] MAINPROCESS(1) for <start> for ( 
[15] MAINPROCESS(1) for  u1_t_lp_aux_buffsize = (U1)0; 
[16] MAINPROCESS(1) for  u1_t_lp_aux_buffsize < ((U1)AUX_BUFFSIZE * (U1)2 
[17] MAINPROCESS(1) for  ); 
[18] MAINPROCESS(1) for  u1_t_lp_aux_buffsize++) 
[19] MAINPROCESS(1) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) equal s4_t_wave_number[u1_t_lp_aux_buffsize] (S4)0;
[21] MAINPROCESS(2) equal s4_t_pair_num 0;
[22] MAINPROCESS(2) for <start> for ( 
[23] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[24] MAINPROCESS(2) for  s4_t_lp_i < s4_a_doa_peak_num_2f; 
[25] MAINPROCESS(2) for  s4_t_lp_i++) 
[26] MAINPROCESS(2) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) func<start> fl_t_tmp_theta = -(PI / 180.0F * (st_g_bsm_loop_data.afl_installed_angle[0] + afl_a_peak_doa_bins_intpl_2f[s4_t_lp_i] +  (FL)DOA_BIN_START_ANG) 
[28] SUBPROCESS(1) func<end> ); 
[29] SUBPROCESS(1) for <start> for ( 
[30] SUBPROCESS(1) for  s4_t_lp_k = 0 ; 
[31] SUBPROCESS(1) for  s4_t_lp_k < 3 ; 
[32] SUBPROCESS(1) for  s4_t_lp_k++) 
[33] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[34] SUBSUBPROCESS(1) equal afl_t_tmp_Ryy[s4_t_lp_k] afl_g_cvw_fcw_ryy_matrix_2f[(S4)afl_a_peak_bins_intpl_2f[s4_t_lp_i]][s4_t_lp_k];
[35] SUBPROCESS(2) func<start> fl_t_tmp_Robs = fl_cal_r_fsk((const FL *)afl_t_tmp_Ryy 
[36] SUBPROCESS(2) func<end> ); 
[37] SUBPROCESS(2) equal fl_t_tmp_Rxobs (fl_t_tmp_Robs * (FL)fl_sin(fl_t_tmp_theta)) + st_g_bsm_loop_data.afl_installed_angle[1];
[38] SUBPROCESS(2) func<start> fl_t_tmp_Ryobs = fl_t_tmp_Robs * (FL)fl_cos(fl_t_tmp_theta 
[39] SUBPROCESS(2) func<end> ); 
[40] SUBPROCESS(2) func<start> fl_t_tmp_Vobs = VCOF_2F * (afl_a_peak_bins_intpl_2f[s4_t_lp_i] - (FL)(NB_FFT_PT_2F / 2) 
[41] SUBPROCESS(2) func<end> ); 
[42] SUBPROCESS(2) if <start> if ( 
[43] SUBPROCESS(2) if  fl_abs(fl_t_tmp_Ryobs) < EKF_RY_SIDE 
[44] SUBPROCESS(2) if  ) 
[45] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[46] SUBSUBPROCESS(1) equal fl_t_tmp_Vobs 0.0F;
[47] SUBPROCESS(3) if <start> if ( 
[48] SUBPROCESS(3) if  s4_t_pair_num < AUX_BUFFSIZE 
[49] SUBPROCESS(3) if  ) 
[50] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[51] SUBSUBPROCESS(1) if <start> if ( 
[52] SUBSUBPROCESS(1) if  (fl_t_tmp_Rxobs > st_g_bsm_loop_data.afl_installed_angle[1]) 
[53] SUBSUBPROCESS(1) if  && (fl_t_tmp_Rxobs < RX_MAX_2F) 
[54] SUBSUBPROCESS(1) if  && (fl_t_tmp_Ryobs < RY_MIN_2F) 
[55] SUBSUBPROCESS(1) if  && (fl_t_tmp_Robs > R_MAX_2F) 
[56] SUBSUBPROCESS(1) if  && (fl_t_tmp_Robs < R_MIN_2F) 
[57] SUBSUBPROCESS(1) if  ) 
[58] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBPROCESS(1) if <start> if ( 
[60] SUBSUBSUBPROCESS(1) if  fl_t_tmp_Robs < 0 
[61] SUBSUBSUBPROCESS(1) if  ) 
[62] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].s4_bin_up = (S4)(( 0.50F * ((-fl_t_tmp_Robs / RCOF) - (fl_t_tmp_Vobs / VCOF))) + 0.50F) + (S4)(NB_FFT_PT / 2 
[64] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[65] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].fl_bin_up_interpolate = ((0.50F * ((-fl_t_tmp_Robs / RCOF) - (fl_t_tmp_Vobs / VCOF))) + 0.50F) + ((FL)NB_FFT_PT / 2.0F 
[66] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[67] SUBSUBSUBPROCESS(2) else<start> else 
[68] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[69] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].s4_bin_up = (S4)(( 0.50F * ((fl_t_tmp_Robs / RCOF) - (fl_t_tmp_Vobs / VCOF))) + 0.50F) + (S4)(NB_FFT_PT / 2 
[70] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[71] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].fl_bin_up_interpolate = (( 0.50F * (fl_t_tmp_Robs / RCOF - fl_t_tmp_Vobs / VCOF)) + 0.50F) + (FL)(NB_FFT_PT / 2 
[72] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[73] SUBSUBSUBPROCESS(3) if <start> if ( 
[74] SUBSUBSUBPROCESS(3) if  fl_t_tmp_Robs < 0 
[75] SUBSUBSUBPROCESS(3) if  ) 
[76] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[77] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].s4_bin_dn = (S4)(( 0.50F * ((-fl_t_tmp_Robs / RCOF) + (fl_t_tmp_Vobs / VCOF))) + 0.50F) + (S4)(NB_FFT_PT / 2 
[78] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[79] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].fl_bin_dn_interpolate = (( 0.50F * (-fl_t_tmp_Robs / RCOF + fl_t_tmp_Vobs / VCOF)) + 0.50F) + ((FL)NB_FFT_PT / 2.0F 
[80] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[81] SUBSUBSUBPROCESS(4) else<start> else 
[82] SUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBPROCESS(1) 
[83] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].s4_bin_dn = (S4)((0.50F * ((fl_t_tmp_Robs / RCOF) + (fl_t_tmp_Vobs / VCOF)) + 0.50F)) + (S4)(NB_FFT_PT / 2 
[84] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[85] SUBSUBSUBSUBPROCESS(1) func<start> ast_a_normal_2f[s4_t_pair_num].fl_bin_dn_interpolate = ((0.50F * ((fl_t_tmp_Robs / RCOF) + (fl_t_tmp_Vobs / VCOF))) + 0.50F) + ((FL)NB_FFT_PT / 2.0F 
[86] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[87] SUBSUBSUBPROCESS(5) equal s4_t_wave_number[s4_t_pair_num] as4_a_peak_wave_num[s4_t_lp_i];
[88] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].s4_bin_up_music (S4)afl_a_peak_doa_bins_intpl_2f[s4_t_lp_i];
[89] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_doa_up_interpolate afl_a_peak_doa_bins_intpl_2f[s4_t_lp_i];
[90] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_power_up afl_g_cvw_lfm_ftt_power[0][ast_a_normal_2f[s4_t_pair_num].s4_bin_up];
[91] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_power_up_music afl_a_peak_doa_powers_2f[s4_t_lp_i];
[92] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_theta_up fl_t_tmp_theta;
[93] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].s4_bin_dn_music ast_a_normal_2f[s4_t_pair_num].s4_bin_up_music;
[94] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_doa_dn_interpolate ast_a_normal_2f[s4_t_pair_num].fl_doa_up_interpolate;
[95] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_power_dn afl_g_cvw_lfm_ftt_power[1][ast_a_normal_2f[s4_t_pair_num].s4_bin_dn];
[96] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_power_dn_music ast_a_normal_2f[s4_t_pair_num].fl_power_up_music;
[97] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_theta_dn ast_a_normal_2f[s4_t_pair_num].fl_theta_up;
[98] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_Robs fl_t_tmp_Robs;
[99] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_Rxobs fl_t_tmp_Rxobs;
[100] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_Ryobs fl_t_tmp_Ryobs;
[101] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_Vobs fl_t_tmp_Vobs;
[102] SUBSUBSUBPROCESS(5) equal ast_a_normal_2f[s4_t_pair_num].fl_Vxobs 0.0F;
[103] SUBSUBSUBPROCESS(5) func<start> ast_a_normal_2f[s4_t_pair_num].fl_Vyobs = fl_get_vy( 
[104] SUBSUBSUBPROCESS(5) func ast_a_normal_2f[s4_t_pair_num].fl_Vobs, 
[105] SUBSUBSUBPROCESS(5) func fl_cos(ast_a_normal_2f[s4_t_pair_num].fl_theta_up), 
[106] SUBSUBSUBPROCESS(5) func ast_a_normal_2f[s4_t_pair_num].fl_Ryobs, 
[107] SUBSUBSUBPROCESS(5) func fl_g_v_self_bsm_for_base 
[108] SUBSUBSUBPROCESS(5) func<end> ); 
[109] SUBSUBSUBPROCESS(5) if <start> if ( 
[110] SUBSUBSUBPROCESS(5) if  fl_abs(ast_a_normal_2f[s4_t_pair_num].fl_Vyobs + fl_g_v_self_bsm_for_base / 3.6F) < 0.5F 
[111] SUBSUBSUBPROCESS(5) if  ) 
[112] SUBSUBSUBPROCESS(5) subproc SUBSUBSUBSUBPROCESS(1) 
[113] SUBSUBSUBSUBPROCESS(1) equal ast_a_normal_2f[s4_t_pair_num].s4_flg_stop 1;
[114] SUBSUBSUBPROCESS(6) else<start> else 
[115] SUBSUBSUBPROCESS(6) subproc SUBSUBSUBSUBPROCESS(1) 
[116] SUBSUBSUBSUBPROCESS(1) equal ast_a_normal_2f[s4_t_pair_num].s4_flg_stop 0;
[117] SUBSUBSUBPROCESS(7) proc s4_t_pair_num++; 
[118] SUBPROCESS(4) else<start> else 
[119] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[120] SUBSUBPROCESS(1) equal fl_t_pow_min 0.0F;
[121] SUBSUBPROCESS(1) equal s4_t_index -1;
[122] SUBSUBPROCESS(1) for<start> for( 
[123] SUBSUBPROCESS(1) for s4_t_lp_k=0; 
[124] SUBSUBPROCESS(1) for s4_t_lp_k<s4_t_pair_num; 
[125] SUBSUBPROCESS(1) for s4_t_lp_k++) 
[126] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[127] SUBSUBSUBPROCESS(1) if <start> if ( 
[128] SUBSUBSUBPROCESS(1) if  (fl_abs(afl_g_cvw_fcw_ftt_power[(S4)afl_a_peak_bins_intpl_2f[s4_t_lp_i]]) > fl_abs(afl_g_cvw_fcw_ftt_power[(S4)afl_a_peak_bins_intpl_2f[s4_t_lp_k]]) 
[129] SUBSUBSUBPROCESS(1) if  ) 
[130] SUBSUBSUBPROCESS(1) if  &&  (fl_t_pow_min > afl_g_cvw_fcw_ftt_power[(S4)afl_a_peak_bins_intpl_2f[s4_t_lp_k]])) 
[131] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[132] SUBSUBSUBSUBPROCESS(1) equal fl_t_pow_min afl_g_cvw_fcw_ftt_power[(S4)afl_a_peak_bins_intpl_2f[s4_t_lp_k]];
[133] SUBSUBSUBSUBPROCESS(1) equal s4_t_index s4_t_lp_k;
[134] SUBSUBPROCESS(2) if<start> if( 
[135] SUBSUBPROCESS(2) if s4_t_index != -1 
[136] SUBSUBPROCESS(2) if ) 
[137] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[138] SUBSUBSUBPROCESS(1) func<start> fn_init(&ast_a_normal_2f[s4_t_index], 1 
[139] SUBSUBSUBPROCESS(1) func<end> ); 
[140] SUBSUBSUBPROCESS(1) func<start> s4_trim_normal_2f(ast_a_normal_2f 
[141] SUBSUBSUBPROCESS(1) func<end> ); 
[142] SUBSUBSUBPROCESS(1) proc s4_t_pair_num--; 
[143] SUBSUBSUBPROCESS(1) proc s4_t_lp_i--; 
[144] SUBSUBSUBPROCESS(1) if<start> if( 
[145] SUBSUBSUBPROCESS(1) if s4_t_lp_i<-1 
[146] SUBSUBSUBPROCESS(1) if ) 
[147] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[148] SUBSUBSUBSUBPROCESS(1) equal s4_t_lp_i -1;
[149] MAINPROCESS(3) for <start> for ( 
[150] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[151] MAINPROCESS(3) for  s4_t_lp_i < (AUX_BUFFSIZE * 2 
[152] MAINPROCESS(3) for  ); 
[153] MAINPROCESS(3) for  s4_t_lp_i++) 
[154] MAINPROCESS(3) subproc SUBPROCESS(1) 
[155] SUBPROCESS(1) equal as4_a_peak_wave_num[s4_t_lp_i] s4_t_wave_number[s4_t_lp_i];
[156] MAINPROCESS(4) proc return; 
----------------- Total Codes : 156 lines
--------------------------
[Function Name] : fn_bsm_chkfr_check_alart_max_cycle 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_tos_cycle_max 
     [1] : S4   *ps4_a_sot_cycle_max 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<TARGET_BUFFSIZE; 
[5] MAINPROCESS(1) for i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if <start> if ( 
[8] SUBPROCESS(1) if  st_g_bsm_alarm_data.afl_alarmed_target[i][0] != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if <start> if ( 
[12] SUBSUBPROCESS(1) if  st_g_bsm_alarm_data.afl_alarmed_target[i][4] == ALARM_TYPE_TOS 
[13] SUBSUBPROCESS(1) if  ) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) if <start> if ( 
[16] SUBSUBSUBPROCESS(1) if  (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3] > *ps4_a_tos_cycle_max 
[17] SUBSUBSUBPROCESS(1) if  ) 
[18] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_tos_cycle_max (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3];
[20] SUBSUBPROCESS(2) if<start> if( 
[21] SUBSUBPROCESS(2) if (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][4]==ALARM_TYPE_SOT 
[22] SUBSUBPROCESS(2) if ) 
[23] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBPROCESS(1) if<start> if( 
[25] SUBSUBSUBPROCESS(1) if (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3] > *ps4_a_sot_cycle_max 
[26] SUBSUBSUBPROCESS(1) if ) 
[27] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_sot_cycle_max (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3];
[29] MAINPROCESS(2) proc return; 
----------------- Total Codes : 29 lines
--------------------------
[Function Name] : s4_bsm_chkfr_check_tos_alart_sts 
-Return type : static S4 
-Argument : 2 
     [0] : S4   s4_a_tos_cycle_max 
     [1] : S4   s4_a_sot_cycle_max 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_tmp_tos_flag; 
[2] MAINPROCESS(1) proc S4 s4_t_exit; 
[3] MAINPROCESS(1) equal s4_t_exit 0;
[4] MAINPROCESS(1) equal s4_t_tmp_tos_flag 0;
[5] MAINPROCESS(1) if<start> if( 
[6] MAINPROCESS(1) if s4_a_tos_cycle_max > s4_a_sot_cycle_max 
[7] MAINPROCESS(1) if ) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) equal s4_t_tmp_tos_flag 1;
[10] MAINPROCESS(2) if <start> if ( 
[11] MAINPROCESS(2) if  (s4_t_tmp_tos_flag==0 
[12] MAINPROCESS(2) if  ) 
[13] MAINPROCESS(2) if  &&  (st_g_bsm_loop_data.as4_flg_tos_frontline[0]==0) 
[14] MAINPROCESS(2) if  &&  (st_g_bsm_loop_data.as4_flg_tos_end[0] == 0)) 
[15] MAINPROCESS(2) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) equal s4_t_exit 1;
[17] MAINPROCESS(3) proc return s4_t_exit; 
----------------- Total Codes : 17 lines
--------------------------
[Function Name] : fn_bsm_chkfr_check_alart_max_cycle 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_tos_cycle_max 
     [1] : S4   *ps4_a_sot_cycle_max 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<TARGET_BUFFSIZE; 
[5] MAINPROCESS(1) for i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if <start> if ( 
[8] SUBPROCESS(1) if  st_g_bsm_alarm_data.afl_alarmed_target[i][0] != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if <start> if ( 
[12] SUBSUBPROCESS(1) if  st_g_bsm_alarm_data.afl_alarmed_target[i][4] == ALARM_TYPE_TOS 
[13] SUBSUBPROCESS(1) if  ) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) if <start> if ( 
[16] SUBSUBSUBPROCESS(1) if  (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3] > *ps4_a_tos_cycle_max 
[17] SUBSUBSUBPROCESS(1) if  ) 
[18] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_tos_cycle_max (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3];
[20] SUBSUBPROCESS(2) if<start> if( 
[21] SUBSUBPROCESS(2) if (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][4]==ALARM_TYPE_SOT 
[22] SUBSUBPROCESS(2) if ) 
[23] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBPROCESS(1) if<start> if( 
[25] SUBSUBSUBPROCESS(1) if (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3] > *ps4_a_sot_cycle_max 
[26] SUBSUBSUBPROCESS(1) if ) 
[27] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_sot_cycle_max (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3];
[29] MAINPROCESS(2) proc return; 
----------------- Total Codes : 29 lines
--------------------------
[Function Name] : fn_bsm_chkfr_check_alart_max_cycle 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_tos_cycle_max 
     [1] : S4   *ps4_a_sot_cycle_max 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<TARGET_BUFFSIZE; 
[5] MAINPROCESS(1) for i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if <start> if ( 
[8] SUBPROCESS(1) if  st_g_bsm_alarm_data.afl_alarmed_target[i][0] != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if  ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if <start> if ( 
[12] SUBSUBPROCESS(1) if  st_g_bsm_alarm_data.afl_alarmed_target[i][4] == ALARM_TYPE_TOS 
[13] SUBSUBPROCESS(1) if  ) 
[14] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[15] SUBSUBSUBPROCESS(1) if <start> if ( 
[16] SUBSUBSUBPROCESS(1) if  (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3] > *ps4_a_tos_cycle_max 
[17] SUBSUBSUBPROCESS(1) if  ) 
[18] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_tos_cycle_max (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3];
[20] SUBSUBPROCESS(2) if<start> if( 
[21] SUBSUBPROCESS(2) if (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][4]==ALARM_TYPE_SOT 
[22] SUBSUBPROCESS(2) if ) 
[23] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBPROCESS(1) if<start> if( 
[25] SUBSUBSUBPROCESS(1) if (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3] > *ps4_a_sot_cycle_max 
[26] SUBSUBSUBPROCESS(1) if ) 
[27] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_sot_cycle_max (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3];
[29] MAINPROCESS(2) proc return; 
----------------- Total Codes : 29 lines
--------------------------
[Function Name] : s4_bsm_chkfr_check_tos_alart_sts 
-Return type : static S4 
-Argument : 2 
     [0] : S4   s4_a_tos_cycle_max 
     [1] : S4   s4_a_sot_cycle_max 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_tmp_tos_flag; 
[2] MAINPROCESS(1) proc S4 s4_t_exit; 
[3] MAINPROCESS(1) equal s4_t_exit 0;
[4] MAINPROCESS(1) equal s4_t_tmp_tos_flag 0;
[5] MAINPROCESS(1) if<start> if( 
[6] MAINPROCESS(1) if s4_a_tos_cycle_max > s4_a_sot_cycle_max 
[7] MAINPROCESS(1) if ) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) equal s4_t_tmp_tos_flag 1;
[10] MAINPROCESS(2) if <start> if ( 
[11] MAINPROCESS(2) if  (s4_t_tmp_tos_flag==0 
[12] MAINPROCESS(2) if  ) 
[13] MAINPROCESS(2) if  &&  (st_g_bsm_loop_data.as4_flg_tos_frontline[0]==0) 
[14] MAINPROCESS(2) if  &&  (st_g_bsm_loop_data.as4_flg_tos_end[0] == 0)) 
[15] MAINPROCESS(2) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) equal s4_t_exit 1;
[17] MAINPROCESS(3) proc return s4_t_exit; 
----------------- Total Codes : 17 lines
--------------------------
[Function Name] : fn_bsm_low_calc_deviation 
-Return type : static VD 
-Argument : 11 
     [0] : S4   s4_a_forward_priod 
     [1] : S4   as4_a_nearfield_doa_i[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [2] : S4   as4_a_nearfield_doa_q[SLOW_SOT_FREQ_BIN_RANGE][1] 
     [3] : const S4   as4_stationary_doa_line[N_DOA] 
     [4] : S4   *ps4_a_backward_priod 
     [5] : FL   afl_a_buf_dev[2] 
     [6] : S4   s4_a_v0_doa 
     [7] : S4   *ps4_a_fast_sot_num 
     [8] : S4   *ps4_a_not_fast_sot_num 
     [9] : FL   afl_a_sot_check_object_i[SLOW_SOT_FREQ_BIN_RANGE][4] 
     [10] : FL   afl_a_sot_check_object_q[SLOW_SOT_FREQ_BIN_RANGE][4] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 fast_sot_limit_line[N_DOA]; 
[2] MAINPROCESS(1) equal afl_a_buf_dev[0] 999.9F;
[3] MAINPROCESS(1) equal afl_a_buf_dev[1] 999.9F;
[4] MAINPROCESS(1) if<start> if( 
[5] MAINPROCESS(1) if fl_g_v_self_bsm_for_base>5.0F 
[6] MAINPROCESS(1) if ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] SUBSUBPROCESS(1) func<start> afl_a_buf_dev[0] = calc_deviation_of_doa_freq_line_stationary_2( 
[10] SUBSUBPROCESS(1) func (const S4 (*)[1])as4_a_nearfield_doa_i, 
[11] SUBSUBPROCESS(1) func SLOW_SOT_FREQ_BIN_START_I, 
[12] SUBSUBPROCESS(1) func (const S4 *)as4_stationary_doa_line, 
[13] SUBSUBPROCESS(1) func 0 
[14] SUBSUBPROCESS(1) func ,ps4_a_backward_priod 
[15] SUBSUBPROCESS(1) func ,s4_a_v0_doa 
[16] SUBSUBPROCESS(1) func ,ps4_a_fast_sot_num 
[17] SUBSUBPROCESS(1) func ,ps4_a_not_fast_sot_num 
[18] SUBSUBPROCESS(1) func ,fast_sot_limit_line 
[19] SUBSUBPROCESS(1) func ,(const FL (*)[4])afl_a_sot_check_object_i 
[20] SUBSUBPROCESS(1) func<end> ); 
[21] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[22] SUBSUBPROCESS(1) func<start> afl_a_buf_dev[1] = calc_deviation_of_doa_freq_line_stationary_2( 
[23] SUBSUBPROCESS(1) func (const S4 (*)[1])as4_a_nearfield_doa_q, 
[24] SUBSUBPROCESS(1) func SLOW_SOT_FREQ_BIN_START_Q-SLOW_SOT_FREQ_BIN_RANGE, 
[25] SUBSUBPROCESS(1) func (const S4 *)as4_stationary_doa_line, 
[26] SUBSUBPROCESS(1) func 1 
[27] SUBSUBPROCESS(1) func ,ps4_a_backward_priod 
[28] SUBSUBPROCESS(1) func ,s4_a_v0_doa 
[29] SUBSUBPROCESS(1) func ,ps4_a_fast_sot_num 
[30] SUBSUBPROCESS(1) func ,ps4_a_not_fast_sot_num 
[31] SUBSUBPROCESS(1) func ,fast_sot_limit_line 
[32] SUBSUBPROCESS(1) func ,(const FL (*)[4])afl_a_sot_check_object_q 
[33] SUBSUBPROCESS(1) func<end> ); 
[34] MAINPROCESS(2) proc return; 
----------------- Total Codes : 34 lines
--------------------------
[Function Name] : fn_miki_test1 
-Return type : VD 
-Argument : 2 
     [0] : type1   arg1 
     [1] : type2   arg2 
----- Codes -----
[1] MAINPROCESS(1) equal TEST_IFDEF_1_VALID 0;
[2] MAINPROCESS(1) equal TEST_IFNDEF_2_VALID 0;
[3] MAINPROCESS(1) equal TEST_ELSE_4_VALID 0;
[4] MAINPROCESS(1) proc return; 
----------------- Total Codes : 4 lines
--------------------------
[Function Name] : fn_miki_test2 
-Return type : VD 
-Argument : 2 
     [0] : type1   arg1 
     [1] : type2   arg2 
----- Codes -----
[1] MAINPROCESS(1) equal TEST_IFNDEF_15_VALID 0;
[2] MAINPROCESS(1) equal TEST_ELSE_18_VALID 0;
[3] MAINPROCESS(1) equal TEST_IFNDEF_2_VALID 0;
[4] MAINPROCESS(1) equal TEST_IFNDEF_21_VALID 0;
[5] MAINPROCESS(1) equal TEST_ELSE_24_VALID 0;
[6] MAINPROCESS(1) if<start> if( 
[7] MAINPROCESS(1) if lv1_1 == 11 
[8] MAINPROCESS(1) if ) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if<start> if( 
[11] SUBPROCESS(1) if lv1_1_1 == 111 
[12] SUBPROCESS(1) if ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) equal level1_1_1_1 hoge1_1_1_1;
[15] SUBSUBPROCESS(1) if<start> if( 
[16] SUBSUBPROCESS(1) if hogehoge_1 
[17] SUBSUBPROCESS(1) if ) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) if<start> if( 
[20] SUBSUBSUBPROCESS(1) if hogehoge_2 
[21] SUBSUBSUBPROCESS(1) if ) 
[22] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBSUBPROCESS(1) equal level1_1_1_1 hoge1_1_1_1;
[24] SUBSUBSUBSUBPROCESS(1) equal level1_1_1_2 hoge1_1_1_2;
[25] SUBPROCESS(2) else if<start> else if( 
[26] SUBPROCESS(2) else if lv1_1_2 == 112 
[27] SUBPROCESS(2) else if ) 
[28] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(1) equal level1_1_2_1 hoge1_1_2_1;
[30] SUBPROCESS(3) else<start> else 
[31] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) equal level1_1_3_1 hoge1_1_3_1;
[33] MAINPROCESS(2) else if<start> else if( 
[34] MAINPROCESS(2) else if lv1_2 == 12 
[35] MAINPROCESS(2) else if ) 
[36] MAINPROCESS(2) subproc SUBPROCESS(1) 
[37] SUBPROCESS(1) equal level1_2_1 hoge1_2_1;
[38] MAINPROCESS(3) else<start> else 
[39] MAINPROCESS(3) subproc SUBPROCESS(1) 
[40] SUBPROCESS(1) equal level1_3_1 hoge1_3_1;
[41] MAINPROCESS(4) proc return; 
----------------- Total Codes : 41 lines
