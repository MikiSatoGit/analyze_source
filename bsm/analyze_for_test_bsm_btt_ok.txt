Total lines: 589 
Total functions : 20 
--------------------------
[Function Name] : = 
-Return type : const BTT_RETRUN_t BTT_RET_t 
-Argument : 1 
     [0] : const BTT_RETRUN_t BTT_RET_t   = 
----- Codes -----
[1] MAINPROCESS(1) ??? BTT_CAN_CONFIG_DISABLE, 
[2] MAINPROCESS(1) ??? BTT_CAN_CONFIG_ENABLE, 
[3] MAINPROCESS(1) ??? BTT_DRV_SW_OFF, 
[4] MAINPROCESS(1) ??? BTT_DRV_SW_ON, 
[5] MAINPROCESS(1) ??? BTT_STATE_DISABLE, 
[6] MAINPROCESS(1) ??? BTT_STATE_OFF, 
[7] MAINPROCESS(1) ??? BTT_STATE_ON, 
[8] MAINPROCESS(1) ??? BTT_STATE_OFFTEMP, 
[9] MAINPROCESS(1) ??? BTT_DRV_STATE_DISABLE, 
[10] MAINPROCESS(1) ??? BTT_DRV_STATE_OFF, 
[11] MAINPROCESS(1) ??? BTT_DRV_STATE_PENDING, 
[12] MAINPROCESS(1) ??? BTT_DRV_STATE_CONNECT, 
[13] MAINPROCESS(1) ??? BTT_DRV_STATE_NOTCONNECT, 
[14] MAINPROCESS(1) ??? BTT_DRV_STATE_OFFTEMP, 
[15] MAINPROCESS(1) ??? BTT_FUNC_DEACTIVE, 
[16] MAINPROCESS(1) ??? BTT_FUNC_ACTIVE, 
[17] MAINPROCESS(1) ??? BTT_FUNC_DISABLE, 
[18] MAINPROCESS(1) ??? BTT_FUNC_ENABLE, 
[19] MAINPROCESS(1) ??? BTT_TRAILER_FLAG_UNKNOWN, 
[20] MAINPROCESS(1) ??? BTT_TRAILER_FLAG_CONNECT, 
[21] MAINPROCESS(1) ??? BTT_TRAILER_FLAG_NOTCONNECT, 
[22] MAINPROCESS(1) ??? BTT_TRAILER_SIZE_STAT_UNKNOWN, 
[23] MAINPROCESS(1) ??? BTT_TRAILER_SIZE_STAT_VALID, 
[24] MAINPROCESS(1) ??? BTT_TRAILER_SIZE_STAT_INVALID, 
[25] MAINPROCESS(1) ??? BTT_UNINITIALIZED, 
[26] MAINPROCESS(1) ??? BTT_INITIALIZED, 
[27] MAINPROCESS(1) ??? BTT_TRUE, 
[28] MAINPROCESS(1) ??? BTT_FALSE 
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : = 
-Return type : BTT_STAT st_g_btt_stat 
-Argument : 1 
     [0] : BTT_STAT st_g_btt_stat   = 
----- Codes -----
[1] MAINPROCESS(1) ??? BTT_STATE_DISABLE, 
[2] MAINPROCESS(1) ??? BTT_STATE_DISABLE, 
[3] MAINPROCESS(1) ??? BTT_DRV_STATE_DISABLE, 
[4] MAINPROCESS(1) ??? BTT_FUNC_DEACTIVE, 
[5] MAINPROCESS(1) ??? BTT_FUNC_DEACTIVE, 
[6] MAINPROCESS(1) ??? BTT_FUNC_DEACTIVE, 
[7] MAINPROCESS(1) ??? BTT_FUNC_DEACTIVE, 
[8] MAINPROCESS(1) ??? BTT_FUNC_DEACTIVE, 
[9] MAINPROCESS(1) ??? BTT_UNINITIALIZED 
[10] MAINPROCESS(1) ??? ,BTT_FALSE 
[11] MAINPROCESS(1) ??? ,(S4)0 
----------------- Total Codes : 11 lines
--------------------------
[Function Name] : = 
-Return type : BTT_RESULT st_g_btt_result 
-Argument : 1 
     [0] : BTT_RESULT st_g_btt_result   = 
----- Codes -----
[1] MAINPROCESS(1) ??? BTT_TRAILER_FLAG_UNKNOWN, 
[2] MAINPROCESS(1) ??? BTT_TRAILER_SIZE_UNKNOWN, 
[3] MAINPROCESS(1) ??? BTT_TRAILER_SIZE_STAT_UNKNOWN, 
[4] MAINPROCESS(1) ??? BTT_TRAILER_SIZE_UNKNOWN, 
[5] MAINPROCESS(1) ??? BTT_TRAILER_SIZE_STAT_UNKNOWN 
----------------- Total Codes : 5 lines
--------------------------
[Function Name] : = 
-Return type : BTT_ALERTAREA st_g_btt_alertarea 
-Argument : 1 
     [0] : BTT_ALERTAREA st_g_btt_alertarea   = 
----- Codes -----
[1] MAINPROCESS(1) ??? BTT_REAR_RANGE_UNKNOWN, 
[2] MAINPROCESS(1) ??? BTT_REAR_RANGE_UNKNOWN, 
[3] MAINPROCESS(1) ??? BTT_SIDE_RANGE_UNKNOWN, 
[4] MAINPROCESS(1) ??? BTT_SIDE_RANGE_UNKNOWN, 
[5] MAINPROCESS(1) ??? BTT_REAR_RANGE_UNKNOWN, 
[6] MAINPROCESS(1) ??? BTT_REAR_RANGE_UNKNOWN, 
[7] MAINPROCESS(1) ??? BTT_SIDE_RANGE_UNKNOWN, 
[8] MAINPROCESS(1) ??? BTT_SIDE_RANGE_UNKNOWN, 
[9] MAINPROCESS(1) ??? BTT_SIDE_RANGE_UNKNOWN 
----------------- Total Codes : 9 lines
--------------------------
[Function Name] : = 
-Return type : BSM_STANDARD st_g_bsm_alertarea_for_test 
-Argument : 1 
     [0] : BSM_STANDARD st_g_bsm_alertarea_for_test   = 
----- Codes -----
[1] MAINPROCESS(1) ??? BTT_REAR_RANGE_UNKNOWN, 
[2] MAINPROCESS(1) ??? BTT_REAR_RANGE_UNKNOWN, 
[3] MAINPROCESS(1) ??? BTT_SIDE_RANGE_UNKNOWN, 
[4] MAINPROCESS(1) ??? BTT_SIDE_RANGE_UNKNOWN 
----------------- Total Codes : 4 lines
--------------------------
[Function Name] : = 
-Return type : BTT_CLUSTER_INFO st_g_cluster_info_for_test 
-Argument : 1 
     [0] : BTT_CLUSTER_INFO st_g_cluster_info_for_test   = 
----- Codes -----
[1] MAINPROCESS(1) ??? CFL_UNKNOWN_VALUE 
----------------- Total Codes : 1 lines
--------------------------
[Function Name] : = 
-Return type : BTT_AUX_TRAILER_INFO st_g_aux_trailer_info_for_test 
-Argument : 1 
     [0] : BTT_AUX_TRAILER_INFO st_g_aux_trailer_info_for_test   = 
----- Codes -----
[1] MAINPROCESS(1) ??? CFL_UNKNOWN_VALUE 
----------------- Total Codes : 1 lines
--------------------------
[Function Name] : = 
-Return type : BTT_HITCH_ANGLE st_g_hitch_angle_for_test 
-Argument : 1 
     [0] : BTT_HITCH_ANGLE st_g_hitch_angle_for_test   = 
----- Codes -----
[1] MAINPROCESS(1) ??? CFL_UNKNOWN_VALUE 
----------------- Total Codes : 1 lines
--------------------------
[Function Name] : = 
-Return type : BTT_ATD_PARAM st_atd_params 
-Argument : 1 
     [0] : BTT_ATD_PARAM st_atd_params   = 
----- Codes -----
[1] MAINPROCESS(1) ??? (S4) 0 
----------------- Total Codes : 1 lines
--------------------------
[Function Name] : = 
-Return type : BTT_TLE_PARAM st_tle_params 
-Argument : 1 
     [0] : BTT_TLE_PARAM st_tle_params   = 
----- Codes -----
[1] MAINPROCESS(1) ??? (S4) 0 
----------------- Total Codes : 1 lines
--------------------------
[Function Name] : = 
-Return type : BTT_TWE_PARAM st_twe_params 
-Argument : 1 
     [0] : BTT_TWE_PARAM st_twe_params   = 
----- Codes -----
[1] MAINPROCESS(1) ??? (S4) 0 
----------------- Total Codes : 1 lines
--------------------------
[Function Name] : = 
-Return type : BTT_AAZ_PARAM st_aaz_params 
-Argument : 1 
     [0] : BTT_AAZ_PARAM st_aaz_params   = 
----- Codes -----
[1] MAINPROCESS(1) ??? BTT_REAR_RANGE_UNKNOWN, 
[2] MAINPROCESS(1) ??? BTT_TRUE, 
[3] MAINPROCESS(1) ??? BTT_TRAILER_SIZE_UNKNOWN, 
[4] MAINPROCESS(1) ??? (S4) 0, 
[5] MAINPROCESS(1) ??? (S4) 0, 
[6] MAINPROCESS(1) ??? (S4) 0, 
[7] MAINPROCESS(1) ??? BTT_TRAILER_SIZE_UNKNOWN, 
[8] MAINPROCESS(1) ??? (S4) 0, 
[9] MAINPROCESS(1) ??? (S4) 0, 
[10] MAINPROCESS(1) ??? (S4) 0 
----------------- Total Codes : 10 lines
--------------------------
[Function Name] : init_btt_configuration_parameter_dummy 
-Return type : ;VD 
-Argument : 4 
     [0] : BSM_STANDARD   *pst_a_bsm_alertarea_for_test 
     [1] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [2] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [3] : BTT_HITCH_ANGLE   *pst_a_hitch_angle 
----- Codes -----
[1] MAINPROCESS(1) func<start> miki0 = main( 
[2] MAINPROCESS(1) func arg0_1, 
[3] MAINPROCESS(1) func arg0_2, 
[4] MAINPROCESS(1) func (S1)arg0_3 
[5] MAINPROCESS(1) func<end> ); 
[6] MAINPROCESS(1) if<start> if( 
[7] MAINPROCESS(1) if st_g_btt_stat.BTT_initialized == BTT_RET_t.Init_Stat.INITIALIZED 
[8] MAINPROCESS(1) if ) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) proc return; 
[11] MAINPROCESS(2) if<start> if( 
[12] MAINPROCESS(2) if miki==test 
[13] MAINPROCESS(2) if ) 
[14] MAINPROCESS(2) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal miki done;
[16] SUBPROCESS(1) noctrl hogehoge 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal miki next;
[19] MAINPROCESS(3) else<start> else 
[20] MAINPROCESS(3) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal miki ELSETEST;
[22] MAINPROCESS(4) if<start> if( 
[23] MAINPROCESS(4) if miki==test 
[24] MAINPROCESS(4) if && miki==debug 
[25] MAINPROCESS(4) if ) 
[26] MAINPROCESS(4) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) equal miki1_1 sub;
[28] SUBPROCESS(1) equal miki1_2 (S1)sub;
[29] SUBPROCESS(1) func<start> miki1_3( 
[30] SUBPROCESS(1) func<end> ); 
[31] SUBPROCESS(1) func<start> miki1_4((S1)arg1_1 
[32] SUBPROCESS(1) func<end> ); 
[33] SUBPROCESS(1) if<start> if( 
[34] SUBPROCESS(1) if hogehoge1 
[35] SUBPROCESS(1) if ) 
[36] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[37] SUBSUBPROCESS(1) func<start> miki2_1 = subsub_1( 
[38] SUBSUBPROCESS(1) func (S1)arg2_1_1, 
[39] SUBSUBPROCESS(1) func arg2_1_2 
[40] SUBSUBPROCESS(1) func<end> ); 
[41] SUBSUBPROCESS(1) ??? miki2_2 
[42] SUBSUBPROCESS(1) func<start> = subsub_2( 
[43] SUBSUBPROCESS(1) func (S1)arg2_2_1, 
[44] SUBSUBPROCESS(1) func arg2_2_2 
[45] SUBSUBPROCESS(1) func<end> ); 
[46] SUBSUBPROCESS(1) for<start> for( 
[47] SUBSUBPROCESS(1) for i=0; 
[48] SUBSUBPROCESS(1) for i<hogehoge2; 
[49] SUBSUBPROCESS(1) for i++) 
[50] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[51] SUBSUBSUBPROCESS(1) func<start> miki3 = (S1)subsubsub(arg3_1,arg3_2,arg3_3 
[52] SUBSUBSUBPROCESS(1) func<end> ); 
[53] SUBSUBSUBPROCESS(1) while<start> while( 
[54] SUBSUBSUBPROCESS(1) while hogehoge3_1 
[55] SUBSUBSUBPROCESS(1) while ) 
[56] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[57] SUBSUBSUBSUBPROCESS(1) func<start> miki4_1 = subsubsubsub((S1)arg4_1,(S2)arg4_2,(S3)arg4_3 
[58] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[59] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[60] SUBSUBSUBSUBPROCESS(1) if hogehoge4_1 
[61] SUBSUBSUBSUBPROCESS(1) if ) 
[62] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[63] SUBSUBSUBSUBSUBPROCESS(1) equal (S5)miki5_1 subsubsubsubsub_1;
[64] SUBSUBSUBSUBPROCESS(2) else if<start> else if( 
[65] SUBSUBSUBSUBPROCESS(2) else if hogehoge4_2 
[66] SUBSUBSUBSUBPROCESS(2) else if ) 
[67] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[68] SUBSUBSUBSUBSUBPROCESS(1) equal (S5)miki5_2 subsubsubsubsub_2;
[69] SUBSUBSUBSUBPROCESS(3) else if<start> else if( 
[70] SUBSUBSUBSUBPROCESS(3) else if hogehoge4_3 
[71] SUBSUBSUBSUBPROCESS(3) else if ) 
[72] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[73] SUBSUBSUBSUBSUBPROCESS(1) equal (S5)miki5_3 subsubsubsubsub_2;
[74] SUBSUBSUBSUBPROCESS(4) else<start> else 
[75] SUBSUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[76] SUBSUBSUBSUBSUBPROCESS(1) equal (S5)miki5_4 subsubsubsubsub_3;
[77] SUBSUBSUBPROCESS(2) switch <start> switch ( 
[78] SUBSUBSUBPROCESS(2) switch  hogehoge3_2 
[79] SUBSUBSUBPROCESS(2) switch  ) 
[80] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[81] SUBSUBSUBSUBPROCESS(1) ??? case mode1: 
[82] SUBSUBSUBSUBPROCESS(1) equal miki4_2_1 subsubsubsub_mode_1;
[83] SUBSUBSUBSUBPROCESS(1) proc break; 
[84] SUBSUBSUBSUBPROCESS(1) ??? case mode1: 
[85] SUBSUBSUBSUBPROCESS(1) equal miki4_2_2 subsubsubsub_mode_2;
[86] SUBSUBSUBSUBPROCESS(1) proc break; 
[87] SUBSUBSUBSUBPROCESS(1) ??? default: 
[88] SUBSUBSUBSUBPROCESS(1) equal miki4_2_3 subsubsubsub_mode_default;
[89] SUBSUBSUBSUBPROCESS(1) proc break; 
[90] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[91] SUBSUBSUBSUBPROCESS(1) func<start> miki4_3 = subsubsubsub_mode_default( 
[92] SUBSUBSUBSUBPROCESS(1) func (S1) arg4_3_1, 
[93] SUBSUBSUBSUBPROCESS(1) func arg4_3_2, 
[94] SUBSUBSUBSUBPROCESS(1) func arg4_3_3 
[95] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[96] SUBPROCESS(2) else<start> else 
[97] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[98] SUBSUBPROCESS(1) func<start> hogehoge1_ELSE( 
[99] SUBSUBPROCESS(1) func<end> ); 
[100] MAINPROCESS(5) equal st_g_btt_stat.ATD BTT_RET_t.Func_Stat.ENABLE;
[101] MAINPROCESS(5) equal st_g_btt_stat.TLE BTT_RET_t.Func_Stat.ENABLE;
[102] MAINPROCESS(5) equal st_g_btt_stat.AAZ BTT_RET_t.Func_Stat.ENABLE;
[103] MAINPROCESS(5) equal st_g_btt_stat.TWE BTT_RET_t.Func_Stat.ENABLE;
[104] MAINPROCESS(5) equal st_g_btt_stat.TTM BTT_RET_t.Func_Stat.DISABLE;
[105] MAINPROCESS(5) equal pst_a_bsm_alertarea_for_test->Ymin (FL) 1.0;
[106] MAINPROCESS(5) equal pst_a_bsm_alertarea_for_test->Ymax (FL) -7.0;
[107] MAINPROCESS(5) equal pst_a_bsm_alertarea_for_test->Xmin (FL) 0.5;
[108] MAINPROCESS(5) equal pst_a_bsm_alertarea_for_test->Xmax (FL) 3.8;
[109] MAINPROCESS(5) equal pst_a_cluster_info->dummy CFL_UNKNOWN_VALUE;
[110] MAINPROCESS(5) equal pst_a_aux_trailer_info->dummy CFL_UNKNOWN_VALUE;
[111] MAINPROCESS(5) equal pst_a_hitch_angle->dummy CFL_UNKNOWN_VALUE;
[112] MAINPROCESS(5) proc return; 
----------------- Total Codes : 112 lines
--------------------------
[Function Name] : fn_btt_atd_main 
-Return type : VD 
-Argument : 12 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : S1   s1_a_shift_flg 
     [3] : NORMAL_BSM   *pst_a_object 
     [4] : S4   s4_a_object_size 
     [5] : FL   fl_a_doa_pow_ave[2][3] 
     [6] : FL   fl_a_doa_pow_dev[2][3] 
     [7] : S4   s4_a_doa_bf_peak_bin 
     [8] : FL   fl_a_doa_bf_peak_pow 
     [9] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [10] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [11] : BTT_RESULT*   pst_a_btt_result 
----- Codes -----
[1] MAINPROCESS(1) if<start> if( 
[2] MAINPROCESS(1) if st_g_btt_stat.ATD != BTT_RET_t.Func_Stat.ACTIVE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) proc return; 
[6] MAINPROCESS(2) if<start> if( 
[7] MAINPROCESS(2) if s1_a_shift_flg != (S1) 0 
[8] MAINPROCESS(2) if ) 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if<start> if( 
[11] SUBPROCESS(1) if fl_a_self_v > BTT_ACTIVE_SPEED_TH 
[12] SUBPROCESS(1) if ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if<start> if( 
[15] SUBSUBPROCESS(1) if st_atd_params.timer < BTT_ATD_MAX_TIME 
[16] SUBSUBPROCESS(1) if ) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) if<start> if( 
[19] SUBSUBSUBPROCESS(1) if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.UNKNOWN 
[20] SUBSUBSUBPROCESS(1) if ) 
[21] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBSUBPROCESS(1) func<start> pst_a_btt_result->TFlag = fn_btt_atd_detect_trailer( 
[23] SUBSUBSUBSUBPROCESS(1) func fl_a_self_v, 
[24] SUBSUBSUBSUBPROCESS(1) func s4_a_curve_r, 
[25] SUBSUBSUBSUBPROCESS(1) func pst_a_object, 
[26] SUBSUBSUBSUBPROCESS(1) func s4_a_object_size, 
[27] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_pow_ave, 
[28] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_pow_dev, 
[29] SUBSUBSUBSUBPROCESS(1) func s4_a_doa_bf_peak_bin, 
[30] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_bf_peak_pow, 
[31] SUBSUBSUBSUBPROCESS(1) func pst_a_cluster_info, 
[32] SUBSUBSUBSUBPROCESS(1) func pst_a_aux_trailer_info 
[33] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[34] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[35] SUBSUBSUBSUBPROCESS(1) if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.CONNECT 
[36] SUBSUBSUBSUBPROCESS(1) if ) 
[37] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[39] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[40] SUBSUBSUBSUBPROCESS(2) else if<start> else if( 
[41] SUBSUBSUBSUBPROCESS(2) else if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.NOTCONNECT 
[42] SUBSUBSUBSUBPROCESS(2) else if ) 
[43] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[45] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[46] SUBSUBSUBSUBPROCESS(3) else<start> else 
[47] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[48] SUBSUBPROCESS(2) else<start> else 
[49] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBPROCESS(1) equal pst_a_btt_result->TFlag BTT_RET_t.TFlag.UNKNOWN;
[51] SUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[52] SUBSUBSUBPROCESS(1) func<end> ); 
[53] SUBSUBPROCESS(3) proc st_atd_params.timer++; 
[54] SUBPROCESS(2) else<start> else 
[55] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[56] MAINPROCESS(3) else<start> else 
[57] MAINPROCESS(3) subproc SUBPROCESS(1) 
[58] SUBPROCESS(1) func<start> fn_btt_atd_initialize( 
[59] SUBPROCESS(1) func<end> ); 
[60] MAINPROCESS(4) proc return; 
----------------- Total Codes : 60 lines
--------------------------
[Function Name] : fn_btt_tle_main 
-Return type : FL 
-Argument : 7 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : NORMAL_BSM   *pst_a_object 
     [3] : S4   s4_a_object_size 
     [4] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [5] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [6] : BTT_STAT   *pst_a_btt_stat 
----- Codes -----
[1] MAINPROCESS(1) equal FL fl_t_length BTT_TRAILER_SIZE_UNKNOWN;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc FL fl_a_tle_bf_peak[BTT_TLE_RANGE]; 
[4] MAINPROCESS(1) proc FL fl_a_tle_bf_pow_diff[BTT_TLE_RANGE-(S4)1]; 
[5] MAINPROCESS(1) for<start> for( 
[6] MAINPROCESS(1) for s4_t_lp_i = 0; 
[7] MAINPROCESS(1) for s4_t_lp_i < BTT_TLE_RANGE; 
[8] MAINPROCESS(1) for s4_t_lp_i++) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal fl_a_tle_bf_peak[s4_t_lp_i] (FL)0;
[11] MAINPROCESS(2) for<start> for( 
[12] MAINPROCESS(2) for s4_t_lp_i = 0; 
[13] MAINPROCESS(2) for s4_t_lp_i < BTT_TLE_RANGE - (S4)1; 
[14] MAINPROCESS(2) for s4_t_lp_i++) 
[15] MAINPROCESS(2) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) equal fl_a_tle_bf_pow_diff[s4_t_lp_i] (FL)0;
[17] MAINPROCESS(3) if<start> if( 
[18] MAINPROCESS(3) if st_g_btt_stat.TLE != BTT_RET_t.Func_Stat.ACTIVE 
[19] MAINPROCESS(3) if ) 
[20] MAINPROCESS(3) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) if<start> if( 
[22] SUBPROCESS(1) if st_g_btt_result.TLength != BTT_TRAILER_SIZE_UNKNOWN 
[23] SUBPROCESS(1) if ) 
[24] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[25] SUBSUBPROCESS(1) proc return st_g_btt_result.TLength; 
[26] SUBPROCESS(2) else<start> else 
[27] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) proc return fl_t_length; 
[29] MAINPROCESS(4) func<start> fn_btt_tle_search_peak_bf( 
[30] MAINPROCESS(4) func (const FL (*)[CORRE_SIZE_4CH])(afl_g_cvw_lfm_ryy_matrix[0]), 
[31] MAINPROCESS(4) func fl_a_tle_bf_peak 
[32] MAINPROCESS(4) func<end> ); 
[33] MAINPROCESS(4) func<start> fn_btt_tle_calc_bf_power_diff( 
[34] MAINPROCESS(4) func fl_a_tle_bf_peak, 
[35] MAINPROCESS(4) func fl_a_tle_bf_pow_diff 
[36] MAINPROCESS(4) func<end> ); 
[37] MAINPROCESS(4) for <start> for ( 
[38] MAINPROCESS(4) for  s4_t_lp_i = 0; 
[39] MAINPROCESS(4) for  s4_t_lp_i < 30; 
[40] MAINPROCESS(4) for  s4_t_lp_i++ ) 
[41] MAINPROCESS(4) subproc SUBPROCESS(1) 
[42] SUBPROCESS(1) func<start> fn_bsm_cal_trailer_range_doa_ave( 
[43] SUBPROCESS(1) func 0, 
[44] SUBPROCESS(1) func (const FL (*)[CORRE_SIZE_4CH])(afl_g_cvw_lfm_ryy_matrix[0]), 
[45] SUBPROCESS(1) func (256+s4_t_lp_i), 
[46] SUBPROCESS(1) func &afl_a_doa_pow_ave[s4_t_lp_i], 
[47] SUBPROCESS(1) func &afl_a_doa_pow_dev[s4_t_lp_i] 
[48] SUBPROCESS(1) func<end> ); 
[49] MAINPROCESS(5) if<start> if( 
[50] MAINPROCESS(5) if st_tle_params.timer < BTT_TLE_MAX_TIME 
[51] MAINPROCESS(5) if ) 
[52] MAINPROCESS(5) subproc SUBPROCESS(1) 
[53] SUBPROCESS(1) func<start> fl_t_length = fn_btt_tle_estimate_trailer_length( 
[54] SUBPROCESS(1) func<end> ); 
[55] MAINPROCESS(6) else<start> else 
[56] MAINPROCESS(6) subproc SUBPROCESS(1) 
[57] SUBPROCESS(1) func<start> fn_btt_tle_deactivate( 
[58] SUBPROCESS(1) func<end> ); 
[59] MAINPROCESS(7) proc st_tle_params.timer++; 
[60] MAINPROCESS(7) equal fl_t_length (FL)4;
[61] MAINPROCESS(7) proc return fl_t_length; 
----------------- Total Codes : 61 lines
--------------------------
[Function Name] : fn_btt_initialize 
-Return type : VD 
-Argument : 5 
     [0] : U1   u1_a_bsm_configuration 
     [1] : U1   u1_a_bsm_drv_cmd 
     [2] : U1   u1_a_btt_configuration 
     [3] : U1   u1_a_btt_drv_cmd 
     [4] : BSM_STANDARD   st_a_bsm_alertarea 
----- Codes -----
[1] MAINPROCESS(1) if <start> if ( 
[2] MAINPROCESS(1) if  (fl_g_v_self_bsm_for_base > BTT_ACTIVE_SPEED_TH) 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.BTT_RESET BTT_TRUE;
[6] MAINPROCESS(2) if<start> if( 
[7] MAINPROCESS(2) if st_g_btt_stat.BTT_RESET == BTT_TRUE 
[8] MAINPROCESS(2) if && st_g_btt_stat.BTT_initialized == BTT_RET_t.Init_Stat.INITIALIZED 
[9] MAINPROCESS(2) if && fl_g_v_self_bsm_for_base < (FL)0.5 ) 
[10] MAINPROCESS(2) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) proc st_g_btt_stat.BTT_timer ++; 
[12] SUBPROCESS(1) if<start> if( 
[13] SUBPROCESS(1) if st_g_btt_stat.BTT_timer > (S4)150 
[14] SUBPROCESS(1) if ) 
[15] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_initialized BTT_RET_t.Init_Stat.UNINITIALIZED;
[17] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_RESET BTT_FALSE;
[18] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_timer (S4)0;
[19] SUBSUBPROCESS(1) equal st_g_btt_stat.ATD BTT_RET_t.Func_Stat.ENABLE;
[20] MAINPROCESS(3) if<start> if( 
[21] MAINPROCESS(3) if st_g_btt_stat.BTT_initialized == BTT_RET_t.Init_Stat.INITIALIZED 
[22] MAINPROCESS(3) if ) 
[23] MAINPROCESS(3) subproc SUBPROCESS(1) 
[24] SUBPROCESS(1) proc return; 
[25] MAINPROCESS(4) equal st_g_btt_alertarea.standard st_a_bsm_alertarea;
[26] MAINPROCESS(4) equal st_g_btt_result.TFlag BTT_RET_t.TFlag.UNKNOWN;
[27] MAINPROCESS(4) func<start> fn_btt_set_trailer_length( BTT_TRAILER_SIZE_UNKNOWN 
[28] MAINPROCESS(4) func<end> ); 
[29] MAINPROCESS(4) func<start> fn_btt_set_trailer_width( BTT_TRAILER_SIZE_UNKNOWN 
[30] MAINPROCESS(4) func<end> ); 
[31] MAINPROCESS(4) equal st_g_btt_alertarea.rear.VarY (FL) 0.0;
[32] MAINPROCESS(4) equal st_g_btt_alertarea.rear.VarYmax BTT_REAR_RANGE_MAX;
[33] MAINPROCESS(4) equal st_g_btt_alertarea.side.VarXin (FL) 0.0;
[34] MAINPROCESS(4) equal st_g_btt_alertarea.side.VarXmax (FL) 0.0;
[35] MAINPROCESS(4) equal st_g_btt_alertarea.side.VarXout (FL) 0.0;
[36] MAINPROCESS(4) func<start> fn_btt_ttm_activate( 
[37] MAINPROCESS(4) func<end> ); 
[38] MAINPROCESS(4) func<start> fn_btt_atd_activate( 
[39] MAINPROCESS(4) func<end> ); 
[40] MAINPROCESS(4) func<start> fn_btt_atd_initialize( 
[41] MAINPROCESS(4) func<end> ); 
[42] MAINPROCESS(4) func<start> fn_btt_set_bsm_final_state( 
[43] MAINPROCESS(4) func u1_a_bsm_configuration, 
[44] MAINPROCESS(4) func u1_a_bsm_drv_cmd 
[45] MAINPROCESS(4) func<end> ); 
[46] MAINPROCESS(4) func<start> fn_btt_set_btt_final_state( 
[47] MAINPROCESS(4) func u1_a_btt_configuration, 
[48] MAINPROCESS(4) func u1_a_btt_drv_cmd, 
[49] MAINPROCESS(4) func st_g_btt_result 
[50] MAINPROCESS(4) func<end> ); 
[51] MAINPROCESS(4) if<start> if( 
[52] MAINPROCESS(4) if u1_a_btt_drv_cmd == BTT_RET_t.Drv_SW.ON 
[53] MAINPROCESS(4) if ) 
[54] MAINPROCESS(4) subproc SUBPROCESS(1) 
[55] SUBPROCESS(1) func<start> fn_btt_aaz_activate( 
[56] SUBPROCESS(1) func<end> ); 
[57] MAINPROCESS(5) equal st_g_btt_stat.BTT_initialized BTT_RET_t.Init_Stat.INITIALIZED;
[58] MAINPROCESS(5) proc return; 
----------------- Total Codes : 58 lines
--------------------------
[Function Name] : fn_btt_atd_detect_trailer 
-Return type : U1 
-Argument : 10 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : NORMAL_BSM   *pst_a_object 
     [3] : S4   s4_a_object_size 
     [4] : FL   fl_a_doa_pow_ave[2][3] 
     [5] : FL   fl_a_doa_pow_dev[2][3] 
     [6] : S4   s4_a_doa_bf_peak_bin 
     [7] : FL   fl_a_doa_bf_peak_pow 
     [8] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [9] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) equal U1 u1_t_btt_trailer_flg BTT_RET_t.TFlag.UNKNOWN;
[3] MAINPROCESS(1) func<start> fn_btt_atd_trailerobj_tracking( 
[4] MAINPROCESS(1) func pst_a_object, 
[5] MAINPROCESS(1) func s4_a_object_size 
[6] MAINPROCESS(1) func ,fl_a_doa_pow_ave 
[7] MAINPROCESS(1) func ,fl_a_doa_pow_dev 
[8] MAINPROCESS(1) func ,s4_a_doa_bf_peak_bin 
[9] MAINPROCESS(1) func ,fl_a_doa_bf_peak_pow 
[10] MAINPROCESS(1) func<end> ); 
[11] MAINPROCESS(1) if<start> if( 
[12] MAINPROCESS(1) if st_atd_params.atd_counter[0] > BTT_ATD_CONNECT_TH 
[13] MAINPROCESS(1) if ) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal u1_t_btt_trailer_flg BTT_RET_t.TFlag.CONNECT;
[16] MAINPROCESS(2) if<start> if( 
[17] MAINPROCESS(2) if (st_atd_params.atd_counter[1] > BTT_ATD_NOTCONNECT_TH 
[18] MAINPROCESS(2) if ) 
[19] MAINPROCESS(2) if &&  (st_atd_params.atd_counter[1] - st_atd_params.atd_counter[0] > BTT_ATD_CNT_DIFF) ) 
[20] MAINPROCESS(2) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal u1_t_btt_trailer_flg BTT_RET_t.TFlag.NOTCONNECT;
[22] SUBPROCESS(1) for<start> for( 
[23] SUBPROCESS(1) for s4_t_lp_i=0; 
[24] SUBPROCESS(1) for s4_t_lp_i<6; 
[25] SUBPROCESS(1) for s4_t_lp_i++) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(1) equal afl_g_btt_atd_obj_tracking[s4_t_lp_i] (FL)-120;
[28] MAINPROCESS(3) proc return u1_t_btt_trailer_flg; 
----------------- Total Codes : 28 lines
--------------------------
[Function Name] : fn_btt_atd_trailerobj_tracking 
-Return type : VD 
-Argument : 6 
     [0] : NORMAL_BSM   pst_a_trailer_obj[TRAILER_BUFFSIZE] 
     [1] : S4   as4_a_trailer_obj_num 
     [2] : FL   fl_a_doa_pow_ave[2][3] 
     [3] : FL   fl_a_doa_pow_dev[2][3] 
     [4] : S4   s4_a_doa_bf_peak_bin 
     [5] : FL   fl_a_doa_bf_peak_pow 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i, s4_t_lp_j; 
[2] MAINPROCESS(1) equal S4 as4_a_trk_num (S4)0;
[3] MAINPROCESS(1) equal S4 as4_a_trk_num2 (S4)0;
[4] MAINPROCESS(1) equal S4 as4_a_tmp_trailer_obj_num (S4)0;
[5] MAINPROCESS(1) equal FL afl_a_trailer_obj_rx_ave (FL)0;
[6] MAINPROCESS(1) equal FL afl_a_trailer_obj_rx_dev (FL)0;
[7] MAINPROCESS(1) equal FL afl_a_trailer_obj_ry_ave (FL)0;
[8] MAINPROCESS(1) equal FL afl_a_trailer_obj_ry_dev (FL)0;
[9] MAINPROCESS(1) equal FL afl_a_trailer_obj_vy_ave (FL)0;
[10] MAINPROCESS(1) equal FL afl_a_trailer_obj_vy_dev (FL)0;
[11] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_up (FL)0;
[12] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_dn (FL)0;
[13] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_dev_up (FL)0;
[14] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_dev_dn (FL)0;
[15] MAINPROCESS(1) equal FL afl_a_db_doa_peak_ave_diff (FL)0;
[16] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_th (FL)0;
[17] MAINPROCESS(1) if<start> if( 
[18] MAINPROCESS(1) if s4_abs(s2_g_curvr_for_base) > (S2)80 
[19] MAINPROCESS(1) if ) 
[20] MAINPROCESS(1) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)58;
[22] MAINPROCESS(2) else if<start> else if( 
[23] MAINPROCESS(2) else if s4_abs(s2_g_curvr_for_base) > (S2)40 
[24] MAINPROCESS(2) else if ) 
[25] MAINPROCESS(2) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)55;
[27] MAINPROCESS(3) else<start> else 
[28] MAINPROCESS(3) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) if<start> if( 
[30] SUBPROCESS(1) if s2_g_curvr_for_base < 0 
[31] SUBPROCESS(1) if ) 
[32] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[33] SUBSUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)45;
[34] SUBPROCESS(2) else<start> else 
[35] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[36] SUBSUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)58;
[37] MAINPROCESS(4) for<start> for( 
[38] MAINPROCESS(4) for s4_t_lp_i = 0; 
[39] MAINPROCESS(4) for s4_t_lp_i < BTT_OBJ_HISTORY_CYCLE; 
[40] MAINPROCESS(4) for s4_t_lp_i++ ) 
[41] MAINPROCESS(4) subproc SUBPROCESS(1) 
[42] SUBPROCESS(1) equal as4_a_tmp_trailer_obj_num st_atd_params.trailer_object_num_total[s4_t_lp_i];
[43] SUBPROCESS(1) if<start> if( 
[44] SUBPROCESS(1) if as4_a_tmp_trailer_obj_num != (S4)0 
[45] SUBPROCESS(1) if ) 
[46] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[47] SUBSUBPROCESS(1) proc as4_a_trk_num ++; 
[48] SUBSUBPROCESS(1) for<start> for( 
[49] SUBSUBPROCESS(1) for s4_t_lp_j = 0; 
[50] SUBSUBPROCESS(1) for s4_t_lp_j < as4_a_tmp_trailer_obj_num; 
[51] SUBSUBPROCESS(1) for s4_t_lp_j++ ) 
[52] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[53] SUBSUBSUBPROCESS(1) equal afl_a_trailer_obj_rx_ave + st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs;
[54] SUBSUBSUBPROCESS(1) func<start> afl_a_trailer_obj_rx_dev += (st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs * st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs 
[55] SUBSUBSUBPROCESS(1) func<end> ); 
[56] SUBSUBSUBPROCESS(1) equal afl_a_trailer_obj_ry_ave + st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs;
[57] SUBSUBSUBPROCESS(1) func<start> afl_a_trailer_obj_ry_dev += (st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs * st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs 
[58] SUBSUBSUBPROCESS(1) func<end> ); 
[59] SUBSUBSUBPROCESS(1) equal afl_a_trailer_obj_vy_ave + st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs;
[60] SUBSUBSUBPROCESS(1) func<start> afl_a_trailer_obj_vy_dev += (st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs * st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs 
[61] SUBSUBSUBPROCESS(1) func<end> ); 
[62] SUBSUBSUBPROCESS(1) proc as4_a_trk_num2 ++; 
[63] MAINPROCESS(5) if<start> if( 
[64] MAINPROCESS(5) if as4_a_trk_num2 != (S4)0 
[65] MAINPROCESS(5) if ) 
[66] MAINPROCESS(5) subproc SUBPROCESS(1) 
[67] SUBPROCESS(1) equal afl_a_trailer_obj_rx_ave afl_a_trailer_obj_rx_ave / (FL)as4_a_trk_num2;
[68] SUBPROCESS(1) equal afl_a_trailer_obj_ry_ave afl_a_trailer_obj_ry_ave / (FL)as4_a_trk_num2;
[69] SUBPROCESS(1) equal afl_a_trailer_obj_vy_ave afl_a_trailer_obj_vy_ave / (FL)as4_a_trk_num2;
[70] SUBPROCESS(1) func<start> afl_a_trailer_obj_rx_dev = fl_abs((afl_a_trailer_obj_rx_dev / (FL)as4_a_trk_num2) - afl_a_trailer_obj_rx_ave * afl_a_trailer_obj_rx_ave 
[71] SUBPROCESS(1) func<end> ); 
[72] SUBPROCESS(1) equal afl_a_trailer_obj_ry_dev (afl_a_trailer_obj_ry_dev / (FL)as4_a_trk_num2) - afl_a_trailer_obj_ry_ave * afl_a_trailer_obj_ry_ave;
[73] SUBPROCESS(1) func<start> afl_a_trailer_obj_vy_dev = fl_abs((afl_a_trailer_obj_vy_dev / (FL)as4_a_trk_num2) - afl_a_trailer_obj_vy_ave * afl_a_trailer_obj_vy_ave 
[74] SUBPROCESS(1) func<end> ); 
[75] MAINPROCESS(6) equal afl_a_db_doa_peak_ave_diff fl_a_doa_bf_peak_pow - fl_a_doa_pow_ave[0][1];
[76] MAINPROCESS(6) if<start> if( 
[77] MAINPROCESS(6) if as4_a_trk_num > BTT_OBJ_DETECT_CYC1 
[78] MAINPROCESS(6) if ) 
[79] MAINPROCESS(6) subproc SUBPROCESS(1) 
[80] SUBPROCESS(1) if<start> if( 
[81] SUBPROCESS(1) if fl_abs(afl_a_trailer_obj_rx_ave) < BTT_OBJ_X_RANGE 
[82] SUBPROCESS(1) if &&  afl_a_trailer_obj_ry_ave < BTT_OBJ_Y_RANGE_FORWARD 
[83] SUBPROCESS(1) if &&  afl_a_trailer_obj_ry_ave > BTT_OBJ_Y_RANGE_BACKWARD 
[84] SUBPROCESS(1) if &&  fl_abs(afl_a_trailer_obj_vy_ave) < BTT_OBJ_VY 
[85] SUBPROCESS(1) if &&  afl_a_trailer_obj_rx_dev < BTT_OBJ_DEV_TH 
[86] SUBPROCESS(1) if &&  afl_a_trailer_obj_vy_dev < BTT_OBJ_DEV_TH ) 
[87] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[88] SUBSUBPROCESS(1) if<start> if( 
[89] SUBSUBPROCESS(1) if s4_abs(s2_g_curvr_for_base) > (S2)CU1_CANOUT_CURVER_MIN_SOT 
[90] SUBSUBPROCESS(1) if ) 
[91] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[92] SUBSUBSUBPROCESS(1) if<start> if( 
[93] SUBSUBSUBPROCESS(1) if afl_a_db_doa_peak_ave_diff > (FL)5.0 
[94] SUBSUBSUBPROCESS(1) if ||  fl_a_doa_pow_ave[0][1] < afl_a_trailer_doa_pow_th 
[95] SUBSUBSUBPROCESS(1) if ) 
[96] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[97] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[98] SUBSUBSUBPROCESS(2) else if<start> else if( 
[99] SUBSUBSUBPROCESS(2) else if as4_a_trk_num2 < (S4)10 
[100] SUBSUBSUBPROCESS(2) else if ) 
[101] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[102] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[103] SUBSUBSUBPROCESS(3) else<start> else 
[104] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[105] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[106] SUBSUBPROCESS(2) else if<start> else if( 
[107] SUBSUBPROCESS(2) else if s4_abs(s2_g_curvr_for_base) >= (S2)10 
[108] SUBSUBPROCESS(2) else if ) 
[109] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[110] SUBSUBSUBPROCESS(1) if<start> if( 
[111] SUBSUBSUBPROCESS(1) if fl_a_doa_pow_ave[0][1] > afl_a_trailer_doa_pow_th 
[112] SUBSUBSUBPROCESS(1) if ) 
[113] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[114] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[115] SUBSUBSUBPROCESS(2) else<start> else 
[116] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[117] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[118] SUBPROCESS(2) else<start> else 
[119] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[120] SUBSUBPROCESS(1) if<start> if( 
[121] SUBSUBPROCESS(1) if fl_a_doa_pow_ave[0][1] > afl_a_trailer_doa_pow_th 
[122] SUBSUBPROCESS(1) if &&  afl_a_db_doa_peak_ave_diff < (FL)5.0 ) 
[123] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[124] SUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[125] SUBSUBPROCESS(2) else<start> else 
[126] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[127] SUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[128] MAINPROCESS(7) else<start> else 
[129] MAINPROCESS(7) subproc SUBPROCESS(1) 
[130] SUBPROCESS(1) if<start> if( 
[131] SUBPROCESS(1) if as4_a_trk_num2 > (S4)10 
[132] SUBPROCESS(1) if &&  fl_a_doa_pow_ave[0][1] > afl_a_trailer_doa_pow_th 
[133] SUBPROCESS(1) if &&  afl_a_db_doa_peak_ave_diff < (FL)5.0 ) 
[134] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[135] SUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[136] SUBPROCESS(2) else<start> else 
[137] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[138] SUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[139] MAINPROCESS(8) for<start> for( 
[140] MAINPROCESS(8) for s4_t_lp_i = 0; 
[141] MAINPROCESS(8) for s4_t_lp_i < BTT_OBJ_HISTORY_CYCLE; 
[142] MAINPROCESS(8) for s4_t_lp_i++ ) 
[143] MAINPROCESS(8) subproc SUBPROCESS(1) 
[144] SUBPROCESS(1) for<start> for( 
[145] SUBPROCESS(1) for s4_t_lp_j = 0; 
[146] SUBPROCESS(1) for s4_t_lp_j < TRAILER_BUFFSIZE; 
[147] SUBPROCESS(1) for s4_t_lp_j ++ ) 
[148] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[149] SUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[0][s4_t_lp_j][s4_t_lp_i] st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs;
[150] SUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[1][s4_t_lp_j][s4_t_lp_i] st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs;
[151] SUBSUBPROCESS(1) if<start> if( 
[152] SUBSUBPROCESS(1) if st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs == (FL)0 
[153] SUBSUBPROCESS(1) if ) 
[154] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[155] SUBSUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[2][s4_t_lp_j][s4_t_lp_i] (FL)-120;
[156] SUBSUBPROCESS(2) else<start> else 
[157] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[158] SUBSUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[2][s4_t_lp_j][s4_t_lp_i] st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs * (FL)3.6;
[159] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[0] afl_a_trailer_obj_rx_ave;
[160] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[1] afl_a_trailer_obj_ry_ave;
[161] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[2] afl_a_trailer_obj_vy_ave;
[162] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[3] afl_a_trailer_obj_rx_dev;
[163] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[4] afl_a_trailer_obj_ry_dev;
[164] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[5] afl_a_trailer_obj_vy_dev;
[165] MAINPROCESS(9) equal as4_g_btt_atd_counter[0] as4_a_trk_num;
[166] MAINPROCESS(9) equal as4_g_btt_atd_counter[1] as4_a_trk_num2;
[167] MAINPROCESS(9) equal as4_g_btt_atd_counter[2] st_atd_params.atd_counter[0];
[168] MAINPROCESS(9) equal as4_g_btt_atd_counter[3] st_atd_params.atd_counter[1];
[169] MAINPROCESS(9) equal afl_g_btt_atd_doa_pow_ave[0] fl_a_doa_pow_ave[0][1];
[170] MAINPROCESS(9) equal afl_g_btt_atd_doa_pow_ave[1] afl_a_db_doa_peak_ave_diff;
[171] MAINPROCESS(9) proc return; 
----------------- Total Codes : 171 lines
--------------------------
[Function Name] : fn_miki_test1 
-Return type : VD 
-Argument : 2 
     [0] : type1   arg1 
     [1] : type2   arg2 
----- Codes -----
[1] MAINPROCESS(1) equal TEST_IFDEF_1_VALID 0;
[2] MAINPROCESS(1) equal TEST_IFNDEF_2_VALID 0;
[3] MAINPROCESS(1) equal TEST_ELSE_4_VALID 0;
[4] MAINPROCESS(1) proc return; 
----------------- Total Codes : 4 lines
--------------------------
[Function Name] : fn_miki_test2 
-Return type : VD 
-Argument : 2 
     [0] : type1   arg1 
     [1] : type2   arg2 
----- Codes -----
[1] MAINPROCESS(1) equal TEST_IFNDEF_15_VALID 0;
[2] MAINPROCESS(1) equal TEST_ELSE_18_VALID 0;
[3] MAINPROCESS(1) equal TEST_IFNDEF_2_VALID 0;
[4] MAINPROCESS(1) equal TEST_IFNDEF_21_VALID 0;
[5] MAINPROCESS(1) equal TEST_ELSE_24_VALID 0;
[6] MAINPROCESS(1) if<start> if( 
[7] MAINPROCESS(1) if lv1_1 == 11 
[8] MAINPROCESS(1) if ) 
[9] MAINPROCESS(1) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if<start> if( 
[11] SUBPROCESS(1) if lv1_1_1 == 111 
[12] SUBPROCESS(1) if ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) equal level1_1_1_1 hoge1_1_1_1;
[15] SUBSUBPROCESS(1) if<start> if( 
[16] SUBSUBPROCESS(1) if hogehoge_1 
[17] SUBSUBPROCESS(1) if ) 
[18] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[19] SUBSUBSUBPROCESS(1) if<start> if( 
[20] SUBSUBSUBPROCESS(1) if hogehoge_2 
[21] SUBSUBSUBPROCESS(1) if ) 
[22] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[23] SUBSUBSUBSUBPROCESS(1) equal level1_1_1_1 hoge1_1_1_1;
[24] SUBSUBSUBSUBPROCESS(1) equal level1_1_1_2 hoge1_1_1_2;
[25] SUBPROCESS(2) else if<start> else if( 
[26] SUBPROCESS(2) else if lv1_1_2 == 112 
[27] SUBPROCESS(2) else if ) 
[28] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(1) equal level1_1_2_1 hoge1_1_2_1;
[30] SUBPROCESS(3) else<start> else 
[31] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[32] SUBSUBPROCESS(1) equal level1_1_3_1 hoge1_1_3_1;
[33] MAINPROCESS(2) else if<start> else if( 
[34] MAINPROCESS(2) else if lv1_2 == 12 
[35] MAINPROCESS(2) else if ) 
[36] MAINPROCESS(2) subproc SUBPROCESS(1) 
[37] SUBPROCESS(1) equal level1_2_1 hoge1_2_1;
[38] MAINPROCESS(3) else<start> else 
[39] MAINPROCESS(3) subproc SUBPROCESS(1) 
[40] SUBPROCESS(1) equal level1_3_1 hoge1_3_1;
[41] MAINPROCESS(4) proc return; 
----------------- Total Codes : 41 lines
