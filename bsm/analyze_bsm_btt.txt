Total lines: 1382 
Total functions : 40 
--------------------------
[Function Name] : init_btt_configuration_parameter_dummy 
-Return type : ;VD 
-Argument : 4 
     [0] : BSM_STANDARD   *pst_a_bsm_alertarea_for_test 
     [1] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [2] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [3] : BTT_HITCH_ANGLE   *pst_a_hitch_angle 
----- Codes -----
[1] MAINPROCESS(1) for for( 
[2] MAINPROCESS(1) for i=0; 
[3] MAINPROCESS(1) for i<2; 
[4] MAINPROCESS(1) for i++ 
[5] MAINPROCESS(1) for ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal for_test True;
[8] MAINPROCESS(2) func<start> miki0 = main( 
[9] MAINPROCESS(2) func arg0_1, 
[10] MAINPROCESS(2) func arg0_2, 
[11] MAINPROCESS(2) func (S1)arg0_3 
[12] MAINPROCESS(2) func<end> ); 
[13] MAINPROCESS(2) if if( 
[14] MAINPROCESS(2) if st_g_btt_stat.BTT_initialized == BTT_RET_t.Init_Stat.INITIALIZED 
[15] MAINPROCESS(2) if ) 
[16] MAINPROCESS(2) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) return return; 
[18] MAINPROCESS(3) if if( 
[19] MAINPROCESS(3) if miki==test 
[20] MAINPROCESS(3) if ) 
[21] MAINPROCESS(3) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal miki done;
[23] SUBPROCESS(1) if if( 
[24] SUBPROCESS(1) if a==0 
[25] SUBPROCESS(1) if ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(1) equal miki next;
[28] MAINPROCESS(4) equal st_g_btt_stat.ATD BTT_RET_t.Func_Stat.ENABLE;
[29] MAINPROCESS(4) equal st_g_btt_stat.TLE BTT_RET_t.Func_Stat.ENABLE;
[30] MAINPROCESS(4) equal st_g_btt_stat.AAZ BTT_RET_t.Func_Stat.ENABLE;
[31] MAINPROCESS(4) equal st_g_btt_stat.TWE BTT_RET_t.Func_Stat.ENABLE;
[32] MAINPROCESS(4) equal st_g_btt_stat.TTM BTT_RET_t.Func_Stat.DISABLE;
[33] MAINPROCESS(4) equal pst_a_bsm_alertarea_for_test->Ymin (FL) 1.0;
[34] MAINPROCESS(4) equal pst_a_bsm_alertarea_for_test->Ymax (FL) -7.0;
[35] MAINPROCESS(4) equal pst_a_bsm_alertarea_for_test->Xmin (FL) 0.5;
[36] MAINPROCESS(4) equal pst_a_bsm_alertarea_for_test->Xmax (FL) 3.8;
[37] MAINPROCESS(4) equal pst_a_cluster_info->dummy CFL_UNKNOWN_VALUE;
[38] MAINPROCESS(4) equal pst_a_aux_trailer_info->dummy CFL_UNKNOWN_VALUE;
[39] MAINPROCESS(4) equal pst_a_hitch_angle->dummy CFL_UNKNOWN_VALUE;
[40] MAINPROCESS(4) return return; 
----------------- Total Codes : 40 lines
--------------------------
[Function Name] : enter_btt_dummy 
-Return type : VD 
-Argument : 17 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : S1   s1_a_shift_flg 
     [3] : NORMAL_BSM   *pst_a_object 
     [4] : S4   s4_a_object_size 
     [5] : FL   fl_a_doa_pow_ave[2][3] 
     [6] : FL   fl_a_doa_pow_dev[2][3] 
     [7] : S4   s4_a_doa_bf_peak_bin 
     [8] : FL   fl_a_doa_bf_peak_pow 
     [9] : U1   u1_a_bsm_drv_cmd 
     [10] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [11] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [12] : BTT_HITCH_ANGLE   *pst_a_hitch_angle 
     [13] : U1   *pu1_alarm_flg 
     [14] : NORMAL_BSM   *pst_a_target 
     [15] : S4   s4_a_target_size 
     [16] : BTT_STAT   *pst_a_btt_stat 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_btt_initialize( 
[2] MAINPROCESS(1) func BTT_RET_t.CAN_Config.ENABLE, 
[3] MAINPROCESS(1) func BTT_RET_t.Drv_SW.ON, 
[4] MAINPROCESS(1) func BTT_RET_t.CAN_Config.ENABLE, 
[5] MAINPROCESS(1) func u1_a_bsm_drv_cmd, 
[6] MAINPROCESS(1) func st_g_bsm_alertarea_for_test 
[7] MAINPROCESS(1) func<end> ); 
[8] MAINPROCESS(1) func<start> fn_btt_main( 
[9] MAINPROCESS(1) func fl_a_self_v, 
[10] MAINPROCESS(1) func s4_a_curve_r, 
[11] MAINPROCESS(1) func s1_a_shift_flg, 
[12] MAINPROCESS(1) func pst_a_object, 
[13] MAINPROCESS(1) func s4_a_object_size, 
[14] MAINPROCESS(1) func fl_a_doa_pow_ave, 
[15] MAINPROCESS(1) func fl_a_doa_pow_dev, 
[16] MAINPROCESS(1) func s4_a_doa_bf_peak_bin, 
[17] MAINPROCESS(1) func fl_a_doa_bf_peak_pow, 
[18] MAINPROCESS(1) func pst_a_btt_stat, 
[19] MAINPROCESS(1) func pu1_alarm_flg, 
[20] MAINPROCESS(1) func pst_a_cluster_info, 
[21] MAINPROCESS(1) func pst_a_aux_trailer_info, 
[22] MAINPROCESS(1) func pst_a_hitch_angle, 
[23] MAINPROCESS(1) func pst_a_target, 
[24] MAINPROCESS(1) func s4_a_target_size, 
[25] MAINPROCESS(1) func &st_g_btt_result, 
[26] MAINPROCESS(1) func &st_g_btt_alertarea 
[27] MAINPROCESS(1) func<end> ); 
[28] MAINPROCESS(1) func<start> fn_btt_set_btt_final_state( 
[29] MAINPROCESS(1) func BTT_RET_t.CAN_Config.ENABLE, 
[30] MAINPROCESS(1) func u1_a_bsm_drv_cmd, 
[31] MAINPROCESS(1) func st_g_btt_result 
[32] MAINPROCESS(1) func<end> ); 
[33] MAINPROCESS(1) equal au1_g_btt_drv_stat pst_a_btt_stat->BTT_drv;
[34] MAINPROCESS(1) equal au1_g_btt_fin_stat st_g_btt_stat.BTT_final;
[35] MAINPROCESS(1) return return; 
----------------- Total Codes : 35 lines
--------------------------
[Function Name] : fn_btt_initialize 
-Return type : VD 
-Argument : 5 
     [0] : U1   u1_a_bsm_configuration 
     [1] : U1   u1_a_bsm_drv_cmd 
     [2] : U1   u1_a_btt_configuration 
     [3] : U1   u1_a_btt_drv_cmd 
     [4] : BSM_STANDARD   st_a_bsm_alertarea 
----- Codes -----
[1] MAINPROCESS(1) if  if ( 
[2] MAINPROCESS(1) if  (fl_g_v_self_bsm_for_base > BTT_ACTIVE_SPEED_TH) 
[3] MAINPROCESS(1) if  ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.BTT_RESET BTT_TRUE;
[6] MAINPROCESS(2) if if( 
[7] MAINPROCESS(2) if st_g_btt_stat.BTT_RESET == BTT_TRUE 
[8] MAINPROCESS(2) if && st_g_btt_stat.BTT_initialized == BTT_RET_t.Init_Stat.INITIALIZED 
[9] MAINPROCESS(2) if && fl_g_v_self_bsm_for_base < (FL)0.5  
[10] MAINPROCESS(2) if ) 
[11] MAINPROCESS(2) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) proc st_g_btt_stat.BTT_timer ++; 
[13] SUBPROCESS(1) if if( 
[14] SUBPROCESS(1) if st_g_btt_stat.BTT_timer > (S4)150 
[15] SUBPROCESS(1) if ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_initialized BTT_RET_t.Init_Stat.UNINITIALIZED;
[18] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_RESET BTT_FALSE;
[19] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_timer (S4)0;
[20] SUBSUBPROCESS(1) equal st_g_btt_stat.ATD BTT_RET_t.Func_Stat.ENABLE;
[21] MAINPROCESS(3) if if( 
[22] MAINPROCESS(3) if st_g_btt_stat.BTT_initialized == BTT_RET_t.Init_Stat.INITIALIZED 
[23] MAINPROCESS(3) if ) 
[24] MAINPROCESS(3) subproc SUBPROCESS(1) 
[25] SUBPROCESS(1) return return; 
[26] MAINPROCESS(4) equal st_g_btt_alertarea.standard st_a_bsm_alertarea;
[27] MAINPROCESS(4) equal st_g_btt_result.TFlag BTT_RET_t.TFlag.UNKNOWN;
[28] MAINPROCESS(4) func<start> fn_btt_set_trailer_length( 
[29] MAINPROCESS(4) func  BTT_TRAILER_SIZE_UNKNOWN 
[30] MAINPROCESS(4) func<end> ); 
[31] MAINPROCESS(4) func<start> fn_btt_set_trailer_width( 
[32] MAINPROCESS(4) func  BTT_TRAILER_SIZE_UNKNOWN 
[33] MAINPROCESS(4) func<end> ); 
[34] MAINPROCESS(4) equal st_g_btt_alertarea.rear.VarY (FL) 0.0;
[35] MAINPROCESS(4) equal st_g_btt_alertarea.rear.VarYmax BTT_REAR_RANGE_MAX;
[36] MAINPROCESS(4) equal st_g_btt_alertarea.side.VarXin (FL) 0.0;
[37] MAINPROCESS(4) equal st_g_btt_alertarea.side.VarXmax (FL) 0.0;
[38] MAINPROCESS(4) equal st_g_btt_alertarea.side.VarXout (FL) 0.0;
[39] MAINPROCESS(4) func<start> fn_btt_ttm_activate( 
[40] MAINPROCESS(4) func<end> ); 
[41] MAINPROCESS(4) func<start> fn_btt_atd_activate( 
[42] MAINPROCESS(4) func<end> ); 
[43] MAINPROCESS(4) func<start> fn_btt_atd_initialize( 
[44] MAINPROCESS(4) func<end> ); 
[45] MAINPROCESS(4) func<start> fn_btt_set_bsm_final_state( 
[46] MAINPROCESS(4) func u1_a_bsm_configuration, 
[47] MAINPROCESS(4) func u1_a_bsm_drv_cmd 
[48] MAINPROCESS(4) func<end> ); 
[49] MAINPROCESS(4) func<start> fn_btt_set_btt_final_state( 
[50] MAINPROCESS(4) func u1_a_btt_configuration, 
[51] MAINPROCESS(4) func u1_a_btt_drv_cmd, 
[52] MAINPROCESS(4) func st_g_btt_result 
[53] MAINPROCESS(4) func<end> ); 
[54] MAINPROCESS(4) if if( 
[55] MAINPROCESS(4) if u1_a_btt_drv_cmd == BTT_RET_t.Drv_SW.ON 
[56] MAINPROCESS(4) if ) 
[57] MAINPROCESS(4) subproc SUBPROCESS(1) 
[58] SUBPROCESS(1) func<start> fn_btt_aaz_activate( 
[59] SUBPROCESS(1) func<end> ); 
[60] MAINPROCESS(5) equal st_g_btt_stat.BTT_initialized BTT_RET_t.Init_Stat.INITIALIZED;
[61] MAINPROCESS(5) return return; 
----------------- Total Codes : 61 lines
--------------------------
[Function Name] : fn_btt_set_bsm_final_state 
-Return type : VD 
-Argument : 2 
     [0] : U1   u1_a_bsm_configuration 
     [1] : U1   u1_a_bsm_drv_cmd 
----- Codes -----
[1] MAINPROCESS(1) equal st_g_btt_stat.BSM_final BTT_RET_t.Final_stat.ON;
[2] MAINPROCESS(1) if if( 
[3] MAINPROCESS(1) if u1_a_bsm_configuration == BTT_RET_t.CAN_Config.DISABLE 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal st_g_btt_stat.BSM_final BTT_RET_t.Final_stat.DISABLE;
[7] MAINPROCESS(2) else if else if( 
[8] MAINPROCESS(2) else if u1_a_bsm_drv_cmd == BTT_RET_t.Drv_SW.OFF 
[9] MAINPROCESS(2) else if ) 
[10] MAINPROCESS(2) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal st_g_btt_stat.BSM_final BTT_RET_t.Final_stat.OFF;
[12] MAINPROCESS(3) return return; 
----------------- Total Codes : 12 lines
--------------------------
[Function Name] : fn_btt_set_btt_final_state 
-Return type : VD 
-Argument : 3 
     [0] : U1   u1_a_btt_configuration 
     [1] : U1   u1_a_btt_drv_cmd 
     [2] : BTT_RESULT   st_a_btt_result 
----- Codes -----
[1] MAINPROCESS(1) equal st_g_btt_stat.BTT_final BTT_RET_t.Final_stat.ON;
[2] MAINPROCESS(1) if if( 
[3] MAINPROCESS(1) if st_g_btt_stat.BSM_final == BTT_RET_t.Final_stat.DISABLE || st_g_btt_stat.BSM_final == BTT_RET_t.Final_stat.OFF 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal st_g_btt_stat.BTT_final BTT_RET_t.Final_stat.DISABLE;
[7] MAINPROCESS(2) else else 
[8] MAINPROCESS(2) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if if( 
[10] SUBPROCESS(1) if u1_a_btt_configuration == BTT_RET_t.CAN_Config.DISABLE 
[11] SUBPROCESS(1) if ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_final BTT_RET_t.Final_stat.DISABLE;
[14] SUBPROCESS(2) else else 
[15] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[16] SUBSUBPROCESS(1) if if( 
[17] SUBSUBPROCESS(1) if u1_a_btt_drv_cmd == BTT_RET_t.Drv_SW.OFF 
[18] SUBSUBPROCESS(1) if ) 
[19] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBPROCESS(1) equal st_g_btt_stat.BTT_final BTT_RET_t.Final_stat.OFF;
[21] SUBSUBPROCESS(2) else if else if( 
[22] SUBSUBPROCESS(2) else if u1_a_btt_drv_cmd == BTT_RET_t.Drv_SW.ON 
[23] SUBSUBPROCESS(2) else if ) 
[24] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[25] SUBSUBSUBPROCESS(1) func<start> fn_btt_set_btt_drv_state( 
[26] SUBSUBSUBPROCESS(1) func st_g_btt_stat, 
[27] SUBSUBSUBPROCESS(1) func st_g_btt_result 
[28] SUBSUBSUBPROCESS(1) func<end> ); 
[29] SUBSUBSUBPROCESS(1) if if( 
[30] SUBSUBSUBPROCESS(1) if st_g_btt_stat.BTT_drv == BTT_RET_t.Drv_Stat.CONNECT 
[31] SUBSUBSUBPROCESS(1) if ) 
[32] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[33] SUBSUBSUBSUBPROCESS(1) equal st_g_btt_stat.BTT_final BTT_RET_t.Final_stat.ON;
[34] SUBSUBSUBPROCESS(2) else if else if( 
[35] SUBSUBSUBPROCESS(2) else if st_g_btt_stat.BTT_drv == BTT_RET_t.Drv_Stat.OFFTEMP 
[36] SUBSUBSUBPROCESS(2) else if ) 
[37] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBSUBPROCESS(1) equal st_g_btt_stat.BTT_final BTT_RET_t.Final_stat.OFFTEMP;
[39] SUBSUBSUBPROCESS(3) else if else if( 
[40] SUBSUBSUBPROCESS(3) else if st_g_btt_stat.BTT_drv == BTT_RET_t.Drv_Stat.NOTCONNECT 
[41] SUBSUBSUBPROCESS(3) else if ) 
[42] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[43] SUBSUBSUBSUBPROCESS(1) equal st_g_btt_stat.BTT_final BTT_RET_t.Final_stat.OFF;
[44] SUBSUBSUBPROCESS(4) else else 
[45] SUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBPROCESS(1) 
[46] SUBSUBPROCESS(3) else else 
[47] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[48] MAINPROCESS(3) return return; 
----------------- Total Codes : 48 lines
--------------------------
[Function Name] : fn_btt_set_btt_drv_state 
-Return type : VD 
-Argument : 2 
     [0] : BTT_STAT   st_a_btt_stat 
     [1] : BTT_RESULT   st_a_btt_result 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_a_btt_stat.BTT_final == BTT_RET_t.Final_stat.DISABLE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.DISABLE;
[6] MAINPROCESS(2) else if else if( 
[7] MAINPROCESS(2) else if st_a_btt_stat.BTT_final == BTT_RET_t.Drv_Stat.OFF 
[8] MAINPROCESS(2) else if ) 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.OFF;
[11] MAINPROCESS(3) else if else if( 
[12] MAINPROCESS(3) else if st_a_btt_stat.BTT_final == BTT_RET_t.Final_stat.ON 
[13] MAINPROCESS(3) else if ) 
[14] MAINPROCESS(3) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.PENDING;
[16] MAINPROCESS(4) else if else if( 
[17] MAINPROCESS(4) else if st_a_btt_stat.BTT_final == BTT_RET_t.Final_stat.OFFTEMP 
[18] MAINPROCESS(4) else if ) 
[19] MAINPROCESS(4) subproc SUBPROCESS(1) 
[20] SUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.OFFTEMP;
[21] MAINPROCESS(5) else else 
[22] MAINPROCESS(5) subproc SUBPROCESS(1) 
[23] MAINPROCESS(6) if if( 
[24] MAINPROCESS(6) if st_g_btt_stat.BTT_drv == BTT_RET_t.Drv_Stat.PENDING 
[25] MAINPROCESS(6) if ) 
[26] MAINPROCESS(6) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) if if( 
[28] SUBPROCESS(1) if st_a_btt_stat.ATD == BTT_RET_t.Func_Stat.ACTIVE 
[29] SUBPROCESS(1) if ) 
[30] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.PENDING;
[32] SUBPROCESS(2) else if else if( 
[33] SUBPROCESS(2) else if st_a_btt_stat.ATD == BTT_RET_t.Func_Stat.DEACTIVE 
[34] SUBPROCESS(2) else if ) 
[35] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[36] SUBSUBPROCESS(1) if if( 
[37] SUBSUBPROCESS(1) if st_a_btt_result.TFlag == BTT_RET_t.TFlag.CONNECT 
[38] SUBSUBPROCESS(1) if ) 
[39] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[40] SUBSUBSUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.CONNECT;
[41] SUBSUBSUBPROCESS(1) if if( 
[42] SUBSUBSUBPROCESS(1) if st_a_btt_stat.TLE == BTT_RET_t.Func_Stat.DEACTIVE 
[43] SUBSUBSUBPROCESS(1) if ) 
[44] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[45] SUBSUBSUBSUBPROCESS(1) if if( 
[46] SUBSUBSUBSUBPROCESS(1) if st_a_btt_result.TLength_stat == BTT_RET_t.TSize_Stat.VALID 
[47] SUBSUBSUBSUBPROCESS(1) if ) 
[48] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[49] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.CONNECT;
[50] SUBSUBSUBSUBPROCESS(2) else if else if( 
[51] SUBSUBSUBSUBPROCESS(2) else if st_a_btt_result.TLength_stat == BTT_RET_t.TSize_Stat.INVALID 
[52] SUBSUBSUBSUBPROCESS(2) else if ) 
[53] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[54] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.OFFTEMP;
[55] SUBSUBSUBSUBPROCESS(3) else if else if( 
[56] SUBSUBSUBSUBPROCESS(3) else if st_a_btt_result.TLength_stat == BTT_RET_t.TSize_Stat.UNKNOWN 
[57] SUBSUBSUBSUBPROCESS(3) else if ) 
[58] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[59] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.OFFTEMP;
[60] SUBSUBSUBSUBPROCESS(4) else else 
[61] SUBSUBSUBSUBPROCESS(4) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[62] SUBSUBPROCESS(2) else if else if( 
[63] SUBSUBPROCESS(2) else if st_a_btt_result.TFlag == BTT_RET_t.TFlag.NOTCONNECT 
[64] SUBSUBPROCESS(2) else if ) 
[65] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[66] SUBSUBSUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.NOTCONNECT;
[67] SUBSUBPROCESS(3) else if else if( 
[68] SUBSUBPROCESS(3) else if st_a_btt_result.TFlag == BTT_RET_t.TFlag.UNKNOWN 
[69] SUBSUBPROCESS(3) else if ) 
[70] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[71] SUBSUBSUBPROCESS(1) equal st_g_btt_stat.BTT_drv BTT_RET_t.Drv_Stat.OFFTEMP;
[72] SUBSUBPROCESS(4) else else 
[73] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[74] SUBPROCESS(3) else else 
[75] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[76] MAINPROCESS(7) return return; 
----------------- Total Codes : 76 lines
--------------------------
[Function Name] : fn_btt_set_trailer_length 
-Return type : VD 
-Argument : 1 
     [0] : FL   length 
----- Codes -----
[1] MAINPROCESS(1) equal st_g_btt_result.TLength length;
[2] MAINPROCESS(1) if if( 
[3] MAINPROCESS(1) if length == BTT_TRAILER_SIZE_UNKNOWN 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal st_g_btt_result.TLength_stat BTT_RET_t.TSize_Stat.UNKNOWN;
[7] MAINPROCESS(2) else if else if( 
[8] MAINPROCESS(2) else if length < BTT_TRAILER_LENGTH_MIN || length >= BTT_TRAILER_LENGTH_MAX 
[9] MAINPROCESS(2) else if ) 
[10] MAINPROCESS(2) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal st_g_btt_result.TLength_stat BTT_RET_t.TSize_Stat.INVALID;
[12] MAINPROCESS(3) else else 
[13] MAINPROCESS(3) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal st_g_btt_result.TLength_stat BTT_RET_t.TSize_Stat.VALID;
[15] MAINPROCESS(4) return return; 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_btt_set_range_rear 
-Return type : ;VD 
-Argument : 1 
     [0] : FL   length 
----- Codes -----
[1] MAINPROCESS(1) equal st_aaz_params.TLength_AAZ length;
[2] MAINPROCESS(1) if if( 
[3] MAINPROCESS(1) if st_aaz_params.TLength_AAZ == BTT_TRAILER_SIZE_UNKNOWN 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal st_g_btt_alertarea.rear.VarY BTT_REAR_UNKNOWN;
[7] MAINPROCESS(2) else if else if( 
[8] MAINPROCESS(2) else if st_aaz_params.TLength_AAZ < BTT_TRAILER_LENGTH_MIN || st_aaz_params.TLength_AAZ >= BTT_TRAILER_LENGTH_MAX 
[9] MAINPROCESS(2) else if ) 
[10] MAINPROCESS(2) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal st_g_btt_alertarea.rear.VarY BTT_REAR_INVALID;
[12] MAINPROCESS(3) else else 
[13] MAINPROCESS(3) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) if if( 
[15] SUBPROCESS(1) if st_aaz_params.TLength_AAZ < BTT_REAR_RANGE_SHORT 
[16] SUBPROCESS(1) if ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal st_g_btt_alertarea.rear.VarY BTT_REAR_SHORT;
[19] SUBPROCESS(2) else if else if( 
[20] SUBPROCESS(2) else if st_aaz_params.TLength_AAZ < BTT_REAR_RANGE_MID 
[21] SUBPROCESS(2) else if ) 
[22] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[23] SUBSUBPROCESS(1) equal st_g_btt_alertarea.rear.VarY BTT_REAR_MID;
[24] SUBPROCESS(3) else if else if( 
[25] SUBPROCESS(3) else if st_aaz_params.TLength_AAZ < BTT_REAR_RANGE_LONG 
[26] SUBPROCESS(3) else if ) 
[27] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) equal st_g_btt_alertarea.rear.VarY BTT_REAR_LONG;
[29] SUBPROCESS(4) else else 
[30] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) equal st_g_btt_alertarea.rear.VarY st_g_btt_alertarea.rear.VarYmax;
[32] MAINPROCESS(4) return return; 
----------------- Total Codes : 32 lines
--------------------------
[Function Name] : fn_btt_set_trailer_width 
-Return type : ;VD 
-Argument : 1 
     [0] : FL   width 
----- Codes -----
[1] MAINPROCESS(1) equal st_g_btt_result.TWidth width;
[2] MAINPROCESS(1) if if( 
[3] MAINPROCESS(1) if width == BTT_TRAILER_SIZE_UNKNOWN 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal st_g_btt_result.TWidth_stat BTT_RET_t.TSize_Stat.UNKNOWN;
[7] MAINPROCESS(2) else if else if( 
[8] MAINPROCESS(2) else if width >= BTT_SIDE_RANGE_MAX 
[9] MAINPROCESS(2) else if ) 
[10] MAINPROCESS(2) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal st_g_btt_result.TWidth_stat BTT_RET_t.TSize_Stat.INVALID;
[12] MAINPROCESS(3) else else 
[13] MAINPROCESS(3) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal st_g_btt_result.TWidth_stat BTT_RET_t.TSize_Stat.VALID;
[15] MAINPROCESS(4) return return; 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_btt_set_range_side 
-Return type : ;VD 
-Argument : 1 
     [0] : FL   width 
----- Codes -----
[1] MAINPROCESS(1) equal st_aaz_params.TWidth_AAZ width;
[2] MAINPROCESS(1) if if( 
[3] MAINPROCESS(1) if st_aaz_params.TWidth_AAZ == BTT_TRAILER_SIZE_UNKNOWN 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal st_g_btt_alertarea.side.VarXin BTT_SIDE_RANGE_UNKNOWN;
[7] SUBPROCESS(1) equal st_g_btt_alertarea.side.VarXout BTT_SIDE_RANGE_UNKNOWN;
[8] MAINPROCESS(2) else if else if( 
[9] MAINPROCESS(2) else if st_aaz_params.TWidth_AAZ >= (FL) BTT_SIDE_RANGE_MAX 
[10] MAINPROCESS(2) else if ) 
[11] MAINPROCESS(2) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) equal st_g_btt_alertarea.side.VarXin BTT_SIDE_RANGE_INVALID;
[13] SUBPROCESS(1) equal st_g_btt_alertarea.side.VarXout BTT_SIDE_RANGE_INVALID;
[14] MAINPROCESS(3) else else 
[15] MAINPROCESS(3) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) if if( 
[17] SUBPROCESS(1) if st_aaz_params.TWidth_AAZ <= BTT_SV_WIDTH 
[18] SUBPROCESS(1) if ) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) equal st_g_btt_alertarea.side.VarXin st_aaz_params.TWidth_AAZ * (FL)0.25;
[21] SUBSUBPROCESS(1) equal st_g_btt_alertarea.side.VarXout st_aaz_params.TWidth_AAZ * (FL)0.25;
[22] SUBPROCESS(2) else else 
[23] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) equal st_g_btt_alertarea.side.VarXin (st_aaz_params.TWidth_AAZ - BTT_SV_WIDTH) * (FL)0.5;
[25] SUBSUBPROCESS(1) equal st_g_btt_alertarea.side.VarXout (st_aaz_params.TWidth_AAZ - BTT_SV_WIDTH) * (FL)0.5;
[26] MAINPROCESS(4) return return; 
----------------- Total Codes : 26 lines
--------------------------
[Function Name] : fn_btt_atd_activate 
-Return type : ;VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.ATD == BTT_RET_t.Func_Stat.ENABLE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.ATD BTT_RET_t.Func_Stat.ACTIVE;
[6] MAINPROCESS(2) return return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_btt_atd_initialize 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) equal st_atd_params.timer 0;
[2] MAINPROCESS(1) equal st_g_btt_result.TFlag BTT_RET_t.TFlag.UNKNOWN;
[3] MAINPROCESS(1) func<start> fn_init( 
[4] MAINPROCESS(1) func st_atd_params.trailer_object, TRAILER_BUFFSIZE 
[5] MAINPROCESS(1) func<end> ); 
[6] MAINPROCESS(1) equal st_atd_params.atd_counter[0] 0;
[7] MAINPROCESS(1) equal st_atd_params.atd_counter[1] 0;
[8] MAINPROCESS(1) func<start> fn_init_btt( 
[9] MAINPROCESS(1) func st_atd_params.trailer_object_total[BTT_OBJ_HISTORY_CYCLE][TRAILER_BUFFSIZE], 
[10] MAINPROCESS(1) func st_atd_params.trailer_object_num_total[BTT_OBJ_HISTORY_CYCLE], 
[11] MAINPROCESS(1) func TRAILER_BUFFSIZE, 
[12] MAINPROCESS(1) func BTT_OBJ_HISTORY_CYCLE 
[13] MAINPROCESS(1) func<end> ); 
[14] MAINPROCESS(1) equal st_atd_params.trailer_object_num 0;
[15] MAINPROCESS(1) return return; 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_btt_atd_deactivate 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.ATD == BTT_RET_t.Func_Stat.ACTIVE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.ATD BTT_RET_t.Func_Stat.DEACTIVE;
[6] MAINPROCESS(2) return return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_btt_tle_activate 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.TLE == BTT_RET_t.Func_Stat.ENABLE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.TLE BTT_RET_t.Func_Stat.ACTIVE;
[6] MAINPROCESS(2) return return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_btt_tle_initialize 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) equal st_tle_params.timer 0;
[2] MAINPROCESS(1) func<start> fn_btt_set_trailer_length( 
[3] MAINPROCESS(1) func  BTT_TRAILER_SIZE_UNKNOWN 
[4] MAINPROCESS(1) func<end> ); 
[5] MAINPROCESS(1) return return; 
----------------- Total Codes : 5 lines
--------------------------
[Function Name] : fn_btt_tle_deactivate 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.TLE == BTT_RET_t.Func_Stat.ACTIVE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.TLE BTT_RET_t.Func_Stat.DEACTIVE;
[6] MAINPROCESS(2) return return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_btt_twe_activate 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.TWE == BTT_RET_t.Func_Stat.ENABLE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.TWE BTT_RET_t.Func_Stat.ACTIVE;
[6] MAINPROCESS(2) return return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_btt_twe_initialize 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) equal st_twe_params.timer 0;
[2] MAINPROCESS(1) func<start> fn_btt_set_trailer_width( 
[3] MAINPROCESS(1) func  BTT_TRAILER_SIZE_UNKNOWN 
[4] MAINPROCESS(1) func<end> ); 
[5] MAINPROCESS(1) equal st_twe_params.twe_cycle (S4)0;
[6] MAINPROCESS(1) equal st_twe_params.twe_final (FL)0.0;
[7] MAINPROCESS(1) return return; 
----------------- Total Codes : 7 lines
--------------------------
[Function Name] : fn_btt_twe_deactivate 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.TWE == BTT_RET_t.Func_Stat.ACTIVE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.TWE BTT_RET_t.Func_Stat.DEACTIVE;
[6] MAINPROCESS(2) return return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_btt_ttm_activate 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.TTM == BTT_RET_t.Func_Stat.ENABLE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.TTM BTT_RET_t.Func_Stat.ACTIVE;
[6] MAINPROCESS(2) return return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_btt_ttm_deactivate 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.TTM == BTT_RET_t.Func_Stat.ACTIVE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.TTM BTT_RET_t.Func_Stat.DEACTIVE;
[6] MAINPROCESS(2) return return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_btt_aaz_activate 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.AAZ == BTT_RET_t.Func_Stat.ENABLE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.AAZ BTT_RET_t.Func_Stat.ACTIVE;
[6] SUBPROCESS(1) equal st_aaz_params.VarY (FL) 0.0;
[7] SUBPROCESS(1) equal st_aaz_params.First BTT_RET_t.Bool.TRUE;
[8] SUBPROCESS(1) equal st_aaz_params.TLength_AAZ BTT_TRAILER_SIZE_UNKNOWN;
[9] SUBPROCESS(1) equal st_aaz_params.TLength_valid_count (S4) 0;
[10] SUBPROCESS(1) equal st_aaz_params.TLength_invalid_count (S4) 0;
[11] SUBPROCESS(1) equal st_aaz_params.TLength_unknown_count (S4) 0;
[12] SUBPROCESS(1) equal st_aaz_params.TWidth_AAZ BTT_TRAILER_SIZE_UNKNOWN;
[13] SUBPROCESS(1) equal st_aaz_params.TWidth_valid_count (S4) 0;
[14] SUBPROCESS(1) equal st_aaz_params.TWidth_invalid_count (S4) 0;
[15] SUBPROCESS(1) equal st_aaz_params.TWidth_unknown_count (S4) 0;
[16] MAINPROCESS(2) return return; 
----------------- Total Codes : 16 lines
--------------------------
[Function Name] : fn_btt_aaz_initialize 
-Return type : VD 
-Argument : 2 
     [0] : FL   fl_a_trailer_length 
     [1] : FL   fl_a_trailer_width 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_aaz_params.First == BTT_RET_t.Bool.FALSE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) return return; 
[6] MAINPROCESS(2) equal st_aaz_params.VarY BTT_REAR_RANGE_LONG;
[7] MAINPROCESS(2) equal st_aaz_params.First BTT_RET_t.Bool.FALSE;
[8] MAINPROCESS(2) equal st_aaz_params.TLength_AAZ fl_a_trailer_length;
[9] MAINPROCESS(2) equal st_aaz_params.TLength_valid_count (S4) 0;
[10] MAINPROCESS(2) equal st_aaz_params.TLength_invalid_count (S4) 0;
[11] MAINPROCESS(2) equal st_aaz_params.TLength_unknown_count (S4) 0;
[12] MAINPROCESS(2) equal st_aaz_params.TWidth_AAZ fl_a_trailer_width;
[13] MAINPROCESS(2) equal st_aaz_params.TWidth_valid_count (S4) 0;
[14] MAINPROCESS(2) equal st_aaz_params.TWidth_invalid_count (S4) 0;
[15] MAINPROCESS(2) equal st_aaz_params.TWidth_unknown_count (S4) 0;
[16] MAINPROCESS(2) return return; 
----------------- Total Codes : 16 lines
--------------------------
[Function Name] : fn_btt_aaz_deactivate 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.AAZ == BTT_RET_t.Func_Stat.ACTIVE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) equal st_g_btt_stat.AAZ BTT_RET_t.Func_Stat.DEACTIVE;
[6] MAINPROCESS(2) return return; 
----------------- Total Codes : 6 lines
--------------------------
[Function Name] : fn_btt_main 
-Return type : VD 
-Argument : 18 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : S1   s1_a_shift_flg 
     [3] : NORMAL_BSM   *pst_a_object 
     [4] : S4   s4_a_object_size 
     [5] : FL   fl_a_doa_pow_ave[2][3] 
     [6] : FL   fl_a_doa_pow_dev[2][3] 
     [7] : S4   s4_a_doa_bf_peak_bin 
     [8] : FL   fl_a_doa_bf_peak_pow 
     [9] : BTT_STAT   *pst_a_btt_stat 
     [10] : U1   *pu1_alarm_flg 
     [11] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [12] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [13] : BTT_HITCH_ANGLE   *pst_a_hitch_angle 
     [14] : NORMAL_BSM   *pst_a_target 
     [15] : S4   s4_a_target_size 
     [16] : BTT_RESULT   *pst_a_btt_result 
     [17] : BTT_ALERTAREA*   pst_a_btt_alertarea 
----- Codes -----
[1] MAINPROCESS(1) equal FL fl_t_length BTT_TRAILER_SIZE_UNKNOWN;
[2] MAINPROCESS(1) equal FL fl_t_width BTT_TRAILER_SIZE_UNKNOWN;
[3] MAINPROCESS(1) func<start> fn_check_front_trailer_line( 
[4] MAINPROCESS(1) func<end> ); 
[5] MAINPROCESS(1) func<start> fn_btt_sel_exclude_object( 
[6] MAINPROCESS(1) func pst_a_object, 
[7] MAINPROCESS(1) func &s4_a_object_size 
[8] MAINPROCESS(1) func<end> ); 
[9] MAINPROCESS(1) func<start> fn_btt_shift_trailerobj( 
[10] MAINPROCESS(1) func pst_a_object, 
[11] MAINPROCESS(1) func s4_a_object_size 
[12] MAINPROCESS(1) func<end> ); 
[13] MAINPROCESS(1) func<start> fn_btt_atd_main( 
[14] MAINPROCESS(1) func fl_a_self_v, 
[15] MAINPROCESS(1) func s4_a_curve_r, 
[16] MAINPROCESS(1) func s1_a_shift_flg, 
[17] MAINPROCESS(1) func pst_a_object, 
[18] MAINPROCESS(1) func s4_a_object_size, 
[19] MAINPROCESS(1) func fl_a_doa_pow_ave, 
[20] MAINPROCESS(1) func fl_a_doa_pow_dev, 
[21] MAINPROCESS(1) func s4_a_doa_bf_peak_bin, 
[22] MAINPROCESS(1) func fl_a_doa_bf_peak_pow, 
[23] MAINPROCESS(1) func pst_a_cluster_info, 
[24] MAINPROCESS(1) func pst_a_aux_trailer_info, 
[25] MAINPROCESS(1) func pst_a_btt_result 
[26] MAINPROCESS(1) func<end> ); 
[27] MAINPROCESS(1) equal au1_g_btt_atd_tflag pst_a_btt_result->TFlag;
[28] MAINPROCESS(1) if if( 
[29] MAINPROCESS(1) if pst_a_btt_stat->ATD == BTT_RET_t.Func_Stat.DEACTIVE 
[30] MAINPROCESS(1) if ) 
[31] MAINPROCESS(1) subproc SUBPROCESS(1) 
[32] SUBPROCESS(1) func<start> fn_btt_set_btt_drv_state( 
[33] SUBPROCESS(1) func  *pst_a_btt_stat, *pst_a_btt_result 
[34] SUBPROCESS(1) func<end> ); 
[35] SUBPROCESS(1) if if( 
[36] SUBPROCESS(1) if pst_a_btt_stat->BTT_drv == BTT_RET_t.Drv_Stat.CONNECT 
[37] SUBPROCESS(1) if ) 
[38] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[39] SUBSUBPROCESS(1) func<start> fn_btt_tle_activate( 
[40] SUBSUBPROCESS(1) func<end> ); 
[41] SUBSUBPROCESS(1) func<start> fl_t_length = fn_btt_tle_main( 
[42] SUBSUBPROCESS(1) func fl_a_self_v, 
[43] SUBSUBPROCESS(1) func s4_a_curve_r, 
[44] SUBSUBPROCESS(1) func pst_a_object, 
[45] SUBSUBPROCESS(1) func s4_a_object_size, 
[46] SUBSUBPROCESS(1) func pst_a_cluster_info, 
[47] SUBSUBPROCESS(1) func pst_a_aux_trailer_info, 
[48] SUBSUBPROCESS(1) func pst_a_btt_stat 
[49] SUBSUBPROCESS(1) func<end> ); 
[50] SUBSUBPROCESS(1) equal afl_g_btt_aaz_area[0] fl_t_length;
[51] SUBSUBPROCESS(1) func<start> fn_btt_twe_activate( 
[52] SUBSUBPROCESS(1) func<end> ); 
[53] SUBSUBPROCESS(1) func<start> fl_t_width = fn_btt_twe_main( 
[54] SUBSUBPROCESS(1) func fl_a_self_v, 
[55] SUBSUBPROCESS(1) func s4_a_curve_r, 
[56] SUBSUBPROCESS(1) func pst_a_object, 
[57] SUBSUBPROCESS(1) func s4_a_object_size, 
[58] SUBSUBPROCESS(1) func pst_a_cluster_info, 
[59] SUBSUBPROCESS(1) func pst_a_aux_trailer_info, 
[60] SUBSUBPROCESS(1) func pst_a_hitch_angle, 
[61] SUBSUBPROCESS(1) func pst_a_btt_stat 
[62] SUBSUBPROCESS(1) func<end> ); 
[63] SUBSUBPROCESS(1) if if( 
[64] SUBSUBPROCESS(1) if fl_t_width != BTT_TRAILER_SIZE_UNKNOWN 
[65] SUBSUBPROCESS(1) if ) 
[66] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[67] SUBSUBSUBPROCESS(1) equal st_twe_params.twe_final + fl_t_width;
[68] SUBSUBSUBPROCESS(1) proc st_twe_params.twe_cycle ++; 
[69] SUBSUBPROCESS(2) if if( 
[70] SUBSUBPROCESS(2) if st_g_btt_stat.TWE == BTT_RET_t.Func_Stat.DEACTIVE 
[71] SUBSUBPROCESS(2) if &&	st_twe_params.twe_cycle > (S4)((FL)BTT_TWE_MAX_TIME * (FL)0.6) 
[72] SUBSUBPROCESS(2) if ) 
[73] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[74] SUBSUBSUBPROCESS(1) equal fl_t_width st_twe_params.twe_final / (FL)st_twe_params.twe_cycle;
[75] SUBSUBPROCESS(3) equal afl_g_btt_aaz_area[1] fl_t_width;
[76] SUBSUBPROCESS(3) func<start> fn_btt_set_btt_drv_state( 
[77] SUBSUBPROCESS(3) func  *pst_a_btt_stat, *pst_a_btt_result 
[78] SUBSUBPROCESS(3) func<end> ); 
[79] SUBPROCESS(2) if if( 
[80] SUBPROCESS(2) if pst_a_btt_result->TFlag ==  BTT_RET_t.TFlag.CONNECT 
[81] SUBPROCESS(2) if ) 
[82] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[83] SUBSUBPROCESS(1) func<start> fn_btt_set_trailer_length( 
[84] SUBSUBPROCESS(1) func  fl_t_length 
[85] SUBSUBPROCESS(1) func<end> ); 
[86] SUBSUBPROCESS(1) func<start> fn_btt_set_trailer_width( 
[87] SUBSUBPROCESS(1) func  fl_t_width 
[88] SUBSUBPROCESS(1) func<end> ); 
[89] SUBSUBPROCESS(1) func<start> fn_btt_aaz_initialize( 
[90] SUBSUBPROCESS(1) func pst_a_btt_result->TLength, 
[91] SUBSUBPROCESS(1) func pst_a_btt_result->TWidth 
[92] SUBSUBPROCESS(1) func<end> ); 
[93] SUBSUBPROCESS(1) func<start> fn_btt_aaz_main( 
[94] SUBSUBPROCESS(1) func fl_a_self_v, 
[95] SUBSUBPROCESS(1) func s4_a_curve_r, 
[96] SUBSUBPROCESS(1) func pst_a_btt_alertarea, 
[97] SUBSUBPROCESS(1) func pu1_alarm_flg, 
[98] SUBSUBPROCESS(1) func pst_a_btt_result, 
[99] SUBSUBPROCESS(1) func pst_a_btt_stat, 
[100] SUBSUBPROCESS(1) func pst_a_target, 
[101] SUBSUBPROCESS(1) func s4_a_target_size, 
[102] SUBSUBPROCESS(1) func pst_a_hitch_angle 
[103] SUBSUBPROCESS(1) func<end> ); 
[104] SUBSUBPROCESS(1) equal afl_g_btt_aaz_area[2] pst_a_btt_alertarea->rear.VarY;
[105] SUBSUBPROCESS(1) equal afl_g_btt_aaz_area[3] pst_a_btt_alertarea->side.VarXin;
[106] SUBSUBPROCESS(1) equal afl_g_btt_aaz_area[4] pst_a_btt_alertarea->side.VarXout;
[107] MAINPROCESS(2) else else 
[108] MAINPROCESS(2) subproc SUBPROCESS(1) 
[109] SUBPROCESS(1) func<start> fn_btt_tle_initialize( 
[110] SUBPROCESS(1) func<end> ); 
[111] SUBPROCESS(1) func<start> fn_btt_twe_initialize( 
[112] SUBPROCESS(1) func<end> ); 
[113] MAINPROCESS(3) func<start> fn_btt_set_btt_drv_state( 
[114] MAINPROCESS(3) func  *pst_a_btt_stat, *pst_a_btt_result 
[115] MAINPROCESS(3) func<end> ); 
[116] MAINPROCESS(3) equal as4_g_btt_atd_timer[0] st_atd_params.timer;
[117] MAINPROCESS(3) equal as4_g_btt_atd_timer[1] st_tle_params.timer;
[118] MAINPROCESS(3) equal as4_g_btt_atd_timer[2] st_twe_params.timer;
[119] MAINPROCESS(3) return return; 
----------------- Total Codes : 119 lines
--------------------------
[Function Name] : fn_btt_atd_main 
-Return type : VD 
-Argument : 12 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : S1   s1_a_shift_flg 
     [3] : NORMAL_BSM   *pst_a_object 
     [4] : S4   s4_a_object_size 
     [5] : FL   fl_a_doa_pow_ave[2][3] 
     [6] : FL   fl_a_doa_pow_dev[2][3] 
     [7] : S4   s4_a_doa_bf_peak_bin 
     [8] : FL   fl_a_doa_bf_peak_pow 
     [9] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [10] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [11] : BTT_RESULT*   pst_a_btt_result 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.ATD != BTT_RET_t.Func_Stat.ACTIVE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) return return; 
[6] MAINPROCESS(2) if if( 
[7] MAINPROCESS(2) if s1_a_shift_flg != (S1) 0 
[8] MAINPROCESS(2) if ) 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) if if( 
[11] SUBPROCESS(1) if fl_a_self_v > BTT_ACTIVE_SPEED_TH 
[12] SUBPROCESS(1) if ) 
[13] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[14] SUBSUBPROCESS(1) if if( 
[15] SUBSUBPROCESS(1) if st_atd_params.timer < BTT_ATD_MAX_TIME 
[16] SUBSUBPROCESS(1) if ) 
[17] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[18] SUBSUBSUBPROCESS(1) if if( 
[19] SUBSUBSUBPROCESS(1) if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.UNKNOWN 
[20] SUBSUBSUBPROCESS(1) if ) 
[21] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[22] SUBSUBSUBSUBPROCESS(1) func<start> pst_a_btt_result->TFlag = fn_btt_atd_detect_trailer( 
[23] SUBSUBSUBSUBPROCESS(1) func fl_a_self_v, 
[24] SUBSUBSUBSUBPROCESS(1) func s4_a_curve_r, 
[25] SUBSUBSUBSUBPROCESS(1) func pst_a_object, 
[26] SUBSUBSUBSUBPROCESS(1) func s4_a_object_size, 
[27] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_pow_ave, 
[28] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_pow_dev, 
[29] SUBSUBSUBSUBPROCESS(1) func s4_a_doa_bf_peak_bin, 
[30] SUBSUBSUBSUBPROCESS(1) func fl_a_doa_bf_peak_pow, 
[31] SUBSUBSUBSUBPROCESS(1) func pst_a_cluster_info, 
[32] SUBSUBSUBSUBPROCESS(1) func pst_a_aux_trailer_info 
[33] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[34] SUBSUBSUBSUBPROCESS(1) if if( 
[35] SUBSUBSUBSUBPROCESS(1) if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.CONNECT 
[36] SUBSUBSUBSUBPROCESS(1) if ) 
[37] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[39] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[40] SUBSUBSUBSUBPROCESS(2) else if else if( 
[41] SUBSUBSUBSUBPROCESS(2) else if pst_a_btt_result->TFlag == BTT_RET_t.TFlag.NOTCONNECT 
[42] SUBSUBSUBSUBPROCESS(2) else if ) 
[43] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[44] SUBSUBSUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[45] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[46] SUBSUBSUBSUBPROCESS(3) else else 
[47] SUBSUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[48] SUBSUBPROCESS(2) else else 
[49] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[50] SUBSUBSUBPROCESS(1) equal pst_a_btt_result->TFlag BTT_RET_t.TFlag.UNKNOWN;
[51] SUBSUBSUBPROCESS(1) func<start> fn_btt_atd_deactivate( 
[52] SUBSUBSUBPROCESS(1) func<end> ); 
[53] SUBSUBPROCESS(3) proc st_atd_params.timer++; 
[54] SUBPROCESS(2) else else 
[55] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[56] MAINPROCESS(3) else else 
[57] MAINPROCESS(3) subproc SUBPROCESS(1) 
[58] SUBPROCESS(1) func<start> fn_btt_atd_initialize( 
[59] SUBPROCESS(1) func<end> ); 
[60] MAINPROCESS(4) return return; 
----------------- Total Codes : 60 lines
--------------------------
[Function Name] : fn_btt_tle_main 
-Return type : FL 
-Argument : 7 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : NORMAL_BSM   *pst_a_object 
     [3] : S4   s4_a_object_size 
     [4] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [5] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [6] : BTT_STAT   *pst_a_btt_stat 
----- Codes -----
[1] MAINPROCESS(1) equal FL fl_t_length BTT_TRAILER_SIZE_UNKNOWN;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc FL fl_a_tle_bf_peak[BTT_TLE_RANGE]; 
[4] MAINPROCESS(1) proc FL fl_a_tle_bf_pow_diff[BTT_TLE_RANGE-(S4)1]; 
[5] MAINPROCESS(1) for for( 
[6] MAINPROCESS(1) for s4_t_lp_i = 0; 
[7] MAINPROCESS(1) for s4_t_lp_i < BTT_TLE_RANGE; 
[8] MAINPROCESS(1) for s4_t_lp_i++ 
[9] MAINPROCESS(1) for ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal fl_a_tle_bf_peak[s4_t_lp_i] (FL)0;
[12] MAINPROCESS(2) for for( 
[13] MAINPROCESS(2) for s4_t_lp_i = 0; 
[14] MAINPROCESS(2) for s4_t_lp_i < BTT_TLE_RANGE - (S4)1; 
[15] MAINPROCESS(2) for s4_t_lp_i++ 
[16] MAINPROCESS(2) for ) 
[17] MAINPROCESS(2) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) equal fl_a_tle_bf_pow_diff[s4_t_lp_i] (FL)0;
[19] MAINPROCESS(3) if if( 
[20] MAINPROCESS(3) if st_g_btt_stat.TLE != BTT_RET_t.Func_Stat.ACTIVE 
[21] MAINPROCESS(3) if ) 
[22] MAINPROCESS(3) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) if if( 
[24] SUBPROCESS(1) if st_g_btt_result.TLength != BTT_TRAILER_SIZE_UNKNOWN 
[25] SUBPROCESS(1) if ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(1) proc return st_g_btt_result.TLength; 
[28] SUBPROCESS(2) else else 
[29] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[30] SUBSUBPROCESS(1) proc return fl_t_length; 
[31] MAINPROCESS(4) func<start> fn_btt_tle_search_peak_bf( 
[32] MAINPROCESS(4) func (const FL (*)[CORRE_SIZE_4CH])(afl_g_cvw_lfm_ryy_matrix[0]), 
[33] MAINPROCESS(4) func fl_a_tle_bf_peak 
[34] MAINPROCESS(4) func<end> ); 
[35] MAINPROCESS(4) func<start> fn_btt_tle_calc_bf_power_diff( 
[36] MAINPROCESS(4) func fl_a_tle_bf_peak, 
[37] MAINPROCESS(4) func fl_a_tle_bf_pow_diff 
[38] MAINPROCESS(4) func<end> ); 
[39] MAINPROCESS(4) for  for ( 
[40] MAINPROCESS(4) for  s4_t_lp_i = 0; 
[41] MAINPROCESS(4) for  s4_t_lp_i < 30; 
[42] MAINPROCESS(4) for  s4_t_lp_i++  
[43] MAINPROCESS(4) for  ) 
[44] MAINPROCESS(4) subproc SUBPROCESS(1) 
[45] SUBPROCESS(1) func<start> fn_bsm_cal_trailer_range_doa_ave( 
[46] SUBPROCESS(1) func 0, 
[47] SUBPROCESS(1) func (const FL (*)[CORRE_SIZE_4CH])(afl_g_cvw_lfm_ryy_matrix[0]), 
[48] SUBPROCESS(1) func (256+s4_t_lp_i), 
[49] SUBPROCESS(1) func &afl_a_doa_pow_ave[s4_t_lp_i], 
[50] SUBPROCESS(1) func &afl_a_doa_pow_dev[s4_t_lp_i] 
[51] SUBPROCESS(1) func<end> ); 
[52] MAINPROCESS(5) if if( 
[53] MAINPROCESS(5) if st_tle_params.timer < BTT_TLE_MAX_TIME 
[54] MAINPROCESS(5) if ) 
[55] MAINPROCESS(5) subproc SUBPROCESS(1) 
[56] SUBPROCESS(1) func<start> fl_t_length = fn_btt_tle_estimate_trailer_length( 
[57] SUBPROCESS(1) func<end> ); 
[58] MAINPROCESS(6) else else 
[59] MAINPROCESS(6) subproc SUBPROCESS(1) 
[60] SUBPROCESS(1) func<start> fn_btt_tle_deactivate( 
[61] SUBPROCESS(1) func<end> ); 
[62] MAINPROCESS(7) proc st_tle_params.timer++; 
[63] MAINPROCESS(7) equal fl_t_length (FL)4;
[64] MAINPROCESS(7) proc return fl_t_length; 
----------------- Total Codes : 64 lines
--------------------------
[Function Name] : fn_btt_twe_main 
-Return type : FL 
-Argument : 8 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : NORMAL_BSM   *pst_a_object 
     [3] : S4   s4_a_object_size 
     [4] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [5] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
     [6] : BTT_HITCH_ANGLE   *pst_a_hitch_angle 
     [7] : BTT_STAT   *pst_a_btt_stat 
----- Codes -----
[1] MAINPROCESS(1) equal FL fl_t_width BTT_TRAILER_SIZE_UNKNOWN;
[2] MAINPROCESS(1) if if( 
[3] MAINPROCESS(1) if st_g_btt_stat.TWE != BTT_RET_t.Func_Stat.ACTIVE 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) proc return fl_t_width; 
[7] MAINPROCESS(2) if if( 
[8] MAINPROCESS(2) if st_twe_params.timer < BTT_TWE_MAX_TIME 
[9] MAINPROCESS(2) if ) 
[10] MAINPROCESS(2) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) func<start> fl_t_width = fn_btt_twe_estimate_trailer_width( 
[12] SUBPROCESS(1) func s4_a_curve_r, 
[13] SUBPROCESS(1) func pst_a_object, 
[14] SUBPROCESS(1) func s4_a_object_size 
[15] SUBPROCESS(1) func<end> ); 
[16] MAINPROCESS(3) else else 
[17] MAINPROCESS(3) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) func<start> fn_btt_twe_deactivate( 
[19] SUBPROCESS(1) func<end> ); 
[20] MAINPROCESS(4) proc st_twe_params.timer++; 
[21] MAINPROCESS(4) proc return fl_t_width; 
----------------- Total Codes : 21 lines
--------------------------
[Function Name] : fn_btt_aaz_main 
-Return type : VD 
-Argument : 9 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : BTT_ALERTAREA   *st_a_btt_alertarea 
     [3] : U1   *pu1_alarm_flg 
     [4] : BTT_RESULT*   pst_a_btt_result 
     [5] : BTT_STAT   *pst_a_btt_stat 
     [6] : NORMAL_BSM   *pst_a_target 
     [7] : S4   s4_a_target_size 
     [8] : BTT_HITCH_ANGLE   *pst_a_hitch_angle 
----- Codes -----
[1] MAINPROCESS(1) if if( 
[2] MAINPROCESS(1) if st_g_btt_stat.AAZ != BTT_RET_t.Func_Stat.ACTIVE 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) return return; 
[6] MAINPROCESS(2) if if( 
[7] MAINPROCESS(2) if st_aaz_params.First == BTT_RET_t.Bool.TRUE 
[8] MAINPROCESS(2) if ) 
[9] MAINPROCESS(2) subproc SUBPROCESS(1) 
[10] SUBPROCESS(1) return return; 
[11] MAINPROCESS(3) if if( 
[12] MAINPROCESS(3) if pst_a_btt_result->TLength_stat == BTT_RET_t.TSize_Stat.UNKNOWN 
[13] MAINPROCESS(3) if ) 
[14] MAINPROCESS(3) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) proc st_aaz_params.TLength_unknown_count++; 
[16] SUBPROCESS(1) if if( 
[17] SUBPROCESS(1) if st_aaz_params.TLength_unknown_count > BTT_AAZ_TH_OFF 
[18] SUBPROCESS(1) if ) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) func<start> fn_btt_set_range_rear( 
[21] SUBSUBPROCESS(1) func  pst_a_btt_result->TLength 
[22] SUBSUBPROCESS(1) func<end> ); 
[23] SUBSUBPROCESS(1) if if( 
[24] SUBSUBPROCESS(1) if pst_a_btt_stat->TLE == BTT_RET_t.Func_Stat.DEACTIVE 
[25] SUBSUBPROCESS(1) if ) 
[26] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[27] SUBSUBSUBPROCESS(1) func<start> fn_btt_aaz_deactivate( 
[28] SUBSUBSUBPROCESS(1) func<end> ); 
[29] SUBPROCESS(2) else else 
[30] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[31] MAINPROCESS(4) else if else if( 
[32] MAINPROCESS(4) else if pst_a_btt_result->TLength_stat == BTT_RET_t.TSize_Stat.VALID 
[33] MAINPROCESS(4) else if ) 
[34] MAINPROCESS(4) subproc SUBPROCESS(1) 
[35] SUBPROCESS(1) if if( 
[36] SUBPROCESS(1) if *pu1_alarm_flg == BTT_RET_t.Bool.TRUE 
[37] SUBPROCESS(1) if ) 
[38] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[39] SUBPROCESS(2) else else 
[40] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[41] SUBSUBPROCESS(1) proc st_aaz_params.TLength_valid_count++; 
[42] SUBSUBPROCESS(1) if if( 
[43] SUBSUBPROCESS(1) if st_aaz_params.TLength_valid_count > BTT_AAZ_TH_ON 
[44] SUBSUBPROCESS(1) if ) 
[45] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[46] SUBSUBSUBPROCESS(1) func<start> fn_btt_set_range_rear( 
[47] SUBSUBSUBPROCESS(1) func  pst_a_btt_result->TLength 
[48] SUBSUBSUBPROCESS(1) func<end> ); 
[49] SUBSUBSUBPROCESS(1) if if( 
[50] SUBSUBSUBPROCESS(1) if pst_a_btt_stat->TLE == BTT_RET_t.Func_Stat.DEACTIVE 
[51] SUBSUBSUBPROCESS(1) if ) 
[52] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[53] SUBSUBSUBSUBPROCESS(1) func<start> fn_btt_aaz_deactivate( 
[54] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[55] MAINPROCESS(5) else if else if( 
[56] MAINPROCESS(5) else if pst_a_btt_result->TLength_stat == BTT_RET_t.TSize_Stat.INVALID 
[57] MAINPROCESS(5) else if ) 
[58] MAINPROCESS(5) subproc SUBPROCESS(1) 
[59] SUBPROCESS(1) proc st_aaz_params.TLength_invalid_count++; 
[60] SUBPROCESS(1) if if( 
[61] SUBPROCESS(1) if st_aaz_params.TLength_invalid_count > BTT_AAZ_TH_OFF 
[62] SUBPROCESS(1) if ) 
[63] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[64] SUBSUBPROCESS(1) func<start> fn_btt_set_range_rear( 
[65] SUBSUBPROCESS(1) func  pst_a_btt_result->TLength 
[66] SUBSUBPROCESS(1) func<end> ); 
[67] SUBSUBPROCESS(1) func<start> fn_btt_tle_deactivate( 
[68] SUBSUBPROCESS(1) func<end> ); 
[69] SUBPROCESS(2) else else 
[70] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[71] MAINPROCESS(6) else else 
[72] MAINPROCESS(6) subproc SUBPROCESS(1) 
[73] MAINPROCESS(7) if if( 
[74] MAINPROCESS(7) if pst_a_btt_result->TWidth_stat == BTT_RET_t.TSize_Stat.UNKNOWN 
[75] MAINPROCESS(7) if ) 
[76] MAINPROCESS(7) subproc SUBPROCESS(1) 
[77] SUBPROCESS(1) proc st_aaz_params.TWidth_unknown_count++; 
[78] SUBPROCESS(1) if if( 
[79] SUBPROCESS(1) if st_aaz_params.TWidth_unknown_count > BTT_AAZ_TH_OFF 
[80] SUBPROCESS(1) if ) 
[81] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[82] SUBSUBPROCESS(1) func<start> fn_btt_set_range_side( 
[83] SUBSUBPROCESS(1) func  pst_a_btt_result->TWidth 
[84] SUBSUBPROCESS(1) func<end> ); 
[85] SUBSUBPROCESS(1) if if( 
[86] SUBSUBPROCESS(1) if pst_a_btt_stat->TWE == BTT_RET_t.Func_Stat.DEACTIVE 
[87] SUBSUBPROCESS(1) if ) 
[88] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[89] SUBSUBSUBPROCESS(1) func<start> fn_btt_aaz_deactivate( 
[90] SUBSUBSUBPROCESS(1) func<end> ); 
[91] SUBPROCESS(2) else else 
[92] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[93] MAINPROCESS(8) else if else if( 
[94] MAINPROCESS(8) else if pst_a_btt_result->TWidth_stat == BTT_RET_t.TSize_Stat.VALID 
[95] MAINPROCESS(8) else if ) 
[96] MAINPROCESS(8) subproc SUBPROCESS(1) 
[97] SUBPROCESS(1) if if( 
[98] SUBPROCESS(1) if *pu1_alarm_flg == BTT_RET_t.Bool.TRUE 
[99] SUBPROCESS(1) if ) 
[100] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[101] SUBPROCESS(2) else else 
[102] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[103] SUBSUBPROCESS(1) proc st_aaz_params.TWidth_valid_count++; 
[104] SUBSUBPROCESS(1) if if( 
[105] SUBSUBPROCESS(1) if st_aaz_params.TWidth_valid_count > BTT_AAZ_TH_ON 
[106] SUBSUBPROCESS(1) if ) 
[107] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[108] SUBSUBSUBPROCESS(1) func<start> fn_btt_set_range_side( 
[109] SUBSUBSUBPROCESS(1) func  pst_a_btt_result->TWidth 
[110] SUBSUBSUBPROCESS(1) func<end> ); 
[111] SUBSUBSUBPROCESS(1) if if( 
[112] SUBSUBSUBPROCESS(1) if pst_a_btt_stat->TWE == BTT_RET_t.Func_Stat.DEACTIVE 
[113] SUBSUBSUBPROCESS(1) if ) 
[114] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[115] SUBSUBSUBSUBPROCESS(1) func<start> fn_btt_aaz_deactivate( 
[116] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[117] MAINPROCESS(9) else if else if( 
[118] MAINPROCESS(9) else if pst_a_btt_result->TWidth_stat == BTT_RET_t.TSize_Stat.INVALID 
[119] MAINPROCESS(9) else if ) 
[120] MAINPROCESS(9) subproc SUBPROCESS(1) 
[121] SUBPROCESS(1) proc st_aaz_params.TWidth_invalid_count++; 
[122] SUBPROCESS(1) if if( 
[123] SUBPROCESS(1) if st_aaz_params.TWidth_invalid_count > BTT_AAZ_TH_OFF 
[124] SUBPROCESS(1) if ) 
[125] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[126] SUBSUBPROCESS(1) func<start> fn_btt_set_range_side( 
[127] SUBSUBPROCESS(1) func  pst_a_btt_result->TWidth 
[128] SUBSUBPROCESS(1) func<end> ); 
[129] SUBSUBPROCESS(1) func<start> fn_btt_twe_deactivate( 
[130] SUBSUBPROCESS(1) func<end> ); 
[131] SUBPROCESS(2) else else 
[132] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[133] MAINPROCESS(10) else else 
[134] MAINPROCESS(10) subproc SUBPROCESS(1) 
[135] MAINPROCESS(11) return return; 
----------------- Total Codes : 135 lines
--------------------------
[Function Name] : fn_btt_atd_detect_trailer 
-Return type : U1 
-Argument : 10 
     [0] : FL   fl_a_self_v 
     [1] : S4   s4_a_curve_r 
     [2] : NORMAL_BSM   *pst_a_object 
     [3] : S4   s4_a_object_size 
     [4] : FL   fl_a_doa_pow_ave[2][3] 
     [5] : FL   fl_a_doa_pow_dev[2][3] 
     [6] : S4   s4_a_doa_bf_peak_bin 
     [7] : FL   fl_a_doa_bf_peak_pow 
     [8] : BTT_CLUSTER_INFO   *pst_a_cluster_info 
     [9] : BTT_AUX_TRAILER_INFO   *pst_a_aux_trailer_info 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) equal U1 u1_t_btt_trailer_flg BTT_RET_t.TFlag.UNKNOWN;
[3] MAINPROCESS(1) func<start> fn_btt_atd_trailerobj_tracking( 
[4] MAINPROCESS(1) func pst_a_object, 
[5] MAINPROCESS(1) func s4_a_object_size 
[6] MAINPROCESS(1) func ,fl_a_doa_pow_ave 
[7] MAINPROCESS(1) func ,fl_a_doa_pow_dev 
[8] MAINPROCESS(1) func ,s4_a_doa_bf_peak_bin 
[9] MAINPROCESS(1) func ,fl_a_doa_bf_peak_pow 
[10] MAINPROCESS(1) func<end> ); 
[11] MAINPROCESS(1) if if( 
[12] MAINPROCESS(1) if st_atd_params.atd_counter[0] > BTT_ATD_CONNECT_TH 
[13] MAINPROCESS(1) if ) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal u1_t_btt_trailer_flg BTT_RET_t.TFlag.CONNECT;
[16] MAINPROCESS(2) if if( 
[17] MAINPROCESS(2) if (st_atd_params.atd_counter[1] > BTT_ATD_NOTCONNECT_TH 
[18] MAINPROCESS(2) if ) 
[19] MAINPROCESS(2) if &&  (st_atd_params.atd_counter[1] - st_atd_params.atd_counter[0] > BTT_ATD_CNT_DIFF)  
[20] MAINPROCESS(2) if ) 
[21] MAINPROCESS(2) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal u1_t_btt_trailer_flg BTT_RET_t.TFlag.NOTCONNECT;
[23] SUBPROCESS(1) for for( 
[24] SUBPROCESS(1) for s4_t_lp_i=0; 
[25] SUBPROCESS(1) for s4_t_lp_i<6; 
[26] SUBPROCESS(1) for s4_t_lp_i++ 
[27] SUBPROCESS(1) for ) 
[28] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[29] SUBSUBPROCESS(1) equal afl_g_btt_atd_obj_tracking[s4_t_lp_i] (FL)-120;
[30] MAINPROCESS(3) proc return u1_t_btt_trailer_flg; 
----------------- Total Codes : 30 lines
--------------------------
[Function Name] : fn_btt_tle_estimate_trailer_length 
-Return type : FL 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) equal FL fl_t_length BTT_TRAILER_SIZE_UNKNOWN;
[2] MAINPROCESS(1) proc return fl_t_length; 
----------------- Total Codes : 2 lines
--------------------------
[Function Name] : fn_btt_twe_estimate_trailer_width 
-Return type : FL 
-Argument : 3 
     [0] : S4   s4_a_curve_r 
     [1] : NORMAL_BSM   *pst_a_object 
     [2] : S4   s4_a_object_size 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_cycle; 
[3] MAINPROCESS(1) proc FL fl_t_width; 
[4] MAINPROCESS(1) equal FL fl_t_rx_ave (FL)0.0;
[5] MAINPROCESS(1) equal s4_t_cycle (S4)0;
[6] MAINPROCESS(1) for for( 
[7] MAINPROCESS(1) for s4_t_lp_i = 0; 
[8] MAINPROCESS(1) for s4_t_lp_i < BTT_OBJ_HISTORY_CYCLE; 
[9] MAINPROCESS(1) for s4_t_lp_i++ 
[10] MAINPROCESS(1) for ) 
[11] MAINPROCESS(1) subproc SUBPROCESS(1) 
[12] SUBPROCESS(1) if if( 
[13] SUBPROCESS(1) if st_atd_params.trailer_object_total[s4_t_lp_i][0].fl_Rxobs != CFL_UNKNOWN_VALUE 
[14] SUBPROCESS(1) if &&  st_atd_params.trailer_object_total[s4_t_lp_i][0].fl_Ryobs < (FL)-0.5 
[15] SUBPROCESS(1) if &&  st_atd_params.trailer_object_total[s4_t_lp_i][0].fl_Ryobs > (FL)-2.0  
[16] SUBPROCESS(1) if ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) func<start> fl_t_rx_ave += fl_abs( 
[19] SUBSUBPROCESS(1) func st_atd_params.trailer_object_total[s4_t_lp_i][0].fl_Rxobs 
[20] SUBSUBPROCESS(1) func<end> ); 
[21] SUBSUBPROCESS(1) proc s4_t_cycle ++; 
[22] MAINPROCESS(2) if if( 
[23] MAINPROCESS(2) if s4_t_cycle != (S4)0 
[24] MAINPROCESS(2) if ) 
[25] MAINPROCESS(2) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal fl_t_rx_ave fl_t_rx_ave / (FL)s4_t_cycle;
[27] SUBPROCESS(1) equal fl_t_width (FL)2.0 * fl_t_rx_ave;
[28] MAINPROCESS(3) else else 
[29] MAINPROCESS(3) subproc SUBPROCESS(1) 
[30] SUBPROCESS(1) equal fl_t_width BTT_TRAILER_SIZE_UNKNOWN;
[31] MAINPROCESS(4) proc return fl_t_width; 
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : fn_check_front_trailer_line 
-Return type : VD 
-Argument : 0 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i,j; 
[2] MAINPROCESS(1) proc FL pfl_a_trailerline_pow_dn; 
[3] MAINPROCESS(1) proc S4 as4_a_trailerline_doa_dn[LINE_FREQ_BIN_RANGE][1]; 
[4] MAINPROCESS(1) proc S4 as4_a_trailerline_doa_peak_num_dn[LINE_FREQ_BIN_RANGE]; 
[5] MAINPROCESS(1) proc FL afl_a_trailerline_dn[LINE_FREQ_BIN_RANGE][2]; 
[6] MAINPROCESS(1) equal S4 trailerline_start_bin FREQ_BIN_LOWER_LIMIT_T;
[7] MAINPROCESS(1) equal pfl_a_trailerline_pow_dn (FL)0;
[8] MAINPROCESS(1) for for( 
[9] MAINPROCESS(1) for i=0; 
[10] MAINPROCESS(1) for i<LINE_FREQ_BIN_RANGE; 
[11] MAINPROCESS(1) for i++ 
[12] MAINPROCESS(1) for ) 
[13] MAINPROCESS(1) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal as4_a_trailerline_doa_dn[i][0] (S4)0;
[15] SUBPROCESS(1) equal as4_a_trailerline_doa_peak_num_dn[i] (S4)0;
[16] SUBPROCESS(1) for for( 
[17] SUBPROCESS(1) for j=0; 
[18] SUBPROCESS(1) for j<2; 
[19] SUBPROCESS(1) for j++ 
[20] SUBPROCESS(1) for ) 
[21] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[22] SUBSUBPROCESS(1) equal afl_a_trailerline_dn[i][j] CFL_UNKNOWN_VALUE;
[23] MAINPROCESS(2) func<start> pfl_a_trailerline_pow_dn = calc_line_doa_fm( 
[24] MAINPROCESS(2) func (const FL (*)[CORRE_SIZE_4CH])(afl_g_cvw_lfm_ryy_matrix[1]), 
[25] MAINPROCESS(2) func afl_g_cvw_lfm_ftt_power[1], 
[26] MAINPROCESS(2) func trailerline_start_bin, 
[27] MAINPROCESS(2) func trailerline_start_bin + LINE_FREQ_BIN_RANGE, 
[28] MAINPROCESS(2) func (FL)0.0F, 
[29] MAINPROCESS(2) func as4_a_trailerline_doa_dn, 
[30] MAINPROCESS(2) func as4_a_trailerline_doa_peak_num_dn, 
[31] MAINPROCESS(2) func CU2_LFM_MOD_DN 
[32] MAINPROCESS(2) func<end> ); 
[33] MAINPROCESS(2) func<start> fn_btt_atd_check_detect_trailerobjs( 
[34] MAINPROCESS(2) func trailerline_start_bin, 
[35] MAINPROCESS(2) func (const S4 (*)[1])as4_a_trailerline_doa_dn, 
[36] MAINPROCESS(2) func as4_a_trailerline_doa_peak_num_dn, 
[37] MAINPROCESS(2) func afl_a_trailerline_dn 
[38] MAINPROCESS(2) func<end> ); 
[39] MAINPROCESS(2) for for( 
[40] MAINPROCESS(2) for i=0; 
[41] MAINPROCESS(2) for i<LINE_FREQ_BIN_RANGE; 
[42] MAINPROCESS(2) for i++ 
[43] MAINPROCESS(2) for ) 
[44] MAINPROCESS(2) subproc SUBPROCESS(1) 
[45] SUBPROCESS(1) for for( 
[46] SUBPROCESS(1) for j=0; 
[47] SUBPROCESS(1) for j<2; 
[48] SUBPROCESS(1) for j++ 
[49] SUBPROCESS(1) for ) 
[50] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[51] SUBSUBPROCESS(1) equal afl_g_btt_nearfield_line_dn[i][j] afl_a_trailerline_dn[i][j];
[52] MAINPROCESS(3) return return; 
----------------- Total Codes : 52 lines
--------------------------
[Function Name] : fn_btt_atd_check_detect_trailerobjs 
-Return type : VD 
-Argument : 4 
     [0] : const S4   as4_a_trailerline_start_bin 
     [1] : const S4   as4_a_trailerline_doa_dn[LINE_FREQ_BIN_RANGE][1] 
     [2] : const S4   as4_a_trailerline_doa_peak_num_dn[LINE_FREQ_BIN_RANGE] 
     [3] : FL   afl_a_trailerline_dn[LINE_FREQ_BIN_RANGE][2] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) equal FL tmp_r 0.0F;
[4] MAINPROCESS(1) equal FL tmp_rx CFL_UNKNOWN_VALUE;
[5] MAINPROCESS(1) equal FL tmp_ry CFL_UNKNOWN_VALUE;
[6] MAINPROCESS(1) equal FL tmp_theta 0.0F;
[7] MAINPROCESS(1) for for( 
[8] MAINPROCESS(1) for i=0; 
[9] MAINPROCESS(1) for i<LINE_FREQ_BIN_RANGE; 
[10] MAINPROCESS(1) for i++ 
[11] MAINPROCESS(1) for ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) for for( 
[14] SUBPROCESS(1) for j=0; 
[15] SUBPROCESS(1) for j<as4_a_trailerline_doa_peak_num_dn[i]; 
[16] SUBPROCESS(1) for j++ 
[17] SUBPROCESS(1) for ) 
[18] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[19] SUBSUBPROCESS(1) func<start> tmp_r = - RCOF * 2.0F * ( 
[20] SUBSUBPROCESS(1) func FL)((as4_a_trailerline_start_bin + i) - (FL)NB_FFT_PT * 0.5F 
[21] SUBSUBPROCESS(1) func<end> ); 
[22] SUBSUBPROCESS(1) func<start> tmp_theta = fl_transform_doabin_to_rad( 
[23] SUBSUBPROCESS(1) func as4_a_trailerline_doa_dn[i][j], 
[24] SUBSUBPROCESS(1) func 1 
[25] SUBSUBPROCESS(1) func<end> ); 
[26] SUBSUBPROCESS(1) equal tmp_rx tmp_r * fl_sin( tmp_theta ) + st_g_bsm_loop_data.afl_installed_angle[1];
[27] SUBSUBPROCESS(1) func<start> tmp_ry = tmp_r * fl_cos( 
[28] SUBSUBPROCESS(1) func  tmp_theta 
[29] SUBSUBPROCESS(1) func<end> ); 
[30] SUBSUBPROCESS(1) equal afl_a_trailerline_dn[i][0] tmp_rx;
[31] SUBSUBPROCESS(1) equal afl_a_trailerline_dn[i][1] tmp_ry;
[32] MAINPROCESS(2) return return; 
----------------- Total Codes : 32 lines
--------------------------
[Function Name] : fn_btt_atd_trailerobj_tracking 
-Return type : VD 
-Argument : 6 
     [0] : NORMAL_BSM   pst_a_trailer_obj[TRAILER_BUFFSIZE] 
     [1] : S4   as4_a_trailer_obj_num 
     [2] : FL   fl_a_doa_pow_ave[2][3] 
     [3] : FL   fl_a_doa_pow_dev[2][3] 
     [4] : S4   s4_a_doa_bf_peak_bin 
     [5] : FL   fl_a_doa_bf_peak_pow 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i, s4_t_lp_j; 
[2] MAINPROCESS(1) equal S4 as4_a_trk_num (S4)0;
[3] MAINPROCESS(1) equal S4 as4_a_trk_num2 (S4)0;
[4] MAINPROCESS(1) equal S4 as4_a_tmp_trailer_obj_num (S4)0;
[5] MAINPROCESS(1) equal FL afl_a_trailer_obj_rx_ave (FL)0;
[6] MAINPROCESS(1) equal FL afl_a_trailer_obj_rx_dev (FL)0;
[7] MAINPROCESS(1) equal FL afl_a_trailer_obj_ry_ave (FL)0;
[8] MAINPROCESS(1) equal FL afl_a_trailer_obj_ry_dev (FL)0;
[9] MAINPROCESS(1) equal FL afl_a_trailer_obj_vy_ave (FL)0;
[10] MAINPROCESS(1) equal FL afl_a_trailer_obj_vy_dev (FL)0;
[11] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_up (FL)0;
[12] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_dn (FL)0;
[13] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_dev_up (FL)0;
[14] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_dev_dn (FL)0;
[15] MAINPROCESS(1) equal FL afl_a_db_doa_peak_ave_diff (FL)0;
[16] MAINPROCESS(1) equal FL afl_a_trailer_doa_pow_th (FL)0;
[17] MAINPROCESS(1) if if( 
[18] MAINPROCESS(1) if s4_abs(s2_g_curvr_for_base) > (S2)80 
[19] MAINPROCESS(1) if ) 
[20] MAINPROCESS(1) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)58;
[22] MAINPROCESS(2) else if else if( 
[23] MAINPROCESS(2) else if s4_abs(s2_g_curvr_for_base) > (S2)40 
[24] MAINPROCESS(2) else if ) 
[25] MAINPROCESS(2) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)55;
[27] MAINPROCESS(3) else else 
[28] MAINPROCESS(3) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) if if( 
[30] SUBPROCESS(1) if s2_g_curvr_for_base < 0 
[31] SUBPROCESS(1) if ) 
[32] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[33] SUBSUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)45;
[34] SUBPROCESS(2) else else 
[35] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[36] SUBSUBPROCESS(1) equal afl_a_trailer_doa_pow_th (FL)58;
[37] MAINPROCESS(4) for for( 
[38] MAINPROCESS(4) for s4_t_lp_i = 0; 
[39] MAINPROCESS(4) for s4_t_lp_i < BTT_OBJ_HISTORY_CYCLE; 
[40] MAINPROCESS(4) for s4_t_lp_i++  
[41] MAINPROCESS(4) for ) 
[42] MAINPROCESS(4) subproc SUBPROCESS(1) 
[43] SUBPROCESS(1) equal as4_a_tmp_trailer_obj_num st_atd_params.trailer_object_num_total[s4_t_lp_i];
[44] SUBPROCESS(1) if if( 
[45] SUBPROCESS(1) if as4_a_tmp_trailer_obj_num != (S4)0 
[46] SUBPROCESS(1) if ) 
[47] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[48] SUBSUBPROCESS(1) proc as4_a_trk_num ++; 
[49] SUBSUBPROCESS(1) for for( 
[50] SUBSUBPROCESS(1) for s4_t_lp_j = 0; 
[51] SUBSUBPROCESS(1) for s4_t_lp_j < as4_a_tmp_trailer_obj_num; 
[52] SUBSUBPROCESS(1) for s4_t_lp_j++  
[53] SUBSUBPROCESS(1) for ) 
[54] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[55] SUBSUBSUBPROCESS(1) equal afl_a_trailer_obj_rx_ave + st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs;
[56] SUBSUBSUBPROCESS(1) func<start> afl_a_trailer_obj_rx_dev += ( 
[57] SUBSUBSUBPROCESS(1) func st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs * st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs 
[58] SUBSUBSUBPROCESS(1) func<end> ); 
[59] SUBSUBSUBPROCESS(1) equal afl_a_trailer_obj_ry_ave + st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs;
[60] SUBSUBSUBPROCESS(1) func<start> afl_a_trailer_obj_ry_dev += ( 
[61] SUBSUBSUBPROCESS(1) func st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs * st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs 
[62] SUBSUBSUBPROCESS(1) func<end> ); 
[63] SUBSUBSUBPROCESS(1) equal afl_a_trailer_obj_vy_ave + st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs;
[64] SUBSUBSUBPROCESS(1) func<start> afl_a_trailer_obj_vy_dev += ( 
[65] SUBSUBSUBPROCESS(1) func st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs * st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs 
[66] SUBSUBSUBPROCESS(1) func<end> ); 
[67] SUBSUBSUBPROCESS(1) proc as4_a_trk_num2 ++; 
[68] MAINPROCESS(5) if if( 
[69] MAINPROCESS(5) if as4_a_trk_num2 != (S4)0 
[70] MAINPROCESS(5) if ) 
[71] MAINPROCESS(5) subproc SUBPROCESS(1) 
[72] SUBPROCESS(1) equal afl_a_trailer_obj_rx_ave afl_a_trailer_obj_rx_ave / (FL)as4_a_trk_num2;
[73] SUBPROCESS(1) equal afl_a_trailer_obj_ry_ave afl_a_trailer_obj_ry_ave / (FL)as4_a_trk_num2;
[74] SUBPROCESS(1) equal afl_a_trailer_obj_vy_ave afl_a_trailer_obj_vy_ave / (FL)as4_a_trk_num2;
[75] SUBPROCESS(1) func<start> afl_a_trailer_obj_rx_dev = fl_abs( 
[76] SUBPROCESS(1) func (afl_a_trailer_obj_rx_dev / (FL)as4_a_trk_num2) - afl_a_trailer_obj_rx_ave * afl_a_trailer_obj_rx_ave 
[77] SUBPROCESS(1) func<end> ); 
[78] SUBPROCESS(1) equal afl_a_trailer_obj_ry_dev (afl_a_trailer_obj_ry_dev / (FL)as4_a_trk_num2) - afl_a_trailer_obj_ry_ave * afl_a_trailer_obj_ry_ave;
[79] SUBPROCESS(1) func<start> afl_a_trailer_obj_vy_dev = fl_abs( 
[80] SUBPROCESS(1) func (afl_a_trailer_obj_vy_dev / (FL)as4_a_trk_num2) - afl_a_trailer_obj_vy_ave * afl_a_trailer_obj_vy_ave 
[81] SUBPROCESS(1) func<end> ); 
[82] MAINPROCESS(6) equal afl_a_db_doa_peak_ave_diff fl_a_doa_bf_peak_pow - fl_a_doa_pow_ave[0][1];
[83] MAINPROCESS(6) if if( 
[84] MAINPROCESS(6) if as4_a_trk_num > BTT_OBJ_DETECT_CYC1 
[85] MAINPROCESS(6) if ) 
[86] MAINPROCESS(6) subproc SUBPROCESS(1) 
[87] SUBPROCESS(1) if if( 
[88] SUBPROCESS(1) if fl_abs(afl_a_trailer_obj_rx_ave) < BTT_OBJ_X_RANGE 
[89] SUBPROCESS(1) if &&  afl_a_trailer_obj_ry_ave < BTT_OBJ_Y_RANGE_FORWARD 
[90] SUBPROCESS(1) if &&  afl_a_trailer_obj_ry_ave > BTT_OBJ_Y_RANGE_BACKWARD 
[91] SUBPROCESS(1) if &&  fl_abs(afl_a_trailer_obj_vy_ave) < BTT_OBJ_VY 
[92] SUBPROCESS(1) if &&  afl_a_trailer_obj_rx_dev < BTT_OBJ_DEV_TH 
[93] SUBPROCESS(1) if &&  afl_a_trailer_obj_vy_dev < BTT_OBJ_DEV_TH  
[94] SUBPROCESS(1) if ) 
[95] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[96] SUBSUBPROCESS(1) if if( 
[97] SUBSUBPROCESS(1) if s4_abs(s2_g_curvr_for_base) > (S2)CU1_CANOUT_CURVER_MIN_SOT 
[98] SUBSUBPROCESS(1) if ) 
[99] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[100] SUBSUBSUBPROCESS(1) if if( 
[101] SUBSUBSUBPROCESS(1) if afl_a_db_doa_peak_ave_diff > (FL)5.0 
[102] SUBSUBSUBPROCESS(1) if ||  fl_a_doa_pow_ave[0][1] < afl_a_trailer_doa_pow_th 
[103] SUBSUBSUBPROCESS(1) if  
[104] SUBSUBSUBPROCESS(1) if ) 
[105] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[106] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[107] SUBSUBSUBPROCESS(2) else if else if( 
[108] SUBSUBSUBPROCESS(2) else if as4_a_trk_num2 < (S4)10 
[109] SUBSUBSUBPROCESS(2) else if ) 
[110] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[111] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[112] SUBSUBSUBPROCESS(3) else else 
[113] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[114] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[115] SUBSUBPROCESS(2) else if else if( 
[116] SUBSUBPROCESS(2) else if s4_abs(s2_g_curvr_for_base) >= (S2)10 
[117] SUBSUBPROCESS(2) else if ) 
[118] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[119] SUBSUBSUBPROCESS(1) if if( 
[120] SUBSUBSUBPROCESS(1) if fl_a_doa_pow_ave[0][1] > afl_a_trailer_doa_pow_th 
[121] SUBSUBSUBPROCESS(1) if ) 
[122] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[123] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[124] SUBSUBSUBPROCESS(2) else else 
[125] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[126] SUBSUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[127] SUBPROCESS(2) else else 
[128] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[129] SUBSUBPROCESS(1) if if( 
[130] SUBSUBPROCESS(1) if fl_a_doa_pow_ave[0][1] > afl_a_trailer_doa_pow_th 
[131] SUBSUBPROCESS(1) if &&  afl_a_db_doa_peak_ave_diff < (FL)5.0  
[132] SUBSUBPROCESS(1) if ) 
[133] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[134] SUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[135] SUBSUBPROCESS(2) else else 
[136] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[137] SUBSUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[138] MAINPROCESS(7) else else 
[139] MAINPROCESS(7) subproc SUBPROCESS(1) 
[140] SUBPROCESS(1) if if( 
[141] SUBPROCESS(1) if as4_a_trk_num2 > (S4)10 
[142] SUBPROCESS(1) if &&  fl_a_doa_pow_ave[0][1] > afl_a_trailer_doa_pow_th 
[143] SUBPROCESS(1) if &&  afl_a_db_doa_peak_ave_diff < (FL)5.0  
[144] SUBPROCESS(1) if ) 
[145] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[146] SUBSUBPROCESS(1) proc st_atd_params.atd_counter[0] ++; 
[147] SUBPROCESS(2) else else 
[148] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[149] SUBSUBPROCESS(1) proc st_atd_params.atd_counter[1] ++; 
[150] MAINPROCESS(8) for for( 
[151] MAINPROCESS(8) for s4_t_lp_i = 0; 
[152] MAINPROCESS(8) for s4_t_lp_i < BTT_OBJ_HISTORY_CYCLE; 
[153] MAINPROCESS(8) for s4_t_lp_i++  
[154] MAINPROCESS(8) for ) 
[155] MAINPROCESS(8) subproc SUBPROCESS(1) 
[156] SUBPROCESS(1) for for( 
[157] SUBPROCESS(1) for s4_t_lp_j = 0; 
[158] SUBPROCESS(1) for s4_t_lp_j < TRAILER_BUFFSIZE; 
[159] SUBPROCESS(1) for s4_t_lp_j ++  
[160] SUBPROCESS(1) for ) 
[161] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[162] SUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[0][s4_t_lp_j][s4_t_lp_i] st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Rxobs;
[163] SUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[1][s4_t_lp_j][s4_t_lp_i] st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Ryobs;
[164] SUBSUBPROCESS(1) if if( 
[165] SUBSUBPROCESS(1) if st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs == (FL)0 
[166] SUBSUBPROCESS(1) if ) 
[167] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[168] SUBSUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[2][s4_t_lp_j][s4_t_lp_i] (FL)-120;
[169] SUBSUBPROCESS(2) else else 
[170] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[171] SUBSUBSUBPROCESS(1) equal afl_g_btt_atd_obj_info[2][s4_t_lp_j][s4_t_lp_i] st_atd_params.trailer_object_total[s4_t_lp_i][s4_t_lp_j].fl_Vyobs * (FL)3.6;
[172] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[0] afl_a_trailer_obj_rx_ave;
[173] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[1] afl_a_trailer_obj_ry_ave;
[174] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[2] afl_a_trailer_obj_vy_ave;
[175] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[3] afl_a_trailer_obj_rx_dev;
[176] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[4] afl_a_trailer_obj_ry_dev;
[177] MAINPROCESS(9) equal afl_g_btt_atd_obj_tracking[5] afl_a_trailer_obj_vy_dev;
[178] MAINPROCESS(9) equal as4_g_btt_atd_counter[0] as4_a_trk_num;
[179] MAINPROCESS(9) equal as4_g_btt_atd_counter[1] as4_a_trk_num2;
[180] MAINPROCESS(9) equal as4_g_btt_atd_counter[2] st_atd_params.atd_counter[0];
[181] MAINPROCESS(9) equal as4_g_btt_atd_counter[3] st_atd_params.atd_counter[1];
[182] MAINPROCESS(9) equal afl_g_btt_atd_doa_pow_ave[0] fl_a_doa_pow_ave[0][1];
[183] MAINPROCESS(9) equal afl_g_btt_atd_doa_pow_ave[1] afl_a_db_doa_peak_ave_diff;
[184] MAINPROCESS(9) return return; 
----------------- Total Codes : 184 lines
--------------------------
[Function Name] : fn_btt_shift_trailerobj 
-Return type : VD 
-Argument : 2 
     [0] : NORMAL_BSM   pst_a_trailer_obj[TRAILER_BUFFSIZE] 
     [1] : S4   as4_a_trailer_obj_num 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for s4_t_lp_i = BTT_OBJ_HISTORY_CYCLE - (S4)2 ; 
[4] MAINPROCESS(1) for s4_t_lp_i > (S4)0;
[5] MAINPROCESS(1) for s4_t_lp_i--  
[6] MAINPROCESS(1) for ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) func<start> fn_move( 
[9] SUBPROCESS(1) func st_atd_params.trailer_object_total[s4_t_lp_i + (S4)1], st_atd_params.trailer_object_total[s4_t_lp_i], TRAILER_BUFFSIZE 
[10] SUBPROCESS(1) func<end> ); 
[11] SUBPROCESS(1) equal st_atd_params.trailer_object_num_total[s4_t_lp_i + (S4)1] st_atd_params.trailer_object_num_total[s4_t_lp_i];
[12] MAINPROCESS(2) func<start> fn_move( 
[13] MAINPROCESS(2) func st_atd_params.trailer_object_total[(S4)0], pst_a_trailer_obj, TRAILER_BUFFSIZE 
[14] MAINPROCESS(2) func<end> ); 
[15] MAINPROCESS(2) equal st_atd_params.trailer_object_num_total[0] as4_a_trailer_obj_num;
[16] MAINPROCESS(2) return return; 
----------------- Total Codes : 16 lines
--------------------------
[Function Name] : fn_btt_sel_exclude_object 
-Return type : VD 
-Argument : 2 
     [0] : NORMAL_BSM   pst_a_trailer_obj[TRAILER_BUFFSIZE] 
     [1] : S4   *as4_a_trailer_obj_num 
----- Codes -----
[1] MAINPROCESS(1) func<start> fn_btt_sel_exobj_outside_rx( 
[2] MAINPROCESS(1) func pst_a_trailer_obj, 
[3] MAINPROCESS(1) func as4_a_trailer_obj_num 
[4] MAINPROCESS(1) func<end> ); 
[5] MAINPROCESS(1) func<start> *as4_a_trailer_obj_num = s4_trim_trailer( 
[6] MAINPROCESS(1) func pst_a_trailer_obj 
[7] MAINPROCESS(1) func<end> ); 
[8] MAINPROCESS(1) return return; 
----------------- Total Codes : 8 lines
--------------------------
[Function Name] : fn_btt_sel_exobj_outside_rx 
-Return type : VD 
-Argument : 2 
     [0] : NORMAL_BSM   pst_a_trailer_obj[TRAILER_BUFFSIZE] 
     [1] : S4   *as4_a_trailer_obj_num 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for s4_t_lp_i = 0; 
[4] MAINPROCESS(1) for s4_t_lp_i < *as4_a_trailer_obj_num; 
[5] MAINPROCESS(1) for s4_t_lp_i ++ 
[6] MAINPROCESS(1) for ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) if if( 
[9] SUBPROCESS(1) if pst_a_trailer_obj[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[10] SUBPROCESS(1) if &&  fl_abs(pst_a_trailer_obj[s4_t_lp_i].fl_Rxobs) > (FL)2.0 
[11] SUBPROCESS(1) if ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) func<start> fn_init( 
[14] SUBSUBPROCESS(1) func &pst_a_trailer_obj[s4_t_lp_i], 1 
[15] SUBSUBPROCESS(1) func<end> ); 
[16] MAINPROCESS(2) return return; 
----------------- Total Codes : 16 lines
--------------------------
[Function Name] : fn_btt_tle_search_peak_bf 
-Return type : VD 
-Argument : 2 
     [0] : const FL   Ryy[NB_FFT_PT][CORRE_SIZE_4CH] 
     [1] : FL   fl_a_tle_bf_peak[BTT_TLE_RANGE] 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_lp_i, u1_t_lp_n_doa; 
[2] MAINPROCESS(1) proc S4 s4_t_focus_bin; 
[3] MAINPROCESS(1) proc FL afl_t_doa_spec[N_DOA]; 
[4] MAINPROCESS(1) proc S4 s4_t_doa[1]; 
[5] MAINPROCESS(1) proc S4 s4_t_doa_range; 
[6] MAINPROCESS(1) func<start> s4_t_doa_range = ( 
[7] MAINPROCESS(1) func S4)((FL)(N_DOA * 0.5F) - st_g_bsm_loop_data.afl_installed_angle[0] + BTT_DBF_DOA_RANGE 
[8] MAINPROCESS(1) func<end> ); 
[9] MAINPROCESS(1) for  for ( 
[10] MAINPROCESS(1) for  u1_t_lp_i = (U1)0; 
[11] MAINPROCESS(1) for  u1_t_lp_i < (U1)N_DOA; 
[12] MAINPROCESS(1) for  u1_t_lp_i++ 
[13] MAINPROCESS(1) for  ) 
[14] MAINPROCESS(1) subproc SUBPROCESS(1) 
[15] SUBPROCESS(1) equal afl_t_doa_spec[u1_t_lp_i] (FL)0;
[16] MAINPROCESS(2) for for( 
[17] MAINPROCESS(2) for u1_t_lp_i = (U1)0; 
[18] MAINPROCESS(2) for u1_t_lp_i < (U1)BTT_TLE_RANGE; 
[19] MAINPROCESS(2) for u1_t_lp_i++ 
[20] MAINPROCESS(2) for ) 
[21] MAINPROCESS(2) subproc SUBPROCESS(1) 
[22] SUBPROCESS(1) equal s4_t_doa[0] (S4)0;
[23] SUBPROCESS(1) equal s4_t_focus_bin FREQ_BIN_LOWER_LIMIT_T + (S4)u1_t_lp_i;
[24] SUBPROCESS(1) func<start> fn_calc_spec_bf_4ch_fm( 
[25] SUBPROCESS(1) func (const FL *)(Ryy[s4_t_focus_bin]), 
[26] SUBPROCESS(1) func afl_t_doa_spec, 
[27] SUBPROCESS(1) func 0, 
[28] SUBPROCESS(1) func s4_t_focus_bin 
[29] SUBPROCESS(1) func<end> ); 
[30] SUBPROCESS(1) for  for ( 
[31] SUBPROCESS(1) for  u1_t_lp_n_doa = (U1)s4_t_doa_range; 
[32] SUBPROCESS(1) for  u1_t_lp_n_doa < (U1)N_DOA; 
[33] SUBPROCESS(1) for  u1_t_lp_n_doa++ 
[34] SUBPROCESS(1) for  ) 
[35] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[36] SUBSUBPROCESS(1) equal afl_t_doa_spec[u1_t_lp_n_doa] (FL)0.0F;
[37] SUBPROCESS(2) func<start> s4_search_peak_bf( 
[38] SUBPROCESS(2) func (const FL *)afl_t_doa_spec, 
[39] SUBPROCESS(2) func s4_t_doa, 
[40] SUBPROCESS(2) func &fl_a_tle_bf_peak[u1_t_lp_i], 
[41] SUBPROCESS(2) func 1 
[42] SUBPROCESS(2) func<end> ); 
[43] MAINPROCESS(3) return return; 
----------------- Total Codes : 43 lines
--------------------------
[Function Name] : fn_btt_tle_calc_bf_power_diff 
-Return type : VD 
-Argument : 2 
     [0] : FL   fl_a_tle_bf_peak[BTT_TLE_RANGE] 
     [1] : FL   fl_a_tle_bf_pow_diff[BTT_TLE_RANGE-(S4)1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) for for( 
[3] MAINPROCESS(1) for s4_t_lp_i = 0; 
[4] MAINPROCESS(1) for s4_t_lp_i < BTT_TLE_RANGE - (S4)1; 
[5] MAINPROCESS(1) for s4_t_lp_i++ 
[6] MAINPROCESS(1) for ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal fl_a_tle_bf_pow_diff[s4_t_lp_i] fl_a_tle_bf_peak[s4_t_lp_i] - fl_a_tle_bf_peak[s4_t_lp_i + 1];
[9] MAINPROCESS(2) return return; 
----------------- Total Codes : 9 lines
