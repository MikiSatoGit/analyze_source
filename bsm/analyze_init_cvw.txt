Total lines: 717 
Total functions : 23 
--------------------------
[Function Name] : fn_init 
-Return type : VD 
-Argument : 2 
     [0] : NORMAL_BSM   *pst_a_normal 
     [1] : S4   s4_a_data_len 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[4] MAINPROCESS(1) for  s4_t_lp_i < s4_a_data_len; 
[5] MAINPROCESS(1) for  s4_t_lp_i++ 
[6] MAINPROCESS(1) for  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_bin_up 0;
[9] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_bin_dn 0;
[10] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_bin_up_music 0;
[11] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_bin_dn_music 0;
[12] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_bin_up_pred 0;
[13] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_bin_dn_pred 0;
[14] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_bin_up_music_pred 0;
[15] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_bin_dn_music_pred 0;
[16] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_flg_stop 0;
[17] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_flg_track 0;
[18] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_flg_lost 0;
[19] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_flg_new 0;
[20] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_ctr_sot_cut 0;
[21] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_ID_num 0;
[22] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_flg_used 0;
[23] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_flg_dc 0;
[24] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_flg_single_peak_up 0;
[25] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].u4_ctr_fa 0;
[26] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_flg_reliable 0;
[27] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_ctr_tos 0;
[28] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_flg_heiso_up 0;
[29] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_flg_heiso_dn 0;
[30] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].s4_tracked 0;
[31] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_power_up 0.0F;
[32] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_power_dn 0.0F;
[33] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_power_up_music 0.0F;
[34] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_power_dn_music 0.0F;
[35] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_theta_up 0.0F;
[36] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_theta_dn 0.0F;
[37] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_theta_up_pred 0.0F;
[38] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_theta_dn_pred 0.0F;
[39] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Robs CFL_UNKNOWN_VALUE;
[40] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Robs_pred CFL_UNKNOWN_VALUE;
[41] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Rxobs CFL_UNKNOWN_VALUE;
[42] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Ryobs CFL_UNKNOWN_VALUE;
[43] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Rxfil CFL_UNKNOWN_VALUE;
[44] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Ryfil CFL_UNKNOWN_VALUE;
[45] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Rxpred CFL_UNKNOWN_VALUE;
[46] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Rypred CFL_UNKNOWN_VALUE;
[47] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Vobs 0.0F;
[48] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Vobs_pred 0.0F;
[49] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Vxobs 0.0F;
[50] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Vyobs 0.0F;
[51] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Vxfil 0.0F;
[52] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Vyfil 0.0F;
[53] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Vxpred 0.0F;
[54] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Vypred 0.0F;
[55] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Axfil 0.0F;
[56] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_Ayfil 0.0F;
[57] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_prob 0.0F;
[58] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_track_prob 0.0F;
[59] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_doa_up_interpolate 0.0F;
[60] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_doa_dn_interpolate 0.0F;
[61] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_doa_up_interpolate_pred 0.0F;
[62] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_doa_dn_interpolate_pred 0.0F;
[63] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_bin_up_interpolate 0.0F;
[64] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_bin_dn_interpolate 0.0F;
[65] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_bin_up_interpolate_pred 0.0F;
[66] SUBPROCESS(1) equal pst_a_normal[s4_t_lp_i].fl_bin_dn_interpolate_pred 0.0F;
[67] MAINPROCESS(2) return return; 
----------------- Total Codes : 67 lines
--------------------------
[Function Name] : fn_init_btt 
-Return type : VD 
-Argument : 4 
     [0] : NORMAL_BSM   pst_a_normal_total[BTT_OBJ_HISTORY_CYCLE][TRAILER_BUFFSIZE] 
     [1] : S4   pst_a_normal_num[BTT_OBJ_HISTORY_CYCLE] 
     [2] : S4   s4_a_data_len 
     [3] : S4   s4_a_cycle 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  s4_t_lp_j = 0; 
[4] MAINPROCESS(1) for  s4_t_lp_j < s4_a_cycle; 
[5] MAINPROCESS(1) for  s4_t_lp_j++ 
[6] MAINPROCESS(1) for  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal pst_a_normal_num[s4_t_lp_j] (S4)0;
[9] SUBPROCESS(1) func<start> fn_init( 
[10] SUBPROCESS(1) func pst_a_normal_total[s4_t_lp_j], TRAILER_BUFFSIZE 
[11] SUBPROCESS(1) func<end> ); 
[12] MAINPROCESS(2) return return; 
----------------- Total Codes : 12 lines
--------------------------
[Function Name] : fn_move 
-Return type : VD 
-Argument : 3 
     [0] : NORMAL_BSM   *pst_a_normal_out 
     [1] : const NORMAL_BSM   *pst_a_normal_in 
     [2] : S4   s4_a_data_len 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[4] MAINPROCESS(1) for  s4_t_lp_i < s4_a_data_len; 
[5] MAINPROCESS(1) for  s4_t_lp_i++ 
[6] MAINPROCESS(1) for  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_bin_up pst_a_normal_in[s4_t_lp_i].s4_bin_up;
[9] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_bin_dn pst_a_normal_in[s4_t_lp_i].s4_bin_dn;
[10] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_bin_up_music pst_a_normal_in[s4_t_lp_i].s4_bin_up_music;
[11] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_bin_dn_music pst_a_normal_in[s4_t_lp_i].s4_bin_dn_music;
[12] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_bin_up_pred pst_a_normal_in[s4_t_lp_i].s4_bin_up_pred;
[13] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_bin_dn_pred pst_a_normal_in[s4_t_lp_i].s4_bin_dn_pred;
[14] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_bin_up_music_pred pst_a_normal_in[s4_t_lp_i].s4_bin_up_music_pred;
[15] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_bin_dn_music_pred pst_a_normal_in[s4_t_lp_i].s4_bin_dn_music_pred;
[16] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_flg_stop pst_a_normal_in[s4_t_lp_i].s4_flg_stop;
[17] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_flg_track pst_a_normal_in[s4_t_lp_i].s4_flg_track;
[18] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_flg_lost pst_a_normal_in[s4_t_lp_i].s4_flg_lost;
[19] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_flg_new pst_a_normal_in[s4_t_lp_i].s4_flg_new;
[20] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_ctr_sot_cut pst_a_normal_in[s4_t_lp_i].s4_ctr_sot_cut;
[21] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_ID_num pst_a_normal_in[s4_t_lp_i].s4_ID_num;
[22] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_flg_used pst_a_normal_in[s4_t_lp_i].s4_flg_used;
[23] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_flg_dc pst_a_normal_in[s4_t_lp_i].s4_flg_dc;
[24] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_flg_single_peak_up pst_a_normal_in[s4_t_lp_i].s4_flg_single_peak_up;
[25] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].u4_ctr_fa pst_a_normal_in[s4_t_lp_i].u4_ctr_fa;
[26] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_flg_reliable pst_a_normal_in[s4_t_lp_i].s4_flg_reliable;
[27] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_ctr_tos pst_a_normal_in[s4_t_lp_i].s4_ctr_tos;
[28] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_flg_heiso_up pst_a_normal_in[s4_t_lp_i].s4_flg_heiso_up;
[29] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_flg_heiso_dn pst_a_normal_in[s4_t_lp_i].s4_flg_heiso_dn;
[30] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].s4_tracked pst_a_normal_in[s4_t_lp_i].s4_tracked;
[31] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_power_up pst_a_normal_in[s4_t_lp_i].fl_power_up;
[32] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_power_dn pst_a_normal_in[s4_t_lp_i].fl_power_dn;
[33] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_power_up_music pst_a_normal_in[s4_t_lp_i].fl_power_up_music;
[34] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_power_dn_music pst_a_normal_in[s4_t_lp_i].fl_power_dn_music;
[35] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_theta_up pst_a_normal_in[s4_t_lp_i].fl_theta_up;
[36] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_theta_dn pst_a_normal_in[s4_t_lp_i].fl_theta_dn;
[37] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_theta_up_pred pst_a_normal_in[s4_t_lp_i].fl_theta_up_pred;
[38] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_theta_dn_pred pst_a_normal_in[s4_t_lp_i].fl_theta_dn_pred;
[39] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Robs pst_a_normal_in[s4_t_lp_i].fl_Robs;
[40] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Robs_pred pst_a_normal_in[s4_t_lp_i].fl_Robs_pred;
[41] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Rxobs pst_a_normal_in[s4_t_lp_i].fl_Rxobs;
[42] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Ryobs pst_a_normal_in[s4_t_lp_i].fl_Ryobs;
[43] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Rxfil pst_a_normal_in[s4_t_lp_i].fl_Rxfil;
[44] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Ryfil pst_a_normal_in[s4_t_lp_i].fl_Ryfil;
[45] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Rxpred pst_a_normal_in[s4_t_lp_i].fl_Rxpred;
[46] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Rypred pst_a_normal_in[s4_t_lp_i].fl_Rypred;
[47] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Vobs pst_a_normal_in[s4_t_lp_i].fl_Vobs;
[48] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Vobs_pred pst_a_normal_in[s4_t_lp_i].fl_Vobs_pred;
[49] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Vxobs pst_a_normal_in[s4_t_lp_i].fl_Vxobs;
[50] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Vyobs pst_a_normal_in[s4_t_lp_i].fl_Vyobs;
[51] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Vxfil pst_a_normal_in[s4_t_lp_i].fl_Vxfil;
[52] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Vyfil pst_a_normal_in[s4_t_lp_i].fl_Vyfil;
[53] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Vxpred pst_a_normal_in[s4_t_lp_i].fl_Vxpred;
[54] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Vypred pst_a_normal_in[s4_t_lp_i].fl_Vypred;
[55] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Axfil pst_a_normal_in[s4_t_lp_i].fl_Axfil;
[56] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_Ayfil pst_a_normal_in[s4_t_lp_i].fl_Ayfil;
[57] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_prob pst_a_normal_in[s4_t_lp_i].fl_prob;
[58] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_track_prob pst_a_normal_in[s4_t_lp_i].fl_track_prob;
[59] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_doa_up_interpolate pst_a_normal_in[s4_t_lp_i].fl_doa_up_interpolate;
[60] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_doa_dn_interpolate pst_a_normal_in[s4_t_lp_i].fl_doa_dn_interpolate;
[61] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_doa_up_interpolate_pred pst_a_normal_in[s4_t_lp_i].fl_doa_up_interpolate_pred;
[62] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_doa_dn_interpolate_pred pst_a_normal_in[s4_t_lp_i].fl_doa_dn_interpolate_pred;
[63] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_bin_up_interpolate pst_a_normal_in[s4_t_lp_i].fl_bin_up_interpolate;
[64] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_bin_dn_interpolate pst_a_normal_in[s4_t_lp_i].fl_bin_dn_interpolate;
[65] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_bin_up_interpolate_pred pst_a_normal_in[s4_t_lp_i].fl_bin_up_interpolate_pred;
[66] SUBPROCESS(1) equal pst_a_normal_out[s4_t_lp_i].fl_bin_dn_interpolate_pred pst_a_normal_in[s4_t_lp_i].fl_bin_dn_interpolate_pred;
[67] MAINPROCESS(2) return return; 
----------------- Total Codes : 67 lines
--------------------------
[Function Name] : fn_initialize_wall_data 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal_wall[1] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[4] MAINPROCESS(1) for  s4_t_lp_i < 1; 
[5] MAINPROCESS(1) for  s4_t_lp_i++ 
[6] MAINPROCESS(1) for  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) func<start> fn_init( 
[9] SUBPROCESS(1) func &ast_a_normal_wall[s4_t_lp_i], 1 
[10] SUBPROCESS(1) func<end> ); 
[11] SUBPROCESS(1) equal ast_a_normal_wall[s4_t_lp_i].fl_Robs WALL_MAX;
[12] SUBPROCESS(1) equal ast_a_normal_wall[s4_t_lp_i].fl_Robs_pred WALL_MAX;
[13] SUBPROCESS(1) equal ast_a_normal_wall[s4_t_lp_i].fl_Rxobs WALL_MAX;
[14] SUBPROCESS(1) equal ast_a_normal_wall[s4_t_lp_i].fl_Ryobs 0.0F;
[15] SUBPROCESS(1) equal ast_a_normal_wall[s4_t_lp_i].fl_Rxfil WALL_MAX;
[16] SUBPROCESS(1) equal ast_a_normal_wall[s4_t_lp_i].fl_Ryfil 0.0F;
[17] SUBPROCESS(1) equal ast_a_normal_wall[s4_t_lp_i].fl_Rxpred WALL_MAX;
[18] SUBPROCESS(1) equal ast_a_normal_wall[s4_t_lp_i].fl_Rypred 0.0F;
[19] MAINPROCESS(2) return return; 
----------------- Total Codes : 19 lines
--------------------------
[Function Name] : fn_sort_normal 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) equal S4 s4_t_count1 0;
[4] MAINPROCESS(1) equal S4 s4_t_count2 0;
[5] MAINPROCESS(1) proc NORMAL_BSM ast_t_buf_normal[NORMAL_BUFFSIZE]; 
[6] MAINPROCESS(1) func<start> fn_init( 
[7] MAINPROCESS(1) func ast_t_buf_normal, NORMAL_BUFFSIZE 
[8] MAINPROCESS(1) func<end> ); 
[9] MAINPROCESS(1) func<start> fn_move( 
[10] MAINPROCESS(1) func ast_t_buf_normal, ast_a_normal, NORMAL_BUFFSIZE 
[11] MAINPROCESS(1) func<end> ); 
[12] MAINPROCESS(1) for  for ( 
[13] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[14] MAINPROCESS(1) for  s4_t_lp_i < NORMAL_BUFFSIZE; 
[15] MAINPROCESS(1) for  s4_t_lp_i++ 
[16] MAINPROCESS(1) for  ) 
[17] MAINPROCESS(1) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) for  for ( 
[19] SUBPROCESS(1) for  s4_t_lp_j = 0; 
[20] SUBPROCESS(1) for  s4_t_lp_j < NORMAL_BUFFSIZE; 
[21] SUBPROCESS(1) for  s4_t_lp_j++ 
[22] SUBPROCESS(1) for  ) 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) if  if ( 
[25] SUBSUBPROCESS(1) if  s4_t_lp_i < s4_t_lp_j 
[26] SUBSUBPROCESS(1) if  ) 
[27] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBPROCESS(1) if  if ( 
[29] SUBSUBSUBPROCESS(1) if  (ast_a_normal[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[30] SUBSUBSUBPROCESS(1) if  ) 
[31] SUBSUBSUBPROCESS(1) if  && (ast_a_normal[s4_t_lp_j].fl_Robs != CFL_UNKNOWN_VALUE 
[32] SUBSUBSUBPROCESS(1) if  ) 
[33] SUBSUBSUBPROCESS(1) if   
[34] SUBSUBSUBPROCESS(1) if  ) 
[35] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[36] SUBSUBSUBSUBPROCESS(1) if  if ( 
[37] SUBSUBSUBSUBPROCESS(1) if  ast_t_buf_normal[s4_t_lp_i].fl_Ryfil < ast_t_buf_normal[s4_t_lp_j].fl_Ryfil 
[38] SUBSUBSUBSUBPROCESS(1) if  ) 
[39] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[40] SUBSUBSUBSUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_lp_i] ast_a_normal[s4_t_lp_j];
[41] SUBSUBSUBSUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_lp_j] ast_a_normal[s4_t_lp_i];
[42] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_normal[s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
[43] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_normal[s4_t_lp_j] ast_t_buf_normal[s4_t_lp_j];
[44] MAINPROCESS(2) func<start> fn_init( 
[45] MAINPROCESS(2) func ast_t_buf_normal, NORMAL_BUFFSIZE 
[46] MAINPROCESS(2) func<end> ); 
[47] MAINPROCESS(2) equal s4_t_count1 0;
[48] MAINPROCESS(2) for  for ( 
[49] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[50] MAINPROCESS(2) for  s4_t_lp_i < NORMAL_BUFFSIZE; 
[51] MAINPROCESS(2) for  s4_t_lp_i++ 
[52] MAINPROCESS(2) for  ) 
[53] MAINPROCESS(2) subproc SUBPROCESS(1) 
[54] SUBPROCESS(1) if  if ( 
[55] SUBPROCESS(1) if  ast_a_normal[s4_t_lp_i].s4_flg_dc >= OBJECT_TYPE_2F 
[56] SUBPROCESS(1) if  ) 
[57] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[58] SUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_count1] ast_a_normal[s4_t_lp_i];
[59] SUBSUBPROCESS(1) func<start> fn_init( 
[60] SUBSUBPROCESS(1) func &ast_a_normal[s4_t_lp_i], 1 
[61] SUBSUBPROCESS(1) func<end> ); 
[62] SUBSUBPROCESS(1) proc s4_t_count1++; 
[63] MAINPROCESS(3) func<start> s4_t_count2 = s4_trim_normal( 
[64] MAINPROCESS(3) func ast_a_normal 
[65] MAINPROCESS(3) func<end> ); 
[66] MAINPROCESS(3) for  for ( 
[67] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[68] MAINPROCESS(3) for  s4_t_lp_i < s4_t_count1; 
[69] MAINPROCESS(3) for  s4_t_lp_i++ 
[70] MAINPROCESS(3) for  ) 
[71] MAINPROCESS(3) subproc SUBPROCESS(1) 
[72] SUBPROCESS(1) equal ast_a_normal[s4_t_count2 + s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
[73] MAINPROCESS(4) return return; 
----------------- Total Codes : 73 lines
--------------------------
[Function Name] : fn_sort_normal_by_power 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i, j; 
[2] MAINPROCESS(1) equal S4 tmp_count1 0;
[3] MAINPROCESS(1) equal S4 tmp_count2 0;
[4] MAINPROCESS(1) proc NORMAL_BSM tmp_normal_buff[NORMAL_BUFFSIZE]; 
[5] MAINPROCESS(1) func<start> fn_init( 
[6] MAINPROCESS(1) func tmp_normal_buff, NORMAL_BUFFSIZE 
[7] MAINPROCESS(1) func<end> ); 
[8] MAINPROCESS(1) func<start> fn_move( 
[9] MAINPROCESS(1) func  tmp_normal_buff, ast_a_normal, NORMAL_BUFFSIZE 
[10] MAINPROCESS(1) func<end> ); 
[11] MAINPROCESS(1) for for( 
[12] MAINPROCESS(1) for i = 0; 
[13] MAINPROCESS(1) for i < NORMAL_BUFFSIZE; 
[14] MAINPROCESS(1) for i++  
[15] MAINPROCESS(1) for ) 
[16] MAINPROCESS(1) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) for for( 
[18] SUBPROCESS(1) for j = 0; 
[19] SUBPROCESS(1) for j < NORMAL_BUFFSIZE; 
[20] SUBPROCESS(1) for j++  
[21] SUBPROCESS(1) for ) 
[22] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[23] SUBSUBPROCESS(1) if if( 
[24] SUBSUBPROCESS(1) if i<j 
[25] SUBSUBPROCESS(1) if ) 
[26] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[27] SUBSUBSUBPROCESS(1) if  if ( 
[28] SUBSUBSUBPROCESS(1) if  (ast_a_normal[i].fl_Robs != CFL_UNKNOWN_VALUE 
[29] SUBSUBSUBPROCESS(1) if  ) 
[30] SUBSUBSUBPROCESS(1) if  &&  (ast_a_normal[j].fl_Robs != CFL_UNKNOWN_VALUE) 
[31] SUBSUBSUBPROCESS(1) if  ) 
[32] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[33] SUBSUBSUBSUBPROCESS(1) if if( 
[34] SUBSUBSUBSUBPROCESS(1) if (tmp_normal_buff[i].fl_power_up + tmp_normal_buff[i].fl_power_dn 
[35] SUBSUBSUBSUBPROCESS(1) if ) 
[36] SUBSUBSUBSUBPROCESS(1) if < (tmp_normal_buff[j].fl_power_up + tmp_normal_buff[j].fl_power_dn 
[37] SUBSUBSUBSUBPROCESS(1) if ) 
[38] SUBSUBSUBSUBPROCESS(1) if  
[39] SUBSUBSUBSUBPROCESS(1) if ) 
[40] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[41] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_normal_buff[i] ast_a_normal[j];
[42] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_normal_buff[j] ast_a_normal[i];
[43] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_normal[i] tmp_normal_buff[i];
[44] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_normal[j] tmp_normal_buff[j];
[45] MAINPROCESS(2) func<start> fn_init( 
[46] MAINPROCESS(2) func tmp_normal_buff, NORMAL_BUFFSIZE 
[47] MAINPROCESS(2) func<end> ); 
[48] MAINPROCESS(2) equal tmp_count1 0;
[49] MAINPROCESS(2) for for( 
[50] MAINPROCESS(2) for i = 0; 
[51] MAINPROCESS(2) for i < NORMAL_BUFFSIZE; 
[52] MAINPROCESS(2) for i++  
[53] MAINPROCESS(2) for ) 
[54] MAINPROCESS(2) subproc SUBPROCESS(1) 
[55] SUBPROCESS(1) if if( 
[56] SUBPROCESS(1) if ast_a_normal[i].s4_flg_dc >= OBJECT_TYPE_2F 
[57] SUBPROCESS(1) if ) 
[58] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[59] SUBSUBPROCESS(1) equal tmp_normal_buff[tmp_count1] ast_a_normal[i];
[60] SUBSUBPROCESS(1) func<start> fn_init( 
[61] SUBSUBPROCESS(1) func &ast_a_normal[i], 1 
[62] SUBSUBPROCESS(1) func<end> ); 
[63] SUBSUBPROCESS(1) proc tmp_count1++; 
[64] MAINPROCESS(3) func<start> tmp_count2 = s4_trim_normal( 
[65] MAINPROCESS(3) func ast_a_normal 
[66] MAINPROCESS(3) func<end> ); 
[67] MAINPROCESS(3) for for( 
[68] MAINPROCESS(3) for i = 0; 
[69] MAINPROCESS(3) for i < tmp_count1; 
[70] MAINPROCESS(3) for i++  
[71] MAINPROCESS(3) for ) 
[72] MAINPROCESS(3) subproc SUBPROCESS(1) 
[73] SUBPROCESS(1) equal ast_a_normal[tmp_count2+i] tmp_normal_buff[i];
----------------- Total Codes : 73 lines
--------------------------
[Function Name] : fn_sort_peak_by_power 
-Return type : VD 
-Argument : 6 
     [0] : const S4   as4_a_peak_bin[PEAK_BUFFSIZE] 
     [1] : const FL   afl_a_peak_bin_intpl[PEAK_BUFFSIZE] 
     [2] : const FL   afl_a_peak_power[PEAK_BUFFSIZE] 
     [3] : S4   as4_a_peak_bin_ordinary[ORDINARY_BUFFSIZE] 
     [4] : FL   afl_a_peak_bin_intpl_ordinary[ORDINARY_BUFFSIZE] 
     [5] : FL   afl_a_peak_power_ordinary[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc U2 u2_t_lp_sorted_num; 
[2] MAINPROCESS(1) proc U2 u2_t_lp_data; 
[3] MAINPROCESS(1) proc U2 u2_t_lp_search_index; 
[4] MAINPROCESS(1) proc U2 u2_t_max_index; 
[5] MAINPROCESS(1) proc S4 s4_t_max_bin_buf; 
[6] MAINPROCESS(1) proc FL fl_t_max_bin_intpl_buf; 
[7] MAINPROCESS(1) proc FL fl_t_max_power_buf; 
[8] MAINPROCESS(1) proc S4 as4_t_peak_bin_sorted[PEAK_BUFFSIZE]; 
[9] MAINPROCESS(1) proc FL afl_t_peak_bin_intpl_sorted[PEAK_BUFFSIZE]; 
[10] MAINPROCESS(1) proc FL afl_t_peak_power_sorted[PEAK_BUFFSIZE]; 
[11] MAINPROCESS(1) equal u2_t_max_index (U2)0;
[12] MAINPROCESS(1) equal s4_t_max_bin_buf (S4)0;
[13] MAINPROCESS(1) equal fl_t_max_bin_intpl_buf (FL)0.0F;
[14] MAINPROCESS(1) equal fl_t_max_power_buf (FL)0.0F;
[15] MAINPROCESS(1) for  for ( 
[16] MAINPROCESS(1) for  u2_t_lp_data = (U2)0; 
[17] MAINPROCESS(1) for  u2_t_lp_data < PEAK_BUFFSIZE; 
[18] MAINPROCESS(1) for  u2_t_lp_data++  
[19] MAINPROCESS(1) for  ) 
[20] MAINPROCESS(1) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal as4_t_peak_bin_sorted[u2_t_lp_data] as4_a_peak_bin[u2_t_lp_data];
[22] SUBPROCESS(1) equal afl_t_peak_bin_intpl_sorted[u2_t_lp_data] afl_a_peak_bin_intpl[u2_t_lp_data];
[23] SUBPROCESS(1) equal afl_t_peak_power_sorted[u2_t_lp_data] afl_a_peak_power[u2_t_lp_data];
[24] MAINPROCESS(2) for  for ( 
[25] MAINPROCESS(2) for  u2_t_lp_sorted_num = (U2)0; 
[26] MAINPROCESS(2) for  u2_t_lp_sorted_num < ORDINARY_BUFFSIZE; 
[27] MAINPROCESS(2) for  u2_t_lp_sorted_num++ 
[28] MAINPROCESS(2) for  ) 
[29] MAINPROCESS(2) subproc SUBPROCESS(1) 
[30] SUBPROCESS(1) equal u2_t_max_index u2_t_lp_sorted_num;
[31] SUBPROCESS(1) for  for ( 
[32] SUBPROCESS(1) for  u2_t_lp_search_index = (u2_t_lp_sorted_num + (U2)1 
[33] SUBPROCESS(1) for  ); 
[34] SUBPROCESS(1) for  u2_t_lp_search_index < PEAK_BUFFSIZE; 
[35] SUBPROCESS(1) for  u2_t_lp_search_index++ 
[36] SUBPROCESS(1) for  ) 
[37] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[38] SUBSUBPROCESS(1) if  if ( 
[39] SUBSUBPROCESS(1) if  afl_t_peak_power_sorted[u2_t_lp_search_index] > afl_t_peak_power_sorted[u2_t_max_index] 
[40] SUBSUBPROCESS(1) if  ) 
[41] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[42] SUBSUBSUBPROCESS(1) equal u2_t_max_index u2_t_lp_search_index;
[43] SUBPROCESS(2) equal s4_t_max_bin_buf as4_t_peak_bin_sorted[u2_t_max_index];
[44] SUBPROCESS(2) equal as4_t_peak_bin_sorted[u2_t_max_index] as4_t_peak_bin_sorted[u2_t_lp_sorted_num];
[45] SUBPROCESS(2) equal as4_t_peak_bin_sorted[u2_t_lp_sorted_num] s4_t_max_bin_buf;
[46] SUBPROCESS(2) equal fl_t_max_bin_intpl_buf afl_t_peak_bin_intpl_sorted[u2_t_max_index];
[47] SUBPROCESS(2) equal afl_t_peak_bin_intpl_sorted[u2_t_max_index] afl_t_peak_bin_intpl_sorted[u2_t_lp_sorted_num];
[48] SUBPROCESS(2) equal afl_t_peak_bin_intpl_sorted[u2_t_lp_sorted_num] fl_t_max_bin_intpl_buf;
[49] SUBPROCESS(2) equal fl_t_max_power_buf afl_t_peak_power_sorted[u2_t_max_index];
[50] SUBPROCESS(2) equal afl_t_peak_power_sorted[u2_t_max_index] afl_t_peak_power_sorted[u2_t_lp_sorted_num];
[51] SUBPROCESS(2) equal afl_t_peak_power_sorted[u2_t_lp_sorted_num] fl_t_max_power_buf;
[52] MAINPROCESS(3) for  for ( 
[53] MAINPROCESS(3) for  u2_t_lp_data = (U2)0; 
[54] MAINPROCESS(3) for  u2_t_lp_data < ORDINARY_BUFFSIZE; 
[55] MAINPROCESS(3) for  u2_t_lp_data++  
[56] MAINPROCESS(3) for  ) 
[57] MAINPROCESS(3) subproc SUBPROCESS(1) 
[58] SUBPROCESS(1) equal as4_a_peak_bin_ordinary[u2_t_lp_data] as4_t_peak_bin_sorted[u2_t_lp_data];
[59] SUBPROCESS(1) equal afl_a_peak_bin_intpl_ordinary[u2_t_lp_data] afl_t_peak_bin_intpl_sorted[u2_t_lp_data];
[60] SUBPROCESS(1) equal afl_a_peak_power_ordinary[u2_t_lp_data] afl_t_peak_power_sorted[u2_t_lp_data];
[61] MAINPROCESS(4) return return; 
----------------- Total Codes : 61 lines
--------------------------
[Function Name] : fn_sort_peak_by_power_trailer 
-Return type : VD 
-Argument : 6 
     [0] : const S4   as4_a_peak_bin[PEAK_BUFFSIZE] 
     [1] : const FL   afl_a_peak_bin_intpl[PEAK_BUFFSIZE] 
     [2] : const FL   afl_a_peak_power[PEAK_BUFFSIZE] 
     [3] : S4   as4_a_peak_bin_trailer[TRAILER_BUFFSIZE] 
     [4] : FL   afl_a_peak_bin_intpl_trailer[TRAILER_BUFFSIZE] 
     [5] : FL   afl_a_peak_power_trailer[TRAILER_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc U2 u2_t_lp_sorted_num; 
[2] MAINPROCESS(1) proc U2 u2_t_lp_data; 
[3] MAINPROCESS(1) proc U2 u2_t_lp_search_index; 
[4] MAINPROCESS(1) proc U2 u2_t_max_index; 
[5] MAINPROCESS(1) proc S4 s4_t_max_bin_buf; 
[6] MAINPROCESS(1) proc FL fl_t_max_bin_intpl_buf; 
[7] MAINPROCESS(1) proc FL fl_t_max_power_buf; 
[8] MAINPROCESS(1) proc S4 as4_t_peak_bin_sorted[PEAK_BUFFSIZE]; 
[9] MAINPROCESS(1) proc FL afl_t_peak_bin_intpl_sorted[PEAK_BUFFSIZE]; 
[10] MAINPROCESS(1) proc FL afl_t_peak_power_sorted[PEAK_BUFFSIZE]; 
[11] MAINPROCESS(1) equal u2_t_max_index (U2)0;
[12] MAINPROCESS(1) equal s4_t_max_bin_buf (S4)0;
[13] MAINPROCESS(1) equal fl_t_max_bin_intpl_buf (FL)0.0F;
[14] MAINPROCESS(1) equal fl_t_max_power_buf (FL)0.0F;
[15] MAINPROCESS(1) for  for ( 
[16] MAINPROCESS(1) for  u2_t_lp_data = (U2)0; 
[17] MAINPROCESS(1) for  u2_t_lp_data < PEAK_BUFFSIZE; 
[18] MAINPROCESS(1) for  u2_t_lp_data++  
[19] MAINPROCESS(1) for  ) 
[20] MAINPROCESS(1) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal as4_t_peak_bin_sorted[u2_t_lp_data] as4_a_peak_bin[u2_t_lp_data];
[22] SUBPROCESS(1) equal afl_t_peak_bin_intpl_sorted[u2_t_lp_data] afl_a_peak_bin_intpl[u2_t_lp_data];
[23] SUBPROCESS(1) equal afl_t_peak_power_sorted[u2_t_lp_data] afl_a_peak_power[u2_t_lp_data];
[24] MAINPROCESS(2) for  for ( 
[25] MAINPROCESS(2) for  u2_t_lp_sorted_num = (U2)0; 
[26] MAINPROCESS(2) for  u2_t_lp_sorted_num < TRAILER_BUFFSIZE; 
[27] MAINPROCESS(2) for  u2_t_lp_sorted_num++ 
[28] MAINPROCESS(2) for  ) 
[29] MAINPROCESS(2) subproc SUBPROCESS(1) 
[30] SUBPROCESS(1) equal u2_t_max_index u2_t_lp_sorted_num;
[31] SUBPROCESS(1) for  for ( 
[32] SUBPROCESS(1) for  u2_t_lp_search_index = (u2_t_lp_sorted_num + (U2)1 
[33] SUBPROCESS(1) for  ); 
[34] SUBPROCESS(1) for  u2_t_lp_search_index < PEAK_BUFFSIZE; 
[35] SUBPROCESS(1) for  u2_t_lp_search_index++ 
[36] SUBPROCESS(1) for  ) 
[37] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[38] SUBSUBPROCESS(1) if  if ( 
[39] SUBSUBPROCESS(1) if  afl_t_peak_power_sorted[u2_t_lp_search_index] > afl_t_peak_power_sorted[u2_t_max_index] 
[40] SUBSUBPROCESS(1) if  ) 
[41] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[42] SUBSUBSUBPROCESS(1) equal u2_t_max_index u2_t_lp_search_index;
[43] SUBPROCESS(2) equal s4_t_max_bin_buf as4_t_peak_bin_sorted[u2_t_max_index];
[44] SUBPROCESS(2) equal as4_t_peak_bin_sorted[u2_t_max_index] as4_t_peak_bin_sorted[u2_t_lp_sorted_num];
[45] SUBPROCESS(2) equal as4_t_peak_bin_sorted[u2_t_lp_sorted_num] s4_t_max_bin_buf;
[46] SUBPROCESS(2) equal fl_t_max_bin_intpl_buf afl_t_peak_bin_intpl_sorted[u2_t_max_index];
[47] SUBPROCESS(2) equal afl_t_peak_bin_intpl_sorted[u2_t_max_index] afl_t_peak_bin_intpl_sorted[u2_t_lp_sorted_num];
[48] SUBPROCESS(2) equal afl_t_peak_bin_intpl_sorted[u2_t_lp_sorted_num] fl_t_max_bin_intpl_buf;
[49] SUBPROCESS(2) equal fl_t_max_power_buf afl_t_peak_power_sorted[u2_t_max_index];
[50] SUBPROCESS(2) equal afl_t_peak_power_sorted[u2_t_max_index] afl_t_peak_power_sorted[u2_t_lp_sorted_num];
[51] SUBPROCESS(2) equal afl_t_peak_power_sorted[u2_t_lp_sorted_num] fl_t_max_power_buf;
[52] MAINPROCESS(3) for  for ( 
[53] MAINPROCESS(3) for  u2_t_lp_data = (U2)0; 
[54] MAINPROCESS(3) for  u2_t_lp_data < TRAILER_BUFFSIZE; 
[55] MAINPROCESS(3) for  u2_t_lp_data++  
[56] MAINPROCESS(3) for  ) 
[57] MAINPROCESS(3) subproc SUBPROCESS(1) 
[58] SUBPROCESS(1) equal as4_a_peak_bin_trailer[u2_t_lp_data] as4_t_peak_bin_sorted[u2_t_lp_data];
[59] SUBPROCESS(1) equal afl_a_peak_bin_intpl_trailer[u2_t_lp_data] afl_t_peak_bin_intpl_sorted[u2_t_lp_data];
[60] SUBPROCESS(1) equal afl_a_peak_power_trailer[u2_t_lp_data] afl_t_peak_power_sorted[u2_t_lp_data];
[61] MAINPROCESS(4) return return; 
----------------- Total Codes : 61 lines
--------------------------
[Function Name] : fn_sort_target 
-Return type : VD 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_target[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) equal S4 s4_t_count1 0;
[4] MAINPROCESS(1) equal S4 s4_t_count2 0;
[5] MAINPROCESS(1) proc NORMAL_BSM ast_t_buf_normal[TARGET_BUFFSIZE]; 
[6] MAINPROCESS(1) func<start> fn_init( 
[7] MAINPROCESS(1) func ast_t_buf_normal, TARGET_BUFFSIZE 
[8] MAINPROCESS(1) func<end> ); 
[9] MAINPROCESS(1) func<start> fn_move( 
[10] MAINPROCESS(1) func ast_t_buf_normal, ast_a_target, TARGET_BUFFSIZE 
[11] MAINPROCESS(1) func<end> ); 
[12] MAINPROCESS(1) for  for ( 
[13] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[14] MAINPROCESS(1) for  s4_t_lp_i < TARGET_BUFFSIZE; 
[15] MAINPROCESS(1) for  s4_t_lp_i++ 
[16] MAINPROCESS(1) for  ) 
[17] MAINPROCESS(1) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) for  for ( 
[19] SUBPROCESS(1) for  s4_t_lp_j = 0; 
[20] SUBPROCESS(1) for  s4_t_lp_j < TARGET_BUFFSIZE; 
[21] SUBPROCESS(1) for  s4_t_lp_j++ 
[22] SUBPROCESS(1) for  ) 
[23] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[24] SUBSUBPROCESS(1) if  if ( 
[25] SUBSUBPROCESS(1) if  s4_t_lp_i < s4_t_lp_j 
[26] SUBSUBPROCESS(1) if  ) 
[27] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[28] SUBSUBSUBPROCESS(1) if  if ( 
[29] SUBSUBSUBPROCESS(1) if  (ast_a_target[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[30] SUBSUBSUBPROCESS(1) if  ) 
[31] SUBSUBSUBPROCESS(1) if  && (ast_a_target[s4_t_lp_j].fl_Robs != CFL_UNKNOWN_VALUE 
[32] SUBSUBSUBPROCESS(1) if  ) 
[33] SUBSUBSUBPROCESS(1) if   
[34] SUBSUBSUBPROCESS(1) if  ) 
[35] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[36] SUBSUBSUBSUBPROCESS(1) if  if ( 
[37] SUBSUBSUBSUBPROCESS(1) if  ast_t_buf_normal[s4_t_lp_i].fl_Ryfil < ast_t_buf_normal[s4_t_lp_j].fl_Ryfil 
[38] SUBSUBSUBSUBPROCESS(1) if  ) 
[39] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[40] SUBSUBSUBSUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_lp_i] ast_a_target[s4_t_lp_j];
[41] SUBSUBSUBSUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_lp_j] ast_a_target[s4_t_lp_i];
[42] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_target[s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
[43] SUBSUBSUBSUBSUBPROCESS(1) equal ast_a_target[s4_t_lp_j] ast_t_buf_normal[s4_t_lp_j];
[44] MAINPROCESS(2) func<start> fn_init( 
[45] MAINPROCESS(2) func ast_t_buf_normal, TARGET_BUFFSIZE 
[46] MAINPROCESS(2) func<end> ); 
[47] MAINPROCESS(2) equal s4_t_count1 0;
[48] MAINPROCESS(2) for  for ( 
[49] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[50] MAINPROCESS(2) for  s4_t_lp_i < TARGET_BUFFSIZE; 
[51] MAINPROCESS(2) for  s4_t_lp_i++ 
[52] MAINPROCESS(2) for  ) 
[53] MAINPROCESS(2) subproc SUBPROCESS(1) 
[54] SUBPROCESS(1) if  if ( 
[55] SUBPROCESS(1) if  ast_a_target[s4_t_lp_i].s4_flg_dc >= OBJECT_TYPE_2F 
[56] SUBPROCESS(1) if  ) 
[57] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[58] SUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_count1] ast_a_target[s4_t_lp_i];
[59] SUBSUBPROCESS(1) func<start> fn_init( 
[60] SUBSUBPROCESS(1) func &ast_a_target[s4_t_lp_i], 1 
[61] SUBSUBPROCESS(1) func<end> ); 
[62] SUBSUBPROCESS(1) proc s4_t_count1++; 
[63] MAINPROCESS(3) func<start> s4_t_count2 = s4_trim_target( 
[64] MAINPROCESS(3) func ast_a_target 
[65] MAINPROCESS(3) func<end> ); 
[66] MAINPROCESS(3) for  for ( 
[67] MAINPROCESS(3) for  s4_t_lp_i = 0; 
[68] MAINPROCESS(3) for  s4_t_lp_i < s4_t_count1; 
[69] MAINPROCESS(3) for  s4_t_lp_i++ 
[70] MAINPROCESS(3) for  ) 
[71] MAINPROCESS(3) subproc SUBPROCESS(1) 
[72] SUBPROCESS(1) equal ast_a_target[s4_t_count2 + s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
[73] MAINPROCESS(4) return return; 
----------------- Total Codes : 73 lines
--------------------------
[Function Name] : s4_trim_normal 
-Return type : S4 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal[NORMAL_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_iret 0;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc NORMAL_BSM ast_t_buf_normal[NORMAL_BUFFSIZE]; 
[4] MAINPROCESS(1) func<start> fn_init( 
[5] MAINPROCESS(1) func ast_t_buf_normal, NORMAL_BUFFSIZE 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < NORMAL_BUFFSIZE; 
[10] MAINPROCESS(1) for  s4_t_lp_i++ 
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if  if ( 
[14] SUBPROCESS(1) if  ast_a_normal[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_iret] ast_a_normal[s4_t_lp_i];
[18] SUBSUBPROCESS(1) proc s4_t_iret++; 
[19] MAINPROCESS(2) func<start> fn_init( 
[20] MAINPROCESS(2) func ast_a_normal, NORMAL_BUFFSIZE 
[21] MAINPROCESS(2) func<end> ); 
[22] MAINPROCESS(2) for  for ( 
[23] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[24] MAINPROCESS(2) for  s4_t_lp_i < s4_t_iret; 
[25] MAINPROCESS(2) for  s4_t_lp_i++ 
[26] MAINPROCESS(2) for  ) 
[27] MAINPROCESS(2) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) equal ast_a_normal[s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
[29] MAINPROCESS(3) func<start> return ( 
[30] MAINPROCESS(3) func s4_t_iret 
[31] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : s4_trim_prior 
-Return type : S4 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal_prior[PRIOR_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_iret; 
[2] MAINPROCESS(1) proc S4 s4_t_lp_num_prior; 
[3] MAINPROCESS(1) proc NORMAL_BSM ast_t_buf_normal[PRIOR_BUFFSIZE]; 
[4] MAINPROCESS(1) equal s4_t_iret (S4)0;
[5] MAINPROCESS(1) func<start> fn_init( 
[6] MAINPROCESS(1) func ast_t_buf_normal, PRIOR_BUFFSIZE 
[7] MAINPROCESS(1) func<end> ); 
[8] MAINPROCESS(1) for  for ( 
[9] MAINPROCESS(1) for  s4_t_lp_num_prior = (S4)0; 
[10] MAINPROCESS(1) for  s4_t_lp_num_prior < PRIOR_BUFFSIZE; 
[11] MAINPROCESS(1) for  s4_t_lp_num_prior++ 
[12] MAINPROCESS(1) for  ) 
[13] MAINPROCESS(1) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) if  if ( 
[15] SUBPROCESS(1) if  ast_a_normal_prior[s4_t_lp_num_prior].fl_Robs != CFL_UNKNOWN_VALUE 
[16] SUBPROCESS(1) if  ) 
[17] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_iret] ast_a_normal_prior[s4_t_lp_num_prior];
[19] SUBSUBPROCESS(1) proc s4_t_iret++; 
[20] MAINPROCESS(2) func<start> fn_init( 
[21] MAINPROCESS(2) func ast_a_normal_prior, PRIOR_BUFFSIZE 
[22] MAINPROCESS(2) func<end> ); 
[23] MAINPROCESS(2) for  for ( 
[24] MAINPROCESS(2) for  s4_t_lp_num_prior = (S4)0; 
[25] MAINPROCESS(2) for  s4_t_lp_num_prior < s4_t_iret; 
[26] MAINPROCESS(2) for  s4_t_lp_num_prior++ 
[27] MAINPROCESS(2) for  ) 
[28] MAINPROCESS(2) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) equal ast_a_normal_prior[s4_t_lp_num_prior] ast_t_buf_normal[s4_t_lp_num_prior];
[30] MAINPROCESS(3) func<start> return ( 
[31] MAINPROCESS(3) func s4_t_iret 
[32] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 32 lines
--------------------------
[Function Name] : s4_trim_ordinary 
-Return type : S4 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal[ORDINARY_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_iret 0;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc NORMAL_BSM ast_t_buf_normal[ORDINARY_BUFFSIZE]; 
[4] MAINPROCESS(1) func<start> fn_init( 
[5] MAINPROCESS(1) func ast_t_buf_normal, ORDINARY_BUFFSIZE 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < ORDINARY_BUFFSIZE; 
[10] MAINPROCESS(1) for  s4_t_lp_i++ 
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if  if ( 
[14] SUBPROCESS(1) if  ast_a_normal[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_iret] ast_a_normal[s4_t_lp_i];
[18] SUBSUBPROCESS(1) proc s4_t_iret++; 
[19] MAINPROCESS(2) func<start> fn_init( 
[20] MAINPROCESS(2) func ast_a_normal, ORDINARY_BUFFSIZE 
[21] MAINPROCESS(2) func<end> ); 
[22] MAINPROCESS(2) for  for ( 
[23] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[24] MAINPROCESS(2) for  s4_t_lp_i < s4_t_iret; 
[25] MAINPROCESS(2) for  s4_t_lp_i++ 
[26] MAINPROCESS(2) for  ) 
[27] MAINPROCESS(2) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) equal ast_a_normal[s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
[29] MAINPROCESS(3) func<start> return ( 
[30] MAINPROCESS(3) func s4_t_iret 
[31] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : s4_trim_trailer 
-Return type : S4 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal[TRAILER_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_iret 0;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc NORMAL_BSM ast_t_buf_normal[TRAILER_BUFFSIZE]; 
[4] MAINPROCESS(1) func<start> fn_init( 
[5] MAINPROCESS(1) func ast_t_buf_normal, TRAILER_BUFFSIZE 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < TRAILER_BUFFSIZE; 
[10] MAINPROCESS(1) for  s4_t_lp_i++ 
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if  if ( 
[14] SUBPROCESS(1) if  ast_a_normal[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_iret] ast_a_normal[s4_t_lp_i];
[18] SUBSUBPROCESS(1) proc s4_t_iret++; 
[19] MAINPROCESS(2) func<start> fn_init( 
[20] MAINPROCESS(2) func ast_a_normal, TRAILER_BUFFSIZE 
[21] MAINPROCESS(2) func<end> ); 
[22] MAINPROCESS(2) for  for ( 
[23] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[24] MAINPROCESS(2) for  s4_t_lp_i < s4_t_iret; 
[25] MAINPROCESS(2) for  s4_t_lp_i++ 
[26] MAINPROCESS(2) for  ) 
[27] MAINPROCESS(2) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) equal ast_a_normal[s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
[29] MAINPROCESS(3) func<start> return ( 
[30] MAINPROCESS(3) func s4_t_iret 
[31] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : s4_trim_normal_2f 
-Return type : S4 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_normal[AUX_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_iret 0;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc NORMAL_BSM ast_t_buf_normal[AUX_BUFFSIZE]; 
[4] MAINPROCESS(1) func<start> fn_init( 
[5] MAINPROCESS(1) func ast_t_buf_normal, AUX_BUFFSIZE 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < AUX_BUFFSIZE; 
[10] MAINPROCESS(1) for  s4_t_lp_i++ 
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if  if ( 
[14] SUBPROCESS(1) if  ast_a_normal[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_iret] ast_a_normal[s4_t_lp_i];
[18] SUBSUBPROCESS(1) proc s4_t_iret++; 
[19] MAINPROCESS(2) func<start> fn_init( 
[20] MAINPROCESS(2) func ast_a_normal, AUX_BUFFSIZE 
[21] MAINPROCESS(2) func<end> ); 
[22] MAINPROCESS(2) for  for ( 
[23] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[24] MAINPROCESS(2) for  s4_t_lp_i < s4_t_iret; 
[25] MAINPROCESS(2) for  s4_t_lp_i++ 
[26] MAINPROCESS(2) for  ) 
[27] MAINPROCESS(2) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) equal ast_a_normal[s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
[29] MAINPROCESS(3) func<start> return ( 
[30] MAINPROCESS(3) func s4_t_iret 
[31] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : s4_trim_target 
-Return type : S4 
-Argument : 1 
     [0] : NORMAL_BSM   ast_a_target[TARGET_BUFFSIZE] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_iret 0;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc NORMAL_BSM ast_t_buf_normal[TARGET_BUFFSIZE]; 
[4] MAINPROCESS(1) func<start> fn_init( 
[5] MAINPROCESS(1) func ast_t_buf_normal, TARGET_BUFFSIZE 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) for  for ( 
[8] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[9] MAINPROCESS(1) for  s4_t_lp_i < TARGET_BUFFSIZE; 
[10] MAINPROCESS(1) for  s4_t_lp_i++ 
[11] MAINPROCESS(1) for  ) 
[12] MAINPROCESS(1) subproc SUBPROCESS(1) 
[13] SUBPROCESS(1) if  if ( 
[14] SUBPROCESS(1) if  ast_a_target[s4_t_lp_i].fl_Robs != CFL_UNKNOWN_VALUE 
[15] SUBPROCESS(1) if  ) 
[16] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[17] SUBSUBPROCESS(1) equal ast_t_buf_normal[s4_t_iret] ast_a_target[s4_t_lp_i];
[18] SUBSUBPROCESS(1) proc s4_t_iret++; 
[19] MAINPROCESS(2) func<start> fn_init( 
[20] MAINPROCESS(2) func ast_a_target, TARGET_BUFFSIZE 
[21] MAINPROCESS(2) func<end> ); 
[22] MAINPROCESS(2) for  for ( 
[23] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[24] MAINPROCESS(2) for  s4_t_lp_i < s4_t_iret; 
[25] MAINPROCESS(2) for  s4_t_lp_i++ 
[26] MAINPROCESS(2) for  ) 
[27] MAINPROCESS(2) subproc SUBPROCESS(1) 
[28] SUBPROCESS(1) equal ast_a_target[s4_t_lp_i] ast_t_buf_normal[s4_t_lp_i];
[29] MAINPROCESS(3) func<start> return ( 
[30] MAINPROCESS(3) func s4_t_iret 
[31] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 31 lines
--------------------------
[Function Name] : fn_initialize_Tx_data 
-Return type : VD 
-Argument : 2 
     [0] : S4   as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT] 
     [1] : FL   afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[2] MAINPROCESS(1) for  for ( 
[3] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[4] MAINPROCESS(1) for  s4_t_lp_i < TARGET_BUFFSIZE; 
[5] MAINPROCESS(1) for  s4_t_lp_i++ 
[6] MAINPROCESS(1) for  ) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) func<start> s4_initialize_specified_Tx_data( 
[9] SUBPROCESS(1) func as4_a_Tx_int, 
[10] SUBPROCESS(1) func afl_a_Tx_float, 
[11] SUBPROCESS(1) func s4_t_lp_i 
[12] SUBPROCESS(1) func<end> ); 
[13] MAINPROCESS(2) return return; 
----------------- Total Codes : 13 lines
--------------------------
[Function Name] : s4_initialize_specified_Tx_data 
-Return type : S4 
-Argument : 3 
     [0] : S4   as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT] 
     [1] : FL   afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
     [2] : S4   s4_t_index 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_iRet 0;
[2] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[3] MAINPROCESS(1) if  if ( 
[4] MAINPROCESS(1) if  (s4_t_index < 0) || (s4_t_index > (S4)(TARGET_BUFFSIZE - 1)) 
[5] MAINPROCESS(1) if  ) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) func<start> return ( 
[8] SUBPROCESS(1) func s4_t_iRet 
[9] SUBPROCESS(1) func<end> ); 
[10] MAINPROCESS(2) for  for ( 
[11] MAINPROCESS(2) for  s4_t_lp_j = 0; 
[12] MAINPROCESS(2) for  s4_t_lp_j < NORM_INT; 
[13] MAINPROCESS(2) for  s4_t_lp_j++ 
[14] MAINPROCESS(2) for  ) 
[15] MAINPROCESS(2) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) equal as4_a_Tx_int[s4_t_index][s4_t_lp_j] 0;
[17] MAINPROCESS(3) for  for ( 
[18] MAINPROCESS(3) for  s4_t_lp_j = 0; 
[19] MAINPROCESS(3) for  s4_t_lp_j < TGT_FLT; 
[20] MAINPROCESS(3) for  s4_t_lp_j++ 
[21] MAINPROCESS(3) for  ) 
[22] MAINPROCESS(3) subproc SUBPROCESS(1) 
[23] SUBPROCESS(1) if  if ( 
[24] SUBPROCESS(1) if  (s4_t_lp_j > 3) && (s4_t_lp_j < 11) 
[25] SUBPROCESS(1) if  ) 
[26] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[27] SUBSUBPROCESS(1) equal afl_a_Tx_float[s4_t_index][s4_t_lp_j] CFL_UNKNOWN_VALUE;
[28] SUBPROCESS(2) else else 
[29] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[30] SUBSUBPROCESS(1) equal afl_a_Tx_float[s4_t_index][s4_t_lp_j] 0.0F;
[31] MAINPROCESS(4) equal s4_t_iRet 1;
[32] MAINPROCESS(4) func<start> return ( 
[33] MAINPROCESS(4) func s4_t_iRet 
[34] MAINPROCESS(4) func<end> ); 
----------------- Total Codes : 34 lines
--------------------------
[Function Name] : s4_trim_Tx_data 
-Return type : S4 
-Argument : 2 
     [0] : S4   as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT] 
     [1] : FL   afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_iRet 0;
[2] MAINPROCESS(1) proc S4 s4_t_lp_i; 
[3] MAINPROCESS(1) proc S4 s4_t_lp_j; 
[4] MAINPROCESS(1) proc S4 as4_t_Tx_int[TARGET_BUFFSIZE][NORM_INT]; 
[5] MAINPROCESS(1) proc FL afl_t_Tx_float[TARGET_BUFFSIZE][TGT_FLT]; 
[6] MAINPROCESS(1) func<start> fn_initialize_Tx_data( 
[7] MAINPROCESS(1) func as4_t_Tx_int, 
[8] MAINPROCESS(1) func afl_t_Tx_float 
[9] MAINPROCESS(1) func<end> ); 
[10] MAINPROCESS(1) for  for ( 
[11] MAINPROCESS(1) for  s4_t_lp_i = 0; 
[12] MAINPROCESS(1) for  s4_t_lp_i < TARGET_BUFFSIZE; 
[13] MAINPROCESS(1) for  s4_t_lp_i++ 
[14] MAINPROCESS(1) for  ) 
[15] MAINPROCESS(1) subproc SUBPROCESS(1) 
[16] SUBPROCESS(1) if  if ( 
[17] SUBPROCESS(1) if  afl_a_Tx_float[s4_t_lp_i][4] != CFL_UNKNOWN_VALUE 
[18] SUBPROCESS(1) if  ) 
[19] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[20] SUBSUBPROCESS(1) for  for ( 
[21] SUBSUBPROCESS(1) for  s4_t_lp_j = 0; 
[22] SUBSUBPROCESS(1) for  s4_t_lp_j < NORM_INT; 
[23] SUBSUBPROCESS(1) for  s4_t_lp_j++ 
[24] SUBSUBPROCESS(1) for  ) 
[25] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[26] SUBSUBSUBPROCESS(1) equal as4_t_Tx_int[s4_t_iRet][s4_t_lp_j] as4_a_Tx_int[s4_t_lp_i][s4_t_lp_j];
[27] SUBSUBPROCESS(2) for  for ( 
[28] SUBSUBPROCESS(2) for  s4_t_lp_j = 0; 
[29] SUBSUBPROCESS(2) for  s4_t_lp_j < TGT_FLT; 
[30] SUBSUBPROCESS(2) for  s4_t_lp_j++ 
[31] SUBSUBPROCESS(2) for  ) 
[32] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[33] SUBSUBSUBPROCESS(1) equal afl_t_Tx_float[s4_t_iRet][s4_t_lp_j] afl_a_Tx_float[s4_t_lp_i][s4_t_lp_j];
[34] SUBSUBPROCESS(3) proc s4_t_iRet++; 
[35] MAINPROCESS(2) func<start> fn_initialize_Tx_data( 
[36] MAINPROCESS(2) func as4_a_Tx_int, 
[37] MAINPROCESS(2) func afl_a_Tx_float 
[38] MAINPROCESS(2) func<end> ); 
[39] MAINPROCESS(2) for  for ( 
[40] MAINPROCESS(2) for  s4_t_lp_i = 0; 
[41] MAINPROCESS(2) for  s4_t_lp_i < s4_t_iRet; 
[42] MAINPROCESS(2) for  s4_t_lp_i++ 
[43] MAINPROCESS(2) for  ) 
[44] MAINPROCESS(2) subproc SUBPROCESS(1) 
[45] SUBPROCESS(1) for  for ( 
[46] SUBPROCESS(1) for  s4_t_lp_j = 0; 
[47] SUBPROCESS(1) for  s4_t_lp_j < NORM_INT; 
[48] SUBPROCESS(1) for  s4_t_lp_j++ 
[49] SUBPROCESS(1) for  ) 
[50] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[51] SUBSUBPROCESS(1) equal as4_a_Tx_int[s4_t_lp_i][s4_t_lp_j] as4_t_Tx_int[s4_t_lp_i][s4_t_lp_j];
[52] SUBPROCESS(2) for  for ( 
[53] SUBPROCESS(2) for  s4_t_lp_j = 0; 
[54] SUBPROCESS(2) for  s4_t_lp_j < TGT_FLT; 
[55] SUBPROCESS(2) for  s4_t_lp_j++ 
[56] SUBPROCESS(2) for  ) 
[57] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[58] SUBSUBPROCESS(1) equal afl_a_Tx_float[s4_t_lp_i][s4_t_lp_j] afl_t_Tx_float[s4_t_lp_i][s4_t_lp_j];
[59] MAINPROCESS(3) func<start> return ( 
[60] MAINPROCESS(3) func s4_t_iRet 
[61] MAINPROCESS(3) func<end> ); 
----------------- Total Codes : 61 lines
--------------------------
[Function Name] : fn_set_normal_data 
-Return type : VD 
-Argument : 11 
     [0] : NORMAL_BSM   *pst_a_normal_current 
     [1] : FL   fl_a_peak_bin_intpl_up 
     [2] : FL   fl_a_peak_bin_intpl_dn 
     [3] : FL   fl_a_peak_doa_bin_intpl_up 
     [4] : FL   fl_a_peak_doa_bin_intpl_dn 
     [5] : FL   fl_a_peak_freq_power_up 
     [6] : FL   fl_a_peak_freq_power_dn 
     [7] : FL   fl_a_peak_doa_power_up 
     [8] : FL   fl_a_peak_doa_power_dn 
     [9] : S4   s4_a_stationary_flg 
     [10] : S4   s4_a_single_peak_flg 
----- Codes -----
[1] MAINPROCESS(1) func<start> pst_a_normal_current->s4_bin_up = ( 
[2] MAINPROCESS(1) func S4)(fl_a_peak_bin_intpl_up + (FL)0.5F 
[3] MAINPROCESS(1) func<end> ); 
[4] MAINPROCESS(1) func<start> pst_a_normal_current->s4_bin_dn = ( 
[5] MAINPROCESS(1) func S4)(fl_a_peak_bin_intpl_dn + (FL)0.5F 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) equal pst_a_normal_current->fl_bin_up_interpolate fl_a_peak_bin_intpl_up;
[8] MAINPROCESS(1) equal pst_a_normal_current->fl_bin_dn_interpolate fl_a_peak_bin_intpl_dn;
[9] MAINPROCESS(1) equal pst_a_normal_current->fl_power_up fl_a_peak_freq_power_up;
[10] MAINPROCESS(1) equal pst_a_normal_current->fl_power_dn fl_a_peak_freq_power_dn;
[11] MAINPROCESS(1) func<start> pst_a_normal_current->s4_bin_up_music = ( 
[12] MAINPROCESS(1) func S4)(fl_a_peak_doa_bin_intpl_up + (FL)0.5F 
[13] MAINPROCESS(1) func<end> ); 
[14] MAINPROCESS(1) func<start> pst_a_normal_current->s4_bin_dn_music = ( 
[15] MAINPROCESS(1) func S4)(fl_a_peak_doa_bin_intpl_dn + (FL)0.5F 
[16] MAINPROCESS(1) func<end> ); 
[17] MAINPROCESS(1) equal pst_a_normal_current->fl_doa_up_interpolate fl_a_peak_doa_bin_intpl_up;
[18] MAINPROCESS(1) equal pst_a_normal_current->fl_doa_dn_interpolate fl_a_peak_doa_bin_intpl_dn;
[19] MAINPROCESS(1) equal pst_a_normal_current->fl_power_up_music fl_a_peak_doa_power_up;
[20] MAINPROCESS(1) equal pst_a_normal_current->fl_power_dn_music fl_a_peak_doa_power_dn;
[21] MAINPROCESS(1) func<start> pst_a_normal_current->fl_theta_up = fl_transform_doabin_to_rad_float( 
[22] MAINPROCESS(1) func fl_a_peak_doa_bin_intpl_up, 
[23] MAINPROCESS(1) func 0 
[24] MAINPROCESS(1) func<end> ); 
[25] MAINPROCESS(1) func<start> pst_a_normal_current->fl_theta_dn = fl_transform_doabin_to_rad_float( 
[26] MAINPROCESS(1) func fl_a_peak_doa_bin_intpl_dn, 
[27] MAINPROCESS(1) func 1 
[28] MAINPROCESS(1) func<end> ); 
[29] MAINPROCESS(1) func<start> pst_a_normal_current->fl_Robs = -RCOF * ( 
[30] MAINPROCESS(1) func (pst_a_normal_current->fl_bin_up_interpolate + pst_a_normal_current->fl_bin_dn_interpolate) - (FL)NB_FFT_PT 
[31] MAINPROCESS(1) func<end> ); 
[32] MAINPROCESS(1) equal pst_a_normal_current->fl_Rxobs (pst_a_normal_current->fl_Robs * (FL)fl_sin(0.50F * (pst_a_normal_current->fl_theta_up + pst_a_normal_current->fl_theta_dn))) + st_g_bsm_loop_data.afl_installed_angle[1];
[33] MAINPROCESS(1) func<start> pst_a_normal_current->fl_Ryobs = pst_a_normal_current->fl_Robs * ( 
[34] MAINPROCESS(1) func FL)fl_cos(0.50F * (pst_a_normal_current->fl_theta_up + pst_a_normal_current->fl_theta_dn) 
[35] MAINPROCESS(1) func<end> ); 
[36] MAINPROCESS(1) func<start> pst_a_normal_current->fl_Vobs  = -VCOF * ( 
[37] MAINPROCESS(1) func pst_a_normal_current->fl_bin_up_interpolate - pst_a_normal_current->fl_bin_dn_interpolate 
[38] MAINPROCESS(1) func<end> ); 
[39] MAINPROCESS(1) equal pst_a_normal_current->fl_Vxobs 0.0F;
[40] MAINPROCESS(1) func<start> pst_a_normal_current->fl_Vyobs = fl_get_vy( 
[41] MAINPROCESS(1) func pst_a_normal_current->fl_Vobs, 
[42] MAINPROCESS(1) func (FL)fl_cos(0.50F * (pst_a_normal_current->fl_theta_up + pst_a_normal_current->fl_theta_dn)), 
[43] MAINPROCESS(1) func pst_a_normal_current->fl_Ryobs, 
[44] MAINPROCESS(1) func fl_g_v_self_bsm_for_base 
[45] MAINPROCESS(1) func<end> ); 
[46] MAINPROCESS(1) equal pst_a_normal_current->s4_flg_stop s4_a_stationary_flg;
[47] MAINPROCESS(1) equal pst_a_normal_current->s4_flg_single_peak_up s4_a_single_peak_flg;
[48] MAINPROCESS(1) return return; 
----------------- Total Codes : 48 lines
--------------------------
[Function Name] : fl_transform_doabin_to_rad 
-Return type : FL 
-Argument : 2 
     [0] : S4   s4_a_angle_bin 
     [1] : S4   s4_a_flg_updn 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_degree; 
[2] MAINPROCESS(1) func<start> fl_t_degree = ( 
[3] MAINPROCESS(1) func FL)(st_g_bsm_loop_data.afl_installed_angle[0] + (DOA_ANG_PER_BIN * (FL)s4_a_angle_bin) + DOA_BIN_START_ANG 
[4] MAINPROCESS(1) func<end> ); 
[5] MAINPROCESS(1) func<start> return ( 
[6] MAINPROCESS(1) func -fl_t_degree * PI / 180.0F 
[7] MAINPROCESS(1) func<end> ); 
----------------- Total Codes : 7 lines
--------------------------
[Function Name] : fl_transform_doabin_to_rad_float 
-Return type : FL 
-Argument : 2 
     [0] : FL   fl_a_angle 
     [1] : S4   s4_a_flg_updn 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_t_degree; 
[2] MAINPROCESS(1) equal fl_t_degree st_g_bsm_loop_data.afl_installed_angle[0] + (DOA_ANG_PER_BIN * fl_a_angle) + DOA_BIN_START_ANG;
[3] MAINPROCESS(1) func<start> return ( 
[4] MAINPROCESS(1) func -fl_t_degree * PI / 180.0F 
[5] MAINPROCESS(1) func<end> ); 
----------------- Total Codes : 5 lines
--------------------------
[Function Name] : fl_get_vy 
-Return type : FL 
-Argument : 4 
     [0] : FL   fl_a_Vobs 
     [1] : FL   fl_a_cos_theta 
     [2] : FL   fl_a_Ry 
     [3] : FL   fl_a_v_self 
----- Codes -----
[1] MAINPROCESS(1) equal FL fl_t_Vy 0.0F;
[2] MAINPROCESS(1) proc U1 u1_t_jdg_c2_flg; 
[3] MAINPROCESS(1) func<start> u1_t_jdg_c2_flg = u1_get_vy_c2( 
[4] MAINPROCESS(1) func fl_a_Ry 
[5] MAINPROCESS(1) func<end> ); 
[6] MAINPROCESS(1) if  if ( 
[7] MAINPROCESS(1) if  (fl_abs(fl_a_Ry) < VY_CALC_BORDER_RY 
[8] MAINPROCESS(1) if  ) 
[9] MAINPROCESS(1) if  &&  (fl_a_v_self < VY_CALC_BORDER_V 
[10] MAINPROCESS(1) if  ) 
[11] MAINPROCESS(1) if  &&  (u1_t_jdg_c2_flg == CU1_TRUE 
[12] MAINPROCESS(1) if  ) 
[13] MAINPROCESS(1) if  &&  (fl_a_cos_theta != (FL)0.0F 
[14] MAINPROCESS(1) if  ) 
[15] MAINPROCESS(1) if   
[16] MAINPROCESS(1) if  ) 
[17] MAINPROCESS(1) subproc SUBPROCESS(1) 
[18] SUBPROCESS(1) equal fl_t_Vy fl_a_Vobs / fl_a_cos_theta;
[19] MAINPROCESS(2) else else 
[20] MAINPROCESS(2) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal fl_t_Vy fl_a_Vobs;
[22] MAINPROCESS(3) if  if ( 
[23] MAINPROCESS(3) if  fl_t_Vy == 0.0F 
[24] MAINPROCESS(3) if  ) 
[25] MAINPROCESS(3) subproc SUBPROCESS(1) 
[26] SUBPROCESS(1) equal fl_t_Vy 0.1F;
[27] MAINPROCESS(4) if  if ( 
[28] MAINPROCESS(4) if  fl_a_Ry > 0.0F 
[29] MAINPROCESS(4) if  ) 
[30] MAINPROCESS(4) subproc SUBPROCESS(1) 
[31] SUBPROCESS(1) equal fl_t_Vy - fl_t_Vy;
[32] MAINPROCESS(5) func<start> return ( 
[33] MAINPROCESS(5) func fl_t_Vy 
[34] MAINPROCESS(5) func<end> ); 
----------------- Total Codes : 34 lines
--------------------------
[Function Name] : u1_get_vy_c2 
-Return type : static U1 
-Argument : 1 
     [0] : FL   fl_a_Ryobs 
----- Codes -----
[1] MAINPROCESS(1) proc U1 u1_t_jdg_c2_flag; 
[2] MAINPROCESS(1) proc FL fl_t_ryobs_abs; 
[3] MAINPROCESS(1) equal u1_t_jdg_c2_flag CU1_FALSE;
[4] MAINPROCESS(1) func<start> fl_t_ryobs_abs = fl_abs( 
[5] MAINPROCESS(1) func fl_a_Ryobs 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) if  if ( 
[8] MAINPROCESS(1) if  fl_t_ryobs_abs > CFL_VY_CALC_BORDER_RY2 
[9] MAINPROCESS(1) if  ) 
[10] MAINPROCESS(1) subproc SUBPROCESS(1) 
[11] SUBPROCESS(1) equal u1_t_jdg_c2_flag CU1_TRUE;
[12] MAINPROCESS(2) else else 
[13] MAINPROCESS(2) subproc SUBPROCESS(1) 
[14] SUBPROCESS(1) equal u1_t_jdg_c2_flag CU1_FALSE;
[15] MAINPROCESS(3) proc return u1_t_jdg_c2_flag; 
----------------- Total Codes : 15 lines
