Total lines: 2004 
Total functions : 12 
--------------------------
[Function Name] : s4_check_front_1m_line 
-Return type : S4 
-Argument : 4 
     [0] : const FL   tos_end_param[TOS_END_PARAM_SIZE] 
     [1] : FL   tmp_frontline_pow 
     [2] : S4   frontline_doa_dn[LINE_FREQ_BIN_RANGE][1] 
     [3] : const S4   froneline_doa_peak_num_dn[LINE_FREQ_BIN_RANGE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i,j; 
[2] MAINPROCESS(1) equal S4 current_tos_end_flag 0;
[3] MAINPROCESS(1) equal S4 tmp_tos_flag 0;
[4] MAINPROCESS(1) proc FL frontline_up[LINE_FREQ_BIN_RANGE][2]; 
[5] MAINPROCESS(1) proc FL frontline_dn[LINE_FREQ_BIN_RANGE][2]; 
[6] MAINPROCESS(1) proc FL pow_th; 
[7] MAINPROCESS(1) equal S4 tmp_flontline_dn_num 0;
[8] MAINPROCESS(1) proc S4 tos_line_count; 
[9] MAINPROCESS(1) proc S4 tmp_frontline_flag; 
[10] MAINPROCESS(1) equal S4 tos_cycle_max 0;
[11] MAINPROCESS(1) equal S4 sot_cycle_max 0;
[12] MAINPROCESS(1) for<start> for( 
[13] MAINPROCESS(1) for i=0; 
[14] MAINPROCESS(1) for i<LINE_FREQ_BIN_RANGE; 
[15] MAINPROCESS(1) for i++) 
[16] MAINPROCESS(1) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) for<start> for( 
[18] SUBPROCESS(1) for j=0; 
[19] SUBPROCESS(1) for j<2; 
[20] SUBPROCESS(1) for j++) 
[21] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[22] SUBSUBPROCESS(1) equal frontline_up[i][j] CFL_UNKNOWN_VALUE;
[23] SUBSUBPROCESS(1) equal frontline_dn[i][j] CFL_UNKNOWN_VALUE;
[24] MAINPROCESS(2) if <start> if ( 
[25] MAINPROCESS(2) if  (st_g_bsm_loop_data.as4_flg_tos_frontline[0]==0 
[26] MAINPROCESS(2) if  ) 
[27] MAINPROCESS(2) if  &&  (st_g_bsm_loop_data.as4_flg_tos_end[0]==0)) 
[28] MAINPROCESS(2) subproc SUBPROCESS(1) 
[29] SUBPROCESS(1) equal st_g_bsm_loop_data.afl_tos_frontline_pow[0] 0.0F;
[30] MAINPROCESS(3) func<start> fn_bsm_chkfr_check_alart_max_cycle( 
[31] MAINPROCESS(3) func &tos_cycle_max, 
[32] MAINPROCESS(3) func &sot_cycle_max 
[33] MAINPROCESS(3) func<end> ); 
[34] MAINPROCESS(3) if<start> if( 
[35] MAINPROCESS(3) if s4_bsm_chkfr_check_tos_alart_sts( tos_cycle_max, sot_cycle_max ) != 0 
[36] MAINPROCESS(3) if ) 
[37] MAINPROCESS(3) subproc SUBPROCESS(1) 
[38] SUBPROCESS(1) proc return current_tos_end_flag; 
[39] MAINPROCESS(4) func<start> fn_bsm_chkfr_check_detect_objsts( 
[40] MAINPROCESS(4) func tos_end_param, 
[41] MAINPROCESS(4) func &tos_line_count, 
[42] MAINPROCESS(4) func &tmp_flontline_dn_num, 
[43] MAINPROCESS(4) func &pow_th, 
[44] MAINPROCESS(4) func &tmp_frontline_pow, 
[45] MAINPROCESS(4) func frontline_doa_dn, 
[46] MAINPROCESS(4) func froneline_doa_peak_num_dn, 
[47] MAINPROCESS(4) func frontline_dn 
[48] MAINPROCESS(4) func<end> ); 
[49] MAINPROCESS(4) func<start> fn_bsm_chkfr_check_frontline_flg( 
[50] MAINPROCESS(4) func tmp_frontline_pow, 
[51] MAINPROCESS(4) func pow_th, 
[52] MAINPROCESS(4) func tmp_flontline_dn_num, 
[53] MAINPROCESS(4) func tos_line_count, 
[54] MAINPROCESS(4) func frontline_dn, 
[55] MAINPROCESS(4) func &tmp_frontline_flag 
[56] MAINPROCESS(4) func<end> ); 
[57] MAINPROCESS(4) func<start> fn_bsm_chkfr_check_tos_end_flg( 
[58] MAINPROCESS(4) func tos_end_param, 
[59] MAINPROCESS(4) func tmp_frontline_pow, 
[60] MAINPROCESS(4) func &current_tos_end_flag 
[61] MAINPROCESS(4) func<end> ); 
[62] MAINPROCESS(4) equal st_g_bsm_loop_data.as4_flg_tos_frontline[0] tmp_frontline_flag;
[63] MAINPROCESS(4) proc return current_tos_end_flag; 
----------------- Total Codes : 63 lines
--------------------------
[Function Name] : calc_front_1m_line 
-Return type : VD 
-Argument : 4 
     [0] : FL   *frontline_pow_dn 
     [1] : const FL   tos_end_param[TOS_END_PARAM_SIZE] 
     [2] : S4   frontline_doa_dn[LINE_FREQ_BIN_RANGE][1] 
     [3] : S4   froneline_doa_peak_num_dn[LINE_FREQ_BIN_RANGE] 
----- Codes -----
[1] MAINPROCESS(1) func<start> *frontline_pow_dn = calc_line_doa_fm( 
[2] MAINPROCESS(1) func (const FL (*)[CORRE_SIZE_4CH])(afl_g_cvw_lfm_ryy_matrix[1]), 
[3] MAINPROCESS(1) func afl_g_cvw_lfm_ftt_power[1], 
[4] MAINPROCESS(1) func (S4)tos_end_param[0], 
[5] MAINPROCESS(1) func (S4)tos_end_param[0] + LINE_FREQ_BIN_RANGE, 
[6] MAINPROCESS(1) func (FL)0.0F, 
[7] MAINPROCESS(1) func frontline_doa_dn, 
[8] MAINPROCESS(1) func froneline_doa_peak_num_dn, 
[9] MAINPROCESS(1) func CU2_LFM_MOD_DN 
[10] MAINPROCESS(1) func<end> ); 
----------------- Total Codes : 10 lines
--------------------------
[Function Name] : fn_bsm_chkfr_check_alart_max_cycle 
-Return type : static VD 
-Argument : 2 
     [0] : S4   *ps4_a_tos_cycle_max 
     [1] : S4   *ps4_a_sot_cycle_max 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<TARGET_BUFFSIZE; 
[5] MAINPROCESS(1) for i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) if<start> if( 
[8] SUBPROCESS(1) if st_g_bsm_alarm_data.afl_alarmed_target[i][0] != CFL_UNKNOWN_VALUE 
[9] SUBPROCESS(1) if ) 
[10] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[11] SUBSUBPROCESS(1) if<start> if( 
[12] SUBSUBPROCESS(1) if (st_g_bsm_alarm_data.afl_alarmed_target[i][4]==ALARM_TYPE_TOS) 
[13] SUBSUBPROCESS(1) if ||  (st_g_bsm_alarm_data.afl_alarmed_target[i][4]==ALARM_TYPE_MERGEIN) 
[14] SUBSUBPROCESS(1) if ) 
[15] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[16] SUBSUBSUBPROCESS(1) if<start> if( 
[17] SUBSUBSUBPROCESS(1) if (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3] > *ps4_a_tos_cycle_max 
[18] SUBSUBSUBPROCESS(1) if ) 
[19] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[20] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_tos_cycle_max (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3];
[21] SUBSUBPROCESS(2) if <start> if ( 
[22] SUBSUBPROCESS(2) if  st_g_bsm_alarm_data.afl_alarmed_target[i][0] != CFL_UNKNOWN_VALUE 
[23] SUBSUBPROCESS(2) if  ) 
[24] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[25] SUBSUBSUBPROCESS(1) if <start> if ( 
[26] SUBSUBSUBPROCESS(1) if  st_g_bsm_alarm_data.afl_alarmed_target[i][4] == ALARM_TYPE_TOS 
[27] SUBSUBSUBPROCESS(1) if  ) 
[28] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[29] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[30] SUBSUBSUBSUBPROCESS(1) if  (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3] > *ps4_a_tos_cycle_max 
[31] SUBSUBSUBSUBPROCESS(1) if  ) 
[32] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[33] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_tos_cycle_max (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3];
[34] SUBSUBSUBPROCESS(2) if<start> if( 
[35] SUBSUBSUBPROCESS(2) if (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][4]==ALARM_TYPE_SOT 
[36] SUBSUBSUBPROCESS(2) if ) 
[37] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[38] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[39] SUBSUBSUBSUBPROCESS(1) if (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3] > *ps4_a_sot_cycle_max 
[40] SUBSUBSUBSUBPROCESS(1) if ) 
[41] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[42] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_sot_cycle_max (S4)st_g_bsm_alarm_data.afl_alarmed_target[i][3];
[43] SUBPROCESS(2) proc return; 
[44] MAINPROCESS(2) static S4 s4_bsm_chkfr_check_tos_alart_sts<start> static S4 s4_bsm_chkfr_check_tos_alart_sts( 
[45] MAINPROCESS(2) static S4 s4_bsm_chkfr_check_tos_alart_sts S4 s4_a_tos_cycle_max, 
[46] MAINPROCESS(2) static S4 s4_bsm_chkfr_check_tos_alart_sts S4 s4_a_sot_cycle_max 
[47] MAINPROCESS(2) static S4 s4_bsm_chkfr_check_tos_alart_sts ) 
[48] MAINPROCESS(2) subproc SUBPROCESS(1) 
[49] SUBPROCESS(1) proc S4 s4_t_tmp_tos_flag; 
[50] SUBPROCESS(1) proc S4 s4_t_exit; 
[51] SUBPROCESS(1) equal s4_t_exit 0;
[52] SUBPROCESS(1) equal s4_t_tmp_tos_flag 0;
[53] SUBPROCESS(1) if<start> if( 
[54] SUBPROCESS(1) if s4_a_tos_cycle_max > s4_a_sot_cycle_max 
[55] SUBPROCESS(1) if ) 
[56] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[57] SUBSUBPROCESS(1) equal s4_t_tmp_tos_flag 1;
[58] SUBPROCESS(2) if <start> if ( 
[59] SUBPROCESS(2) if  (s4_t_tmp_tos_flag==0 
[60] SUBPROCESS(2) if  ) 
[61] SUBPROCESS(2) if  &&  (st_g_bsm_loop_data.as4_flg_tos_frontline[0]==0) 
[62] SUBPROCESS(2) if  &&  (st_g_bsm_loop_data.as4_flg_tos_end[0] == 0)) 
[63] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[64] SUBSUBPROCESS(1) equal s4_t_exit 1;
[65] SUBPROCESS(3) proc return s4_t_exit; 
[66] MAINPROCESS(3) static VD fn_bsm_chkfr_check_detect_objsts<start> static VD fn_bsm_chkfr_check_detect_objsts( 
[67] MAINPROCESS(3) static VD fn_bsm_chkfr_check_detect_objsts const FL afl_a_tos_end_param[TOS_END_PARAM_SIZE], 
[68] MAINPROCESS(3) static VD fn_bsm_chkfr_check_detect_objsts S4 *ps4_a_tos_line_count, 
[69] MAINPROCESS(3) static VD fn_bsm_chkfr_check_detect_objsts S4 *ps4_a_flontline_dn_num, 
[70] MAINPROCESS(3) static VD fn_bsm_chkfr_check_detect_objsts FL *pfl_a_pow_th, 
[71] MAINPROCESS(3) static VD fn_bsm_chkfr_check_detect_objsts FL *pfl_a_frontline_pow_current, 
[72] MAINPROCESS(3) static VD fn_bsm_chkfr_check_detect_objsts S4   as4_a_frontline_doa_dn[LINE_FREQ_BIN_RANGE][1], 
[73] MAINPROCESS(3) static VD fn_bsm_chkfr_check_detect_objsts const S4 as4_a_froneline_doa_peak_num_dn[LINE_FREQ_BIN_RANGE], 
[74] MAINPROCESS(3) static VD fn_bsm_chkfr_check_detect_objsts FL afl_a_frontline_dn[LINE_FREQ_BIN_RANGE][2] 
[75] MAINPROCESS(3) static VD fn_bsm_chkfr_check_detect_objsts ) 
[76] MAINPROCESS(3) subproc SUBPROCESS(1) 
[77] SUBPROCESS(1) func<start> fn_bsm_chkfr_calc_power( 
[78] SUBPROCESS(1) func afl_a_tos_end_param, 
[79] SUBPROCESS(1) func pfl_a_pow_th 
[80] SUBPROCESS(1) func<end> ); 
[81] SUBPROCESS(1) func<start> fn_bsm_chkfr_check_distance( 
[82] SUBPROCESS(1) func afl_a_tos_end_param, 
[83] SUBPROCESS(1) func (const S4 (*)[1])as4_a_frontline_doa_dn, 
[84] SUBPROCESS(1) func as4_a_froneline_doa_peak_num_dn, 
[85] SUBPROCESS(1) func afl_a_frontline_dn 
[86] SUBPROCESS(1) func<end> ); 
[87] SUBPROCESS(1) func<start> fn_bsm_chkfr_sort( 
[88] SUBPROCESS(1) func afl_a_frontline_dn 
[89] SUBPROCESS(1) func<end> ); 
[90] SUBPROCESS(1) func<start> fn_bsm_chkfr_count_tos_line( 
[91] SUBPROCESS(1) func (const FL (*)[2])afl_a_frontline_dn, 
[92] SUBPROCESS(1) func ps4_a_flontline_dn_num, 
[93] SUBPROCESS(1) func ps4_a_tos_line_count 
[94] SUBPROCESS(1) func<end> ); 
[95] MAINPROCESS(4) static VD fn_bsm_chkfr_calc_power<start> static VD fn_bsm_chkfr_calc_power( 
[96] MAINPROCESS(4) static VD fn_bsm_chkfr_calc_power const FL afl_a_tos_end_param[TOS_END_PARAM_SIZE], 
[97] MAINPROCESS(4) static VD fn_bsm_chkfr_calc_power FL *pfl_a_pow_th 
[98] MAINPROCESS(4) static VD fn_bsm_chkfr_calc_power ) 
[99] MAINPROCESS(4) subproc SUBPROCESS(1) 
[100] SUBPROCESS(1) equal *pfl_a_pow_th afl_a_tos_end_param[4];
[101] SUBPROCESS(1) if<start> if( 
[102] SUBPROCESS(1) if st_g_bsm_loop_data.afl_tos_frontline_pow[0] != 0.0F 
[103] SUBPROCESS(1) if ) 
[104] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[105] SUBSUBPROCESS(1) if <start> if ( 
[106] SUBSUBPROCESS(1) if  *pfl_a_pow_th < (st_g_bsm_loop_data.afl_tos_frontline_pow[0] - afl_a_tos_end_param[5]) 
[107] SUBSUBPROCESS(1) if  ) 
[108] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[109] SUBSUBSUBPROCESS(1) equal *pfl_a_pow_th st_g_bsm_loop_data.afl_tos_frontline_pow[0] - afl_a_tos_end_param[5];
[110] SUBSUBSUBPROCESS(1) if<start> if( 
[111] SUBSUBSUBPROCESS(1) if *pfl_a_pow_th < afl_a_tos_end_param[1] 
[112] SUBSUBSUBPROCESS(1) if ) 
[113] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[114] SUBSUBSUBSUBPROCESS(1) equal *pfl_a_pow_th afl_a_tos_end_param[1];
[115] SUBPROCESS(2) proc return; 
[116] MAINPROCESS(5) static VD fn_bsm_chkfr_check_distance<start> static VD fn_bsm_chkfr_check_distance( 
[117] MAINPROCESS(5) static VD fn_bsm_chkfr_check_distance const FL afl_a_tos_end_param[TOS_END_PARAM_SIZE], 
[118] MAINPROCESS(5) static VD fn_bsm_chkfr_check_distance const S4 as4_a_frontline_doa_dn[LINE_FREQ_BIN_RANGE][1], 
[119] MAINPROCESS(5) static VD fn_bsm_chkfr_check_distance const S4 as4_a_froneline_doa_peak_num_dn[LINE_FREQ_BIN_RANGE], 
[120] MAINPROCESS(5) static VD fn_bsm_chkfr_check_distance FL afl_a_frontline_dn[LINE_FREQ_BIN_RANGE][2] 
[121] MAINPROCESS(5) static VD fn_bsm_chkfr_check_distance ) 
[122] MAINPROCESS(5) subproc SUBPROCESS(1) 
[123] SUBPROCESS(1) proc S4 i; 
[124] SUBPROCESS(1) proc S4 j; 
[125] SUBPROCESS(1) equal FL tmp_r 0.0F;
[126] SUBPROCESS(1) equal FL tmp_rx CFL_UNKNOWN_VALUE;
[127] SUBPROCESS(1) equal FL tmp_ry CFL_UNKNOWN_VALUE;
[128] SUBPROCESS(1) equal FL tmp_theta 0.0F;
[129] SUBPROCESS(1) for<start> for( 
[130] SUBPROCESS(1) for i=0; 
[131] SUBPROCESS(1) for i<LINE_FREQ_BIN_RANGE; 
[132] SUBPROCESS(1) for i++) 
[133] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[134] SUBSUBPROCESS(1) for<start> for( 
[135] SUBSUBPROCESS(1) for j=0; 
[136] SUBSUBPROCESS(1) for j<as4_a_froneline_doa_peak_num_dn[i]; 
[137] SUBSUBPROCESS(1) for j++) 
[138] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[139] SUBSUBSUBPROCESS(1) func<start> tmp_r = - RCOF * 2.0F * (FL)(((S4)afl_a_tos_end_param[0] + i) - (FL)NB_FFT_PT * 0.5F 
[140] SUBSUBSUBPROCESS(1) func<end> ); 
[141] SUBSUBSUBPROCESS(1) func<start> tmp_theta = fl_transform_doabin_to_rad( 
[142] SUBSUBSUBPROCESS(1) func as4_a_frontline_doa_dn[i][j], 
[143] SUBSUBSUBPROCESS(1) func 1 
[144] SUBSUBSUBPROCESS(1) func<end> ); 
[145] SUBSUBSUBPROCESS(1) equal tmp_rx tmp_r * fl_sin( tmp_theta ) + st_g_bsm_loop_data.afl_installed_angle[1];
[146] SUBSUBSUBPROCESS(1) func<start> tmp_ry = tmp_r * fl_cos( tmp_theta 
[147] SUBSUBSUBPROCESS(1) func<end> ); 
[148] SUBSUBSUBPROCESS(1) equal afl_a_frontline_dn[i][0] tmp_rx;
[149] SUBSUBSUBPROCESS(1) equal afl_a_frontline_dn[i][1] tmp_ry;
[150] SUBPROCESS(2) proc return; 
[151] MAINPROCESS(6) static VD fn_bsm_chkfr_sort<start> static VD fn_bsm_chkfr_sort( 
[152] MAINPROCESS(6) static VD fn_bsm_chkfr_sort FL afl_a_frontline_dn[LINE_FREQ_BIN_RANGE][2] 
[153] MAINPROCESS(6) static VD fn_bsm_chkfr_sort ) 
[154] MAINPROCESS(6) subproc SUBPROCESS(1) 
[155] SUBPROCESS(1) proc S4 i; 
[156] SUBPROCESS(1) proc S4 j; 
[157] SUBPROCESS(1) proc FL tmp_frontline_dn[LINE_FREQ_BIN_RANGE][2]; 
[158] SUBPROCESS(1) proc U4 sort_count; 
[159] SUBPROCESS(1) for<start> for( 
[160] SUBPROCESS(1) for i=0; 
[161] SUBPROCESS(1) for i<LINE_FREQ_BIN_RANGE; 
[162] SUBPROCESS(1) for i++) 
[163] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[164] SUBSUBPROCESS(1) for<start> for( 
[165] SUBSUBPROCESS(1) for j = 0; 
[166] SUBSUBPROCESS(1) for j < LINE_FREQ_BIN_RANGE; 
[167] SUBSUBPROCESS(1) for j++ ) 
[168] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[169] SUBSUBSUBPROCESS(1) if <start> if ( 
[170] SUBSUBSUBPROCESS(1) if  (afl_a_frontline_dn[i][0] != CFL_UNKNOWN_VALUE 
[171] SUBSUBSUBPROCESS(1) if  ) 
[172] SUBSUBSUBPROCESS(1) if  &&  (afl_a_frontline_dn[j][0] != CFL_UNKNOWN_VALUE)) 
[173] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[174] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[175] SUBSUBSUBSUBPROCESS(1) if afl_a_frontline_dn[i][0] < afl_a_frontline_dn[j][0] 
[176] SUBSUBSUBSUBPROCESS(1) if ) 
[177] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[178] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_frontline_dn[i][0] afl_a_frontline_dn[j][0];
[179] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_frontline_dn[i][1] afl_a_frontline_dn[j][1];
[180] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_frontline_dn[j][0] afl_a_frontline_dn[i][0];
[181] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_frontline_dn[j][1] afl_a_frontline_dn[i][1];
[182] SUBSUBSUBSUBSUBPROCESS(1) equal afl_a_frontline_dn[i][0] tmp_frontline_dn[i][0];
[183] SUBSUBSUBSUBSUBPROCESS(1) equal afl_a_frontline_dn[i][1] tmp_frontline_dn[i][1];
[184] SUBSUBSUBSUBSUBPROCESS(1) equal afl_a_frontline_dn[j][0] tmp_frontline_dn[j][0];
[185] SUBSUBSUBSUBSUBPROCESS(1) equal afl_a_frontline_dn[j][1] tmp_frontline_dn[j][1];
[186] SUBPROCESS(2) equal sort_count (U4)0;
[187] SUBPROCESS(2) for<start> for( 
[188] SUBPROCESS(2) for i=0; 
[189] SUBPROCESS(2) for i<LINE_FREQ_BIN_RANGE; 
[190] SUBPROCESS(2) for i++) 
[191] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[192] SUBSUBPROCESS(1) equal tmp_frontline_dn[i][0] CFL_UNKNOWN_VALUE;
[193] SUBSUBPROCESS(1) equal tmp_frontline_dn[i][1] CFL_UNKNOWN_VALUE;
[194] SUBPROCESS(3) for<start> for( 
[195] SUBPROCESS(3) for i=0; 
[196] SUBPROCESS(3) for i<LINE_FREQ_BIN_RANGE; 
[197] SUBPROCESS(3) for i++) 
[198] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[199] SUBSUBPROCESS(1) if<start> if( 
[200] SUBSUBPROCESS(1) if afl_a_frontline_dn[i][0] != CFL_UNKNOWN_VALUE 
[201] SUBSUBPROCESS(1) if ) 
[202] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[203] SUBSUBSUBPROCESS(1) equal tmp_frontline_dn[sort_count][0] afl_a_frontline_dn[i][0];
[204] SUBSUBSUBPROCESS(1) equal tmp_frontline_dn[sort_count][1] afl_a_frontline_dn[i][1];
[205] SUBSUBSUBPROCESS(1) proc sort_count++; 
[206] SUBPROCESS(4) for<start> for( 
[207] SUBPROCESS(4) for i=0; 
[208] SUBPROCESS(4) for i<LINE_FREQ_BIN_RANGE; 
[209] SUBPROCESS(4) for i++) 
[210] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[211] SUBSUBPROCESS(1) equal afl_a_frontline_dn[i][0] tmp_frontline_dn[i][0];
[212] SUBSUBPROCESS(1) equal afl_a_frontline_dn[i][1] tmp_frontline_dn[i][1];
[213] SUBPROCESS(5) proc return; 
[214] MAINPROCESS(7) static VD fn_bsm_chkfr_count_tos_line<start> static VD fn_bsm_chkfr_count_tos_line( 
[215] MAINPROCESS(7) static VD fn_bsm_chkfr_count_tos_line const FL afl_a_frontline_dn[LINE_FREQ_BIN_RANGE][2], 
[216] MAINPROCESS(7) static VD fn_bsm_chkfr_count_tos_line S4 *ps4_a_flontline_dn_num, 
[217] MAINPROCESS(7) static VD fn_bsm_chkfr_count_tos_line S4 *ps4_a_tos_line_count 
[218] MAINPROCESS(7) static VD fn_bsm_chkfr_count_tos_line ) 
[219] MAINPROCESS(7) subproc SUBPROCESS(1) 
[220] SUBPROCESS(1) proc S4 i; 
[221] SUBPROCESS(1) equal *ps4_a_flontline_dn_num 0;
[222] SUBPROCESS(1) for<start> for( 
[223] SUBPROCESS(1) for i=0; 
[224] SUBPROCESS(1) for i<LINE_FREQ_BIN_RANGE; 
[225] SUBPROCESS(1) for i++) 
[226] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[227] SUBSUBPROCESS(1) if<start> if( 
[228] SUBSUBPROCESS(1) if afl_a_frontline_dn[i][0] != CFL_UNKNOWN_VALUE 
[229] SUBSUBPROCESS(1) if ) 
[230] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[231] SUBSUBSUBPROCESS(1) proc (*ps4_a_flontline_dn_num)++; 
[232] SUBPROCESS(2) equal *ps4_a_tos_line_count 0;
[233] SUBPROCESS(2) for<start> for( 
[234] SUBPROCESS(2) for i=0; 
[235] SUBPROCESS(2) for i<LINE_FREQ_BIN_RANGE; 
[236] SUBPROCESS(2) for i++) 
[237] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[238] SUBSUBPROCESS(1) if <start> if ( 
[239] SUBSUBPROCESS(1) if  (afl_a_frontline_dn[i][1] > -0.5F 
[240] SUBSUBPROCESS(1) if  ) 
[241] SUBSUBPROCESS(1) if  &&  (afl_a_frontline_dn[i][1] < 1.0F)) 
[242] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[243] SUBSUBSUBPROCESS(1) proc (*ps4_a_tos_line_count)++; 
[244] SUBPROCESS(3) proc return; 
[245] MAINPROCESS(8) static VD fn_bsm_chkfr_check_frontline_flg<start> static VD fn_bsm_chkfr_check_frontline_flg( 
[246] MAINPROCESS(8) static VD fn_bsm_chkfr_check_frontline_flg FL fl_a_frontline_pow_current, 
[247] MAINPROCESS(8) static VD fn_bsm_chkfr_check_frontline_flg FL fl_a_pow_th, 
[248] MAINPROCESS(8) static VD fn_bsm_chkfr_check_frontline_flg S4 s4_a_flontline_dn_num, 
[249] MAINPROCESS(8) static VD fn_bsm_chkfr_check_frontline_flg S4 s4_a_tos_line_count, 
[250] MAINPROCESS(8) static VD fn_bsm_chkfr_check_frontline_flg FL afl_a_frontline_dn[LINE_FREQ_BIN_RANGE][2], 
[251] MAINPROCESS(8) static VD fn_bsm_chkfr_check_frontline_flg S4 *ps4_a_frontline_flag 
[252] MAINPROCESS(8) static VD fn_bsm_chkfr_check_frontline_flg ) 
[253] MAINPROCESS(8) subproc SUBPROCESS(1) 
[254] SUBPROCESS(1) equal *ps4_a_frontline_flag 0;
[255] SUBPROCESS(1) if<start> if( 
[256] SUBPROCESS(1) if s4_a_tos_line_count >= 3 
[257] SUBPROCESS(1) if ) 
[258] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[259] SUBSUBPROCESS(1) if <start> if ( 
[260] SUBSUBPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_tos_end[0]==0 
[261] SUBSUBPROCESS(1) if  ) 
[262] SUBSUBPROCESS(1) if  &&  ((afl_a_frontline_dn[0][1] - afl_a_frontline_dn[s4_a_flontline_dn_num-1][1]) >= -2.0F)) 
[263] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[264] SUBSUBSUBPROCESS(1) if<start> if( 
[265] SUBSUBSUBPROCESS(1) if fl_a_frontline_pow_current > fl_a_pow_th 
[266] SUBSUBSUBPROCESS(1) if ) 
[267] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[268] SUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.afl_tos_frontline_pow[0] fl_a_frontline_pow_current;
[269] SUBSUBSUBPROCESS(2) equal *ps4_a_frontline_flag (S4)CU1_TOS_END_MASK_CYCLE;
[270] SUBPROCESS(2) else<start> else 
[271] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[272] SUBSUBPROCESS(1) if<start> if( 
[273] SUBSUBPROCESS(1) if st_g_bsm_loop_data.as4_flg_tos_frontline[0]!=0 
[274] SUBSUBPROCESS(1) if ) 
[275] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[276] SUBSUBSUBPROCESS(1) equal *ps4_a_frontline_flag st_g_bsm_loop_data.as4_flg_tos_frontline[0] - (S4)1;
[277] SUBPROCESS(3) proc return; 
[278] MAINPROCESS(9) static VD fn_bsm_chkfr_check_tos_end_flg<start> static VD fn_bsm_chkfr_check_tos_end_flg( 
[279] MAINPROCESS(9) static VD fn_bsm_chkfr_check_tos_end_flg const FL afl_a_tos_end_param[TOS_END_PARAM_SIZE], 
[280] MAINPROCESS(9) static VD fn_bsm_chkfr_check_tos_end_flg FL fl_a_frontline_pow_current, 
[281] MAINPROCESS(9) static VD fn_bsm_chkfr_check_tos_end_flg S4 *ps4_a_tos_end_flag 
[282] MAINPROCESS(9) static VD fn_bsm_chkfr_check_tos_end_flg ) 
[283] MAINPROCESS(9) subproc SUBPROCESS(1) 
[284] SUBPROCESS(1) if<start> if( 
[285] SUBPROCESS(1) if st_g_bsm_loop_data.as4_flg_tos_end[0] == 0 
[286] SUBPROCESS(1) if ) 
[287] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[288] SUBSUBPROCESS(1) if<start> if( 
[289] SUBSUBPROCESS(1) if st_g_bsm_loop_data.afl_tos_frontline_pow[0] != 0.0F 
[290] SUBSUBPROCESS(1) if ) 
[291] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[292] SUBSUBSUBPROCESS(1) if <start> if ( 
[293] SUBSUBSUBPROCESS(1) if  (st_g_bsm_loop_data.afl_tos_frontline_pow[0] - fl_a_frontline_pow_current) > afl_a_tos_end_param[2] 
[294] SUBSUBSUBPROCESS(1) if  ) 
[295] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[296] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_tos_end_flag 1;
[297] SUBPROCESS(2) else<start> else 
[298] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[299] SUBSUBPROCESS(1) equal *ps4_a_tos_end_flag st_g_bsm_loop_data.as4_flg_tos_end[0] + (S4)1;
[300] SUBPROCESS(3) if<start> if( 
[301] SUBPROCESS(3) if *ps4_a_tos_end_flag > (S4)CU1_TOS_END_MASK_CYCLE 
[302] SUBPROCESS(3) if ) 
[303] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[304] SUBSUBPROCESS(1) equal *ps4_a_tos_end_flag 0;
[305] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.afl_tos_frontline_pow[0] 0.0F;
[306] SUBPROCESS(4) proc return; 
[307] MAINPROCESS(10) S4 s4_delete_tos_end<start> S4 s4_delete_tos_end( 
[308] MAINPROCESS(10) S4 s4_delete_tos_end S4 target_num, 
[309] MAINPROCESS(10) S4 s4_delete_tos_end S4 Tx_int[TARGET_BUFFSIZE][NORM_INT], 
[310] MAINPROCESS(10) S4 s4_delete_tos_end FL Tx_float[TARGET_BUFFSIZE][TGT_FLT], 
[311] MAINPROCESS(10) S4 s4_delete_tos_end const FL tos_end_param[TOS_END_PARAM_SIZE] 
[312] MAINPROCESS(10) S4 s4_delete_tos_end ) 
[313] MAINPROCESS(10) subproc SUBPROCESS(1) 
[314] SUBPROCESS(1) equal S4 iret target_num;
[315] SUBPROCESS(1) proc U1 u1_t_jdg_g13_flg; 
[316] SUBPROCESS(1) func<start> u1_t_jdg_g13_flg = u1_delete_tos_end_g13(st_g_bsm_loop_data.as4_flg_passing[0] 
[317] SUBPROCESS(1) func<end> ); 
[318] SUBPROCESS(1) if <start> if ( 
[319] SUBPROCESS(1) if  (st_g_bsm_loop_data.as4_flg_tos_end[0] > 1 
[320] SUBPROCESS(1) if  ) 
[321] SUBPROCESS(1) if  ||  ((st_g_bsm_loop_data.as4_slow_sot_find[1] > WALL_REJECT_TH1) 
[322] SUBPROCESS(1) if  &&   (st_g_bsm_loop_data.as4_flg_passing[0] <= PASSING_COUNT_MIN)) 
[323] SUBPROCESS(1) if  ||  ((st_g_bsm_loop_data.as4_slow_sot_find[1] > (S4)CU1_WALL_REJECT_TH2) 
[324] SUBPROCESS(1) if  &&   (u1_t_jdg_g13_flg == CU1_TRUE))) 
[325] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[326] SUBSUBPROCESS(1) func<start> fn_bsm_deltos_delete_tx( 
[327] SUBSUBPROCESS(1) func tos_end_param, 
[328] SUBSUBPROCESS(1) func &iret, 
[329] SUBSUBPROCESS(1) func Tx_int, 
[330] SUBSUBPROCESS(1) func Tx_float 
[331] SUBSUBPROCESS(1) func<end> ); 
[332] SUBSUBPROCESS(1) func<start> fn_bsm_deltos_delete_normal(tos_end_param 
[333] SUBSUBPROCESS(1) func<end> ); 
[334] SUBSUBPROCESS(1) func<start> fn_bsm_deltos_delete_target(tos_end_param 
[335] SUBSUBPROCESS(1) func<end> ); 
[336] SUBSUBPROCESS(1) func<start> fn_init(&st_g_bsm_loop_data.ast_normal_sot[0], 1 
[337] SUBSUBPROCESS(1) func<end> ); 
[338] SUBPROCESS(2) proc return iret; 
[339] MAINPROCESS(11) static U1 u1_delete_tos_end_g13<start> static U1 u1_delete_tos_end_g13( 
[340] MAINPROCESS(11) static U1 u1_delete_tos_end_g13 S4 s4_a_passing_flg 
[341] MAINPROCESS(11) static U1 u1_delete_tos_end_g13 ) 
[342] MAINPROCESS(11) subproc SUBPROCESS(1) 
[343] SUBPROCESS(1) proc U1 u1_t_jdg_g13_flag; 
[344] SUBPROCESS(1) equal u1_t_jdg_g13_flag CU1_FALSE;
[345] SUBPROCESS(1) if <start> if ( 
[346] SUBPROCESS(1) if  s4_a_passing_flg <= (S4)100 
[347] SUBPROCESS(1) if  ) 
[348] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[349] SUBSUBPROCESS(1) equal u1_t_jdg_g13_flag CU1_TRUE;
[350] SUBPROCESS(2) else<start> else 
[351] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[352] SUBSUBPROCESS(1) equal u1_t_jdg_g13_flag CU1_FALSE;
[353] SUBPROCESS(3) if <start> if ( 
[354] SUBPROCESS(3) if  s4_a_passing_flg <= (S4)50 
[355] SUBPROCESS(3) if  ) 
[356] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[357] SUBSUBPROCESS(1) equal u1_t_jdg_g13_flag CU1_TRUE;
[358] SUBPROCESS(4) else<start> else 
[359] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[360] SUBSUBPROCESS(1) equal u1_t_jdg_g13_flag CU1_FALSE;
[361] SUBPROCESS(5) proc return u1_t_jdg_g13_flag; 
[362] MAINPROCESS(12) static VD fn_bsm_deltos_delete_tx<start> static VD fn_bsm_deltos_delete_tx( 
[363] MAINPROCESS(12) static VD fn_bsm_deltos_delete_tx const FL afl_a_tos_end_param[TOS_END_PARAM_SIZE], 
[364] MAINPROCESS(12) static VD fn_bsm_deltos_delete_tx S4 *ps4_a_final_target_num, 
[365] MAINPROCESS(12) static VD fn_bsm_deltos_delete_tx S4  as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT], 
[366] MAINPROCESS(12) static VD fn_bsm_deltos_delete_tx FL afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
[367] MAINPROCESS(12) static VD fn_bsm_deltos_delete_tx ) 
[368] MAINPROCESS(12) subproc SUBPROCESS(1) 
[369] SUBPROCESS(1) proc S4 i; 
[370] SUBPROCESS(1) for<start> for( 
[371] SUBPROCESS(1) for i=0; 
[372] SUBPROCESS(1) for i<*ps4_a_final_target_num; 
[373] SUBPROCESS(1) for i++) 
[374] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[375] SUBSUBPROCESS(1) if<start> if( 
[376] SUBSUBPROCESS(1) if afl_a_Tx_float[i][7] > afl_a_tos_end_param[3] 
[377] SUBSUBPROCESS(1) if ) 
[378] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[379] SUBSUBSUBPROCESS(1) func<start> s4_initialize_specified_Tx_data( 
[380] SUBSUBSUBPROCESS(1) func as4_a_Tx_int, 
[381] SUBSUBSUBPROCESS(1) func afl_a_Tx_float, 
[382] SUBSUBSUBPROCESS(1) func i 
[383] SUBSUBSUBPROCESS(1) func<end> ); 
[384] SUBSUBPROCESS(2) if <start> if ( 
[385] SUBSUBPROCESS(2) if  (afl_a_Tx_float[i][7] > (afl_a_tos_end_param[3] - TOS_END_ADDITIONAL_RANGE_2F_TGT) 
[386] SUBSUBPROCESS(2) if  ) 
[387] SUBSUBPROCESS(2) if  &&  (as4_a_Tx_int[i][14] == OBJECT_TYPE_2F)) 
[388] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[389] SUBSUBSUBPROCESS(1) func<start> s4_initialize_specified_Tx_data( 
[390] SUBSUBSUBPROCESS(1) func as4_a_Tx_int, 
[391] SUBSUBSUBPROCESS(1) func afl_a_Tx_float, 
[392] SUBSUBSUBPROCESS(1) func i 
[393] SUBSUBSUBPROCESS(1) func<end> ); 
[394] SUBPROCESS(2) func<start> *ps4_a_final_target_num = s4_trim_Tx_data( 
[395] SUBPROCESS(2) func as4_a_Tx_int, 
[396] SUBPROCESS(2) func afl_a_Tx_float 
[397] SUBPROCESS(2) func<end> ); 
[398] SUBPROCESS(2) proc return; 
[399] MAINPROCESS(13) static VD fn_bsm_deltos_delete_normal<start> static VD fn_bsm_deltos_delete_normal( 
[400] MAINPROCESS(13) static VD fn_bsm_deltos_delete_normal const FL afl_a_tos_end_param[TOS_END_PARAM_SIZE] 
[401] MAINPROCESS(13) static VD fn_bsm_deltos_delete_normal ) 
[402] MAINPROCESS(13) subproc SUBPROCESS(1) 
[403] SUBPROCESS(1) proc S4 i; 
[404] SUBPROCESS(1) for<start> for( 
[405] SUBPROCESS(1) for i=0; 
[406] SUBPROCESS(1) for i<st_g_bsm_loop_data.as4_buf_pair_num[0]; 
[407] SUBPROCESS(1) for i++) 
[408] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[409] SUBSUBPROCESS(1) if<start> if( 
[410] SUBSUBPROCESS(1) if st_g_bsm_loop_data.ast_normal[i].fl_Ryfil > afl_a_tos_end_param[3] 
[411] SUBSUBPROCESS(1) if ) 
[412] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[413] SUBSUBSUBPROCESS(1) func<start> fn_init(&st_g_bsm_loop_data.ast_normal[i], 1 
[414] SUBSUBSUBPROCESS(1) func<end> ); 
[415] SUBSUBPROCESS(2) if <start> if ( 
[416] SUBSUBPROCESS(2) if  (st_g_bsm_loop_data.ast_normal[i].fl_Ryfil > (afl_a_tos_end_param[3] - TOS_END_ADDITIONAL_RANGE_2F_NRM) 
[417] SUBSUBPROCESS(2) if  ) 
[418] SUBSUBPROCESS(2) if  &&  (st_g_bsm_loop_data.ast_normal[i].s4_flg_dc == OBJECT_TYPE_2F)) 
[419] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[420] SUBSUBSUBPROCESS(1) func<start> fn_init(&st_g_bsm_loop_data.ast_normal[i], 1 
[421] SUBSUBSUBPROCESS(1) func<end> ); 
[422] SUBSUBPROCESS(3) if <start> if ( 
[423] SUBSUBPROCESS(3) if  (st_g_bsm_loop_data.ast_normal[i].fl_Ryfil > (afl_a_tos_end_param[3] - 1.0F) 
[424] SUBSUBPROCESS(3) if  ) 
[425] SUBSUBPROCESS(3) if  &&  (st_g_bsm_loop_data.ast_normal[i].s4_flg_lost != 0)) 
[426] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[427] SUBSUBSUBPROCESS(1) func<start> fn_init(&st_g_bsm_loop_data.ast_normal[i], 1 
[428] SUBSUBSUBPROCESS(1) func<end> ); 
[429] SUBPROCESS(2) func<start> st_g_bsm_loop_data.as4_buf_pair_num[0] = s4_trim_normal(st_g_bsm_loop_data.ast_normal 
[430] SUBPROCESS(2) func<end> ); 
[431] SUBPROCESS(2) proc return; 
[432] MAINPROCESS(14) static VD fn_bsm_deltos_delete_target<start> static VD fn_bsm_deltos_delete_target( 
[433] MAINPROCESS(14) static VD fn_bsm_deltos_delete_target const FL afl_a_tos_end_param[TOS_END_PARAM_SIZE] 
[434] MAINPROCESS(14) static VD fn_bsm_deltos_delete_target ) 
[435] MAINPROCESS(14) subproc SUBPROCESS(1) 
[436] SUBPROCESS(1) proc S4 i; 
[437] SUBPROCESS(1) for<start> for( 
[438] SUBPROCESS(1) for i=0; 
[439] SUBPROCESS(1) for i<st_g_bsm_loop_data.as4_buf_pair_num[1]; 
[440] SUBPROCESS(1) for i++) 
[441] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[442] SUBSUBPROCESS(1) if<start> if( 
[443] SUBSUBPROCESS(1) if st_g_bsm_loop_data.ast_target[i].fl_Ryfil > afl_a_tos_end_param[3] 
[444] SUBSUBPROCESS(1) if ) 
[445] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[446] SUBSUBSUBPROCESS(1) func<start> fn_init(&st_g_bsm_loop_data.ast_target[i], 1 
[447] SUBSUBSUBPROCESS(1) func<end> ); 
[448] SUBSUBPROCESS(2) if <start> if ( 
[449] SUBSUBPROCESS(2) if  (st_g_bsm_loop_data.ast_target[i].fl_Ryfil > (afl_a_tos_end_param[3] - TOS_END_ADDITIONAL_RANGE_2F_TGT) 
[450] SUBSUBPROCESS(2) if  ) 
[451] SUBSUBPROCESS(2) if  &&  (st_g_bsm_loop_data.ast_target[i].s4_flg_dc == OBJECT_TYPE_2F)) 
[452] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[453] SUBSUBSUBPROCESS(1) func<start> fn_init(&st_g_bsm_loop_data.ast_target[i], 1 
[454] SUBSUBSUBPROCESS(1) func<end> ); 
[455] SUBPROCESS(2) func<start> st_g_bsm_loop_data.as4_buf_pair_num[1] = s4_trim_target(st_g_bsm_loop_data.ast_target 
[456] SUBPROCESS(2) func<end> ); 
[457] SUBPROCESS(2) proc return; 
[458] MAINPROCESS(15) S4 s4_alarm_bsm2<start> S4 s4_alarm_bsm2( 
[459] MAINPROCESS(15) S4 s4_alarm_bsm2 S4 s4_a_final_target_num, 
[460] MAINPROCESS(15) S4 s4_alarm_bsm2 S4 as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT], 
[461] MAINPROCESS(15) S4 s4_alarm_bsm2 FL afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT], 
[462] MAINPROCESS(15) S4 s4_alarm_bsm2 U1 u1_a_alarming_flg, 
[463] MAINPROCESS(15) S4 s4_alarm_bsm2 const FL afl_a_tos_end_param[TOS_END_PARAM_SIZE], 
[464] MAINPROCESS(15) S4 s4_alarm_bsm2 FL fl_a_frontline_pow, 
[465] MAINPROCESS(15) S4 s4_alarm_bsm2 S4 as4_a_frontline_doa_dn[LINE_FREQ_BIN_RANGE][1], 
[466] MAINPROCESS(15) S4 s4_alarm_bsm2 const S4 as4_a_froneline_doa_peak_num_dn[LINE_FREQ_BIN_RANGE] 
[467] MAINPROCESS(15) S4 s4_alarm_bsm2 ) 
[468] MAINPROCESS(15) subproc SUBPROCESS(1) 
[469] SUBPROCESS(1) equal S4 iret 0;
[470] SUBPROCESS(1) equal S4 not_alarm 0;
[471] SUBPROCESS(1) proc FL tmp_alarmed_target[TARGET_BUFFSIZE][ALARM_INFO_SIZE]; 
[472] SUBPROCESS(1) proc S4 tmp_alarmed_num[1]; 
[473] SUBPROCESS(1) proc S4 tmp_checked_target[TARGET_BUFFSIZE]; 
[474] SUBPROCESS(1) proc S4 tmp_checked_alarmed[TARGET_BUFFSIZE]; 
[475] SUBPROCESS(1) proc S4 tos_flg; 
[476] SUBPROCESS(1) proc FL fl_t_alarm_area_y_min; 
[477] SUBPROCESS(1) proc U1 u1_t_lp_num_target; 
[478] SUBPROCESS(1) proc S4 i; 
[479] SUBPROCESS(1) func<start> fn_initialize_alarm_info(tmp_alarmed_target 
[480] SUBPROCESS(1) func<end> ); 
[481] SUBPROCESS(1) equal tmp_alarmed_num[0] 0;
[482] SUBPROCESS(1) for <start> for ( 
[483] SUBPROCESS(1) for  u1_t_lp_num_target = (U1)0; 
[484] SUBPROCESS(1) for  u1_t_lp_num_target < (U1)TARGET_BUFFSIZE; 
[485] SUBPROCESS(1) for  u1_t_lp_num_target++) 
[486] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[487] SUBSUBPROCESS(1) equal tmp_checked_target[u1_t_lp_num_target] (S4)0;
[488] SUBSUBPROCESS(1) equal tmp_checked_alarmed[u1_t_lp_num_target] (S4)0;
[489] SUBPROCESS(2) equal fl_t_alarm_area_y_min CFL_ALARM_Y_BACKWARD;
[490] SUBPROCESS(2) if <start> if ( 
[491] SUBPROCESS(2) if  (u1_a_alarming_flg == (U1)0 
[492] SUBPROCESS(2) if  ) 
[493] SUBPROCESS(2) if  &&  (st_g_bsm_loop_data.as4_flg_tos_end[0] == (S4)0)) 
[494] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[495] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.as4_flg_tos_frontline[0] (S4)0;
[496] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.afl_tos_frontline_pow[0] (FL)0.0F;
[497] SUBPROCESS(3) if <start> if ( 
[498] SUBPROCESS(3) if  (st_g_bsm_loop_data.u1_truck_flg == (U1)0 
[499] SUBPROCESS(3) if  ) 
[500] SUBPROCESS(3) if  &&  (st_g_bsm_loop_data.as4_slow_sot_find[0] == (S4)0)) 
[501] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[502] SUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.as4_flg_tos_end[0] = s4_check_front_1m_line(afl_a_tos_end_param, 
[503] SUBSUBPROCESS(1) func fl_a_frontline_pow, 
[504] SUBSUBPROCESS(1) func as4_a_frontline_doa_dn, 
[505] SUBSUBPROCESS(1) func as4_a_froneline_doa_peak_num_dn 
[506] SUBSUBPROCESS(1) func<end> ); 
[507] SUBPROCESS(4) func<start> st_g_bsm_loop_data.s4_final_target_num = s4_delete_tos_end(st_g_bsm_loop_data.s4_final_target_num, 
[508] SUBPROCESS(4) func as4_a_Tx_int, 
[509] SUBPROCESS(4) func afl_a_Tx_float, 
[510] SUBPROCESS(4) func afl_a_tos_end_param 
[511] SUBPROCESS(4) func<end> ); 
[512] SUBPROCESS(4) func<start> fn_drv_time_chk(34, &au2_g_bsm_check_tmr[34] 
[513] SUBPROCESS(4) func<end> ); 
[514] SUBPROCESS(4) func<start> fn_bsm_alart_long_fa_cancel_main(u1_a_alarming_flg, as4_a_Tx_int, afl_a_Tx_float 
[515] SUBPROCESS(4) func<end> ); 
[516] SUBPROCESS(4) func<start> fn_bsm_alart_check_active( 
[517] SUBPROCESS(4) func &not_alarm, &fl_t_alarm_area_y_min, (const S4 (*)[NORM_INT])as4_a_Tx_int, (const FL (*)[TGT_FLT])afl_a_Tx_float 
[518] SUBPROCESS(4) func<end> ); 
[519] SUBPROCESS(4) func<start> fn_bsm_alart_check_cont_altobj( 
[520] SUBPROCESS(4) func s4_a_final_target_num, 
[521] SUBPROCESS(4) func as4_a_Tx_int, 
[522] SUBPROCESS(4) func afl_a_Tx_float, 
[523] SUBPROCESS(4) func tmp_checked_target, 
[524] SUBPROCESS(4) func tmp_checked_alarmed, 
[525] SUBPROCESS(4) func tmp_alarmed_num, 
[526] SUBPROCESS(4) func tmp_alarmed_target, 
[527] SUBPROCESS(4) func &tos_flg, 
[528] SUBPROCESS(4) func &iret 
[529] SUBPROCESS(4) func<end> ); 
[530] SUBPROCESS(4) func<start> fn_bsm_alart_check_exp_altobj( 
[531] SUBPROCESS(4) func tmp_checked_alarmed, 
[532] SUBPROCESS(4) func tmp_alarmed_num, 
[533] SUBPROCESS(4) func tmp_alarmed_target, 
[534] SUBPROCESS(4) func &iret 
[535] SUBPROCESS(4) func<end> ); 
[536] SUBPROCESS(4) func<start> fn_bsm_alart_check_new_altobj( 
[537] SUBPROCESS(4) func s4_a_final_target_num, 
[538] SUBPROCESS(4) func as4_a_Tx_int, 
[539] SUBPROCESS(4) func afl_a_Tx_float, 
[540] SUBPROCESS(4) func (const S4 (*))tmp_checked_target, 
[541] SUBPROCESS(4) func tos_flg, 
[542] SUBPROCESS(4) func tmp_alarmed_num, 
[543] SUBPROCESS(4) func tmp_alarmed_target, 
[544] SUBPROCESS(4) func fl_t_alarm_area_y_min, 
[545] SUBPROCESS(4) func &iret 
[546] SUBPROCESS(4) func<end> ); 
[547] SUBPROCESS(4) func<start> fn_bsm_alart_set_alart_target( 
[548] SUBPROCESS(4) func (const S4 (*))tmp_alarmed_num, 
[549] SUBPROCESS(4) func (const FL (*)[ALARM_INFO_SIZE])tmp_alarmed_target 
[550] SUBPROCESS(4) func<end> ); 
[551] SUBPROCESS(4) func<start> fn_bsm_alart_extend_alart( 
[552] SUBPROCESS(4) func tos_flg, 
[553] SUBPROCESS(4) func not_alarm, 
[554] SUBPROCESS(4) func &iret 
[555] SUBPROCESS(4) func<end> ); 
[556] SUBPROCESS(4) for<start> for( 
[557] SUBPROCESS(4) for i=0; 
[558] SUBPROCESS(4) for i<TARGET_BUFFSIZE; 
[559] SUBPROCESS(4) for i++) 
[560] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[561] SUBSUBPROCESS(1) equal afl_g_alarmed_target_position[i][0] tmp_alarmed_target[i][0];
[562] SUBSUBPROCESS(1) equal afl_g_alarmed_target_position[i][1] tmp_alarmed_target[i][1];
[563] SUBPROCESS(5) proc return iret; 
[564] MAINPROCESS(16) VD fn_bsm_alart_long_fa_cancel_main<start> VD fn_bsm_alart_long_fa_cancel_main( 
[565] MAINPROCESS(16) VD fn_bsm_alart_long_fa_cancel_main U1 u1_a_alarming_flg, 
[566] MAINPROCESS(16) VD fn_bsm_alart_long_fa_cancel_main S4 as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT], 
[567] MAINPROCESS(16) VD fn_bsm_alart_long_fa_cancel_main FL afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT]) 
[568] MAINPROCESS(16) subproc SUBPROCESS(1) 
[569] SUBPROCESS(1) proc FL fl_t_delete_area; 
[570] SUBPROCESS(1) proc U1 u1_t_flg_obj_delete; 
[571] SUBPROCESS(1) func<start> fn_bsm_alart_long_fa_monitoring_target(u1_a_alarming_flg 
[572] SUBPROCESS(1) func<end> ); 
[573] SUBPROCESS(1) func<start> fn_bsm_alart_long_fa_set_delete_area(&fl_t_delete_area, &u1_t_flg_obj_delete 
[574] SUBPROCESS(1) func<end> ); 
[575] SUBPROCESS(1) func<start> fn_bsm_alart_long_fa_delete_obj(fl_t_delete_area, u1_t_flg_obj_delete, as4_a_Tx_int, afl_a_Tx_float 
[576] SUBPROCESS(1) func<end> ); 
[577] SUBPROCESS(1) proc return; 
[578] MAINPROCESS(17) VD fn_bsm_alart_long_fa_monitoring_target<start> VD fn_bsm_alart_long_fa_monitoring_target( 
[579] MAINPROCESS(17) VD fn_bsm_alart_long_fa_monitoring_target U1 u1_a_alarming_flg 
[580] MAINPROCESS(17) VD fn_bsm_alart_long_fa_monitoring_target ) 
[581] MAINPROCESS(17) subproc SUBPROCESS(1) 
[582] SUBPROCESS(1) proc U4 u4_t_lp_target; 
[583] SUBPROCESS(1) proc U4 u4_t_lp_max_target_num; 
[584] SUBPROCESS(1) if <start> if ( 
[585] SUBPROCESS(1) if  st_g_bsm_loop_data.as4_buf_pair_num[1] > (S4)TARGET_BUFFSIZE 
[586] SUBPROCESS(1) if  ) 
[587] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[588] SUBSUBPROCESS(1) equal u4_t_lp_max_target_num (U4)TARGET_BUFFSIZE;
[589] SUBPROCESS(2) else<start> else 
[590] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[591] SUBSUBPROCESS(1) equal u4_t_lp_max_target_num (U4)st_g_bsm_loop_data.as4_buf_pair_num[1];
[592] SUBPROCESS(3) if <start> if ( 
[593] SUBPROCESS(3) if  (u1_a_alarming_flg == (U1)1 
[594] SUBPROCESS(3) if  ) 
[595] SUBPROCESS(3) if  &&	(st_g_bsm_loop_data.u1_wall_flg_for_fa_judgement == (U1)1)) 
[596] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[597] SUBSUBPROCESS(1) for <start> for ( 
[598] SUBSUBPROCESS(1) for  u4_t_lp_target = (U4)0; 
[599] SUBSUBPROCESS(1) for  u4_t_lp_target < u4_t_lp_max_target_num; 
[600] SUBSUBPROCESS(1) for  u4_t_lp_target++) 
[601] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[602] SUBSUBSUBPROCESS(1) if <start> if ( 
[603] SUBSUBSUBPROCESS(1) if  ((st_g_bsm_loop_data.ast_target[u4_t_lp_target].fl_Ryfil > CFL_FA_MONITORING_AREA 
[604] SUBSUBSUBPROCESS(1) if  ) 
[605] SUBSUBSUBPROCESS(1) if  &&	 (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[4] < (S4)80) 
[606] SUBSUBSUBPROCESS(1) if  &&	 (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[5] < (S4)80)) 
[607] SUBSUBSUBPROCESS(1) if  ||	(st_g_bsm_loop_data.ast_target[u4_t_lp_target].fl_Ryfil > (FL)200.0F)) 
[608] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[609] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[610] SUBSUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.ast_target[u4_t_lp_target].u4_ctr_fa >= (U4)125 
[611] SUBSUBSUBSUBPROCESS(1) if  ) 
[612] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[613] SUBSUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.ast_target[u4_t_lp_target].u4_ctr_fa (U4)125;
[614] SUBSUBSUBSUBPROCESS(2) else<start> else 
[615] SUBSUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[616] SUBSUBSUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.ast_target[u4_t_lp_target].u4_ctr_fa++; 
[617] SUBSUBSUBPROCESS(2) else if <start> else if ( 
[618] SUBSUBSUBPROCESS(2) else if  (st_g_bsm_loop_data.u1_flg_heisou_car == (U1)0 
[619] SUBSUBSUBPROCESS(2) else if  ) 
[620] SUBSUBSUBPROCESS(2) else if  &&  (st_g_bsm_loop_data.ast_target[u4_t_lp_target].fl_Ryfil > CFL_FA_MONITORING_AREA) 
[621] SUBSUBSUBPROCESS(2) else if  &&  ((st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[4] < (S4)80) 
[622] SUBSUBSUBPROCESS(2) else if  ||   (st_g_bsm_loop_data.as4_slow_sot_doa_diff_sum[5] < (S4)80))) 
[623] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[624] SUBSUBSUBSUBPROCESS(1) if <start> if ( 
[625] SUBSUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.ast_target[u4_t_lp_target].u4_ctr_fa > (U4)0 
[626] SUBSUBSUBSUBPROCESS(1) if  ) 
[627] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[628] SUBSUBSUBSUBSUBPROCESS(1) proc st_g_bsm_loop_data.ast_target[u4_t_lp_target].u4_ctr_fa--; 
[629] SUBSUBSUBPROCESS(3) else<start> else 
[630] SUBSUBSUBPROCESS(3) subproc SUBSUBSUBSUBPROCESS(1) 
[631] SUBSUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.ast_target[u4_t_lp_target].u4_ctr_fa (U4)0;
[632] SUBPROCESS(4) else<start> else 
[633] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[634] SUBSUBPROCESS(1) for <start> for ( 
[635] SUBSUBPROCESS(1) for  u4_t_lp_target = (U4)0; 
[636] SUBSUBPROCESS(1) for  u4_t_lp_target < (U4)TARGET_BUFFSIZE; 
[637] SUBSUBPROCESS(1) for  u4_t_lp_target++) 
[638] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[639] SUBSUBSUBPROCESS(1) equal st_g_bsm_loop_data.ast_target[u4_t_lp_target].u4_ctr_fa (U4)0;
[640] SUBPROCESS(5) proc return; 
[641] MAINPROCESS(18) VD fn_bsm_alart_long_fa_set_delete_area<start> VD fn_bsm_alart_long_fa_set_delete_area( 
[642] MAINPROCESS(18) VD fn_bsm_alart_long_fa_set_delete_area FL* pfl_a_delete_area, U1* pu1_a_flg_obj_delete 
[643] MAINPROCESS(18) VD fn_bsm_alart_long_fa_set_delete_area ) 
[644] MAINPROCESS(18) subproc SUBPROCESS(1) 
[645] SUBPROCESS(1) proc U4 u4_t_lp_target; 
[646] SUBPROCESS(1) proc U4 u4_t_ctr_fa_max; 
[647] SUBPROCESS(1) proc FL fl_t_delete_area; 
[648] SUBPROCESS(1) proc U1 u1_t_flg_obj_delete; 
[649] SUBPROCESS(1) equal u1_t_flg_obj_delete CU1_DF_OFF;
[650] SUBPROCESS(1) equal u4_t_ctr_fa_max (U4)0;
[651] SUBPROCESS(1) for <start> for ( 
[652] SUBPROCESS(1) for  u4_t_lp_target = (U4)0; 
[653] SUBPROCESS(1) for  u4_t_lp_target < (U4)TARGET_BUFFSIZE; 
[654] SUBPROCESS(1) for  u4_t_lp_target++) 
[655] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[656] SUBSUBPROCESS(1) if <start> if ( 
[657] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.ast_target[u4_t_lp_target].u4_ctr_fa > u4_t_ctr_fa_max 
[658] SUBSUBPROCESS(1) if  ) 
[659] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[660] SUBSUBSUBPROCESS(1) equal u4_t_ctr_fa_max st_g_bsm_loop_data.ast_target[u4_t_lp_target].u4_ctr_fa;
[661] SUBPROCESS(2) if <start> if ( 
[662] SUBPROCESS(2) if  u4_t_ctr_fa_max > (U4)CU1_TH_FA_DELETE_CYCLE 
[663] SUBPROCESS(2) if  ) 
[664] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[665] SUBSUBPROCESS(1) equal fl_t_delete_area CFL_FA_DELETE_AREA;
[666] SUBSUBPROCESS(1) equal u1_t_flg_obj_delete CU1_DF_ON;
[667] SUBPROCESS(3) else<start> else 
[668] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[669] SUBSUBPROCESS(1) equal fl_t_delete_area (FL)100.0F;
[670] SUBSUBPROCESS(1) equal u1_t_flg_obj_delete CU1_DF_OFF;
[671] SUBPROCESS(4) equal *pfl_a_delete_area fl_t_delete_area;
[672] SUBPROCESS(4) equal *pu1_a_flg_obj_delete u1_t_flg_obj_delete;
[673] SUBPROCESS(4) proc return; 
[674] MAINPROCESS(19) VD fn_bsm_alart_long_fa_delete_obj<start> VD fn_bsm_alart_long_fa_delete_obj( 
[675] MAINPROCESS(19) VD fn_bsm_alart_long_fa_delete_obj FL fl_a_delete_area, 
[676] MAINPROCESS(19) VD fn_bsm_alart_long_fa_delete_obj U1 u1_a_flg_obj_delete, 
[677] MAINPROCESS(19) VD fn_bsm_alart_long_fa_delete_obj S4 as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT], 
[678] MAINPROCESS(19) VD fn_bsm_alart_long_fa_delete_obj FL afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT]) 
[679] MAINPROCESS(19) subproc SUBPROCESS(1) 
[680] SUBPROCESS(1) proc U4 u4_t_lp_target; 
[681] SUBPROCESS(1) proc U4 u4_t_lp_final_target; 
[682] SUBPROCESS(1) proc U4 u4_t_lp_normal; 
[683] SUBPROCESS(1) proc U4 u4_t_lp_max_target_num; 
[684] SUBPROCESS(1) proc U4 u4_t_lp_max_final_target_num; 
[685] SUBPROCESS(1) proc U4 u4_t_lp_max_normal_num; 
[686] SUBPROCESS(1) if <start> if ( 
[687] SUBPROCESS(1) if  st_g_bsm_loop_data.as4_buf_pair_num[1] > (S4)TARGET_BUFFSIZE 
[688] SUBPROCESS(1) if  ) 
[689] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[690] SUBSUBPROCESS(1) equal u4_t_lp_max_target_num (U4)TARGET_BUFFSIZE;
[691] SUBPROCESS(2) else<start> else 
[692] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[693] SUBSUBPROCESS(1) equal u4_t_lp_max_target_num (U4)st_g_bsm_loop_data.as4_buf_pair_num[1];
[694] SUBPROCESS(3) if <start> if ( 
[695] SUBPROCESS(3) if  st_g_bsm_loop_data.s4_final_target_num > (S4)TARGET_BUFFSIZE 
[696] SUBPROCESS(3) if  ) 
[697] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[698] SUBSUBPROCESS(1) equal u4_t_lp_max_final_target_num (U4)TARGET_BUFFSIZE;
[699] SUBPROCESS(4) else<start> else 
[700] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[701] SUBSUBPROCESS(1) equal u4_t_lp_max_final_target_num (U4)st_g_bsm_loop_data.s4_final_target_num;
[702] SUBPROCESS(5) if <start> if ( 
[703] SUBPROCESS(5) if  st_g_bsm_loop_data.as4_buf_pair_num[0] > (S4)NORMAL_BUFFSIZE 
[704] SUBPROCESS(5) if  ) 
[705] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[706] SUBSUBPROCESS(1) equal u4_t_lp_max_normal_num (U4)NORMAL_BUFFSIZE;
[707] SUBPROCESS(6) else<start> else 
[708] SUBPROCESS(6) subproc SUBSUBPROCESS(1) 
[709] SUBSUBPROCESS(1) equal u4_t_lp_max_normal_num (U4)st_g_bsm_loop_data.as4_buf_pair_num[0];
[710] SUBPROCESS(7) if <start> if ( 
[711] SUBPROCESS(7) if  u1_a_flg_obj_delete == CU1_DF_ON 
[712] SUBPROCESS(7) if  ) 
[713] SUBPROCESS(7) subproc SUBSUBPROCESS(1) 
[714] SUBSUBPROCESS(1) for <start> for ( 
[715] SUBSUBPROCESS(1) for  u4_t_lp_target = (U4)0; 
[716] SUBSUBPROCESS(1) for  u4_t_lp_target < u4_t_lp_max_target_num; 
[717] SUBSUBPROCESS(1) for  u4_t_lp_target++) 
[718] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[719] SUBSUBSUBPROCESS(1) if <start> if ( 
[720] SUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.ast_target[u4_t_lp_target].fl_Ryfil > fl_a_delete_area 
[721] SUBSUBSUBPROCESS(1) if  ) 
[722] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[723] SUBSUBSUBSUBPROCESS(1) func<start> fn_init(&st_g_bsm_loop_data.ast_target[u4_t_lp_target], (S4)1 
[724] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[725] SUBSUBPROCESS(2) func<start> st_g_bsm_loop_data.as4_buf_pair_num[1] = s4_trim_target(st_g_bsm_loop_data.ast_target 
[726] SUBSUBPROCESS(2) func<end> ); 
[727] SUBSUBPROCESS(2) for <start> for ( 
[728] SUBSUBPROCESS(2) for  u4_t_lp_final_target = (U4)0; 
[729] SUBSUBPROCESS(2) for  u4_t_lp_final_target < u4_t_lp_max_final_target_num; 
[730] SUBSUBPROCESS(2) for  u4_t_lp_final_target++) 
[731] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[732] SUBSUBSUBPROCESS(1) if <start> if ( 
[733] SUBSUBSUBPROCESS(1) if  afl_a_Tx_float[u4_t_lp_final_target][7] > fl_a_delete_area 
[734] SUBSUBSUBPROCESS(1) if  ) 
[735] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[736] SUBSUBSUBSUBPROCESS(1) func<start> s4_initialize_specified_Tx_data(as4_a_Tx_int, afl_a_Tx_float, u4_t_lp_final_target 
[737] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[738] SUBSUBPROCESS(3) func<start> st_g_bsm_loop_data.s4_final_target_num = s4_trim_Tx_data(as4_a_Tx_int, afl_a_Tx_float 
[739] SUBSUBPROCESS(3) func<end> ); 
[740] SUBSUBPROCESS(3) for <start> for ( 
[741] SUBSUBPROCESS(3) for  u4_t_lp_normal = (U4)0; 
[742] SUBSUBPROCESS(3) for  u4_t_lp_normal < u4_t_lp_max_normal_num; 
[743] SUBSUBPROCESS(3) for  u4_t_lp_normal++) 
[744] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[745] SUBSUBSUBPROCESS(1) if <start> if ( 
[746] SUBSUBSUBPROCESS(1) if  st_g_bsm_loop_data.ast_normal[u4_t_lp_normal].fl_Ryfil > fl_a_delete_area 
[747] SUBSUBSUBPROCESS(1) if  ) 
[748] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[749] SUBSUBSUBSUBPROCESS(1) func<start> fn_init(&st_g_bsm_loop_data.ast_normal[u4_t_lp_normal], (S4)1 
[750] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[751] SUBSUBPROCESS(4) func<start> st_g_bsm_loop_data.as4_buf_pair_num[0] = s4_trim_normal(st_g_bsm_loop_data.ast_normal 
[752] SUBSUBPROCESS(4) func<end> ); 
[753] SUBSUBPROCESS(4) if <start> if ( 
[754] SUBSUBPROCESS(4) if  st_g_bsm_loop_data.ast_normal_sot[0].fl_Ryfil > fl_a_delete_area 
[755] SUBSUBPROCESS(4) if  ) 
[756] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[757] SUBSUBSUBPROCESS(1) func<start> fn_init(&st_g_bsm_loop_data.ast_normal_sot[0], (S4)1 
[758] SUBSUBSUBPROCESS(1) func<end> ); 
[759] SUBSUBPROCESS(5) equal st_g_bsm_loop_data.u1_fa_delete_count (U1)10 + (U1)1;
[760] SUBPROCESS(8) func<start> st_g_bsm_loop_data.u1_fa_delete_count = (U1)u2_data_add((U2)st_g_bsm_loop_data.u1_fa_delete_count, (S2)-1, (U2)CU1_U1MAX, (U2)0 
[761] SUBPROCESS(8) func<end> ); 
[762] SUBPROCESS(8) proc return; 
[763] MAINPROCESS(20) static VD fn_bsm_alart_check_active<start> static VD fn_bsm_alart_check_active( 
[764] MAINPROCESS(20) static VD fn_bsm_alart_check_active S4 *ps4_t_not_alarm, 
[765] MAINPROCESS(20) static VD fn_bsm_alart_check_active FL *pfl_a_alarm_area_y_min, 
[766] MAINPROCESS(20) static VD fn_bsm_alart_check_active const S4 as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT], 
[767] MAINPROCESS(20) static VD fn_bsm_alart_check_active const FL afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT] 
[768] MAINPROCESS(20) static VD fn_bsm_alart_check_active ) 
[769] MAINPROCESS(20) subproc SUBPROCESS(1) 
[770] SUBPROCESS(1) proc FL fl_t_th_canout_curvr; 
[771] SUBPROCESS(1) proc S2 s2_t_th_canout_curvr; 
[772] SUBPROCESS(1) proc S4 s4_t_lp_tx_num; 
[773] SUBPROCESS(1) proc U1 u1_t_flg_tos_target_in; 
[774] SUBPROCESS(1) if <start> if ( 
[775] SUBPROCESS(1) if  st_g_bsm_alarm_data.s4_alarm_prev != (S4)0 
[776] SUBPROCESS(1) if  ) 
[777] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[778] SUBSUBPROCESS(1) if <start> if ( 
[779] SUBSUBPROCESS(1) if  fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN_OFF 
[780] SUBSUBPROCESS(1) if  ) 
[781] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[782] SUBSUBSUBPROCESS(1) equal st_g_bsm_alarm_data.as4_alarm_off_count[0] (S4)0;
[783] SUBSUBSUBPROCESS(1) equal *ps4_t_not_alarm (S4)1;
[784] SUBPROCESS(2) else<start> else 
[785] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[786] SUBSUBPROCESS(1) if <start> if ( 
[787] SUBSUBPROCESS(1) if  fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[788] SUBSUBPROCESS(1) if  ) 
[789] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[790] SUBSUBSUBPROCESS(1) equal st_g_bsm_alarm_data.as4_alarm_off_count[0] (S4)0;
[791] SUBSUBSUBPROCESS(1) equal *ps4_t_not_alarm (S4)1;
[792] SUBPROCESS(3) equal u1_t_flg_tos_target_in (U1)0;
[793] SUBPROCESS(3) for <start> for ( 
[794] SUBPROCESS(3) for  s4_t_lp_tx_num = (S4)0; 
[795] SUBPROCESS(3) for  s4_t_lp_tx_num < st_g_bsm_loop_data.s4_final_target_num; 
[796] SUBPROCESS(3) for  s4_t_lp_tx_num++) 
[797] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[798] SUBSUBPROCESS(1) if <start> if ( 
[799] SUBSUBPROCESS(1) if  (as4_a_Tx_int[s4_t_lp_tx_num][17] >= (S4)5 
[800] SUBSUBPROCESS(1) if  ) 
[801] SUBSUBPROCESS(1) if  &&  (afl_a_Tx_float[s4_t_lp_tx_num][10] > (CFL_ALARM_Y_BACKWARD + ALARM_Y_OFFSET))) 
[802] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[803] SUBSUBSUBPROCESS(1) equal u1_t_flg_tos_target_in (U1)1;
[804] SUBSUBSUBPROCESS(1) proc break; 
[805] SUBPROCESS(4) if <start> if ( 
[806] SUBPROCESS(4) if  (u1_slipjdg_get_slip_flag() == (U1)1 
[807] SUBPROCESS(4) if  ) 
[808] SUBPROCESS(4) if  &&  (u1_t_flg_tos_target_in == (U1)0)) 
[809] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[810] SUBSUBPROCESS(1) equal st_g_bsm_alarm_data.as4_alarm_off_count[0] (S4)0;
[811] SUBSUBPROCESS(1) equal *ps4_t_not_alarm (S4)1;
[812] SUBPROCESS(5) equal fl_t_th_canout_curvr (FL)CANOUT_CURVER_MIN;
[813] SUBPROCESS(5) func<start> s2_t_th_canout_curvr = s2_cast_from_fl(fl_t_th_canout_curvr 
[814] SUBPROCESS(5) func<end> ); 
[815] SUBPROCESS(5) if <start> if ( 
[816] SUBPROCESS(5) if  (s4_abs((S4)s2_g_curvr_for_base) < (S4)s2_t_th_canout_curvr 
[817] SUBPROCESS(5) if  ) 
[818] SUBPROCESS(5) if  &&	(st_g_bsm_alarm_data.s4_alarm_prev == (S4)0)) 
[819] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[820] SUBSUBPROCESS(1) equal *ps4_t_not_alarm (S4)1;
[821] SUBPROCESS(6) func<start> fn_bsm_alart_set_reliable_jdg_mask_count((const S4 (*))ps4_t_not_alarm 
[822] SUBPROCESS(6) func<end> ); 
[823] SUBPROCESS(6) func<start> fn_bsm_alart_set_backward_line_of_alarm_area(pfl_a_alarm_area_y_min 
[824] SUBPROCESS(6) func<end> ); 
[825] SUBPROCESS(6) proc return; 
[826] MAINPROCESS(21) static VD fn_bsm_alart_set_reliable_jdg_mask_count<start> static VD fn_bsm_alart_set_reliable_jdg_mask_count( 
[827] MAINPROCESS(21) static VD fn_bsm_alart_set_reliable_jdg_mask_count const S4 *ps4_a_not_alarm 
[828] MAINPROCESS(21) static VD fn_bsm_alart_set_reliable_jdg_mask_count ) 
[829] MAINPROCESS(21) subproc SUBPROCESS(1) 
[830] SUBPROCESS(1) if <start> if ( 
[831] SUBPROCESS(1) if  (st_g_bsm_alarm_data.s4_alarm_prev == (S4)1 
[832] SUBPROCESS(1) if  ) 
[833] SUBPROCESS(1) if  ||  (*ps4_a_not_alarm == (S4)1)) 
[834] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[835] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.u1_reliable_jdg_mask_count (U1)12;
[836] SUBPROCESS(2) else<start> else 
[837] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[838] SUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.u1_reliable_jdg_mask_count = (U1)u2_data_add(st_g_bsm_loop_data.u1_reliable_jdg_mask_count, (S2)-1, (U2)CU1_U1MAX, (U2)0 
[839] SUBSUBPROCESS(1) func<end> ); 
[840] SUBPROCESS(3) proc return; 
[841] MAINPROCESS(22) static VD fn_bsm_alart_set_backward_line_of_alarm_area<start> static VD fn_bsm_alart_set_backward_line_of_alarm_area( 
[842] MAINPROCESS(22) static VD fn_bsm_alart_set_backward_line_of_alarm_area FL *pfl_a_alarm_area_y_min 
[843] MAINPROCESS(22) static VD fn_bsm_alart_set_backward_line_of_alarm_area ) 
[844] MAINPROCESS(22) subproc SUBPROCESS(1) 
[845] SUBPROCESS(1) proc FL fl_t_shrink_keep_count_sec; 
[846] SUBPROCESS(1) proc FL fl_t_alarm_area_y_min; 
[847] SUBPROCESS(1) equal fl_t_alarm_area_y_min CFL_ALARM_Y_BACKWARD;
[848] SUBPROCESS(1) if <start> if ( 
[849] SUBPROCESS(1) if  (fl_g_v_self_bsm_for_base >= CFL_CANOUT_VSELF_MIN 
[850] SUBPROCESS(1) if  ) 
[851] SUBPROCESS(1) if  &&	((s2_g_curvr_for_base > (S4)0) 
[852] SUBPROCESS(1) if  &&   (s2_g_curvr_for_base < (S4)30))) 
[853] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[854] SUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.u1_shrink_on_count = (U1)u2_data_add((U2)st_g_bsm_loop_data.u1_shrink_on_count, (S2)1, (U2)12, (U2)0 
[855] SUBSUBPROCESS(1) func<end> ); 
[856] SUBPROCESS(2) else<start> else 
[857] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[858] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.u1_shrink_on_count (U1)0;
[859] SUBPROCESS(3) if <start> if ( 
[860] SUBPROCESS(3) if  st_g_bsm_loop_data.u1_shrink_on_count >= (U1)12 
[861] SUBPROCESS(3) if  ) 
[862] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[863] SUBSUBPROCESS(1) equal fl_t_shrink_keep_count_sec ((FL)7.0F / (fl_g_v_self_bsm_for_base / (FL)3.6F)) + (FL)0.3F;
[864] SUBSUBPROCESS(1) if <start> if ( 
[865] SUBSUBPROCESS(1) if  fl_t_shrink_keep_count_sec > (FL)2.5F 
[866] SUBSUBPROCESS(1) if  ) 
[867] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[868] SUBSUBSUBPROCESS(1) equal fl_t_shrink_keep_count_sec (FL)2.5F;
[869] SUBSUBPROCESS(2) func<start> st_g_bsm_loop_data.u1_shrink_keep_count = u1_cast_from_fl(fl_t_shrink_keep_count_sec / CFL_SAMPLING_TIME 
[870] SUBSUBPROCESS(2) func<end> ); 
[871] SUBPROCESS(4) if <start> if ( 
[872] SUBPROCESS(4) if  fl_g_v_self_bsm_for_base < CFL_CANOUT_VSELF_MIN 
[873] SUBPROCESS(4) if  ) 
[874] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[875] SUBSUBPROCESS(1) equal st_g_bsm_loop_data.u1_shrink_keep_count (U1)0;
[876] SUBPROCESS(5) if <start> if ( 
[877] SUBPROCESS(5) if  s4_abs(s2_g_curvr_for_base) < (S4)30 
[878] SUBPROCESS(5) if  ) 
[879] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[880] SUBSUBPROCESS(1) equal fl_t_alarm_area_y_min (FL)-1.0F;
[881] SUBPROCESS(6) else if <start> else if ( 
[882] SUBPROCESS(6) else if  s4_abs(s2_g_curvr_for_base) < (S4)55 
[883] SUBPROCESS(6) else if  ) 
[884] SUBPROCESS(6) subproc SUBSUBPROCESS(1) 
[885] SUBSUBPROCESS(1) equal fl_t_alarm_area_y_min (FL)-4.0F;
[886] SUBPROCESS(7) else<start> else 
[887] SUBPROCESS(7) subproc SUBSUBPROCESS(1) 
[888] SUBSUBPROCESS(1) if <start> if ( 
[889] SUBSUBPROCESS(1) if  st_g_bsm_loop_data.u1_shrink_keep_count > (U1)0 
[890] SUBSUBPROCESS(1) if  ) 
[891] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[892] SUBSUBSUBPROCESS(1) equal fl_t_alarm_area_y_min (FL)-4.0F;
[893] SUBSUBSUBPROCESS(1) func<start> st_g_bsm_loop_data.u1_shrink_keep_count = (U1)u2_data_add((U2)st_g_bsm_loop_data.u1_shrink_keep_count, (S2)-1, (U2)31, (U2)0 
[894] SUBSUBSUBPROCESS(1) func<end> ); 
[895] SUBSUBPROCESS(2) else<start> else 
[896] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[897] SUBPROCESS(8) equal *pfl_a_alarm_area_y_min fl_t_alarm_area_y_min;
[898] SUBPROCESS(8) proc return; 
[899] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj<start> static VD fn_bsm_alart_check_cont_altobj( 
[900] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj S4 s4_final_a_target_num, 
[901] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj S4 as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT], 
[902] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj FL afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT], 
[903] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj S4 as4_a_checked_target[TARGET_BUFFSIZE], 
[904] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj S4 as4_a_checked_alarmed[TARGET_BUFFSIZE], 
[905] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj S4 as4_a_alarmed_target_num_current[1], 
[906] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj FL afl_a_alarmed_target_current[TARGET_BUFFSIZE][ALARM_INFO_SIZE], 
[907] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj S4 *ps4_a_tos_flg, 
[908] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj S4 *ps4_a_alarm_flg 
[909] MAINPROCESS(23) static VD fn_bsm_alart_check_cont_altobj ) 
[910] MAINPROCESS(23) subproc SUBPROCESS(1) 
[911] SUBPROCESS(1) func<start> fn_bsm_alart_check_tos_status( 
[912] SUBPROCESS(1) func ps4_a_tos_flg 
[913] SUBPROCESS(1) func<end> ); 
[914] SUBPROCESS(1) func<start> fn_bsm_alart_cont_altobj( 
[915] SUBPROCESS(1) func s4_final_a_target_num, 
[916] SUBPROCESS(1) func as4_a_Tx_int, 
[917] SUBPROCESS(1) func afl_a_Tx_float, 
[918] SUBPROCESS(1) func as4_a_checked_target, 
[919] SUBPROCESS(1) func as4_a_checked_alarmed, 
[920] SUBPROCESS(1) func as4_a_alarmed_target_num_current, 
[921] SUBPROCESS(1) func afl_a_alarmed_target_current, 
[922] SUBPROCESS(1) func ps4_a_alarm_flg 
[923] SUBPROCESS(1) func<end> ); 
[924] SUBPROCESS(1) proc return; 
[925] MAINPROCESS(24) static VD fn_bsm_alart_check_tos_status<start> static VD fn_bsm_alart_check_tos_status( 
[926] MAINPROCESS(24) static VD fn_bsm_alart_check_tos_status S4 *ps4_a_tos_flg 
[927] MAINPROCESS(24) static VD fn_bsm_alart_check_tos_status ) 
[928] MAINPROCESS(24) subproc SUBPROCESS(1) 
[929] SUBPROCESS(1) proc S4 i; 
[930] SUBPROCESS(1) equal *ps4_a_tos_flg 0;
[931] SUBPROCESS(1) for<start> for( 
[932] SUBPROCESS(1) for i=0; 
[933] SUBPROCESS(1) for i<st_g_bsm_alarm_data.as4_alarmed_num[0]; 
[934] SUBPROCESS(1) for i++) 
[935] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[936] SUBSUBPROCESS(1) if<start> if( 
[937] SUBSUBPROCESS(1) if st_g_bsm_alarm_data.afl_alarmed_target[i][4]==ALARM_TYPE_TOS 
[938] SUBSUBPROCESS(1) if ) 
[939] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[940] SUBSUBSUBPROCESS(1) equal *ps4_a_tos_flg 1;
[941] SUBSUBSUBPROCESS(1) proc break; 
[942] SUBPROCESS(2) proc return; 
[943] MAINPROCESS(25) static VD fn_bsm_alart_cont_altobj<start> static VD fn_bsm_alart_cont_altobj( 
[944] MAINPROCESS(25) static VD fn_bsm_alart_cont_altobj S4 s4_final_a_target_num, 
[945] MAINPROCESS(25) static VD fn_bsm_alart_cont_altobj signed long as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT], 
[946] MAINPROCESS(25) static VD fn_bsm_alart_cont_altobj FL afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT], 
[947] MAINPROCESS(25) static VD fn_bsm_alart_cont_altobj S4 as4_a_checked_target[TARGET_BUFFSIZE], 
[948] MAINPROCESS(25) static VD fn_bsm_alart_cont_altobj S4 as4_a_checked_alarmed[TARGET_BUFFSIZE], 
[949] MAINPROCESS(25) static VD fn_bsm_alart_cont_altobj S4 as4_a_alarmed_target_num_current[1], 
[950] MAINPROCESS(25) static VD fn_bsm_alart_cont_altobj FL afl_a_alarmed_target_current[TARGET_BUFFSIZE][ALARM_INFO_SIZE], 
[951] MAINPROCESS(25) static VD fn_bsm_alart_cont_altobj S4 *ps4_a_alarm_flg 
[952] MAINPROCESS(25) static VD fn_bsm_alart_cont_altobj ) 
[953] MAINPROCESS(25) subproc SUBPROCESS(1) 
[954] SUBPROCESS(1) proc S4 i; 
[955] SUBPROCESS(1) proc S4 s4_t_index; 
[956] SUBPROCESS(1) proc S4 s4_t_selected_alarmed_target_index; 
[957] SUBPROCESS(1) for<start> for( 
[958] SUBPROCESS(1) for i=0; 
[959] SUBPROCESS(1) for i<s4_final_a_target_num; 
[960] SUBPROCESS(1) for i++) 
[961] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[962] SUBSUBPROCESS(1) equal s4_t_index -1;
[963] SUBSUBPROCESS(1) equal s4_t_selected_alarmed_target_index -1;
[964] SUBSUBPROCESS(1) func<start> fn_bsm_alart_select_altobj_prev( 
[965] SUBSUBPROCESS(1) func &as4_a_Tx_int[i], 
[966] SUBSUBPROCESS(1) func (const FL (*)[TGT_FLT])&afl_a_Tx_float[i], 
[967] SUBSUBPROCESS(1) func &s4_t_selected_alarmed_target_index 
[968] SUBSUBPROCESS(1) func<end> ); 
[969] SUBSUBPROCESS(1) if<start> if( 
[970] SUBSUBPROCESS(1) if s4_t_selected_alarmed_target_index != -1 
[971] SUBSUBPROCESS(1) if ) 
[972] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[973] SUBSUBSUBPROCESS(1) func<start> fn_bsm_alart_set_altobj_cur( 
[974] SUBSUBSUBPROCESS(1) func (const FL (*)[TGT_FLT])&afl_a_Tx_float[i], 
[975] SUBSUBSUBPROCESS(1) func (const FL (*)[ALARM_INFO_SIZE])&st_g_bsm_alarm_data.afl_alarmed_target[s4_t_selected_alarmed_target_index], 
[976] SUBSUBSUBPROCESS(1) func (const S4 (*))as4_a_alarmed_target_num_current, 
[977] SUBSUBSUBPROCESS(1) func (const FL (*)[ALARM_INFO_SIZE])afl_a_alarmed_target_current, 
[978] SUBSUBSUBPROCESS(1) func &s4_t_index 
[979] SUBSUBSUBPROCESS(1) func<end> ); 
[980] SUBSUBSUBPROCESS(1) equal as4_a_checked_target[i] 1;
[981] SUBSUBSUBPROCESS(1) equal as4_a_checked_alarmed[s4_t_selected_alarmed_target_index] 1;
[982] SUBSUBPROCESS(2) if<start> if( 
[983] SUBSUBPROCESS(2) if s4_t_index != -1 
[984] SUBSUBPROCESS(2) if ) 
[985] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[986] SUBSUBSUBPROCESS(1) func<start> fn_bsm_alart_store_cont_altobj( 
[987] SUBSUBSUBPROCESS(1) func (const signed long (*)[NORM_INT])&as4_a_Tx_int[i], 
[988] SUBSUBSUBPROCESS(1) func (const FL (*)[TGT_FLT])&afl_a_Tx_float[i], 
[989] SUBSUBSUBPROCESS(1) func (const FL (*)[ALARM_INFO_SIZE])&st_g_bsm_alarm_data.afl_alarmed_target[s4_t_selected_alarmed_target_index], 
[990] SUBSUBSUBPROCESS(1) func &afl_a_alarmed_target_current[as4_a_alarmed_target_num_current[0]], 
[991] SUBSUBSUBPROCESS(1) func ps4_a_alarm_flg 
[992] SUBSUBSUBPROCESS(1) func<end> ); 
[993] SUBSUBSUBPROCESS(1) proc as4_a_alarmed_target_num_current[0]++; 
[994] SUBPROCESS(2) proc return; 
[995] MAINPROCESS(26) static VD fn_bsm_alart_select_altobj_prev<start> static VD fn_bsm_alart_select_altobj_prev( 
[996] MAINPROCESS(26) static VD fn_bsm_alart_select_altobj_prev signed long as4_a_Tx_int[1][NORM_INT], 
[997] MAINPROCESS(26) static VD fn_bsm_alart_select_altobj_prev const FL afl_a_Tx_float[1][TGT_FLT], 
[998] MAINPROCESS(26) static VD fn_bsm_alart_select_altobj_prev S4 *ps4_a_selected_alarmed_target_index 
[999] MAINPROCESS(26) static VD fn_bsm_alart_select_altobj_prev ) 
[1000] MAINPROCESS(26) subproc SUBPROCESS(1) 
[1001] SUBPROCESS(1) proc S4 j; 
[1002] SUBPROCESS(1) proc FL object_x; 
[1003] SUBPROCESS(1) proc FL object_y; 
[1004] SUBPROCESS(1) proc FL alarmed_x; 
[1005] SUBPROCESS(1) proc FL alarmed_y; 
[1006] SUBPROCESS(1) func<start> FL tmp_xydiff_min = fl_abs(CFL_UNKNOWN_VALUE*2 
[1007] SUBPROCESS(1) func<end> ); 
[1008] SUBPROCESS(1) equal object_x afl_a_Tx_float[0][9];
[1009] SUBPROCESS(1) equal object_y afl_a_Tx_float[0][10];
[1010] SUBPROCESS(1) if<start> if( 
[1011] SUBPROCESS(1) if u1_g_sns_pos==SENSOR_LEFT 
[1012] SUBPROCESS(1) if ) 
[1013] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1014] SUBSUBPROCESS(1) equal object_x -object_x;
[1015] SUBPROCESS(2) equal *ps4_a_selected_alarmed_target_index -1;
[1016] SUBPROCESS(2) func<start> tmp_xydiff_min = fl_abs(CFL_UNKNOWN_VALUE*2.0F 
[1017] SUBPROCESS(2) func<end> ); 
[1018] SUBPROCESS(2) for<start> for( 
[1019] SUBPROCESS(2) for j=0; 
[1020] SUBPROCESS(2) for j<st_g_bsm_alarm_data.as4_alarmed_num[0]; 
[1021] SUBPROCESS(2) for j++) 
[1022] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[1023] SUBSUBPROCESS(1) equal alarmed_x st_g_bsm_alarm_data.afl_alarmed_target[j][0];
[1024] SUBSUBPROCESS(1) if<start> if( 
[1025] SUBSUBPROCESS(1) if u1_g_sns_pos==SENSOR_LEFT 
[1026] SUBSUBPROCESS(1) if ) 
[1027] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[1028] SUBSUBSUBPROCESS(1) equal alarmed_x - alarmed_x;
[1029] SUBSUBPROCESS(2) equal alarmed_y st_g_bsm_alarm_data.afl_alarmed_target[j][1];
[1030] SUBSUBPROCESS(2) if <start> if ( 
[1031] SUBSUBPROCESS(2) if  (fl_abs(object_x - alarmed_x) < RX_TH_ALM 
[1032] SUBSUBPROCESS(2) if  ) 
[1033] SUBSUBPROCESS(2) if  &&  (fl_abs(object_y - alarmed_y) < RY_TH_ALM) 
[1034] SUBSUBPROCESS(2) if  &&  (tmp_xydiff_min > (fl_abs(object_x - alarmed_x) + fl_abs(object_y - alarmed_y)))) 
[1035] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[1036] SUBSUBSUBPROCESS(1) func<start> tmp_xydiff_min = fl_abs(object_x - alarmed_x) + fl_abs(object_y - alarmed_y 
[1037] SUBSUBSUBPROCESS(1) func<end> ); 
[1038] SUBSUBSUBPROCESS(1) equal *ps4_a_selected_alarmed_target_index j;
[1039] SUBPROCESS(3) proc return; 
[1040] MAINPROCESS(27) static VD fn_bsm_alart_set_altobj_cur<start> static VD fn_bsm_alart_set_altobj_cur( 
[1041] MAINPROCESS(27) static VD fn_bsm_alart_set_altobj_cur const FL afl_a_Tx_float[1][TGT_FLT], 
[1042] MAINPROCESS(27) static VD fn_bsm_alart_set_altobj_cur const FL afl_a_alarmed_target[1][ALARM_INFO_SIZE], 
[1043] MAINPROCESS(27) static VD fn_bsm_alart_set_altobj_cur const S4 as4_a_alarmed_target_num_current[1], 
[1044] MAINPROCESS(27) static VD fn_bsm_alart_set_altobj_cur const FL afl_a_alarmed_target_current[TARGET_BUFFSIZE][ALARM_INFO_SIZE], 
[1045] MAINPROCESS(27) static VD fn_bsm_alart_set_altobj_cur S4 *ps4_a_index 
[1046] MAINPROCESS(27) static VD fn_bsm_alart_set_altobj_cur ) 
[1047] MAINPROCESS(27) subproc SUBPROCESS(1) 
[1048] SUBPROCESS(1) proc S4 k; 
[1049] SUBPROCESS(1) proc FL object_x; 
[1050] SUBPROCESS(1) proc FL object_y; 
[1051] SUBPROCESS(1) proc FL tmp_x_min; 
[1052] SUBPROCESS(1) proc FL tmp_x_max; 
[1053] SUBPROCESS(1) proc FL tmp_y_min; 
[1054] SUBPROCESS(1) proc FL tmp_y_max; 
[1055] SUBPROCESS(1) proc FL tmp_alarm_area[4]; 
[1056] SUBPROCESS(1) proc FL tmp_offset[3]; 
[1057] SUBPROCESS(1) proc FL tmp_comp; 
[1058] SUBPROCESS(1) proc FL tmp_min; 
[1059] SUBPROCESS(1) equal object_x afl_a_Tx_float[0][9];
[1060] SUBPROCESS(1) equal object_y afl_a_Tx_float[0][10];
[1061] SUBPROCESS(1) if<start> if( 
[1062] SUBPROCESS(1) if u1_g_sns_pos==SENSOR_LEFT 
[1063] SUBPROCESS(1) if ) 
[1064] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1065] SUBSUBPROCESS(1) equal object_x -object_x;
[1066] SUBPROCESS(2) equal tmp_alarm_area[0] afl_a_alarmed_target[0][12];
[1067] SUBPROCESS(2) equal tmp_alarm_area[1] afl_a_alarmed_target[0][13];
[1068] SUBPROCESS(2) equal tmp_alarm_area[2] afl_a_alarmed_target[0][14];
[1069] SUBPROCESS(2) equal tmp_alarm_area[3] afl_a_alarmed_target[0][15];
[1070] SUBPROCESS(2) equal tmp_offset[0] ALARM_X_OFFSET_OUT;
[1071] SUBPROCESS(2) equal tmp_offset[1] ALARM_Y_OFFSET;
[1072] SUBPROCESS(2) equal tmp_offset[2] ALARM_X_OFFSET_IN;
[1073] SUBPROCESS(2) func<start> get_hysteresis_area( 
[1074] SUBPROCESS(2) func object_y, 
[1075] SUBPROCESS(2) func afl_a_alarmed_target[0][4], 
[1076] SUBPROCESS(2) func tmp_alarm_area, 
[1077] SUBPROCESS(2) func tmp_offset 
[1078] SUBPROCESS(2) func<end> ); 
[1079] SUBPROCESS(2) equal tmp_x_min tmp_alarm_area[0];
[1080] SUBPROCESS(2) equal tmp_x_max tmp_alarm_area[1];
[1081] SUBPROCESS(2) equal tmp_y_min tmp_alarm_area[2];
[1082] SUBPROCESS(2) equal tmp_y_max tmp_alarm_area[3];
[1083] SUBPROCESS(2) if <start> if ( 
[1084] SUBPROCESS(2) if  afl_a_Tx_float[0][15] < (FL)0.1F 
[1085] SUBPROCESS(2) if  ) 
[1086] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[1087] SUBSUBPROCESS(1) equal tmp_x_max + (FL)0.1F;
[1088] SUBPROCESS(3) if <start> if ( 
[1089] SUBPROCESS(3) if  (object_x > tmp_x_min 
[1090] SUBPROCESS(3) if  ) 
[1091] SUBPROCESS(3) if  &&  (object_x < tmp_x_max) 
[1092] SUBPROCESS(3) if  &&  (object_y < tmp_y_max) 
[1093] SUBPROCESS(3) if  &&  (object_y > tmp_y_min)) 
[1094] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[1095] SUBSUBPROCESS(1) if<start> if( 
[1096] SUBSUBPROCESS(1) if as4_a_alarmed_target_num_current[0] < (S4)(TARGET_BUFFSIZE-1) 
[1097] SUBSUBPROCESS(1) if ) 
[1098] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[1099] SUBSUBSUBPROCESS(1) equal *ps4_a_index as4_a_alarmed_target_num_current[0];
[1100] SUBSUBPROCESS(2) else<start> else 
[1101] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[1102] SUBSUBSUBPROCESS(1) equal tmp_min 1000.0F;
[1103] SUBSUBSUBPROCESS(1) equal tmp_comp 0.0F;
[1104] SUBSUBSUBPROCESS(1) for<start> for( 
[1105] SUBSUBSUBPROCESS(1) for k=0; 
[1106] SUBSUBSUBPROCESS(1) for k<TARGET_BUFFSIZE; 
[1107] SUBSUBSUBPROCESS(1) for k++) 
[1108] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[1109] SUBSUBSUBSUBPROCESS(1) ??? tmp_comp = fl_abs(afl_a_alarmed_target_current[k][0]-afl_a_Tx_float[0][8]) 
[1110] SUBSUBSUBSUBPROCESS(1) func<start> + fl_abs(afl_a_alarmed_target_current[k][1]-afl_a_Tx_float[0][7] 
[1111] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[1112] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[1113] SUBSUBSUBSUBPROCESS(1) if tmp_comp < tmp_min 
[1114] SUBSUBSUBSUBPROCESS(1) if ) 
[1115] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[1116] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_index k;
[1117] SUBSUBSUBSUBSUBPROCESS(1) equal tmp_min tmp_comp;
[1118] SUBPROCESS(4) proc return; 
[1119] MAINPROCESS(28) static VD fn_bsm_alart_store_cont_altobj<start> static VD fn_bsm_alart_store_cont_altobj( 
[1120] MAINPROCESS(28) static VD fn_bsm_alart_store_cont_altobj const signed long as4_a_Tx_int[1][NORM_INT], 
[1121] MAINPROCESS(28) static VD fn_bsm_alart_store_cont_altobj const FL afl_a_Tx_float[1][TGT_FLT], 
[1122] MAINPROCESS(28) static VD fn_bsm_alart_store_cont_altobj const FL afl_a_alarmed_target[1][ALARM_INFO_SIZE], 
[1123] MAINPROCESS(28) static VD fn_bsm_alart_store_cont_altobj FL afl_a_alarmed_target_current[1][ALARM_INFO_SIZE], 
[1124] MAINPROCESS(28) static VD fn_bsm_alart_store_cont_altobj S4 *ps4_a_alarm_flg 
[1125] MAINPROCESS(28) static VD fn_bsm_alart_store_cont_altobj ) 
[1126] MAINPROCESS(28) subproc SUBPROCESS(1) 
[1127] SUBPROCESS(1) proc S4 tmp_peak_bin_up; 
[1128] SUBPROCESS(1) proc S4 tmp_peak_bin_dn; 
[1129] SUBPROCESS(1) proc S4 tmp_start; 
[1130] SUBPROCESS(1) proc S4 tmp_end; 
[1131] SUBPROCESS(1) proc FL tmp_power_up; 
[1132] SUBPROCESS(1) proc FL tmp_power_dn; 
[1133] SUBPROCESS(1) equal *ps4_a_alarm_flg 1;
[1134] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][0] afl_a_Tx_float[0][9];
[1135] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][1] afl_a_Tx_float[0][10];
[1136] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][2] (FL)as4_a_Tx_int[0][11];
[1137] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][3] afl_a_alarmed_target[0][3] + 1.0F;
[1138] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][4] afl_a_alarmed_target[0][4];
[1139] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][5] afl_a_alarmed_target[0][5];
[1140] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][6] afl_a_alarmed_target[0][6];
[1141] SUBPROCESS(1) equal tmp_peak_bin_up as4_a_Tx_int[0][4];
[1142] SUBPROCESS(1) equal tmp_peak_bin_dn as4_a_Tx_int[0][5];
[1143] SUBPROCESS(1) equal tmp_start tmp_peak_bin_up-5;
[1144] SUBPROCESS(1) equal tmp_end tmp_peak_bin_up+5;
[1145] SUBPROCESS(1) func<start> tmp_power_up = get_fmpower_of_specified_interval( 
[1146] SUBPROCESS(1) func (const FL (*))afl_g_cvw_lfm_ftt_power[0], 
[1147] SUBPROCESS(1) func tmp_start, 
[1148] SUBPROCESS(1) func tmp_end 
[1149] SUBPROCESS(1) func<end> ); 
[1150] SUBPROCESS(1) equal tmp_start tmp_peak_bin_dn-5;
[1151] SUBPROCESS(1) equal tmp_end tmp_peak_bin_dn+5;
[1152] SUBPROCESS(1) func<start> tmp_power_dn = get_fmpower_of_specified_interval( 
[1153] SUBPROCESS(1) func (const FL (*))afl_g_cvw_lfm_ftt_power[1], 
[1154] SUBPROCESS(1) func tmp_start, 
[1155] SUBPROCESS(1) func tmp_end 
[1156] SUBPROCESS(1) func<end> ); 
[1157] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][7] (tmp_power_up+tmp_power_dn)*0.5F - afl_a_alarmed_target_current[0][6];
[1158] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][8] afl_a_Tx_float[0][15];
[1159] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][9] afl_a_Tx_float[0][16];
[1160] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][10] afl_a_alarmed_target[0][10];
[1161] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][11] afl_a_alarmed_target[0][11];
[1162] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][12] afl_a_alarmed_target[0][12];
[1163] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][13] afl_a_alarmed_target[0][13];
[1164] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][14] afl_a_alarmed_target[0][14];
[1165] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][15] afl_a_alarmed_target[0][15];
[1166] SUBPROCESS(1) proc return; 
[1167] MAINPROCESS(29) static VD fn_bsm_alart_check_exp_altobj<start> static VD fn_bsm_alart_check_exp_altobj( 
[1168] MAINPROCESS(29) static VD fn_bsm_alart_check_exp_altobj S4 as4_a_checked_alarmed[TARGET_BUFFSIZE], 
[1169] MAINPROCESS(29) static VD fn_bsm_alart_check_exp_altobj S4 as4_a_alarmed_target_num_current[1], 
[1170] MAINPROCESS(29) static VD fn_bsm_alart_check_exp_altobj FL afl_a_alarmed_target_current[TARGET_BUFFSIZE][ALARM_INFO_SIZE], 
[1171] MAINPROCESS(29) static VD fn_bsm_alart_check_exp_altobj S4 *ps4_a_alarm_flg 
[1172] MAINPROCESS(29) static VD fn_bsm_alart_check_exp_altobj ) 
[1173] MAINPROCESS(29) subproc SUBPROCESS(1) 
[1174] SUBPROCESS(1) proc S4 i; 
[1175] SUBPROCESS(1) proc S4 s4_t_lost; 
[1176] SUBPROCESS(1) for<start> for( 
[1177] SUBPROCESS(1) for i=0; 
[1178] SUBPROCESS(1) for i<st_g_bsm_alarm_data.as4_alarmed_num[0]; 
[1179] SUBPROCESS(1) for i++) 
[1180] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1181] SUBSUBPROCESS(1) if<start> if( 
[1182] SUBSUBPROCESS(1) if as4_a_checked_alarmed[i]==0 
[1183] SUBSUBPROCESS(1) if ) 
[1184] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[1185] SUBSUBSUBPROCESS(1) equal s4_t_lost 0;
[1186] SUBSUBSUBPROCESS(1) func<start> s4_t_lost = s4_bsm_alart_set_exp_altobj( 
[1187] SUBSUBSUBPROCESS(1) func &st_g_bsm_alarm_data.afl_alarmed_target[i] 
[1188] SUBSUBSUBPROCESS(1) func<end> ); 
[1189] SUBSUBSUBPROCESS(1) if<start> if( 
[1190] SUBSUBSUBPROCESS(1) if s4_t_lost != 0 
[1191] SUBSUBSUBPROCESS(1) if ) 
[1192] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[1193] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[1194] SUBSUBSUBSUBPROCESS(1) if as4_a_alarmed_target_num_current[0] < (S4)(TARGET_BUFFSIZE-1) 
[1195] SUBSUBSUBSUBPROCESS(1) if ) 
[1196] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[1197] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_alarm_flg 1;
[1198] SUBSUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_alart_store_exp_altobj( 
[1199] SUBSUBSUBSUBSUBPROCESS(1) func (const FL (*)[ALARM_INFO_SIZE])&st_g_bsm_alarm_data.afl_alarmed_target[i], 
[1200] SUBSUBSUBSUBSUBPROCESS(1) func &afl_a_alarmed_target_current[as4_a_alarmed_target_num_current[0]] 
[1201] SUBSUBSUBSUBSUBPROCESS(1) func<end> ); 
[1202] SUBSUBSUBSUBSUBPROCESS(1) equal as4_a_checked_alarmed[i] 1;
[1203] SUBSUBSUBSUBSUBPROCESS(1) proc as4_a_alarmed_target_num_current[0]++; 
[1204] SUBPROCESS(2) proc return; 
[1205] MAINPROCESS(30) static S4 s4_bsm_alart_set_exp_altobj<start> static S4 s4_bsm_alart_set_exp_altobj( 
[1206] MAINPROCESS(30) static S4 s4_bsm_alart_set_exp_altobj FL afl_a_alarmed_target[1][ALARM_INFO_SIZE] 
[1207] MAINPROCESS(30) static S4 s4_bsm_alart_set_exp_altobj ) 
[1208] MAINPROCESS(30) subproc SUBPROCESS(1) 
[1209] SUBPROCESS(1) proc S4 s4_t_lost; 
[1210] SUBPROCESS(1) proc FL alarmed_x; 
[1211] SUBPROCESS(1) proc FL alarmed_y; 
[1212] SUBPROCESS(1) proc FL tmp_x_min; 
[1213] SUBPROCESS(1) proc FL tmp_x_max; 
[1214] SUBPROCESS(1) proc FL tmp_y_min; 
[1215] SUBPROCESS(1) proc FL tmp_y_max; 
[1216] SUBPROCESS(1) proc FL tmp_alarm_area[4]; 
[1217] SUBPROCESS(1) proc FL tmp_offset[3]; 
[1218] SUBPROCESS(1) equal tmp_offset[0] ALARM_X_OFFSET_OUT;
[1219] SUBPROCESS(1) equal tmp_offset[1] ALARM_Y_OFFSET;
[1220] SUBPROCESS(1) equal tmp_offset[2] ALARM_X_OFFSET_IN;
[1221] SUBPROCESS(1) equal s4_t_lost 0;
[1222] SUBPROCESS(1) equal alarmed_x afl_a_alarmed_target[0][0];
[1223] SUBPROCESS(1) equal alarmed_y afl_a_alarmed_target[0][1];
[1224] SUBPROCESS(1) if<start> if( 
[1225] SUBPROCESS(1) if u1_g_sns_pos==SENSOR_LEFT 
[1226] SUBPROCESS(1) if ) 
[1227] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1228] SUBSUBPROCESS(1) equal alarmed_x - alarmed_x;
[1229] SUBPROCESS(2) equal tmp_alarm_area[0] afl_a_alarmed_target[0][12];
[1230] SUBPROCESS(2) equal tmp_alarm_area[1] afl_a_alarmed_target[0][13];
[1231] SUBPROCESS(2) equal tmp_alarm_area[2] afl_a_alarmed_target[0][14];
[1232] SUBPROCESS(2) equal tmp_alarm_area[3] afl_a_alarmed_target[0][15];
[1233] SUBPROCESS(2) func<start> get_hysteresis_area( 
[1234] SUBPROCESS(2) func alarmed_y, 
[1235] SUBPROCESS(2) func afl_a_alarmed_target[0][4], 
[1236] SUBPROCESS(2) func tmp_alarm_area, 
[1237] SUBPROCESS(2) func tmp_offset 
[1238] SUBPROCESS(2) func<end> ); 
[1239] SUBPROCESS(2) equal tmp_x_min tmp_alarm_area[0];
[1240] SUBPROCESS(2) equal tmp_x_max tmp_alarm_area[1];
[1241] SUBPROCESS(2) equal tmp_y_min tmp_alarm_area[2];
[1242] SUBPROCESS(2) equal tmp_y_max tmp_alarm_area[3];
[1243] SUBPROCESS(2) if<start> if( 
[1244] SUBPROCESS(2) if afl_a_alarmed_target[0][4]==ALARM_TYPE_SOT 
[1245] SUBPROCESS(2) if ) 
[1246] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[1247] SUBSUBPROCESS(1) func<start> s4_t_lost = s4_bsm_alart_check_exp_sot( 
[1248] SUBSUBPROCESS(1) func (const FL (*)[ALARM_INFO_SIZE])&afl_a_alarmed_target[0], 
[1249] SUBSUBPROCESS(1) func alarmed_x, 
[1250] SUBSUBPROCESS(1) func alarmed_y, 
[1251] SUBSUBPROCESS(1) func tmp_x_min, 
[1252] SUBSUBPROCESS(1) func tmp_x_max, 
[1253] SUBSUBPROCESS(1) func tmp_y_min, 
[1254] SUBSUBPROCESS(1) func tmp_y_max 
[1255] SUBSUBPROCESS(1) func<end> ); 
[1256] SUBPROCESS(3) else if<start> else if( 
[1257] SUBPROCESS(3) else if afl_a_alarmed_target[0][4]==ALARM_TYPE_TOS 
[1258] SUBPROCESS(3) else if ) 
[1259] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[1260] SUBSUBPROCESS(1) func<start> s4_t_lost = s4_bsm_alart_check_exp_tos( 
[1261] SUBSUBPROCESS(1) func (const FL (*)[ALARM_INFO_SIZE])&afl_a_alarmed_target[0], 
[1262] SUBSUBPROCESS(1) func alarmed_x, 
[1263] SUBSUBPROCESS(1) func alarmed_y, 
[1264] SUBSUBPROCESS(1) func tmp_x_min, 
[1265] SUBSUBPROCESS(1) func tmp_x_max, 
[1266] SUBSUBPROCESS(1) func tmp_y_min, 
[1267] SUBSUBPROCESS(1) func tmp_y_max 
[1268] SUBSUBPROCESS(1) func<end> ); 
[1269] SUBPROCESS(4) else<start> else 
[1270] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[1271] SUBSUBPROCESS(1) func<start> s4_t_lost = s4_bsm_alart_check_exp_other( 
[1272] SUBSUBPROCESS(1) func (const FL (*)[ALARM_INFO_SIZE])&afl_a_alarmed_target[0], 
[1273] SUBSUBPROCESS(1) func alarmed_x, 
[1274] SUBSUBPROCESS(1) func alarmed_y, 
[1275] SUBSUBPROCESS(1) func tmp_x_min, 
[1276] SUBSUBPROCESS(1) func tmp_x_max, 
[1277] SUBSUBPROCESS(1) func tmp_y_min, 
[1278] SUBSUBPROCESS(1) func tmp_y_max 
[1279] SUBSUBPROCESS(1) func<end> ); 
[1280] SUBPROCESS(5) proc return s4_t_lost; 
[1281] MAINPROCESS(31) static S4 s4_bsm_alart_check_exp_sot<start> static S4 s4_bsm_alart_check_exp_sot( 
[1282] MAINPROCESS(31) static S4 s4_bsm_alart_check_exp_sot const FL afl_a_alarmed_target[1][ALARM_INFO_SIZE], 
[1283] MAINPROCESS(31) static S4 s4_bsm_alart_check_exp_sot FL fl_a_alarmed_x, 
[1284] MAINPROCESS(31) static S4 s4_bsm_alart_check_exp_sot FL fl_a_alarmed_y, 
[1285] MAINPROCESS(31) static S4 s4_bsm_alart_check_exp_sot FL fl_a_x_min, 
[1286] MAINPROCESS(31) static S4 s4_bsm_alart_check_exp_sot FL fl_a_x_max, 
[1287] MAINPROCESS(31) static S4 s4_bsm_alart_check_exp_sot FL fl_a_y_min, 
[1288] MAINPROCESS(31) static S4 s4_bsm_alart_check_exp_sot FL fl_a_y_max 
[1289] MAINPROCESS(31) static S4 s4_bsm_alart_check_exp_sot ) 
[1290] MAINPROCESS(31) subproc SUBPROCESS(1) 
[1291] SUBPROCESS(1) proc S4 s4_t_lost; 
[1292] SUBPROCESS(1) proc S4 s4_t_lost_max; 
[1293] SUBPROCESS(1) equal s4_t_lost 0;
[1294] SUBPROCESS(1) equal s4_t_lost_max ALARM_SOT_LOST_MAX;
[1295] SUBPROCESS(1) if<start> if( 
[1296] SUBPROCESS(1) if st_g_bsm_loop_data.as4_flg_tos_end[0] > 1 
[1297] SUBPROCESS(1) if ) 
[1298] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1299] SUBSUBPROCESS(1) equal s4_t_lost_max ALARM_TOS_END_LOST_MAX;
[1300] SUBPROCESS(2) if<start> if( 
[1301] SUBPROCESS(2) if st_g_bsm_loop_data.u1_truck_flg != (U1)0 
[1302] SUBPROCESS(2) if ) 
[1303] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[1304] SUBSUBPROCESS(1) equal s4_t_lost_max + ALARM_LOST_TRK_EXTEND;
[1305] SUBPROCESS(3) if <start> if ( 
[1306] SUBPROCESS(3) if  (st_g_bsm_loop_data.u1_fa_delete_count > (U1)0 
[1307] SUBPROCESS(3) if  ) 
[1308] SUBPROCESS(3) if  &&  (fl_a_alarmed_y > CFL_FA_DELETE_AREA)) 
[1309] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[1310] SUBSUBPROCESS(1) equal s4_t_lost_max (S4)0;
[1311] SUBPROCESS(4) if <start> if ( 
[1312] SUBPROCESS(4) if  (fl_a_alarmed_x > fl_a_x_min 
[1313] SUBPROCESS(4) if  ) 
[1314] SUBPROCESS(4) if  &&  (fl_a_alarmed_x < fl_a_x_max) 
[1315] SUBPROCESS(4) if  &&  (fl_a_alarmed_y > fl_a_y_min) 
[1316] SUBPROCESS(4) if  &&  (fl_a_alarmed_y < fl_a_y_max) 
[1317] SUBPROCESS(4) if  &&  (afl_a_alarmed_target[0][5] < (FL)s4_t_lost_max)) 
[1318] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[1319] SUBSUBPROCESS(1) equal s4_t_lost 1;
[1320] SUBPROCESS(5) proc return s4_t_lost; 
[1321] MAINPROCESS(32) static S4 s4_bsm_alart_check_exp_tos<start> static S4 s4_bsm_alart_check_exp_tos( 
[1322] MAINPROCESS(32) static S4 s4_bsm_alart_check_exp_tos const FL afl_a_alarmed_target[1][ALARM_INFO_SIZE], 
[1323] MAINPROCESS(32) static S4 s4_bsm_alart_check_exp_tos FL fl_a_alarmed_x, 
[1324] MAINPROCESS(32) static S4 s4_bsm_alart_check_exp_tos FL fl_a_alarmed_y, 
[1325] MAINPROCESS(32) static S4 s4_bsm_alart_check_exp_tos FL fl_a_x_min, 
[1326] MAINPROCESS(32) static S4 s4_bsm_alart_check_exp_tos FL fl_a_x_max, 
[1327] MAINPROCESS(32) static S4 s4_bsm_alart_check_exp_tos FL fl_a_y_min, 
[1328] MAINPROCESS(32) static S4 s4_bsm_alart_check_exp_tos FL fl_a_y_max 
[1329] MAINPROCESS(32) static S4 s4_bsm_alart_check_exp_tos ) 
[1330] MAINPROCESS(32) subproc SUBPROCESS(1) 
[1331] SUBPROCESS(1) proc S4 s4_t_lost; 
[1332] SUBPROCESS(1) proc S4 s4_t_lost_max; 
[1333] SUBPROCESS(1) proc U1 u1_t_jdg_b25_flg; 
[1334] SUBPROCESS(1) equal s4_t_lost 0;
[1335] SUBPROCESS(1) func<start> u1_t_jdg_b25_flg = u1_bsm_alart_check_exp_tos_b25(fl_a_alarmed_y, fl_a_y_max 
[1336] SUBPROCESS(1) func<end> ); 
[1337] SUBPROCESS(1) if<start> if( 
[1338] SUBPROCESS(1) if u1_t_jdg_b25_flg == CU1_TRUE 
[1339] SUBPROCESS(1) if ) 
[1340] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1341] SUBSUBPROCESS(1) equal s4_t_lost_max (S4)CU1_ALARM_TOS_LOST_MAX_FWD;
[1342] SUBPROCESS(2) else<start> else 
[1343] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[1344] SUBSUBPROCESS(1) equal s4_t_lost_max (S4)CU1_ALARM_TOS_LOST_MAX;
[1345] SUBPROCESS(3) if<start> if( 
[1346] SUBPROCESS(3) if st_g_bsm_loop_data.as4_flg_tos_end[0] > 1 
[1347] SUBPROCESS(3) if ) 
[1348] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[1349] SUBSUBPROCESS(1) equal s4_t_lost_max ALARM_TOS_END_LOST_MAX;
[1350] SUBPROCESS(4) if <start> if ( 
[1351] SUBPROCESS(4) if  (st_g_bsm_loop_data.u1_fa_delete_count > (U1)0 
[1352] SUBPROCESS(4) if  ) 
[1353] SUBPROCESS(4) if  &&  (fl_a_alarmed_y > CFL_FA_DELETE_AREA)) 
[1354] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[1355] SUBSUBPROCESS(1) equal s4_t_lost_max (S4)0;
[1356] SUBPROCESS(5) if <start> if ( 
[1357] SUBPROCESS(5) if  (fl_a_alarmed_x > fl_a_x_min 
[1358] SUBPROCESS(5) if  ) 
[1359] SUBPROCESS(5) if  &&  (fl_a_alarmed_x < fl_a_x_max) 
[1360] SUBPROCESS(5) if  &&  (fl_a_alarmed_y > fl_a_y_min) 
[1361] SUBPROCESS(5) if  &&  (fl_a_alarmed_y < fl_a_y_max) 
[1362] SUBPROCESS(5) if  &&  (afl_a_alarmed_target[0][5] < (FL)s4_t_lost_max) 
[1363] SUBPROCESS(5) if  &&  (afl_a_alarmed_target[0][7] > ALARM_POWER_TOS_TH)) 
[1364] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[1365] SUBSUBPROCESS(1) equal s4_t_lost 1;
[1366] SUBPROCESS(6) proc return s4_t_lost; 
[1367] MAINPROCESS(33) static U1 u1_bsm_alart_check_exp_tos_b25<start> static U1 u1_bsm_alart_check_exp_tos_b25( 
[1368] MAINPROCESS(33) static U1 u1_bsm_alart_check_exp_tos_b25 FL fl_a_alarmed_y, FL fl_a_alarm_area_ymax 
[1369] MAINPROCESS(33) static U1 u1_bsm_alart_check_exp_tos_b25 ) 
[1370] MAINPROCESS(33) subproc SUBPROCESS(1) 
[1371] SUBPROCESS(1) proc U1 u1_t_jdg_b25_flag; 
[1372] SUBPROCESS(1) equal u1_t_jdg_b25_flag CU1_FALSE;
[1373] SUBPROCESS(1) if <start> if ( 
[1374] SUBPROCESS(1) if  fl_a_alarmed_y >= (fl_a_alarm_area_ymax - (FL)1.0F) 
[1375] SUBPROCESS(1) if  ) 
[1376] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1377] SUBSUBPROCESS(1) equal u1_t_jdg_b25_flag CU1_TRUE;
[1378] SUBPROCESS(2) else<start> else 
[1379] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[1380] SUBSUBPROCESS(1) equal u1_t_jdg_b25_flag CU1_FALSE;
[1381] SUBPROCESS(3) if <start> if ( 
[1382] SUBPROCESS(3) if  fl_a_alarmed_y > fl_a_alarm_area_ymax - (FL)1.8F 
[1383] SUBPROCESS(3) if  ) 
[1384] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[1385] SUBSUBPROCESS(1) equal u1_t_jdg_b25_flag CU1_TRUE;
[1386] SUBPROCESS(4) else<start> else 
[1387] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[1388] SUBSUBPROCESS(1) equal u1_t_jdg_b25_flag CU1_FALSE;
[1389] SUBPROCESS(5) proc return u1_t_jdg_b25_flag; 
[1390] MAINPROCESS(34) static S4 s4_bsm_alart_check_exp_other<start> static S4 s4_bsm_alart_check_exp_other( 
[1391] MAINPROCESS(34) static S4 s4_bsm_alart_check_exp_other const FL afl_a_alarmed_target[1][ALARM_INFO_SIZE], 
[1392] MAINPROCESS(34) static S4 s4_bsm_alart_check_exp_other FL fl_a_alarmed_x, 
[1393] MAINPROCESS(34) static S4 s4_bsm_alart_check_exp_other FL fl_a_alarmed_y, 
[1394] MAINPROCESS(34) static S4 s4_bsm_alart_check_exp_other FL fl_a_x_min, 
[1395] MAINPROCESS(34) static S4 s4_bsm_alart_check_exp_other FL fl_a_x_max, 
[1396] MAINPROCESS(34) static S4 s4_bsm_alart_check_exp_other FL fl_a_y_min, 
[1397] MAINPROCESS(34) static S4 s4_bsm_alart_check_exp_other FL fl_a_y_max 
[1398] MAINPROCESS(34) static S4 s4_bsm_alart_check_exp_other ) 
[1399] MAINPROCESS(34) subproc SUBPROCESS(1) 
[1400] SUBPROCESS(1) proc S4 s4_t_lost; 
[1401] SUBPROCESS(1) proc S4 s4_t_lost_max; 
[1402] SUBPROCESS(1) equal s4_t_lost 0;
[1403] SUBPROCESS(1) equal s4_t_lost_max (S4)CU1_ALARM_MID_LOST_MAX;
[1404] SUBPROCESS(1) if <start> if ( 
[1405] SUBPROCESS(1) if  (st_g_bsm_loop_data.u1_fa_delete_count > (U1)0 
[1406] SUBPROCESS(1) if  ) 
[1407] SUBPROCESS(1) if  &&  (fl_a_alarmed_y > CFL_FA_DELETE_AREA)) 
[1408] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1409] SUBSUBPROCESS(1) equal s4_t_lost_max (S4)0;
[1410] SUBPROCESS(2) if <start> if ( 
[1411] SUBPROCESS(2) if  (fl_a_alarmed_x >  fl_a_x_min 
[1412] SUBPROCESS(2) if  ) 
[1413] SUBPROCESS(2) if  &&  (fl_a_alarmed_x < (fl_a_x_max - ((fl_a_x_max - fl_a_x_min) * 0.25F))) 
[1414] SUBPROCESS(2) if  &&  (fl_a_alarmed_y > (fl_a_y_min + ((fl_a_y_max - fl_a_y_min) * 0.25F))) 
[1415] SUBPROCESS(2) if  &&  (fl_a_alarmed_y < (fl_a_y_max - ((fl_a_y_max - fl_a_y_min) * 0.25F))) 
[1416] SUBPROCESS(2) if  &&  (afl_a_alarmed_target[0][5] < (FL)s4_t_lost_max)) 
[1417] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[1418] SUBSUBPROCESS(1) equal s4_t_lost 1;
[1419] SUBPROCESS(3) proc return s4_t_lost; 
[1420] MAINPROCESS(35) static VD fn_bsm_alart_store_exp_altobj<start> static VD fn_bsm_alart_store_exp_altobj( 
[1421] MAINPROCESS(35) static VD fn_bsm_alart_store_exp_altobj const FL afl_a_alarmed_target[1][ALARM_INFO_SIZE], 
[1422] MAINPROCESS(35) static VD fn_bsm_alart_store_exp_altobj FL afl_a_alarmed_target_current[1][ALARM_INFO_SIZE] 
[1423] MAINPROCESS(35) static VD fn_bsm_alart_store_exp_altobj ) 
[1424] MAINPROCESS(35) subproc SUBPROCESS(1) 
[1425] SUBPROCESS(1) proc S4 tmp_peak_bin; 
[1426] SUBPROCESS(1) proc S4 tmp_peak_bin_up; 
[1427] SUBPROCESS(1) proc S4 tmp_peak_bin_dn; 
[1428] SUBPROCESS(1) proc S4 tmp_start; 
[1429] SUBPROCESS(1) proc S4 tmp_end; 
[1430] SUBPROCESS(1) proc FL tmp_power_up; 
[1431] SUBPROCESS(1) proc FL tmp_power_dn; 
[1432] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][0] afl_a_alarmed_target[0][0]+afl_a_alarmed_target[0][8]*CFL_SAMPLING_TIME;
[1433] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][1] afl_a_alarmed_target[0][1]+afl_a_alarmed_target[0][9]*CFL_SAMPLING_TIME;
[1434] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][2] afl_a_alarmed_target[0][2];
[1435] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][3] afl_a_alarmed_target[0][3] + 1.0F;
[1436] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][4] afl_a_alarmed_target[0][4];
[1437] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][5] afl_a_alarmed_target[0][5] + 1.0F;
[1438] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][6] afl_a_alarmed_target[0][6];
[1439] SUBPROCESS(1) func<start> tmp_peak_bin = (S4)( fl_abs(fl_sqrt(afl_a_alarmed_target[0][0]*afl_a_alarmed_target[0][0]+afl_a_alarmed_target[0][1]*afl_a_alarmed_target[0][1]))/RCOF*0.5F 
[1440] SUBPROCESS(1) func + NB_FFT_PT*0.5F 
[1441] SUBPROCESS(1) func<end> ); 
[1442] SUBPROCESS(1) func<start> tmp_peak_bin_up = tmp_peak_bin + (S4)( 0.5*(-afl_a_alarmed_target[0][9])/VCOF 
[1443] SUBPROCESS(1) func<end> ); 
[1444] SUBPROCESS(1) func<start> tmp_peak_bin_dn = tmp_peak_bin - (S4)( 0.5*(-afl_a_alarmed_target[0][9])/VCOF 
[1445] SUBPROCESS(1) func<end> ); 
[1446] SUBPROCESS(1) equal tmp_start tmp_peak_bin_up-5;
[1447] SUBPROCESS(1) equal tmp_end tmp_peak_bin_up+5;
[1448] SUBPROCESS(1) func<start> tmp_power_up = get_fmpower_of_specified_interval( 
[1449] SUBPROCESS(1) func (const FL (*))afl_g_cvw_lfm_ftt_power[0], 
[1450] SUBPROCESS(1) func tmp_start, 
[1451] SUBPROCESS(1) func tmp_end 
[1452] SUBPROCESS(1) func<end> ); 
[1453] SUBPROCESS(1) equal tmp_start tmp_peak_bin_dn-5;
[1454] SUBPROCESS(1) equal tmp_end tmp_peak_bin_dn+5;
[1455] SUBPROCESS(1) func<start> tmp_power_dn = get_fmpower_of_specified_interval( 
[1456] SUBPROCESS(1) func (const FL (*))afl_g_cvw_lfm_ftt_power[1], 
[1457] SUBPROCESS(1) func tmp_start, 
[1458] SUBPROCESS(1) func tmp_end 
[1459] SUBPROCESS(1) func<end> ); 
[1460] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][7] (tmp_power_up+tmp_power_dn)*0.5F-afl_a_alarmed_target_current[0][6];
[1461] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][8] afl_a_alarmed_target[0][8];
[1462] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][9] afl_a_alarmed_target[0][9];
[1463] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][10] afl_a_alarmed_target[0][10];
[1464] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][11] afl_a_alarmed_target[0][11];
[1465] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][12] afl_a_alarmed_target[0][12];
[1466] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][13] afl_a_alarmed_target[0][13];
[1467] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][14] afl_a_alarmed_target[0][14];
[1468] SUBPROCESS(1) equal afl_a_alarmed_target_current[0][15] afl_a_alarmed_target[0][15];
[1469] SUBPROCESS(1) proc return; 
[1470] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj<start> static VD fn_bsm_alart_check_new_altobj( 
[1471] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj S4 s4_final_a_target_num, 
[1472] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj signed long as4_a_Tx_int[TARGET_BUFFSIZE][NORM_INT], 
[1473] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj FL afl_a_Tx_float[TARGET_BUFFSIZE][TGT_FLT], 
[1474] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj const S4 as4_a_checked_target[TARGET_BUFFSIZE], 
[1475] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj S4 s4_a_tos_flg, 
[1476] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj S4 as4_a_alarmed_target_num_current[1], 
[1477] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj FL afl_a_alarmed_target_current[TARGET_BUFFSIZE][ALARM_INFO_SIZE], 
[1478] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj FL fl_a_alarm_area_y_min, 
[1479] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj S4 *ps4_a_alarm_flg 
[1480] MAINPROCESS(36) static VD fn_bsm_alart_check_new_altobj ) 
[1481] MAINPROCESS(36) subproc SUBPROCESS(1) 
[1482] SUBPROCESS(1) proc S4 i; 
[1483] SUBPROCESS(1) proc S4 s4_t_index; 
[1484] SUBPROCESS(1) proc FL fl_t_erased_type; 
[1485] SUBPROCESS(1) proc FL fl_t_object_x; 
[1486] SUBPROCESS(1) proc FL fl_t_object_y; 
[1487] SUBPROCESS(1) proc FL fl_t_object_vy; 
[1488] SUBPROCESS(1) proc FL fl_t_x_min; 
[1489] SUBPROCESS(1) proc FL fl_t_x_max; 
[1490] SUBPROCESS(1) proc FL fl_t_y_min; 
[1491] SUBPROCESS(1) proc FL fl_t_y_max; 
[1492] SUBPROCESS(1) equal fl_t_object_x 0.0F;
[1493] SUBPROCESS(1) equal fl_t_object_y 0.0F;
[1494] SUBPROCESS(1) equal fl_t_object_vy 0.0F;
[1495] SUBPROCESS(1) for<start> for( 
[1496] SUBPROCESS(1) for i=0; 
[1497] SUBPROCESS(1) for i<10; 
[1498] SUBPROCESS(1) for i++) 
[1499] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1500] SUBSUBPROCESS(1) equal afl_g_alarm_x_min[i] fl_get_road_width(s2_g_curvr_for_base, -(float)i) + ALARM_X_IN + ALARM_X_OFFSET_IN;
[1501] SUBSUBPROCESS(1) equal afl_g_alarm_x_max[i] fl_get_road_width(s2_g_curvr_for_base, -(float)i) + ALARM_X_OUT + ALARM_X_OFFSET_OUT;
[1502] SUBSUBPROCESS(1) equal afl_g_alarm_y[i] -(float)i;
[1503] SUBPROCESS(2) if<start> if( 
[1504] SUBPROCESS(2) if st_g_btt_stat.BTT_drv == BTT_RET_t.Drv_Stat.CONNECT 
[1505] SUBPROCESS(2) if ) 
[1506] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[1507] SUBSUBPROCESS(1) equal fl_a_alarm_area_y_min - st_g_btt_alertarea.rear.VarY;
[1508] SUBPROCESS(3) equal afl_g_btt_aaz_area[3] fl_a_alarm_area_y_min;
[1509] SUBPROCESS(3) for<start> for( 
[1510] SUBPROCESS(3) for i=0; 
[1511] SUBPROCESS(3) for i<s4_final_a_target_num; 
[1512] SUBPROCESS(3) for i++) 
[1513] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[1514] SUBSUBPROCESS(1) equal fl_t_x_min ALARM_X_IN + ALARM_X_OFFSET_IN + st_g_btt_alertarea.side.VarXin;
[1515] SUBSUBPROCESS(1) equal fl_t_x_max ALARM_X_OUT + ALARM_X_OFFSET_OUT + st_g_btt_alertarea.side.VarXout;
[1516] SUBSUBPROCESS(1) equal fl_t_x_min ALARM_X_IN + ALARM_X_OFFSET_IN;
[1517] SUBSUBPROCESS(1) equal fl_t_x_max ALARM_X_OUT + ALARM_X_OFFSET_OUT;
[1518] SUBSUBPROCESS(1) equal fl_t_y_min fl_a_alarm_area_y_min - ALARM_Y_OFFSET;
[1519] SUBSUBPROCESS(1) equal fl_t_y_max ALARM_Y_FORWARD;
[1520] SUBSUBPROCESS(1) equal fl_t_y_max ALARM_Y_FORWARD - ALARM_Y_OFFSET;
[1521] SUBSUBPROCESS(1) if<start> if( 
[1522] SUBSUBPROCESS(1) if as4_a_checked_target[i]==0 
[1523] SUBSUBPROCESS(1) if ) 
[1524] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[1525] SUBSUBSUBPROCESS(1) func<start> fn_bsm_alart_get_alart_area( 
[1526] SUBSUBSUBPROCESS(1) func (const FL (*)[TGT_FLT])&afl_a_Tx_float[i], 
[1527] SUBSUBSUBPROCESS(1) func &fl_t_object_x, 
[1528] SUBSUBSUBPROCESS(1) func &fl_t_object_y, 
[1529] SUBSUBSUBPROCESS(1) func &fl_t_object_vy, 
[1530] SUBSUBSUBPROCESS(1) func &fl_t_x_min, 
[1531] SUBSUBSUBPROCESS(1) func &fl_t_x_max, 
[1532] SUBSUBSUBPROCESS(1) func &fl_t_y_min 
[1533] SUBSUBSUBPROCESS(1) func<end> ); 
[1534] SUBSUBSUBPROCESS(1) equal s4_t_index -1;
[1535] SUBSUBSUBPROCESS(1) equal fl_t_erased_type -1.0F;
[1536] SUBSUBSUBPROCESS(1) func<start> fn_bsm_alart_get_store_index( 
[1537] SUBSUBSUBPROCESS(1) func (const signed long (*)[NORM_INT])&as4_a_Tx_int[i], 
[1538] SUBSUBSUBPROCESS(1) func (const FL (*)[TGT_FLT])&afl_a_Tx_float[i], 
[1539] SUBSUBSUBPROCESS(1) func (const S4 (*))as4_a_alarmed_target_num_current, 
[1540] SUBSUBSUBPROCESS(1) func (const FL (*)[ALARM_INFO_SIZE])afl_a_alarmed_target_current, 
[1541] SUBSUBSUBPROCESS(1) func fl_t_object_x, 
[1542] SUBSUBSUBPROCESS(1) func fl_t_object_y, 
[1543] SUBSUBSUBPROCESS(1) func fl_t_x_min, 
[1544] SUBSUBSUBPROCESS(1) func fl_t_x_max, 
[1545] SUBSUBSUBPROCESS(1) func fl_t_y_min, 
[1546] SUBSUBSUBPROCESS(1) func fl_t_y_max, 
[1547] SUBSUBSUBPROCESS(1) func &fl_t_erased_type, 
[1548] SUBSUBSUBPROCESS(1) func &s4_t_index, 
[1549] SUBSUBSUBPROCESS(1) func fl_a_alarm_area_y_min 
[1550] SUBSUBSUBPROCESS(1) func<end> ); 
[1551] SUBSUBSUBPROCESS(1) if<start> if( 
[1552] SUBSUBSUBPROCESS(1) if s4_t_index != -1 
[1553] SUBSUBSUBPROCESS(1) if ) 
[1554] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[1555] SUBSUBSUBSUBPROCESS(1) func<start> fn_bsm_alart_store_new_altobj( 
[1556] SUBSUBSUBSUBPROCESS(1) func &as4_a_Tx_int[i], 
[1557] SUBSUBSUBSUBPROCESS(1) func &afl_a_Tx_float[i], 
[1558] SUBSUBSUBSUBPROCESS(1) func fl_t_object_x, 
[1559] SUBSUBSUBSUBPROCESS(1) func fl_t_object_y, 
[1560] SUBSUBSUBSUBPROCESS(1) func s4_a_tos_flg, 
[1561] SUBSUBSUBSUBPROCESS(1) func fl_t_erased_type, 
[1562] SUBSUBSUBSUBPROCESS(1) func &afl_a_alarmed_target_current[s4_t_index], 
[1563] SUBSUBSUBSUBPROCESS(1) func ps4_a_alarm_flg, 
[1564] SUBSUBSUBSUBPROCESS(1) func fl_a_alarm_area_y_min 
[1565] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[1566] SUBSUBSUBSUBPROCESS(1) proc as4_a_alarmed_target_num_current[0]++; 
[1567] SUBPROCESS(4) proc return; 
[1568] MAINPROCESS(37) static VD fn_bsm_alart_get_alart_area<start> static VD fn_bsm_alart_get_alart_area( 
[1569] MAINPROCESS(37) static VD fn_bsm_alart_get_alart_area const FL afl_a_Tx_float[1][TGT_FLT], 
[1570] MAINPROCESS(37) static VD fn_bsm_alart_get_alart_area FL *pfl_a_object_x, 
[1571] MAINPROCESS(37) static VD fn_bsm_alart_get_alart_area FL *pfl_a_object_y, 
[1572] MAINPROCESS(37) static VD fn_bsm_alart_get_alart_area FL *pfl_a_object_vy, 
[1573] MAINPROCESS(37) static VD fn_bsm_alart_get_alart_area FL *pfl_a_x_min, 
[1574] MAINPROCESS(37) static VD fn_bsm_alart_get_alart_area FL *pfl_a_x_max, 
[1575] MAINPROCESS(37) static VD fn_bsm_alart_get_alart_area FL *pfl_a_y_min 
[1576] MAINPROCESS(37) static VD fn_bsm_alart_get_alart_area ) 
[1577] MAINPROCESS(37) subproc SUBPROCESS(1) 
[1578] SUBPROCESS(1) equal *pfl_a_object_x afl_a_Tx_float[0][9];
[1579] SUBPROCESS(1) equal *pfl_a_object_y afl_a_Tx_float[0][10];
[1580] SUBPROCESS(1) if<start> if( 
[1581] SUBPROCESS(1) if u1_g_sns_pos==SENSOR_LEFT 
[1582] SUBPROCESS(1) if ) 
[1583] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1584] SUBSUBPROCESS(1) equal *pfl_a_object_x - *pfl_a_object_x;
[1585] SUBPROCESS(2) equal *pfl_a_object_vy afl_a_Tx_float[0][16];
[1586] SUBPROCESS(2) if<start> if( 
[1587] SUBPROCESS(2) if *pfl_a_object_y < 0.0F 
[1588] SUBPROCESS(2) if ) 
[1589] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[1590] SUBSUBPROCESS(1) equal *pfl_a_x_min fl_get_road_width(s2_g_curvr_for_base, *pfl_a_object_y) + *pfl_a_x_min;
[1591] SUBSUBPROCESS(1) equal *pfl_a_x_max fl_get_road_width(s2_g_curvr_for_base, *pfl_a_object_y) + *pfl_a_x_max;
[1592] SUBPROCESS(3) else<start> else 
[1593] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[1594] SUBPROCESS(4) func<start> *pfl_a_y_min = get_time_offset_area( *pfl_a_y_min, *pfl_a_object_vy, ALARM_OFFSET_TIME 
[1595] SUBPROCESS(4) func<end> ); 
[1596] SUBPROCESS(4) proc return; 
[1597] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index<start> static VD fn_bsm_alart_get_store_index( 
[1598] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index const signed long as4_a_Tx_int[1][NORM_INT], 
[1599] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index const FL afl_a_Tx_float[1][TGT_FLT], 
[1600] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index const S4 as4_a_alarmed_target_num_current[1], 
[1601] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index const FL afl_a_alarmed_target_current[TARGET_BUFFSIZE][ALARM_INFO_SIZE], 
[1602] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index FL fl_a_object_x, 
[1603] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index FL fl_a_object_y, 
[1604] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index FL fl_a_x_min, 
[1605] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index FL fl_a_x_max, 
[1606] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index FL fl_a_y_min, 
[1607] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index FL fl_a_y_max, 
[1608] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index FL *pfl_a_erased_type, 
[1609] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index S4 *ps4_a_index, 
[1610] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index FL fl_a_alarm_area_y_min 
[1611] MAINPROCESS(38) static VD fn_bsm_alart_get_store_index ) 
[1612] MAINPROCESS(38) subproc SUBPROCESS(1) 
[1613] SUBPROCESS(1) proc S4 j; 
[1614] SUBPROCESS(1) proc FL fl_t_comp; 
[1615] SUBPROCESS(1) proc FL fl_t_min; 
[1616] SUBPROCESS(1) if <start> if ( 
[1617] SUBPROCESS(1) if  (fl_a_object_x > fl_a_x_min 
[1618] SUBPROCESS(1) if  ) 
[1619] SUBPROCESS(1) if  &&  (fl_a_object_x < fl_a_x_max) 
[1620] SUBPROCESS(1) if  &&  (fl_a_object_y < fl_a_y_max) 
[1621] SUBPROCESS(1) if  &&  (fl_a_object_y > fl_a_y_min) 
[1622] SUBPROCESS(1) if  &&  (as4_a_Tx_int[0][10] == 0) 
[1623] SUBPROCESS(1) if  &&  (!((as4_a_Tx_int[0][14] == OBJECT_TYPE_2F) 
[1624] SUBPROCESS(1) if  &&     (as4_a_Tx_int[0][12] == (S4)1)))) 
[1625] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[1626] SUBSUBPROCESS(1) if <start> if ( 
[1627] SUBSUBPROCESS(1) if  (afl_a_Tx_float[0][13]  < ((FL)-10.0F / (FL)3.6F) 
[1628] SUBSUBPROCESS(1) if  ) 
[1629] SUBSUBPROCESS(1) if  ||  ((afl_a_Tx_float[0][13] < ((FL)-8.5F / (FL)3.6F)) 
[1630] SUBSUBPROCESS(1) if  &&   (afl_a_Tx_float[0][7]  < (fl_a_alarm_area_y_min + (FL)1.0F)))) 
[1631] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[1632] SUBSUBSUBPROCESS(1) equal *ps4_a_index (S4)-1;
[1633] SUBSUBPROCESS(2) else if <start> else if ( 
[1634] SUBSUBPROCESS(2) else if  (st_g_bsm_loop_data.as4_fast_sot_flg[0] > (S4)0 
[1635] SUBSUBPROCESS(2) else if  ) 
[1636] SUBSUBPROCESS(2) else if  &&  (as4_a_Tx_int[0][17] < (S4)5)) 
[1637] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[1638] SUBSUBSUBPROCESS(1) equal *ps4_a_index (S4)-1;
[1639] SUBSUBPROCESS(3) else if <start> else if ( 
[1640] SUBSUBPROCESS(3) else if  (as4_a_Tx_int[0][15] > (S4)0 
[1641] SUBSUBPROCESS(3) else if  ) 
[1642] SUBSUBPROCESS(3) else if  &&  (as4_a_Tx_int[0][17] < (S4)5)) 
[1643] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[1644] SUBSUBSUBPROCESS(1) equal *ps4_a_index (S4)-1;
[1645] SUBSUBPROCESS(4) else if <start> else if ( 
[1646] SUBSUBPROCESS(4) else if  (as4_a_Tx_int[0][16] == (S4)0 
[1647] SUBSUBPROCESS(4) else if  ) 
[1648] SUBSUBPROCESS(4) else if  &&  (st_g_bsm_loop_data.u1_reliable_jdg_mask_count == (U1)0)) 
[1649] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[1650] SUBSUBSUBPROCESS(1) equal *ps4_a_index (S4)-1;
[1651] SUBSUBPROCESS(5) ??? else 
[1652] SUBPROCESS(2) else if <start> else if ( 
[1653] SUBPROCESS(2) else if  (fl_g_v_self_bsm_for_base < (FL)35.0F 
[1654] SUBPROCESS(2) else if  ) 
[1655] SUBPROCESS(2) else if  &&  (fl_a_object_y < (FL)-3.5F) 
[1656] SUBPROCESS(2) else if  &&  (fl_a_object_y > (FL)-7.5F)) 
[1657] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[1658] SUBSUBPROCESS(1) if <start> if ( 
[1659] SUBSUBPROCESS(1) if  fl_a_object_x < fl_a_x_min + (FL)0.1F 
[1660] SUBSUBPROCESS(1) if  ) 
[1661] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[1662] SUBSUBSUBPROCESS(1) equal *ps4_a_index (S4)-1;
[1663] SUBSUBPROCESS(2) else if <start> else if ( 
[1664] SUBSUBPROCESS(2) else if  fl_a_object_x < fl_a_x_min + (FL)0.4F 
[1665] SUBSUBPROCESS(2) else if  ) 
[1666] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[1667] SUBSUBSUBPROCESS(1) if <start> if ( 
[1668] SUBSUBSUBPROCESS(1) if  afl_a_Tx_float[0][13] * (FL)3.6F < (FL)2.6F 
[1669] SUBSUBSUBPROCESS(1) if  ) 
[1670] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[1671] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_index (S4)-1;
[1672] SUBSUBSUBPROCESS(2) else<start> else 
[1673] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[1674] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_index (S4)1;
[1675] SUBSUBPROCESS(3) else if <start> else if ( 
[1676] SUBSUBPROCESS(3) else if  fl_a_object_x < fl_a_x_min + (FL)0.8F 
[1677] SUBSUBPROCESS(3) else if  ) 
[1678] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[1679] SUBSUBSUBPROCESS(1) if <start> if ( 
[1680] SUBSUBSUBPROCESS(1) if  afl_a_Tx_float[0][13] * (FL)3.6F < (FL)3.5F 
[1681] SUBSUBSUBPROCESS(1) if  ) 
[1682] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[1683] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_index (S4)-1;
[1684] SUBSUBSUBPROCESS(2) else<start> else 
[1685] SUBSUBSUBPROCESS(2) subproc SUBSUBSUBSUBPROCESS(1) 
[1686] SUBSUBSUBSUBPROCESS(1) equal *ps4_a_index (S4)1;
[1687] SUBSUBPROCESS(4) else<start> else 
[1688] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[1689] SUBSUBSUBPROCESS(1) equal *ps4_a_index (S4)1;
[1690] SUBPROCESS(3) else<start> else 
[1691] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[1692] SUBSUBPROCESS(1) equal *ps4_a_index (S4)1;
[1693] SUBPROCESS(4) if <start> if ( 
[1694] SUBPROCESS(4) if  *ps4_a_index != (S4)-1 
[1695] SUBPROCESS(4) if  ) 
[1696] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[1697] SUBSUBPROCESS(1) if<start> if( 
[1698] SUBSUBPROCESS(1) if as4_a_alarmed_target_num_current[0] < (S4)(TARGET_BUFFSIZE-1) 
[1699] SUBSUBPROCESS(1) if ) 
[1700] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[1701] SUBSUBSUBPROCESS(1) equal *ps4_a_index as4_a_alarmed_target_num_current[0];
[1702] SUBSUBPROCESS(2) else<start> else 
[1703] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[1704] SUBSUBSUBPROCESS(1) equal fl_t_min 1000.0F;
[1705] SUBSUBSUBPROCESS(1) equal fl_t_comp 0.0F;
[1706] SUBSUBSUBPROCESS(1) for<start> for( 
[1707] SUBSUBSUBPROCESS(1) for j=0; 
[1708] SUBSUBSUBPROCESS(1) for j<TARGET_BUFFSIZE; 
[1709] SUBSUBSUBPROCESS(1) for j++) 
[1710] SUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBPROCESS(1) 
[1711] SUBSUBSUBSUBPROCESS(1) ??? fl_t_comp = fl_abs(afl_a_alarmed_target_current[j][0]-afl_a_Tx_float[0][8]) 
[1712] SUBSUBSUBSUBPROCESS(1) func<start> + fl_abs(afl_a_alarmed_target_current[j][1]-afl_a_Tx_float[0][7] 
[1713] SUBSUBSUBSUBPROCESS(1) func<end> ); 
[1714] SUBSUBSUBSUBPROCESS(1) if<start> if( 
[1715] SUBSUBSUBSUBPROCESS(1) if fl_t_comp < fl_t_min 
[1716] SUBSUBSUBSUBPROCESS(1) if ) 
[1717] SUBSUBSUBSUBPROCESS(1) subproc SUBSUBSUBSUBSUBPROCESS(1) 
[1718] SUBSUBSUBSUBSUBPROCESS(1) equal *ps4_a_index j;
[1719] SUBSUBSUBSUBSUBPROCESS(1) equal fl_t_min fl_t_comp;
[1720] SUBSUBSUBSUBSUBPROCESS(1) equal *pfl_a_erased_type afl_a_alarmed_target_current[j][4];
[1721] MAINPROCESS(39) proc return; 
----------------- Total Codes : 1721 lines
--------------------------
[Function Name] : fn_bsm_alart_store_new_altobj 
-Return type : static VD 
-Argument : 9 
     [0] : signed long   as4_a_Tx_int[1][NORM_INT] 
     [1] : FL   afl_a_Tx_float[1][TGT_FLT] 
     [2] : FL   fl_a_object_x 
     [3] : FL   fl_a_object_y 
     [4] : S4   s4_a_tos_flg 
     [5] : FL   fl_a_erased_type 
     [6] : FL   afl_a_alarmed_target_current[1][ALARM_INFO_SIZE] 
     [7] : S4   *ps4_a_alarm_flg 
     [8] : FL   fl_a_alarm_area_y_min 
----- Codes -----
[1] MAINPROCESS(1) proc S4 tmp_peak_bin_up; 
[2] MAINPROCESS(1) proc S4 tmp_peak_bin_dn; 
[3] MAINPROCESS(1) proc S4 tmp_start; 
[4] MAINPROCESS(1) proc S4 tmp_end; 
[5] MAINPROCESS(1) proc FL tmp_power_up; 
[6] MAINPROCESS(1) proc FL tmp_power_dn; 
[7] MAINPROCESS(1) equal *ps4_a_alarm_flg 1;
[8] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][0] afl_a_Tx_float[0][9];
[9] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][1] afl_a_Tx_float[0][10];
[10] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][2] (FL)as4_a_Tx_int[0][11];
[11] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][3] 1.0F;
[12] MAINPROCESS(1) func<start> afl_a_alarmed_target_current[0][4] = fl_bsm_alart_check_alart_type( 
[13] MAINPROCESS(1) func fl_a_object_x, 
[14] MAINPROCESS(1) func fl_a_object_y, 
[15] MAINPROCESS(1) func s4_a_tos_flg, 
[16] MAINPROCESS(1) func fl_a_erased_type, 
[17] MAINPROCESS(1) func fl_a_alarm_area_y_min 
[18] MAINPROCESS(1) func<end> ); 
[19] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][5] 0.0F;
[20] MAINPROCESS(1) equal tmp_peak_bin_up as4_a_Tx_int[0][4];
[21] MAINPROCESS(1) equal tmp_peak_bin_dn as4_a_Tx_int[0][5];
[22] MAINPROCESS(1) equal tmp_start tmp_peak_bin_up-5;
[23] MAINPROCESS(1) equal tmp_end tmp_peak_bin_up+5;
[24] MAINPROCESS(1) func<start> tmp_power_up = get_fmpower_of_specified_interval( 
[25] MAINPROCESS(1) func (const FL (*))afl_g_cvw_lfm_ftt_power[0], 
[26] MAINPROCESS(1) func tmp_start, 
[27] MAINPROCESS(1) func tmp_end 
[28] MAINPROCESS(1) func<end> ); 
[29] MAINPROCESS(1) equal tmp_start tmp_peak_bin_dn-5;
[30] MAINPROCESS(1) equal tmp_end tmp_peak_bin_dn+5;
[31] MAINPROCESS(1) func<start> tmp_power_dn = get_fmpower_of_specified_interval( 
[32] MAINPROCESS(1) func (const FL (*))afl_g_cvw_lfm_ftt_power[1], 
[33] MAINPROCESS(1) func tmp_start, 
[34] MAINPROCESS(1) func tmp_end 
[35] MAINPROCESS(1) func<end> ); 
[36] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][6] (tmp_power_up+tmp_power_dn)*0.5F;
[37] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][7] 0.0F;
[38] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][8] afl_a_Tx_float[0][15];
[39] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][9] afl_a_Tx_float[0][16];
[40] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][10] afl_a_Tx_float[0][9];
[41] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][11] afl_a_Tx_float[0][10];
[42] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][12] ALARM_X_IN + ALARM_X_OFFSET_IN;
[43] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][13] ALARM_X_OUT + ALARM_X_OFFSET_OUT;
[44] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][14] fl_a_alarm_area_y_min - ALARM_Y_OFFSET;
[45] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][15] ALARM_Y_FORWARD;
[46] MAINPROCESS(1) equal afl_a_alarmed_target_current[0][15] ALARM_Y_FORWARD - ALARM_Y_OFFSET;
[47] MAINPROCESS(1) proc return; 
----------------- Total Codes : 47 lines
--------------------------
[Function Name] : fl_bsm_alart_check_alart_type 
-Return type : static FL 
-Argument : 5 
     [0] : FL   fl_a_object_x 
     [1] : FL   fl_a_object_y 
     [2] : S4   s4_a_tos_flg 
     [3] : FL   fl_a_erased_type 
     [4] : FL   fl_a_alarm_area_y_min 
----- Codes -----
[1] MAINPROCESS(1) proc FL fl_a_alart_type; 
[2] MAINPROCESS(1) if<start> if( 
[3] MAINPROCESS(1) if fl_a_erased_type != -1.0F 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal fl_a_alart_type fl_a_erased_type;
[7] MAINPROCESS(2) else<start> else 
[8] MAINPROCESS(2) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if<start> if( 
[10] SUBPROCESS(1) if s4_a_tos_flg == 1 
[11] SUBPROCESS(1) if ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) equal fl_a_alart_type ALARM_TYPE_TOS;
[14] SUBPROCESS(2) else if <start> else if ( 
[15] SUBPROCESS(2) else if  fl_a_object_y <= (fl_a_alarm_area_y_min + (FL)3.0F) 
[16] SUBPROCESS(2) else if  ) 
[17] SUBPROCESS(2) subproc SUBSUBPROCESS(1) 
[18] SUBSUBPROCESS(1) equal fl_a_alart_type ALARM_TYPE_TOS;
[19] SUBPROCESS(3) else if <start> else if ( 
[20] SUBPROCESS(3) else if  fl_a_object_y >= (ALARM_Y_FORWARD - (FL)2.5F) 
[21] SUBPROCESS(3) else if  ) 
[22] SUBPROCESS(3) subproc SUBSUBPROCESS(1) 
[23] SUBSUBPROCESS(1) equal fl_a_alart_type ALARM_TYPE_SOT;
[24] SUBPROCESS(4) else if <start> else if ( 
[25] SUBPROCESS(4) else if  fl_a_object_x > (ALARM_X_OUT - (FL)1.0F) 
[26] SUBPROCESS(4) else if  ) 
[27] SUBPROCESS(4) subproc SUBSUBPROCESS(1) 
[28] SUBSUBPROCESS(1) equal fl_a_alart_type ALARM_TYPE_MERGEIN;
[29] SUBPROCESS(5) else<start> else 
[30] SUBPROCESS(5) subproc SUBSUBPROCESS(1) 
[31] SUBSUBPROCESS(1) equal fl_a_alart_type ALARM_TYPE_OTHER;
[32] MAINPROCESS(3) proc return fl_a_alart_type; 
----------------- Total Codes : 32 lines
--------------------------
[Function Name] : fn_bsm_alart_set_alart_target 
-Return type : static VD 
-Argument : 2 
     [0] : const S4   as4_alarmed_target_num_current[1] 
     [1] : const FL   afl_a_alarmed_target_current[TARGET_BUFFSIZE][ALARM_INFO_SIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) proc S4 j; 
[3] MAINPROCESS(1) for<start> for( 
[4] MAINPROCESS(1) for i=0; 
[5] MAINPROCESS(1) for i<TARGET_BUFFSIZE; 
[6] MAINPROCESS(1) for i++) 
[7] MAINPROCESS(1) subproc SUBPROCESS(1) 
[8] SUBPROCESS(1) for<start> for( 
[9] SUBPROCESS(1) for j=0; 
[10] SUBPROCESS(1) for j<ALARM_INFO_SIZE; 
[11] SUBPROCESS(1) for j++) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) equal st_g_bsm_alarm_data.afl_alarmed_target[i][j] afl_a_alarmed_target_current[i][j];
[14] MAINPROCESS(2) equal st_g_bsm_alarm_data.as4_alarmed_num[0] as4_alarmed_target_num_current[0];
[15] MAINPROCESS(2) proc return; 
----------------- Total Codes : 15 lines
--------------------------
[Function Name] : fn_bsm_alart_extend_alart 
-Return type : static VD 
-Argument : 3 
     [0] : S4   s4_a_tos_flg 
     [1] : S4   s4_a_not_alarm 
     [2] : S4   *ps4_a_alarm_flg 
----- Codes -----
[1] MAINPROCESS(1) if<start> if( 
[2] MAINPROCESS(1) if *ps4_a_alarm_flg==0 
[3] MAINPROCESS(1) if ) 
[4] MAINPROCESS(1) subproc SUBPROCESS(1) 
[5] SUBPROCESS(1) if<start> if( 
[6] SUBPROCESS(1) if st_g_bsm_alarm_data.as4_alarm_off_count[0] > 0 
[7] SUBPROCESS(1) if ) 
[8] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[9] SUBSUBPROCESS(1) if<start> if( 
[10] SUBSUBPROCESS(1) if s4_a_tos_flg==1 
[11] SUBSUBPROCESS(1) if ) 
[12] SUBSUBPROCESS(1) subproc SUBSUBSUBPROCESS(1) 
[13] SUBSUBSUBPROCESS(1) equal st_g_bsm_alarm_data.as4_alarm_off_count[0] 0;
[14] SUBSUBPROCESS(2) else<start> else 
[15] SUBSUBPROCESS(2) subproc SUBSUBSUBPROCESS(1) 
[16] SUBSUBSUBPROCESS(1) proc st_g_bsm_alarm_data.as4_alarm_off_count[0]--; 
[17] SUBSUBPROCESS(3) if<start> if( 
[18] SUBSUBPROCESS(3) if st_g_bsm_alarm_data.as4_alarm_off_count[0]==0 
[19] SUBSUBPROCESS(3) if ) 
[20] SUBSUBPROCESS(3) subproc SUBSUBSUBPROCESS(1) 
[21] SUBSUBSUBPROCESS(1) equal *ps4_a_alarm_flg 0;
[22] SUBSUBPROCESS(4) else<start> else 
[23] SUBSUBPROCESS(4) subproc SUBSUBSUBPROCESS(1) 
[24] SUBSUBSUBPROCESS(1) equal *ps4_a_alarm_flg 1;
[25] MAINPROCESS(2) else<start> else 
[26] MAINPROCESS(2) subproc SUBPROCESS(1) 
[27] SUBPROCESS(1) equal st_g_bsm_alarm_data.as4_alarm_off_count[0] ALARM_OFF_COUNT;
[28] MAINPROCESS(3) if<start> if( 
[29] MAINPROCESS(3) if s4_a_not_alarm==1 
[30] MAINPROCESS(3) if ) 
[31] MAINPROCESS(3) subproc SUBPROCESS(1) 
[32] SUBPROCESS(1) equal *ps4_a_alarm_flg 0;
[33] MAINPROCESS(4) proc return; 
----------------- Total Codes : 33 lines
--------------------------
[Function Name] : get_hysteresis_area 
-Return type : VD 
-Argument : 4 
     [0] : FL   ry 
     [1] : FL   type 
     [2] : FL   area[4] 
     [3] : FL   offset[3] 
----- Codes -----
[1] MAINPROCESS(1) equal FL x_min area[0];
[2] MAINPROCESS(1) equal FL x_max area[1];
[3] MAINPROCESS(1) equal FL y_min area[2];
[4] MAINPROCESS(1) equal FL y_max area[3];
[5] MAINPROCESS(1) equal FL tmp_x_min x_min;
[6] MAINPROCESS(1) equal FL tmp_x_max x_max;
[7] MAINPROCESS(1) equal FL tmp_y_min y_min;
[8] MAINPROCESS(1) equal FL tmp_y_max y_max;
[9] MAINPROCESS(1) equal tmp_y_max y_max + ALARM_HYS_MARGIN_FWD;
[10] MAINPROCESS(1) equal tmp_y_min y_min - ALARM_HYS_MARGIN_BWD;
[11] MAINPROCESS(1) equal tmp_x_max tmp_x_max + ALARM_HYS_MARGIN_SIDE;
[12] MAINPROCESS(1) equal tmp_x_min tmp_x_min - ALARM_HYS_MARGIN_SIDE;
[13] MAINPROCESS(1) if<start> if( 
[14] MAINPROCESS(1) if ry < 0.0F 
[15] MAINPROCESS(1) if ) 
[16] MAINPROCESS(1) subproc SUBPROCESS(1) 
[17] SUBPROCESS(1) equal tmp_x_min fl_get_road_width(s2_g_curvr_for_base, ry) + tmp_x_min;
[18] SUBPROCESS(1) equal tmp_x_max fl_get_road_width(s2_g_curvr_for_base, ry) + tmp_x_max;
[19] MAINPROCESS(2) else<start> else 
[20] MAINPROCESS(2) subproc SUBPROCESS(1) 
[21] SUBPROCESS(1) equal tmp_x_min tmp_x_min;
[22] SUBPROCESS(1) equal tmp_x_max tmp_x_max;
[23] MAINPROCESS(3) equal area[0] tmp_x_min;
[24] MAINPROCESS(3) equal area[1] tmp_x_max;
[25] MAINPROCESS(3) equal area[2] tmp_y_min;
[26] MAINPROCESS(3) equal area[3] tmp_y_max;
[27] MAINPROCESS(3) proc return; 
----------------- Total Codes : 27 lines
--------------------------
[Function Name] : get_time_offset_area 
-Return type : FL 
-Argument : 3 
     [0] : FL   r 
     [1] : FL   v 
     [2] : FL   time 
----- Codes -----
[1] MAINPROCESS(1) equal FL fret r;
[2] MAINPROCESS(1) if<start> if( 
[3] MAINPROCESS(1) if v > 0.0F 
[4] MAINPROCESS(1) if ) 
[5] MAINPROCESS(1) subproc SUBPROCESS(1) 
[6] SUBPROCESS(1) equal fret r - v*time;
[7] MAINPROCESS(2) proc return fret; 
----------------- Total Codes : 7 lines
--------------------------
[Function Name] : get_fmpower_of_specified_interval 
-Return type : FL 
-Argument : 3 
     [0] : const FL   power[NB_FFT_PT] 
     [1] : S4   start_bin 
     [2] : S4   end_bin 
----- Codes -----
[1] MAINPROCESS(1) equal FL tmp_power 0.0F;
[2] MAINPROCESS(1) equal S4 tmp_num 0;
[3] MAINPROCESS(1) proc S4 i; 
[4] MAINPROCESS(1) for<start> for( 
[5] MAINPROCESS(1) for i=start_bin; 
[6] MAINPROCESS(1) for i<end_bin; 
[7] MAINPROCESS(1) for i++) 
[8] MAINPROCESS(1) subproc SUBPROCESS(1) 
[9] SUBPROCESS(1) if <start> if ( 
[10] SUBPROCESS(1) if  ((S4)0 <= i) && (i < NB_FFT_PT) 
[11] SUBPROCESS(1) if  ) 
[12] SUBPROCESS(1) subproc SUBSUBPROCESS(1) 
[13] SUBSUBPROCESS(1) equal tmp_power + power[i];
[14] SUBSUBPROCESS(1) proc tmp_num++; 
[15] MAINPROCESS(2) equal tmp_power tmp_power / (FL)tmp_num;
[16] MAINPROCESS(2) proc return tmp_power; 
----------------- Total Codes : 16 lines
--------------------------
[Function Name] : fn_alarm_data_initialize 
-Return type : VD 
-Argument : 1 
     [0] : BSM_ALARM_DATA   *pst_a_alarm_data 
----- Codes -----
[1] MAINPROCESS(1) equal S4 s4_t_lp_i 0;
[2] MAINPROCESS(1) equal pst_a_alarm_data->s4_alarm_prev 0;
[3] MAINPROCESS(1) equal pst_a_alarm_data->as4_alarm_off_count[0] 0;
[4] MAINPROCESS(1) equal pst_a_alarm_data->as4_alarmed_num[0] 0;
[5] MAINPROCESS(1) func<start> fn_initialize_alarm_info(pst_a_alarm_data->afl_alarmed_target 
[6] MAINPROCESS(1) func<end> ); 
[7] MAINPROCESS(1) proc return; 
----------------- Total Codes : 7 lines
--------------------------
[Function Name] : fn_initialize_alarm_info 
-Return type : VD 
-Argument : 1 
     [0] : FL   alarmed_target[TARGET_BUFFSIZE][ALARM_INFO_SIZE] 
----- Codes -----
[1] MAINPROCESS(1) proc S4 i; 
[2] MAINPROCESS(1) for<start> for( 
[3] MAINPROCESS(1) for i=0; 
[4] MAINPROCESS(1) for i<TARGET_BUFFSIZE; 
[5] MAINPROCESS(1) for i++) 
[6] MAINPROCESS(1) subproc SUBPROCESS(1) 
[7] SUBPROCESS(1) equal alarmed_target[i][0] CFL_UNKNOWN_VALUE;
[8] SUBPROCESS(1) equal alarmed_target[i][1] CFL_UNKNOWN_VALUE;
[9] SUBPROCESS(1) equal alarmed_target[i][2] -1.0F;
[10] SUBPROCESS(1) equal alarmed_target[i][3] 0.0F;
[11] SUBPROCESS(1) equal alarmed_target[i][4] ALARM_TYPE_UNKNOWN;
[12] SUBPROCESS(1) equal alarmed_target[i][5] 0.0F;
[13] SUBPROCESS(1) equal alarmed_target[i][6] 0.0F;
[14] SUBPROCESS(1) equal alarmed_target[i][7] -100.0F;
[15] SUBPROCESS(1) equal alarmed_target[i][8] CFL_UNKNOWN_VALUE;
[16] SUBPROCESS(1) equal alarmed_target[i][9] CFL_UNKNOWN_VALUE;
[17] SUBPROCESS(1) equal alarmed_target[i][10] CFL_UNKNOWN_VALUE;
[18] SUBPROCESS(1) equal alarmed_target[i][11] CFL_UNKNOWN_VALUE;
[19] SUBPROCESS(1) equal alarmed_target[i][12] CFL_UNKNOWN_VALUE;
[20] SUBPROCESS(1) equal alarmed_target[i][13] CFL_UNKNOWN_VALUE;
[21] SUBPROCESS(1) equal alarmed_target[i][14] CFL_UNKNOWN_VALUE;
[22] SUBPROCESS(1) equal alarmed_target[i][15] CFL_UNKNOWN_VALUE;
----------------- Total Codes : 22 lines
